# This module contains Health functions.

from .Utilities import *

import pandas as pd

import json

import re


def getEveryAdministerNameMedication(searchConditions = [], EntityID = 1, returnAdministerNameMedicationID = False, returnAdministerDate = False, returnAdministerDateOnly = False, returnAdministrationTime = False, returnCreatedTime = False, returnDosesAdministered = False, returnIsVoid = False, returnLocationID = False, returnModifiedTime = False, returnNameMedicationID = False, returnNameMedicationScheduleID = False, returnNameOfficeVisitID = False, returnNote = False, returnNotPerformedReasonID = False, returnStaffIDAdministeredBy = False, returnTotalDosesToday = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnUserIDVoidedBy = False, returnVoidedTime = False, returnVoidNote = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every AdministerNameMedication in the district.

    This function returns a dataframe of every AdministerNameMedication in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/AdministerNameMedication/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/AdministerNameMedication/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getAdministerNameMedication(AdministerNameMedicationID, EntityID = 1, returnAdministerNameMedicationID = False, returnAdministerDate = False, returnAdministerDateOnly = False, returnAdministrationTime = False, returnCreatedTime = False, returnDosesAdministered = False, returnIsVoid = False, returnLocationID = False, returnModifiedTime = False, returnNameMedicationID = False, returnNameMedicationScheduleID = False, returnNameOfficeVisitID = False, returnNote = False, returnNotPerformedReasonID = False, returnStaffIDAdministeredBy = False, returnTotalDosesToday = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnUserIDVoidedBy = False, returnVoidedTime = False, returnVoidNote = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/AdministerNameMedication/" + str(AdministerNameMedicationID), verb = "get", return_params_list = return_params)

def modifyAdministerNameMedication(AdministerNameMedicationID, EntityID = 1, setAdministerNameMedicationID = None, setAdministerDate = None, setAdministerDateOnly = None, setAdministrationTime = None, setCreatedTime = None, setDosesAdministered = None, setIsVoid = None, setLocationID = None, setModifiedTime = None, setNameMedicationID = None, setNameMedicationScheduleID = None, setNameOfficeVisitID = None, setNote = None, setNotPerformedReasonID = None, setStaffIDAdministeredBy = None, setTotalDosesToday = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, setUserIDVoidedBy = None, setVoidedTime = None, setVoidNote = None, returnAdministerNameMedicationID = False, returnAdministerDate = False, returnAdministerDateOnly = False, returnAdministrationTime = False, returnCreatedTime = False, returnDosesAdministered = False, returnIsVoid = False, returnLocationID = False, returnModifiedTime = False, returnNameMedicationID = False, returnNameMedicationScheduleID = False, returnNameOfficeVisitID = False, returnNote = False, returnNotPerformedReasonID = False, returnStaffIDAdministeredBy = False, returnTotalDosesToday = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnUserIDVoidedBy = False, returnVoidedTime = False, returnVoidNote = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/AdministerNameMedication/" + str(AdministerNameMedicationID), verb = "post", return_params_list = return_params, payload = payload_params)

def createAdministerNameMedication(EntityID = 1, setAdministerNameMedicationID = None, setAdministerDate = None, setAdministerDateOnly = None, setAdministrationTime = None, setCreatedTime = None, setDosesAdministered = None, setIsVoid = None, setLocationID = None, setModifiedTime = None, setNameMedicationID = None, setNameMedicationScheduleID = None, setNameOfficeVisitID = None, setNote = None, setNotPerformedReasonID = None, setStaffIDAdministeredBy = None, setTotalDosesToday = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, setUserIDVoidedBy = None, setVoidedTime = None, setVoidNote = None, returnAdministerNameMedicationID = False, returnAdministerDate = False, returnAdministerDateOnly = False, returnAdministrationTime = False, returnCreatedTime = False, returnDosesAdministered = False, returnIsVoid = False, returnLocationID = False, returnModifiedTime = False, returnNameMedicationID = False, returnNameMedicationScheduleID = False, returnNameOfficeVisitID = False, returnNote = False, returnNotPerformedReasonID = False, returnStaffIDAdministeredBy = False, returnTotalDosesToday = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnUserIDVoidedBy = False, returnVoidedTime = False, returnVoidNote = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/AdministerNameMedication/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteAdministerNameMedication(AdministerNameMedicationID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/AdministerNameMedication/" + str(AdministerNameMedicationID), verb = "delete")


def getEveryBodyMassIndexPercentile(searchConditions = [], EntityID = 1, returnBodyMassIndexPercentileID = False, returnAgeInMonths = False, returnCoefficientOfVariation = False, returnCreatedTime = False, returnEightyFifthPercentile = False, returnFifthPercentile = False, returnFiftiethPercentile = False, returnGender = False, returnGenderCode = False, returnMedian = False, returnModifiedTime = False, returnNinetyFifthPercentile = False, returnNinetySeventhPercentile = False, returnPower = False, returnSeventyFifthPercentile = False, returnSkywardHash = False, returnSkywardID = False, returnTenthPercentile = False, returnThirdPercentile = False, returnTwentyFifthPercentile = False, returnType = False, returnTypeCode = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every BodyMassIndexPercentile in the district.

    This function returns a dataframe of every BodyMassIndexPercentile in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/BodyMassIndexPercentile/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/BodyMassIndexPercentile/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getBodyMassIndexPercentile(BodyMassIndexPercentileID, EntityID = 1, returnBodyMassIndexPercentileID = False, returnAgeInMonths = False, returnCoefficientOfVariation = False, returnCreatedTime = False, returnEightyFifthPercentile = False, returnFifthPercentile = False, returnFiftiethPercentile = False, returnGender = False, returnGenderCode = False, returnMedian = False, returnModifiedTime = False, returnNinetyFifthPercentile = False, returnNinetySeventhPercentile = False, returnPower = False, returnSeventyFifthPercentile = False, returnSkywardHash = False, returnSkywardID = False, returnTenthPercentile = False, returnThirdPercentile = False, returnTwentyFifthPercentile = False, returnType = False, returnTypeCode = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/BodyMassIndexPercentile/" + str(BodyMassIndexPercentileID), verb = "get", return_params_list = return_params)

def modifyBodyMassIndexPercentile(BodyMassIndexPercentileID, EntityID = 1, setBodyMassIndexPercentileID = None, setAgeInMonths = None, setCoefficientOfVariation = None, setCreatedTime = None, setEightyFifthPercentile = None, setFifthPercentile = None, setFiftiethPercentile = None, setGender = None, setGenderCode = None, setMedian = None, setModifiedTime = None, setNinetyFifthPercentile = None, setNinetySeventhPercentile = None, setPower = None, setSeventyFifthPercentile = None, setSkywardHash = None, setSkywardID = None, setTenthPercentile = None, setThirdPercentile = None, setTwentyFifthPercentile = None, setType = None, setTypeCode = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnBodyMassIndexPercentileID = False, returnAgeInMonths = False, returnCoefficientOfVariation = False, returnCreatedTime = False, returnEightyFifthPercentile = False, returnFifthPercentile = False, returnFiftiethPercentile = False, returnGender = False, returnGenderCode = False, returnMedian = False, returnModifiedTime = False, returnNinetyFifthPercentile = False, returnNinetySeventhPercentile = False, returnPower = False, returnSeventyFifthPercentile = False, returnSkywardHash = False, returnSkywardID = False, returnTenthPercentile = False, returnThirdPercentile = False, returnTwentyFifthPercentile = False, returnType = False, returnTypeCode = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/BodyMassIndexPercentile/" + str(BodyMassIndexPercentileID), verb = "post", return_params_list = return_params, payload = payload_params)

def createBodyMassIndexPercentile(EntityID = 1, setBodyMassIndexPercentileID = None, setAgeInMonths = None, setCoefficientOfVariation = None, setCreatedTime = None, setEightyFifthPercentile = None, setFifthPercentile = None, setFiftiethPercentile = None, setGender = None, setGenderCode = None, setMedian = None, setModifiedTime = None, setNinetyFifthPercentile = None, setNinetySeventhPercentile = None, setPower = None, setSeventyFifthPercentile = None, setSkywardHash = None, setSkywardID = None, setTenthPercentile = None, setThirdPercentile = None, setTwentyFifthPercentile = None, setType = None, setTypeCode = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnBodyMassIndexPercentileID = False, returnAgeInMonths = False, returnCoefficientOfVariation = False, returnCreatedTime = False, returnEightyFifthPercentile = False, returnFifthPercentile = False, returnFiftiethPercentile = False, returnGender = False, returnGenderCode = False, returnMedian = False, returnModifiedTime = False, returnNinetyFifthPercentile = False, returnNinetySeventhPercentile = False, returnPower = False, returnSeventyFifthPercentile = False, returnSkywardHash = False, returnSkywardID = False, returnTenthPercentile = False, returnThirdPercentile = False, returnTwentyFifthPercentile = False, returnType = False, returnTypeCode = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/BodyMassIndexPercentile/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteBodyMassIndexPercentile(BodyMassIndexPercentileID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/BodyMassIndexPercentile/" + str(BodyMassIndexPercentileID), verb = "delete")


def getEveryBodyPart(searchConditions = [], EntityID = 1, returnBodyPartID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every BodyPart in the district.

    This function returns a dataframe of every BodyPart in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/BodyPart/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/BodyPart/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getBodyPart(BodyPartID, EntityID = 1, returnBodyPartID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/BodyPart/" + str(BodyPartID), verb = "get", return_params_list = return_params)

def modifyBodyPart(BodyPartID, EntityID = 1, setBodyPartID = None, setCode = None, setCodeDescription = None, setCreatedTime = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setModifiedTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnBodyPartID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/BodyPart/" + str(BodyPartID), verb = "post", return_params_list = return_params, payload = payload_params)

def createBodyPart(EntityID = 1, setBodyPartID = None, setCode = None, setCodeDescription = None, setCreatedTime = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setModifiedTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnBodyPartID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/BodyPart/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteBodyPart(BodyPartID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/BodyPart/" + str(BodyPartID), verb = "delete")


def getEveryChildhoodIllness(searchConditions = [], EntityID = 1, returnChildhoodIllnessID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnSkywardHash = False, returnSkywardID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every ChildhoodIllness in the district.

    This function returns a dataframe of every ChildhoodIllness in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ChildhoodIllness/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ChildhoodIllness/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getChildhoodIllness(ChildhoodIllnessID, EntityID = 1, returnChildhoodIllnessID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnSkywardHash = False, returnSkywardID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ChildhoodIllness/" + str(ChildhoodIllnessID), verb = "get", return_params_list = return_params)

def modifyChildhoodIllness(ChildhoodIllnessID, EntityID = 1, setChildhoodIllnessID = None, setCode = None, setCodeDescription = None, setCreatedTime = None, setDescription = None, setDistrictID = None, setIsActive = None, setModifiedTime = None, setSkywardHash = None, setSkywardID = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnChildhoodIllnessID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnSkywardHash = False, returnSkywardID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ChildhoodIllness/" + str(ChildhoodIllnessID), verb = "post", return_params_list = return_params, payload = payload_params)

def createChildhoodIllness(EntityID = 1, setChildhoodIllnessID = None, setCode = None, setCodeDescription = None, setCreatedTime = None, setDescription = None, setDistrictID = None, setIsActive = None, setModifiedTime = None, setSkywardHash = None, setSkywardID = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnChildhoodIllnessID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnSkywardHash = False, returnSkywardID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ChildhoodIllness/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteChildhoodIllness(ChildhoodIllnessID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ChildhoodIllness/" + str(ChildhoodIllnessID), verb = "delete")


def getEveryChildhoodIllnessComment(searchConditions = [], EntityID = 1, returnChildhoodIllnessCommentID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every ChildhoodIllnessComment in the district.

    This function returns a dataframe of every ChildhoodIllnessComment in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ChildhoodIllnessComment/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ChildhoodIllnessComment/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getChildhoodIllnessComment(ChildhoodIllnessCommentID, EntityID = 1, returnChildhoodIllnessCommentID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ChildhoodIllnessComment/" + str(ChildhoodIllnessCommentID), verb = "get", return_params_list = return_params)

def modifyChildhoodIllnessComment(ChildhoodIllnessCommentID, EntityID = 1, setChildhoodIllnessCommentID = None, setCode = None, setCodeDescription = None, setCreatedTime = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setModifiedTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnChildhoodIllnessCommentID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ChildhoodIllnessComment/" + str(ChildhoodIllnessCommentID), verb = "post", return_params_list = return_params, payload = payload_params)

def createChildhoodIllnessComment(EntityID = 1, setChildhoodIllnessCommentID = None, setCode = None, setCodeDescription = None, setCreatedTime = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setModifiedTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnChildhoodIllnessCommentID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ChildhoodIllnessComment/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteChildhoodIllnessComment(ChildhoodIllnessCommentID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ChildhoodIllnessComment/" + str(ChildhoodIllnessCommentID), verb = "delete")


def getEveryChildhoodIllnessGuardianNotification(searchConditions = [], EntityID = 1, returnChildhoodIllnessGuardianNotificationID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every ChildhoodIllnessGuardianNotification in the district.

    This function returns a dataframe of every ChildhoodIllnessGuardianNotification in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ChildhoodIllnessGuardianNotification/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ChildhoodIllnessGuardianNotification/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getChildhoodIllnessGuardianNotification(ChildhoodIllnessGuardianNotificationID, EntityID = 1, returnChildhoodIllnessGuardianNotificationID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ChildhoodIllnessGuardianNotification/" + str(ChildhoodIllnessGuardianNotificationID), verb = "get", return_params_list = return_params)

def modifyChildhoodIllnessGuardianNotification(ChildhoodIllnessGuardianNotificationID, EntityID = 1, setChildhoodIllnessGuardianNotificationID = None, setCode = None, setCodeDescription = None, setCreatedTime = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setModifiedTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnChildhoodIllnessGuardianNotificationID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ChildhoodIllnessGuardianNotification/" + str(ChildhoodIllnessGuardianNotificationID), verb = "post", return_params_list = return_params, payload = payload_params)

def createChildhoodIllnessGuardianNotification(EntityID = 1, setChildhoodIllnessGuardianNotificationID = None, setCode = None, setCodeDescription = None, setCreatedTime = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setModifiedTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnChildhoodIllnessGuardianNotificationID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ChildhoodIllnessGuardianNotification/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteChildhoodIllnessGuardianNotification(ChildhoodIllnessGuardianNotificationID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ChildhoodIllnessGuardianNotification/" + str(ChildhoodIllnessGuardianNotificationID), verb = "delete")


def getEveryChildhoodIllnessGuardianResponse(searchConditions = [], EntityID = 1, returnChildhoodIllnessGuardianResponseID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every ChildhoodIllnessGuardianResponse in the district.

    This function returns a dataframe of every ChildhoodIllnessGuardianResponse in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ChildhoodIllnessGuardianResponse/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ChildhoodIllnessGuardianResponse/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getChildhoodIllnessGuardianResponse(ChildhoodIllnessGuardianResponseID, EntityID = 1, returnChildhoodIllnessGuardianResponseID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ChildhoodIllnessGuardianResponse/" + str(ChildhoodIllnessGuardianResponseID), verb = "get", return_params_list = return_params)

def modifyChildhoodIllnessGuardianResponse(ChildhoodIllnessGuardianResponseID, EntityID = 1, setChildhoodIllnessGuardianResponseID = None, setCode = None, setCodeDescription = None, setCreatedTime = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setModifiedTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnChildhoodIllnessGuardianResponseID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ChildhoodIllnessGuardianResponse/" + str(ChildhoodIllnessGuardianResponseID), verb = "post", return_params_list = return_params, payload = payload_params)

def createChildhoodIllnessGuardianResponse(EntityID = 1, setChildhoodIllnessGuardianResponseID = None, setCode = None, setCodeDescription = None, setCreatedTime = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setModifiedTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnChildhoodIllnessGuardianResponseID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ChildhoodIllnessGuardianResponse/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteChildhoodIllnessGuardianResponse(ChildhoodIllnessGuardianResponseID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ChildhoodIllnessGuardianResponse/" + str(ChildhoodIllnessGuardianResponseID), verb = "delete")


def getEveryChildhoodIllnessObservation(searchConditions = [], EntityID = 1, returnChildhoodIllnessObservationID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every ChildhoodIllnessObservation in the district.

    This function returns a dataframe of every ChildhoodIllnessObservation in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ChildhoodIllnessObservation/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ChildhoodIllnessObservation/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getChildhoodIllnessObservation(ChildhoodIllnessObservationID, EntityID = 1, returnChildhoodIllnessObservationID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ChildhoodIllnessObservation/" + str(ChildhoodIllnessObservationID), verb = "get", return_params_list = return_params)

def modifyChildhoodIllnessObservation(ChildhoodIllnessObservationID, EntityID = 1, setChildhoodIllnessObservationID = None, setCode = None, setCodeDescription = None, setCreatedTime = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setModifiedTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnChildhoodIllnessObservationID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ChildhoodIllnessObservation/" + str(ChildhoodIllnessObservationID), verb = "post", return_params_list = return_params, payload = payload_params)

def createChildhoodIllnessObservation(EntityID = 1, setChildhoodIllnessObservationID = None, setCode = None, setCodeDescription = None, setCreatedTime = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setModifiedTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnChildhoodIllnessObservationID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ChildhoodIllnessObservation/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteChildhoodIllnessObservation(ChildhoodIllnessObservationID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ChildhoodIllnessObservation/" + str(ChildhoodIllnessObservationID), verb = "delete")


def getEveryChildhoodIllnessReferralReason(searchConditions = [], EntityID = 1, returnChildhoodIllnessReferralReasonID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every ChildhoodIllnessReferralReason in the district.

    This function returns a dataframe of every ChildhoodIllnessReferralReason in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ChildhoodIllnessReferralReason/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ChildhoodIllnessReferralReason/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getChildhoodIllnessReferralReason(ChildhoodIllnessReferralReasonID, EntityID = 1, returnChildhoodIllnessReferralReasonID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ChildhoodIllnessReferralReason/" + str(ChildhoodIllnessReferralReasonID), verb = "get", return_params_list = return_params)

def modifyChildhoodIllnessReferralReason(ChildhoodIllnessReferralReasonID, EntityID = 1, setChildhoodIllnessReferralReasonID = None, setCode = None, setCodeDescription = None, setCreatedTime = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setModifiedTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnChildhoodIllnessReferralReasonID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ChildhoodIllnessReferralReason/" + str(ChildhoodIllnessReferralReasonID), verb = "post", return_params_list = return_params, payload = payload_params)

def createChildhoodIllnessReferralReason(EntityID = 1, setChildhoodIllnessReferralReasonID = None, setCode = None, setCodeDescription = None, setCreatedTime = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setModifiedTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnChildhoodIllnessReferralReasonID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ChildhoodIllnessReferralReason/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteChildhoodIllnessReferralReason(ChildhoodIllnessReferralReasonID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ChildhoodIllnessReferralReason/" + str(ChildhoodIllnessReferralReasonID), verb = "delete")


def getEveryChildhoodIllnessReferralResult(searchConditions = [], EntityID = 1, returnChildhoodIllnessReferralResultID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every ChildhoodIllnessReferralResult in the district.

    This function returns a dataframe of every ChildhoodIllnessReferralResult in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ChildhoodIllnessReferralResult/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ChildhoodIllnessReferralResult/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getChildhoodIllnessReferralResult(ChildhoodIllnessReferralResultID, EntityID = 1, returnChildhoodIllnessReferralResultID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ChildhoodIllnessReferralResult/" + str(ChildhoodIllnessReferralResultID), verb = "get", return_params_list = return_params)

def modifyChildhoodIllnessReferralResult(ChildhoodIllnessReferralResultID, EntityID = 1, setChildhoodIllnessReferralResultID = None, setCode = None, setCodeDescription = None, setCreatedTime = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setModifiedTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnChildhoodIllnessReferralResultID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ChildhoodIllnessReferralResult/" + str(ChildhoodIllnessReferralResultID), verb = "post", return_params_list = return_params, payload = payload_params)

def createChildhoodIllnessReferralResult(EntityID = 1, setChildhoodIllnessReferralResultID = None, setCode = None, setCodeDescription = None, setCreatedTime = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setModifiedTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnChildhoodIllnessReferralResultID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ChildhoodIllnessReferralResult/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteChildhoodIllnessReferralResult(ChildhoodIllnessReferralResultID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ChildhoodIllnessReferralResult/" + str(ChildhoodIllnessReferralResultID), verb = "delete")


def getEveryComplianceSchedule(searchConditions = [], EntityID = 1, returnComplianceScheduleID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnIsDistrictDefined = False, returnModifiedTime = False, returnSkywardHash = False, returnSkywardID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every ComplianceSchedule in the district.

    This function returns a dataframe of every ComplianceSchedule in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ComplianceSchedule/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ComplianceSchedule/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getComplianceSchedule(ComplianceScheduleID, EntityID = 1, returnComplianceScheduleID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnIsDistrictDefined = False, returnModifiedTime = False, returnSkywardHash = False, returnSkywardID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ComplianceSchedule/" + str(ComplianceScheduleID), verb = "get", return_params_list = return_params)

def modifyComplianceSchedule(ComplianceScheduleID, EntityID = 1, setComplianceScheduleID = None, setCode = None, setCodeDescription = None, setCreatedTime = None, setDescription = None, setIsDistrictDefined = None, setModifiedTime = None, setSkywardHash = None, setSkywardID = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnComplianceScheduleID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnIsDistrictDefined = False, returnModifiedTime = False, returnSkywardHash = False, returnSkywardID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ComplianceSchedule/" + str(ComplianceScheduleID), verb = "post", return_params_list = return_params, payload = payload_params)

def createComplianceSchedule(EntityID = 1, setComplianceScheduleID = None, setCode = None, setCodeDescription = None, setCreatedTime = None, setDescription = None, setIsDistrictDefined = None, setModifiedTime = None, setSkywardHash = None, setSkywardID = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnComplianceScheduleID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnIsDistrictDefined = False, returnModifiedTime = False, returnSkywardHash = False, returnSkywardID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ComplianceSchedule/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteComplianceSchedule(ComplianceScheduleID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ComplianceSchedule/" + str(ComplianceScheduleID), verb = "delete")


def getEveryComplianceScheduleDetail(searchConditions = [], EntityID = 1, returnComplianceScheduleDetailID = False, returnAgeGradeType = False, returnAgeGradeTypeCode = False, returnAgeGradeValue = False, returnAgeUnit = False, returnAgeUnitCode = False, returnComplianceScheduleDetailIDClonedFrom = False, returnCreatedTime = False, returnDoseCount = False, returnIsDistrictDefined = False, returnModifiedTime = False, returnSkywardHash = False, returnSkywardID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnVaccinationYearComplianceScheduleID = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every ComplianceScheduleDetail in the district.

    This function returns a dataframe of every ComplianceScheduleDetail in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ComplianceScheduleDetail/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ComplianceScheduleDetail/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getComplianceScheduleDetail(ComplianceScheduleDetailID, EntityID = 1, returnComplianceScheduleDetailID = False, returnAgeGradeType = False, returnAgeGradeTypeCode = False, returnAgeGradeValue = False, returnAgeUnit = False, returnAgeUnitCode = False, returnComplianceScheduleDetailIDClonedFrom = False, returnCreatedTime = False, returnDoseCount = False, returnIsDistrictDefined = False, returnModifiedTime = False, returnSkywardHash = False, returnSkywardID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnVaccinationYearComplianceScheduleID = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ComplianceScheduleDetail/" + str(ComplianceScheduleDetailID), verb = "get", return_params_list = return_params)

def modifyComplianceScheduleDetail(ComplianceScheduleDetailID, EntityID = 1, setComplianceScheduleDetailID = None, setAgeGradeType = None, setAgeGradeTypeCode = None, setAgeGradeValue = None, setAgeUnit = None, setAgeUnitCode = None, setComplianceScheduleDetailIDClonedFrom = None, setCreatedTime = None, setDoseCount = None, setIsDistrictDefined = None, setModifiedTime = None, setSkywardHash = None, setSkywardID = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, setVaccinationYearComplianceScheduleID = None, returnComplianceScheduleDetailID = False, returnAgeGradeType = False, returnAgeGradeTypeCode = False, returnAgeGradeValue = False, returnAgeUnit = False, returnAgeUnitCode = False, returnComplianceScheduleDetailIDClonedFrom = False, returnCreatedTime = False, returnDoseCount = False, returnIsDistrictDefined = False, returnModifiedTime = False, returnSkywardHash = False, returnSkywardID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnVaccinationYearComplianceScheduleID = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ComplianceScheduleDetail/" + str(ComplianceScheduleDetailID), verb = "post", return_params_list = return_params, payload = payload_params)

def createComplianceScheduleDetail(EntityID = 1, setComplianceScheduleDetailID = None, setAgeGradeType = None, setAgeGradeTypeCode = None, setAgeGradeValue = None, setAgeUnit = None, setAgeUnitCode = None, setComplianceScheduleDetailIDClonedFrom = None, setCreatedTime = None, setDoseCount = None, setIsDistrictDefined = None, setModifiedTime = None, setSkywardHash = None, setSkywardID = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, setVaccinationYearComplianceScheduleID = None, returnComplianceScheduleDetailID = False, returnAgeGradeType = False, returnAgeGradeTypeCode = False, returnAgeGradeValue = False, returnAgeUnit = False, returnAgeUnitCode = False, returnComplianceScheduleDetailIDClonedFrom = False, returnCreatedTime = False, returnDoseCount = False, returnIsDistrictDefined = False, returnModifiedTime = False, returnSkywardHash = False, returnSkywardID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnVaccinationYearComplianceScheduleID = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ComplianceScheduleDetail/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteComplianceScheduleDetail(ComplianceScheduleDetailID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ComplianceScheduleDetail/" + str(ComplianceScheduleDetailID), verb = "delete")


def getEveryComplianceScheduleDetailBooster(searchConditions = [], EntityID = 1, returnComplianceScheduleDetailBoosterID = False, returnComplianceScheduleDetailBoosterIDClonedFrom = False, returnComplianceScheduleDetailID = False, returnCreatedTime = False, returnIntervalTime = False, returnIntervalTimeUnit = False, returnIntervalTimeUnitCode = False, returnIsDistrictDefined = False, returnModifiedTime = False, returnSkywardHash = False, returnSkywardID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnVaccineID = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every ComplianceScheduleDetailBooster in the district.

    This function returns a dataframe of every ComplianceScheduleDetailBooster in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ComplianceScheduleDetailBooster/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ComplianceScheduleDetailBooster/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getComplianceScheduleDetailBooster(ComplianceScheduleDetailBoosterID, EntityID = 1, returnComplianceScheduleDetailBoosterID = False, returnComplianceScheduleDetailBoosterIDClonedFrom = False, returnComplianceScheduleDetailID = False, returnCreatedTime = False, returnIntervalTime = False, returnIntervalTimeUnit = False, returnIntervalTimeUnitCode = False, returnIsDistrictDefined = False, returnModifiedTime = False, returnSkywardHash = False, returnSkywardID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnVaccineID = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ComplianceScheduleDetailBooster/" + str(ComplianceScheduleDetailBoosterID), verb = "get", return_params_list = return_params)

def modifyComplianceScheduleDetailBooster(ComplianceScheduleDetailBoosterID, EntityID = 1, setComplianceScheduleDetailBoosterID = None, setComplianceScheduleDetailBoosterIDClonedFrom = None, setComplianceScheduleDetailID = None, setCreatedTime = None, setIntervalTime = None, setIntervalTimeUnit = None, setIntervalTimeUnitCode = None, setIsDistrictDefined = None, setModifiedTime = None, setSkywardHash = None, setSkywardID = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, setVaccineID = None, returnComplianceScheduleDetailBoosterID = False, returnComplianceScheduleDetailBoosterIDClonedFrom = False, returnComplianceScheduleDetailID = False, returnCreatedTime = False, returnIntervalTime = False, returnIntervalTimeUnit = False, returnIntervalTimeUnitCode = False, returnIsDistrictDefined = False, returnModifiedTime = False, returnSkywardHash = False, returnSkywardID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnVaccineID = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ComplianceScheduleDetailBooster/" + str(ComplianceScheduleDetailBoosterID), verb = "post", return_params_list = return_params, payload = payload_params)

def createComplianceScheduleDetailBooster(EntityID = 1, setComplianceScheduleDetailBoosterID = None, setComplianceScheduleDetailBoosterIDClonedFrom = None, setComplianceScheduleDetailID = None, setCreatedTime = None, setIntervalTime = None, setIntervalTimeUnit = None, setIntervalTimeUnitCode = None, setIsDistrictDefined = None, setModifiedTime = None, setSkywardHash = None, setSkywardID = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, setVaccineID = None, returnComplianceScheduleDetailBoosterID = False, returnComplianceScheduleDetailBoosterIDClonedFrom = False, returnComplianceScheduleDetailID = False, returnCreatedTime = False, returnIntervalTime = False, returnIntervalTimeUnit = False, returnIntervalTimeUnitCode = False, returnIsDistrictDefined = False, returnModifiedTime = False, returnSkywardHash = False, returnSkywardID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnVaccineID = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ComplianceScheduleDetailBooster/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteComplianceScheduleDetailBooster(ComplianceScheduleDetailBoosterID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ComplianceScheduleDetailBooster/" + str(ComplianceScheduleDetailBoosterID), verb = "delete")


def getEveryComplianceScheduleRule(searchConditions = [], EntityID = 1, returnComplianceScheduleRuleID = False, returnCode = False, returnCodeDescription = False, returnComplianceScheduleID = False, returnCreatedTime = False, returnDescription = False, returnGracePeriodDays = False, returnModifiedTime = False, returnRule = False, returnRuleDescription = False, returnSkywardHash = False, returnSkywardID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every ComplianceScheduleRule in the district.

    This function returns a dataframe of every ComplianceScheduleRule in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ComplianceScheduleRule/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ComplianceScheduleRule/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getComplianceScheduleRule(ComplianceScheduleRuleID, EntityID = 1, returnComplianceScheduleRuleID = False, returnCode = False, returnCodeDescription = False, returnComplianceScheduleID = False, returnCreatedTime = False, returnDescription = False, returnGracePeriodDays = False, returnModifiedTime = False, returnRule = False, returnRuleDescription = False, returnSkywardHash = False, returnSkywardID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ComplianceScheduleRule/" + str(ComplianceScheduleRuleID), verb = "get", return_params_list = return_params)

def modifyComplianceScheduleRule(ComplianceScheduleRuleID, EntityID = 1, setComplianceScheduleRuleID = None, setCode = None, setCodeDescription = None, setComplianceScheduleID = None, setCreatedTime = None, setDescription = None, setGracePeriodDays = None, setModifiedTime = None, setRule = None, setRuleDescription = None, setSkywardHash = None, setSkywardID = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnComplianceScheduleRuleID = False, returnCode = False, returnCodeDescription = False, returnComplianceScheduleID = False, returnCreatedTime = False, returnDescription = False, returnGracePeriodDays = False, returnModifiedTime = False, returnRule = False, returnRuleDescription = False, returnSkywardHash = False, returnSkywardID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ComplianceScheduleRule/" + str(ComplianceScheduleRuleID), verb = "post", return_params_list = return_params, payload = payload_params)

def createComplianceScheduleRule(EntityID = 1, setComplianceScheduleRuleID = None, setCode = None, setCodeDescription = None, setComplianceScheduleID = None, setCreatedTime = None, setDescription = None, setGracePeriodDays = None, setModifiedTime = None, setRule = None, setRuleDescription = None, setSkywardHash = None, setSkywardID = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnComplianceScheduleRuleID = False, returnCode = False, returnCodeDescription = False, returnComplianceScheduleID = False, returnCreatedTime = False, returnDescription = False, returnGracePeriodDays = False, returnModifiedTime = False, returnRule = False, returnRuleDescription = False, returnSkywardHash = False, returnSkywardID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ComplianceScheduleRule/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteComplianceScheduleRule(ComplianceScheduleRuleID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ComplianceScheduleRule/" + str(ComplianceScheduleRuleID), verb = "delete")


def getEveryConfigDistrictGroup(searchConditions = [], EntityID = 1, returnConfigDistrictGroupID = False, returnCreatedTime = False, returnDistrictGroupKey = False, returnDistrictID = False, returnModifiedTime = False, returnUseNationalChartForBodyMassIndexPercentile = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every ConfigDistrictGroup in the district.

    This function returns a dataframe of every ConfigDistrictGroup in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ConfigDistrictGroup/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ConfigDistrictGroup/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getConfigDistrictGroup(ConfigDistrictGroupID, EntityID = 1, returnConfigDistrictGroupID = False, returnCreatedTime = False, returnDistrictGroupKey = False, returnDistrictID = False, returnModifiedTime = False, returnUseNationalChartForBodyMassIndexPercentile = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ConfigDistrictGroup/" + str(ConfigDistrictGroupID), verb = "get", return_params_list = return_params)

def modifyConfigDistrictGroup(ConfigDistrictGroupID, EntityID = 1, setConfigDistrictGroupID = None, setCreatedTime = None, setDistrictGroupKey = None, setDistrictID = None, setModifiedTime = None, setUseNationalChartForBodyMassIndexPercentile = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnConfigDistrictGroupID = False, returnCreatedTime = False, returnDistrictGroupKey = False, returnDistrictID = False, returnModifiedTime = False, returnUseNationalChartForBodyMassIndexPercentile = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ConfigDistrictGroup/" + str(ConfigDistrictGroupID), verb = "post", return_params_list = return_params, payload = payload_params)

def createConfigDistrictGroup(EntityID = 1, setConfigDistrictGroupID = None, setCreatedTime = None, setDistrictGroupKey = None, setDistrictID = None, setModifiedTime = None, setUseNationalChartForBodyMassIndexPercentile = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnConfigDistrictGroupID = False, returnCreatedTime = False, returnDistrictGroupKey = False, returnDistrictID = False, returnModifiedTime = False, returnUseNationalChartForBodyMassIndexPercentile = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ConfigDistrictGroup/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteConfigDistrictGroup(ConfigDistrictGroupID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ConfigDistrictGroup/" + str(ConfigDistrictGroupID), verb = "delete")


def getEveryConfigDistrictYear(searchConditions = [], EntityID = 1, returnConfigDistrictYearID = False, returnAgeEffectiveDate = False, returnComplianceYearStart = False, returnComplianceYearStartCode = False, returnConditionalIndicator = False, returnCreatedTime = False, returnDisplayLotNumber = False, returnDistrictID = False, returnInComplianceIndicator = False, returnLiveVaccineSameMakeupGraceDays = False, returnModifiedTime = False, returnOutOfComplianceIndicator = False, returnProvisionalCalculationType = False, returnProvisionalCalculationTypeCode = False, returnProvisionalDays = False, returnProvisionalIndicator = False, returnSchoolYearID = False, returnUseComplianceDate = False, returnUseLiveVaccineInterval = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnVaccinationComplianceIsProcessing = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every ConfigDistrictYear in the district.

    This function returns a dataframe of every ConfigDistrictYear in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ConfigDistrictYear/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ConfigDistrictYear/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getConfigDistrictYear(ConfigDistrictYearID, EntityID = 1, returnConfigDistrictYearID = False, returnAgeEffectiveDate = False, returnComplianceYearStart = False, returnComplianceYearStartCode = False, returnConditionalIndicator = False, returnCreatedTime = False, returnDisplayLotNumber = False, returnDistrictID = False, returnInComplianceIndicator = False, returnLiveVaccineSameMakeupGraceDays = False, returnModifiedTime = False, returnOutOfComplianceIndicator = False, returnProvisionalCalculationType = False, returnProvisionalCalculationTypeCode = False, returnProvisionalDays = False, returnProvisionalIndicator = False, returnSchoolYearID = False, returnUseComplianceDate = False, returnUseLiveVaccineInterval = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnVaccinationComplianceIsProcessing = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ConfigDistrictYear/" + str(ConfigDistrictYearID), verb = "get", return_params_list = return_params)

def modifyConfigDistrictYear(ConfigDistrictYearID, EntityID = 1, setConfigDistrictYearID = None, setAgeEffectiveDate = None, setComplianceYearStart = None, setComplianceYearStartCode = None, setConditionalIndicator = None, setCreatedTime = None, setDisplayLotNumber = None, setDistrictID = None, setInComplianceIndicator = None, setLiveVaccineSameMakeupGraceDays = None, setModifiedTime = None, setOutOfComplianceIndicator = None, setProvisionalCalculationType = None, setProvisionalCalculationTypeCode = None, setProvisionalDays = None, setProvisionalIndicator = None, setSchoolYearID = None, setUseComplianceDate = None, setUseLiveVaccineInterval = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, setVaccinationComplianceIsProcessing = None, returnConfigDistrictYearID = False, returnAgeEffectiveDate = False, returnComplianceYearStart = False, returnComplianceYearStartCode = False, returnConditionalIndicator = False, returnCreatedTime = False, returnDisplayLotNumber = False, returnDistrictID = False, returnInComplianceIndicator = False, returnLiveVaccineSameMakeupGraceDays = False, returnModifiedTime = False, returnOutOfComplianceIndicator = False, returnProvisionalCalculationType = False, returnProvisionalCalculationTypeCode = False, returnProvisionalDays = False, returnProvisionalIndicator = False, returnSchoolYearID = False, returnUseComplianceDate = False, returnUseLiveVaccineInterval = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnVaccinationComplianceIsProcessing = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ConfigDistrictYear/" + str(ConfigDistrictYearID), verb = "post", return_params_list = return_params, payload = payload_params)

def createConfigDistrictYear(EntityID = 1, setConfigDistrictYearID = None, setAgeEffectiveDate = None, setComplianceYearStart = None, setComplianceYearStartCode = None, setConditionalIndicator = None, setCreatedTime = None, setDisplayLotNumber = None, setDistrictID = None, setInComplianceIndicator = None, setLiveVaccineSameMakeupGraceDays = None, setModifiedTime = None, setOutOfComplianceIndicator = None, setProvisionalCalculationType = None, setProvisionalCalculationTypeCode = None, setProvisionalDays = None, setProvisionalIndicator = None, setSchoolYearID = None, setUseComplianceDate = None, setUseLiveVaccineInterval = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, setVaccinationComplianceIsProcessing = None, returnConfigDistrictYearID = False, returnAgeEffectiveDate = False, returnComplianceYearStart = False, returnComplianceYearStartCode = False, returnConditionalIndicator = False, returnCreatedTime = False, returnDisplayLotNumber = False, returnDistrictID = False, returnInComplianceIndicator = False, returnLiveVaccineSameMakeupGraceDays = False, returnModifiedTime = False, returnOutOfComplianceIndicator = False, returnProvisionalCalculationType = False, returnProvisionalCalculationTypeCode = False, returnProvisionalDays = False, returnProvisionalIndicator = False, returnSchoolYearID = False, returnUseComplianceDate = False, returnUseLiveVaccineInterval = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnVaccinationComplianceIsProcessing = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ConfigDistrictYear/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteConfigDistrictYear(ConfigDistrictYearID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ConfigDistrictYear/" + str(ConfigDistrictYearID), verb = "delete")


def getEveryConfigEntity(searchConditions = [], EntityID = 1, returnConfigEntityID = False, returnCreatedTime = False, returnEntityID = False, returnLocationIDMedicationQuickEntryDefault = False, returnModifiedTime = False, returnStaffIDMedicationQuickEntryDefault = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every ConfigEntity in the district.

    This function returns a dataframe of every ConfigEntity in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ConfigEntity/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ConfigEntity/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getConfigEntity(ConfigEntityID, EntityID = 1, returnConfigEntityID = False, returnCreatedTime = False, returnEntityID = False, returnLocationIDMedicationQuickEntryDefault = False, returnModifiedTime = False, returnStaffIDMedicationQuickEntryDefault = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ConfigEntity/" + str(ConfigEntityID), verb = "get", return_params_list = return_params)

def modifyConfigEntity(ConfigEntityID, EntityID = 1, setConfigEntityID = None, setCreatedTime = None, setEntityID = None, setLocationIDMedicationQuickEntryDefault = None, setModifiedTime = None, setStaffIDMedicationQuickEntryDefault = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnConfigEntityID = False, returnCreatedTime = False, returnEntityID = False, returnLocationIDMedicationQuickEntryDefault = False, returnModifiedTime = False, returnStaffIDMedicationQuickEntryDefault = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ConfigEntity/" + str(ConfigEntityID), verb = "post", return_params_list = return_params, payload = payload_params)

def createConfigEntity(EntityID = 1, setConfigEntityID = None, setCreatedTime = None, setEntityID = None, setLocationIDMedicationQuickEntryDefault = None, setModifiedTime = None, setStaffIDMedicationQuickEntryDefault = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnConfigEntityID = False, returnCreatedTime = False, returnEntityID = False, returnLocationIDMedicationQuickEntryDefault = False, returnModifiedTime = False, returnStaffIDMedicationQuickEntryDefault = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ConfigEntity/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteConfigEntity(ConfigEntityID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ConfigEntity/" + str(ConfigEntityID), verb = "delete")


def getEveryDentalComment(searchConditions = [], EntityID = 1, returnDentalCommentID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every DentalComment in the district.

    This function returns a dataframe of every DentalComment in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DentalComment/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DentalComment/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getDentalComment(DentalCommentID, EntityID = 1, returnDentalCommentID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DentalComment/" + str(DentalCommentID), verb = "get", return_params_list = return_params)

def modifyDentalComment(DentalCommentID, EntityID = 1, setDentalCommentID = None, setCode = None, setCodeDescription = None, setCreatedTime = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setModifiedTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnDentalCommentID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DentalComment/" + str(DentalCommentID), verb = "post", return_params_list = return_params, payload = payload_params)

def createDentalComment(EntityID = 1, setDentalCommentID = None, setCode = None, setCodeDescription = None, setCreatedTime = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setModifiedTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnDentalCommentID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DentalComment/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteDentalComment(DentalCommentID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DentalComment/" + str(DentalCommentID), verb = "delete")


def getEveryDentalGuardianNotification(searchConditions = [], EntityID = 1, returnDentalGuardianNotificationID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every DentalGuardianNotification in the district.

    This function returns a dataframe of every DentalGuardianNotification in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DentalGuardianNotification/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DentalGuardianNotification/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getDentalGuardianNotification(DentalGuardianNotificationID, EntityID = 1, returnDentalGuardianNotificationID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DentalGuardianNotification/" + str(DentalGuardianNotificationID), verb = "get", return_params_list = return_params)

def modifyDentalGuardianNotification(DentalGuardianNotificationID, EntityID = 1, setDentalGuardianNotificationID = None, setCode = None, setCodeDescription = None, setCreatedTime = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setModifiedTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnDentalGuardianNotificationID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DentalGuardianNotification/" + str(DentalGuardianNotificationID), verb = "post", return_params_list = return_params, payload = payload_params)

def createDentalGuardianNotification(EntityID = 1, setDentalGuardianNotificationID = None, setCode = None, setCodeDescription = None, setCreatedTime = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setModifiedTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnDentalGuardianNotificationID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DentalGuardianNotification/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteDentalGuardianNotification(DentalGuardianNotificationID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DentalGuardianNotification/" + str(DentalGuardianNotificationID), verb = "delete")


def getEveryDentalGuardianResponse(searchConditions = [], EntityID = 1, returnDentalGuardianResponseID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every DentalGuardianResponse in the district.

    This function returns a dataframe of every DentalGuardianResponse in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DentalGuardianResponse/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DentalGuardianResponse/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getDentalGuardianResponse(DentalGuardianResponseID, EntityID = 1, returnDentalGuardianResponseID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DentalGuardianResponse/" + str(DentalGuardianResponseID), verb = "get", return_params_list = return_params)

def modifyDentalGuardianResponse(DentalGuardianResponseID, EntityID = 1, setDentalGuardianResponseID = None, setCode = None, setCodeDescription = None, setCreatedTime = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setModifiedTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnDentalGuardianResponseID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DentalGuardianResponse/" + str(DentalGuardianResponseID), verb = "post", return_params_list = return_params, payload = payload_params)

def createDentalGuardianResponse(EntityID = 1, setDentalGuardianResponseID = None, setCode = None, setCodeDescription = None, setCreatedTime = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setModifiedTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnDentalGuardianResponseID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DentalGuardianResponse/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteDentalGuardianResponse(DentalGuardianResponseID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DentalGuardianResponse/" + str(DentalGuardianResponseID), verb = "delete")


def getEveryDentalReferralReason(searchConditions = [], EntityID = 1, returnDentalReferralReasonID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every DentalReferralReason in the district.

    This function returns a dataframe of every DentalReferralReason in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DentalReferralReason/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DentalReferralReason/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getDentalReferralReason(DentalReferralReasonID, EntityID = 1, returnDentalReferralReasonID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DentalReferralReason/" + str(DentalReferralReasonID), verb = "get", return_params_list = return_params)

def modifyDentalReferralReason(DentalReferralReasonID, EntityID = 1, setDentalReferralReasonID = None, setCode = None, setCodeDescription = None, setCreatedTime = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setModifiedTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnDentalReferralReasonID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DentalReferralReason/" + str(DentalReferralReasonID), verb = "post", return_params_list = return_params, payload = payload_params)

def createDentalReferralReason(EntityID = 1, setDentalReferralReasonID = None, setCode = None, setCodeDescription = None, setCreatedTime = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setModifiedTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnDentalReferralReasonID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DentalReferralReason/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteDentalReferralReason(DentalReferralReasonID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DentalReferralReason/" + str(DentalReferralReasonID), verb = "delete")


def getEveryDentalReferralResult(searchConditions = [], EntityID = 1, returnDentalReferralResultID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every DentalReferralResult in the district.

    This function returns a dataframe of every DentalReferralResult in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DentalReferralResult/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DentalReferralResult/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getDentalReferralResult(DentalReferralResultID, EntityID = 1, returnDentalReferralResultID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DentalReferralResult/" + str(DentalReferralResultID), verb = "get", return_params_list = return_params)

def modifyDentalReferralResult(DentalReferralResultID, EntityID = 1, setDentalReferralResultID = None, setCode = None, setCodeDescription = None, setCreatedTime = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setModifiedTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnDentalReferralResultID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DentalReferralResult/" + str(DentalReferralResultID), verb = "post", return_params_list = return_params, payload = payload_params)

def createDentalReferralResult(EntityID = 1, setDentalReferralResultID = None, setCode = None, setCodeDescription = None, setCreatedTime = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setModifiedTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnDentalReferralResultID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DentalReferralResult/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteDentalReferralResult(DentalReferralResultID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DentalReferralResult/" + str(DentalReferralResultID), verb = "delete")


def getEveryDentalScreening(searchConditions = [], EntityID = 1, returnDentalScreeningID = False, returnCreatedTime = False, returnDentalScreeningResultID = False, returnDentalTreatmentID = False, returnDistrictID = False, returnEntityIDEnrolledIn = False, returnHealthProfessionalIDExaminedBy = False, returnIsVoid = False, returnModifiedTime = False, returnNameID = False, returnSchoolYearID = False, returnScreeningDate = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnUserIDVoidedBy = False, returnVoidedTime = False, returnVoidNote = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every DentalScreening in the district.

    This function returns a dataframe of every DentalScreening in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DentalScreening/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DentalScreening/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getDentalScreening(DentalScreeningID, EntityID = 1, returnDentalScreeningID = False, returnCreatedTime = False, returnDentalScreeningResultID = False, returnDentalTreatmentID = False, returnDistrictID = False, returnEntityIDEnrolledIn = False, returnHealthProfessionalIDExaminedBy = False, returnIsVoid = False, returnModifiedTime = False, returnNameID = False, returnSchoolYearID = False, returnScreeningDate = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnUserIDVoidedBy = False, returnVoidedTime = False, returnVoidNote = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DentalScreening/" + str(DentalScreeningID), verb = "get", return_params_list = return_params)

def modifyDentalScreening(DentalScreeningID, EntityID = 1, setDentalScreeningID = None, setCreatedTime = None, setDentalScreeningResultID = None, setDentalTreatmentID = None, setDistrictID = None, setEntityIDEnrolledIn = None, setHealthProfessionalIDExaminedBy = None, setIsVoid = None, setModifiedTime = None, setNameID = None, setSchoolYearID = None, setScreeningDate = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, setUserIDVoidedBy = None, setVoidedTime = None, setVoidNote = None, returnDentalScreeningID = False, returnCreatedTime = False, returnDentalScreeningResultID = False, returnDentalTreatmentID = False, returnDistrictID = False, returnEntityIDEnrolledIn = False, returnHealthProfessionalIDExaminedBy = False, returnIsVoid = False, returnModifiedTime = False, returnNameID = False, returnSchoolYearID = False, returnScreeningDate = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnUserIDVoidedBy = False, returnVoidedTime = False, returnVoidNote = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DentalScreening/" + str(DentalScreeningID), verb = "post", return_params_list = return_params, payload = payload_params)

def createDentalScreening(EntityID = 1, setDentalScreeningID = None, setCreatedTime = None, setDentalScreeningResultID = None, setDentalTreatmentID = None, setDistrictID = None, setEntityIDEnrolledIn = None, setHealthProfessionalIDExaminedBy = None, setIsVoid = None, setModifiedTime = None, setNameID = None, setSchoolYearID = None, setScreeningDate = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, setUserIDVoidedBy = None, setVoidedTime = None, setVoidNote = None, returnDentalScreeningID = False, returnCreatedTime = False, returnDentalScreeningResultID = False, returnDentalTreatmentID = False, returnDistrictID = False, returnEntityIDEnrolledIn = False, returnHealthProfessionalIDExaminedBy = False, returnIsVoid = False, returnModifiedTime = False, returnNameID = False, returnSchoolYearID = False, returnScreeningDate = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnUserIDVoidedBy = False, returnVoidedTime = False, returnVoidNote = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DentalScreening/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteDentalScreening(DentalScreeningID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DentalScreening/" + str(DentalScreeningID), verb = "delete")


def getEveryDentalScreeningComment(searchConditions = [], EntityID = 1, returnDentalScreeningCommentID = False, returnCreatedTime = False, returnDentalCommentID = False, returnDentalScreeningID = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every DentalScreeningComment in the district.

    This function returns a dataframe of every DentalScreeningComment in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DentalScreeningComment/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DentalScreeningComment/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getDentalScreeningComment(DentalScreeningCommentID, EntityID = 1, returnDentalScreeningCommentID = False, returnCreatedTime = False, returnDentalCommentID = False, returnDentalScreeningID = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DentalScreeningComment/" + str(DentalScreeningCommentID), verb = "get", return_params_list = return_params)

def modifyDentalScreeningComment(DentalScreeningCommentID, EntityID = 1, setDentalScreeningCommentID = None, setCreatedTime = None, setDentalCommentID = None, setDentalScreeningID = None, setModifiedTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnDentalScreeningCommentID = False, returnCreatedTime = False, returnDentalCommentID = False, returnDentalScreeningID = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DentalScreeningComment/" + str(DentalScreeningCommentID), verb = "post", return_params_list = return_params, payload = payload_params)

def createDentalScreeningComment(EntityID = 1, setDentalScreeningCommentID = None, setCreatedTime = None, setDentalCommentID = None, setDentalScreeningID = None, setModifiedTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnDentalScreeningCommentID = False, returnCreatedTime = False, returnDentalCommentID = False, returnDentalScreeningID = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DentalScreeningComment/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteDentalScreeningComment(DentalScreeningCommentID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DentalScreeningComment/" + str(DentalScreeningCommentID), verb = "delete")


def getEveryDentalScreeningNote(searchConditions = [], EntityID = 1, returnDentalScreeningNoteID = False, returnCreatedTime = False, returnDentalScreeningID = False, returnModifiedTime = False, returnNote = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every DentalScreeningNote in the district.

    This function returns a dataframe of every DentalScreeningNote in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DentalScreeningNote/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DentalScreeningNote/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getDentalScreeningNote(DentalScreeningNoteID, EntityID = 1, returnDentalScreeningNoteID = False, returnCreatedTime = False, returnDentalScreeningID = False, returnModifiedTime = False, returnNote = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DentalScreeningNote/" + str(DentalScreeningNoteID), verb = "get", return_params_list = return_params)

def modifyDentalScreeningNote(DentalScreeningNoteID, EntityID = 1, setDentalScreeningNoteID = None, setCreatedTime = None, setDentalScreeningID = None, setModifiedTime = None, setNote = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnDentalScreeningNoteID = False, returnCreatedTime = False, returnDentalScreeningID = False, returnModifiedTime = False, returnNote = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DentalScreeningNote/" + str(DentalScreeningNoteID), verb = "post", return_params_list = return_params, payload = payload_params)

def createDentalScreeningNote(EntityID = 1, setDentalScreeningNoteID = None, setCreatedTime = None, setDentalScreeningID = None, setModifiedTime = None, setNote = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnDentalScreeningNoteID = False, returnCreatedTime = False, returnDentalScreeningID = False, returnModifiedTime = False, returnNote = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DentalScreeningNote/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteDentalScreeningNote(DentalScreeningNoteID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DentalScreeningNote/" + str(DentalScreeningNoteID), verb = "delete")


def getEveryDentalScreeningReferral(searchConditions = [], EntityID = 1, returnDentalScreeningReferralID = False, returnCompletionDate = False, returnCreatedTime = False, returnDentalGuardianNotificationID = False, returnDentalGuardianResponseID = False, returnDentalReferralReasonID = False, returnDentalReferralResultID = False, returnDentalScreeningID = False, returnHealthProfessionalIDReferredBy = False, returnHealthProfessionalIDReferredTo = False, returnIsVoid = False, returnModifiedTime = False, returnReferralCompleted = False, returnReferralDate = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnUserIDVoidedBy = False, returnVoidedTime = False, returnVoidNote = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every DentalScreeningReferral in the district.

    This function returns a dataframe of every DentalScreeningReferral in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DentalScreeningReferral/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DentalScreeningReferral/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getDentalScreeningReferral(DentalScreeningReferralID, EntityID = 1, returnDentalScreeningReferralID = False, returnCompletionDate = False, returnCreatedTime = False, returnDentalGuardianNotificationID = False, returnDentalGuardianResponseID = False, returnDentalReferralReasonID = False, returnDentalReferralResultID = False, returnDentalScreeningID = False, returnHealthProfessionalIDReferredBy = False, returnHealthProfessionalIDReferredTo = False, returnIsVoid = False, returnModifiedTime = False, returnReferralCompleted = False, returnReferralDate = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnUserIDVoidedBy = False, returnVoidedTime = False, returnVoidNote = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DentalScreeningReferral/" + str(DentalScreeningReferralID), verb = "get", return_params_list = return_params)

def modifyDentalScreeningReferral(DentalScreeningReferralID, EntityID = 1, setDentalScreeningReferralID = None, setCompletionDate = None, setCreatedTime = None, setDentalGuardianNotificationID = None, setDentalGuardianResponseID = None, setDentalReferralReasonID = None, setDentalReferralResultID = None, setDentalScreeningID = None, setHealthProfessionalIDReferredBy = None, setHealthProfessionalIDReferredTo = None, setIsVoid = None, setModifiedTime = None, setReferralCompleted = None, setReferralDate = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, setUserIDVoidedBy = None, setVoidedTime = None, setVoidNote = None, returnDentalScreeningReferralID = False, returnCompletionDate = False, returnCreatedTime = False, returnDentalGuardianNotificationID = False, returnDentalGuardianResponseID = False, returnDentalReferralReasonID = False, returnDentalReferralResultID = False, returnDentalScreeningID = False, returnHealthProfessionalIDReferredBy = False, returnHealthProfessionalIDReferredTo = False, returnIsVoid = False, returnModifiedTime = False, returnReferralCompleted = False, returnReferralDate = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnUserIDVoidedBy = False, returnVoidedTime = False, returnVoidNote = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DentalScreeningReferral/" + str(DentalScreeningReferralID), verb = "post", return_params_list = return_params, payload = payload_params)

def createDentalScreeningReferral(EntityID = 1, setDentalScreeningReferralID = None, setCompletionDate = None, setCreatedTime = None, setDentalGuardianNotificationID = None, setDentalGuardianResponseID = None, setDentalReferralReasonID = None, setDentalReferralResultID = None, setDentalScreeningID = None, setHealthProfessionalIDReferredBy = None, setHealthProfessionalIDReferredTo = None, setIsVoid = None, setModifiedTime = None, setReferralCompleted = None, setReferralDate = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, setUserIDVoidedBy = None, setVoidedTime = None, setVoidNote = None, returnDentalScreeningReferralID = False, returnCompletionDate = False, returnCreatedTime = False, returnDentalGuardianNotificationID = False, returnDentalGuardianResponseID = False, returnDentalReferralReasonID = False, returnDentalReferralResultID = False, returnDentalScreeningID = False, returnHealthProfessionalIDReferredBy = False, returnHealthProfessionalIDReferredTo = False, returnIsVoid = False, returnModifiedTime = False, returnReferralCompleted = False, returnReferralDate = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnUserIDVoidedBy = False, returnVoidedTime = False, returnVoidNote = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DentalScreeningReferral/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteDentalScreeningReferral(DentalScreeningReferralID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DentalScreeningReferral/" + str(DentalScreeningReferralID), verb = "delete")


def getEveryDentalScreeningResult(searchConditions = [], EntityID = 1, returnDentalScreeningResultID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every DentalScreeningResult in the district.

    This function returns a dataframe of every DentalScreeningResult in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DentalScreeningResult/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DentalScreeningResult/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getDentalScreeningResult(DentalScreeningResultID, EntityID = 1, returnDentalScreeningResultID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DentalScreeningResult/" + str(DentalScreeningResultID), verb = "get", return_params_list = return_params)

def modifyDentalScreeningResult(DentalScreeningResultID, EntityID = 1, setDentalScreeningResultID = None, setCode = None, setCodeDescription = None, setCreatedTime = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setModifiedTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnDentalScreeningResultID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DentalScreeningResult/" + str(DentalScreeningResultID), verb = "post", return_params_list = return_params, payload = payload_params)

def createDentalScreeningResult(EntityID = 1, setDentalScreeningResultID = None, setCode = None, setCodeDescription = None, setCreatedTime = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setModifiedTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnDentalScreeningResultID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DentalScreeningResult/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteDentalScreeningResult(DentalScreeningResultID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DentalScreeningResult/" + str(DentalScreeningResultID), verb = "delete")


def getEveryDentalScreeningSecuredNote(searchConditions = [], EntityID = 1, returnDentalScreeningSecuredNoteID = False, returnCreatedTime = False, returnDentalScreeningID = False, returnModifiedTime = False, returnNote = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every DentalScreeningSecuredNote in the district.

    This function returns a dataframe of every DentalScreeningSecuredNote in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DentalScreeningSecuredNote/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DentalScreeningSecuredNote/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getDentalScreeningSecuredNote(DentalScreeningSecuredNoteID, EntityID = 1, returnDentalScreeningSecuredNoteID = False, returnCreatedTime = False, returnDentalScreeningID = False, returnModifiedTime = False, returnNote = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DentalScreeningSecuredNote/" + str(DentalScreeningSecuredNoteID), verb = "get", return_params_list = return_params)

def modifyDentalScreeningSecuredNote(DentalScreeningSecuredNoteID, EntityID = 1, setDentalScreeningSecuredNoteID = None, setCreatedTime = None, setDentalScreeningID = None, setModifiedTime = None, setNote = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnDentalScreeningSecuredNoteID = False, returnCreatedTime = False, returnDentalScreeningID = False, returnModifiedTime = False, returnNote = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DentalScreeningSecuredNote/" + str(DentalScreeningSecuredNoteID), verb = "post", return_params_list = return_params, payload = payload_params)

def createDentalScreeningSecuredNote(EntityID = 1, setDentalScreeningSecuredNoteID = None, setCreatedTime = None, setDentalScreeningID = None, setModifiedTime = None, setNote = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnDentalScreeningSecuredNoteID = False, returnCreatedTime = False, returnDentalScreeningID = False, returnModifiedTime = False, returnNote = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DentalScreeningSecuredNote/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteDentalScreeningSecuredNote(DentalScreeningSecuredNoteID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DentalScreeningSecuredNote/" + str(DentalScreeningSecuredNoteID), verb = "delete")


def getEveryDentalTreatment(searchConditions = [], EntityID = 1, returnDentalTreatmentID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every DentalTreatment in the district.

    This function returns a dataframe of every DentalTreatment in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DentalTreatment/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DentalTreatment/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getDentalTreatment(DentalTreatmentID, EntityID = 1, returnDentalTreatmentID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DentalTreatment/" + str(DentalTreatmentID), verb = "get", return_params_list = return_params)

def modifyDentalTreatment(DentalTreatmentID, EntityID = 1, setDentalTreatmentID = None, setCode = None, setCodeDescription = None, setCreatedTime = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setModifiedTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnDentalTreatmentID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DentalTreatment/" + str(DentalTreatmentID), verb = "post", return_params_list = return_params, payload = payload_params)

def createDentalTreatment(EntityID = 1, setDentalTreatmentID = None, setCode = None, setCodeDescription = None, setCreatedTime = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setModifiedTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnDentalTreatmentID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DentalTreatment/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteDentalTreatment(DentalTreatmentID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DentalTreatment/" + str(DentalTreatmentID), verb = "delete")


def getEveryDiabetesCareLog(searchConditions = [], EntityID = 1, returnDiabetesCareLogID = False, returnBloodGlucose = False, returnBloodGlucoseInsulin = False, returnBloodGlucoseNotChecked = False, returnBodyPartID = False, returnCarbIntake = False, returnCreatedTime = False, returnDiabetesKetoneResultID = False, returnDistrictID = False, returnFoodInsulin = False, returnInsulinDeliveryType = False, returnInsulinDeliveryTypeCode = False, returnInsulinDose = False, returnInsulinOnBoard = False, returnIsVoid = False, returnMedicationDosageUnitID = False, returnModifiedTime = False, returnNameID = False, returnNameOfficeVisitID = False, returnNotificationMethodID = False, returnParentNotified = False, returnRecheckBloodGlucose = False, returnRecheckTime = False, returnSchoolYearID = False, returnScreeningTime = False, returnScreeningTimeDate = False, returnScreeningTimeTime = False, returnTreatmentDescriptionsListDisplay = False, returnTreatments = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnUserIDVoidedBy = False, returnVoidedTime = False, returnVoidNote = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every DiabetesCareLog in the district.

    This function returns a dataframe of every DiabetesCareLog in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DiabetesCareLog/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DiabetesCareLog/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getDiabetesCareLog(DiabetesCareLogID, EntityID = 1, returnDiabetesCareLogID = False, returnBloodGlucose = False, returnBloodGlucoseInsulin = False, returnBloodGlucoseNotChecked = False, returnBodyPartID = False, returnCarbIntake = False, returnCreatedTime = False, returnDiabetesKetoneResultID = False, returnDistrictID = False, returnFoodInsulin = False, returnInsulinDeliveryType = False, returnInsulinDeliveryTypeCode = False, returnInsulinDose = False, returnInsulinOnBoard = False, returnIsVoid = False, returnMedicationDosageUnitID = False, returnModifiedTime = False, returnNameID = False, returnNameOfficeVisitID = False, returnNotificationMethodID = False, returnParentNotified = False, returnRecheckBloodGlucose = False, returnRecheckTime = False, returnSchoolYearID = False, returnScreeningTime = False, returnScreeningTimeDate = False, returnScreeningTimeTime = False, returnTreatmentDescriptionsListDisplay = False, returnTreatments = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnUserIDVoidedBy = False, returnVoidedTime = False, returnVoidNote = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DiabetesCareLog/" + str(DiabetesCareLogID), verb = "get", return_params_list = return_params)

def modifyDiabetesCareLog(DiabetesCareLogID, EntityID = 1, setDiabetesCareLogID = None, setBloodGlucose = None, setBloodGlucoseInsulin = None, setBloodGlucoseNotChecked = None, setBodyPartID = None, setCarbIntake = None, setCreatedTime = None, setDiabetesKetoneResultID = None, setDistrictID = None, setFoodInsulin = None, setInsulinDeliveryType = None, setInsulinDeliveryTypeCode = None, setInsulinDose = None, setInsulinOnBoard = None, setIsVoid = None, setMedicationDosageUnitID = None, setModifiedTime = None, setNameID = None, setNameOfficeVisitID = None, setNotificationMethodID = None, setParentNotified = None, setRecheckBloodGlucose = None, setRecheckTime = None, setSchoolYearID = None, setScreeningTime = None, setScreeningTimeDate = None, setScreeningTimeTime = None, setTreatmentDescriptionsListDisplay = None, setTreatments = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, setUserIDVoidedBy = None, setVoidedTime = None, setVoidNote = None, returnDiabetesCareLogID = False, returnBloodGlucose = False, returnBloodGlucoseInsulin = False, returnBloodGlucoseNotChecked = False, returnBodyPartID = False, returnCarbIntake = False, returnCreatedTime = False, returnDiabetesKetoneResultID = False, returnDistrictID = False, returnFoodInsulin = False, returnInsulinDeliveryType = False, returnInsulinDeliveryTypeCode = False, returnInsulinDose = False, returnInsulinOnBoard = False, returnIsVoid = False, returnMedicationDosageUnitID = False, returnModifiedTime = False, returnNameID = False, returnNameOfficeVisitID = False, returnNotificationMethodID = False, returnParentNotified = False, returnRecheckBloodGlucose = False, returnRecheckTime = False, returnSchoolYearID = False, returnScreeningTime = False, returnScreeningTimeDate = False, returnScreeningTimeTime = False, returnTreatmentDescriptionsListDisplay = False, returnTreatments = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnUserIDVoidedBy = False, returnVoidedTime = False, returnVoidNote = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DiabetesCareLog/" + str(DiabetesCareLogID), verb = "post", return_params_list = return_params, payload = payload_params)

def createDiabetesCareLog(EntityID = 1, setDiabetesCareLogID = None, setBloodGlucose = None, setBloodGlucoseInsulin = None, setBloodGlucoseNotChecked = None, setBodyPartID = None, setCarbIntake = None, setCreatedTime = None, setDiabetesKetoneResultID = None, setDistrictID = None, setFoodInsulin = None, setInsulinDeliveryType = None, setInsulinDeliveryTypeCode = None, setInsulinDose = None, setInsulinOnBoard = None, setIsVoid = None, setMedicationDosageUnitID = None, setModifiedTime = None, setNameID = None, setNameOfficeVisitID = None, setNotificationMethodID = None, setParentNotified = None, setRecheckBloodGlucose = None, setRecheckTime = None, setSchoolYearID = None, setScreeningTime = None, setScreeningTimeDate = None, setScreeningTimeTime = None, setTreatmentDescriptionsListDisplay = None, setTreatments = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, setUserIDVoidedBy = None, setVoidedTime = None, setVoidNote = None, returnDiabetesCareLogID = False, returnBloodGlucose = False, returnBloodGlucoseInsulin = False, returnBloodGlucoseNotChecked = False, returnBodyPartID = False, returnCarbIntake = False, returnCreatedTime = False, returnDiabetesKetoneResultID = False, returnDistrictID = False, returnFoodInsulin = False, returnInsulinDeliveryType = False, returnInsulinDeliveryTypeCode = False, returnInsulinDose = False, returnInsulinOnBoard = False, returnIsVoid = False, returnMedicationDosageUnitID = False, returnModifiedTime = False, returnNameID = False, returnNameOfficeVisitID = False, returnNotificationMethodID = False, returnParentNotified = False, returnRecheckBloodGlucose = False, returnRecheckTime = False, returnSchoolYearID = False, returnScreeningTime = False, returnScreeningTimeDate = False, returnScreeningTimeTime = False, returnTreatmentDescriptionsListDisplay = False, returnTreatments = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnUserIDVoidedBy = False, returnVoidedTime = False, returnVoidNote = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DiabetesCareLog/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteDiabetesCareLog(DiabetesCareLogID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DiabetesCareLog/" + str(DiabetesCareLogID), verb = "delete")


def getEveryDiabetesCareLogNote(searchConditions = [], EntityID = 1, returnDiabetesCareLogNoteID = False, returnCreatedTime = False, returnDiabetesCareLogID = False, returnModifiedTime = False, returnNote = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every DiabetesCareLogNote in the district.

    This function returns a dataframe of every DiabetesCareLogNote in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DiabetesCareLogNote/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DiabetesCareLogNote/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getDiabetesCareLogNote(DiabetesCareLogNoteID, EntityID = 1, returnDiabetesCareLogNoteID = False, returnCreatedTime = False, returnDiabetesCareLogID = False, returnModifiedTime = False, returnNote = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DiabetesCareLogNote/" + str(DiabetesCareLogNoteID), verb = "get", return_params_list = return_params)

def modifyDiabetesCareLogNote(DiabetesCareLogNoteID, EntityID = 1, setDiabetesCareLogNoteID = None, setCreatedTime = None, setDiabetesCareLogID = None, setModifiedTime = None, setNote = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnDiabetesCareLogNoteID = False, returnCreatedTime = False, returnDiabetesCareLogID = False, returnModifiedTime = False, returnNote = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DiabetesCareLogNote/" + str(DiabetesCareLogNoteID), verb = "post", return_params_list = return_params, payload = payload_params)

def createDiabetesCareLogNote(EntityID = 1, setDiabetesCareLogNoteID = None, setCreatedTime = None, setDiabetesCareLogID = None, setModifiedTime = None, setNote = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnDiabetesCareLogNoteID = False, returnCreatedTime = False, returnDiabetesCareLogID = False, returnModifiedTime = False, returnNote = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DiabetesCareLogNote/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteDiabetesCareLogNote(DiabetesCareLogNoteID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DiabetesCareLogNote/" + str(DiabetesCareLogNoteID), verb = "delete")


def getEveryDiabetesCareLogReferral(searchConditions = [], EntityID = 1, returnDiabetesCareLogReferralID = False, returnCompletionDate = False, returnCreatedTime = False, returnDiabetesCareLogID = False, returnDiabetesGuardianNotificationID = False, returnDiabetesGuardianResponseID = False, returnDiabetesReferralReasonID = False, returnDiabetesReferralResultID = False, returnHealthProfessionalIDReferredBy = False, returnHealthProfessionalIDReferredTo = False, returnIsVoid = False, returnModifiedTime = False, returnReferralCompleted = False, returnReferralDate = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnUserIDVoidedBy = False, returnVoidedTime = False, returnVoidNote = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every DiabetesCareLogReferral in the district.

    This function returns a dataframe of every DiabetesCareLogReferral in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DiabetesCareLogReferral/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DiabetesCareLogReferral/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getDiabetesCareLogReferral(DiabetesCareLogReferralID, EntityID = 1, returnDiabetesCareLogReferralID = False, returnCompletionDate = False, returnCreatedTime = False, returnDiabetesCareLogID = False, returnDiabetesGuardianNotificationID = False, returnDiabetesGuardianResponseID = False, returnDiabetesReferralReasonID = False, returnDiabetesReferralResultID = False, returnHealthProfessionalIDReferredBy = False, returnHealthProfessionalIDReferredTo = False, returnIsVoid = False, returnModifiedTime = False, returnReferralCompleted = False, returnReferralDate = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnUserIDVoidedBy = False, returnVoidedTime = False, returnVoidNote = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DiabetesCareLogReferral/" + str(DiabetesCareLogReferralID), verb = "get", return_params_list = return_params)

def modifyDiabetesCareLogReferral(DiabetesCareLogReferralID, EntityID = 1, setDiabetesCareLogReferralID = None, setCompletionDate = None, setCreatedTime = None, setDiabetesCareLogID = None, setDiabetesGuardianNotificationID = None, setDiabetesGuardianResponseID = None, setDiabetesReferralReasonID = None, setDiabetesReferralResultID = None, setHealthProfessionalIDReferredBy = None, setHealthProfessionalIDReferredTo = None, setIsVoid = None, setModifiedTime = None, setReferralCompleted = None, setReferralDate = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, setUserIDVoidedBy = None, setVoidedTime = None, setVoidNote = None, returnDiabetesCareLogReferralID = False, returnCompletionDate = False, returnCreatedTime = False, returnDiabetesCareLogID = False, returnDiabetesGuardianNotificationID = False, returnDiabetesGuardianResponseID = False, returnDiabetesReferralReasonID = False, returnDiabetesReferralResultID = False, returnHealthProfessionalIDReferredBy = False, returnHealthProfessionalIDReferredTo = False, returnIsVoid = False, returnModifiedTime = False, returnReferralCompleted = False, returnReferralDate = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnUserIDVoidedBy = False, returnVoidedTime = False, returnVoidNote = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DiabetesCareLogReferral/" + str(DiabetesCareLogReferralID), verb = "post", return_params_list = return_params, payload = payload_params)

def createDiabetesCareLogReferral(EntityID = 1, setDiabetesCareLogReferralID = None, setCompletionDate = None, setCreatedTime = None, setDiabetesCareLogID = None, setDiabetesGuardianNotificationID = None, setDiabetesGuardianResponseID = None, setDiabetesReferralReasonID = None, setDiabetesReferralResultID = None, setHealthProfessionalIDReferredBy = None, setHealthProfessionalIDReferredTo = None, setIsVoid = None, setModifiedTime = None, setReferralCompleted = None, setReferralDate = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, setUserIDVoidedBy = None, setVoidedTime = None, setVoidNote = None, returnDiabetesCareLogReferralID = False, returnCompletionDate = False, returnCreatedTime = False, returnDiabetesCareLogID = False, returnDiabetesGuardianNotificationID = False, returnDiabetesGuardianResponseID = False, returnDiabetesReferralReasonID = False, returnDiabetesReferralResultID = False, returnHealthProfessionalIDReferredBy = False, returnHealthProfessionalIDReferredTo = False, returnIsVoid = False, returnModifiedTime = False, returnReferralCompleted = False, returnReferralDate = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnUserIDVoidedBy = False, returnVoidedTime = False, returnVoidNote = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DiabetesCareLogReferral/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteDiabetesCareLogReferral(DiabetesCareLogReferralID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DiabetesCareLogReferral/" + str(DiabetesCareLogReferralID), verb = "delete")


def getEveryDiabetesCareLogSecuredNote(searchConditions = [], EntityID = 1, returnDiabetesCareLogSecuredNoteID = False, returnCreatedTime = False, returnDiabetesCareLogID = False, returnModifiedTime = False, returnNote = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every DiabetesCareLogSecuredNote in the district.

    This function returns a dataframe of every DiabetesCareLogSecuredNote in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DiabetesCareLogSecuredNote/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DiabetesCareLogSecuredNote/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getDiabetesCareLogSecuredNote(DiabetesCareLogSecuredNoteID, EntityID = 1, returnDiabetesCareLogSecuredNoteID = False, returnCreatedTime = False, returnDiabetesCareLogID = False, returnModifiedTime = False, returnNote = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DiabetesCareLogSecuredNote/" + str(DiabetesCareLogSecuredNoteID), verb = "get", return_params_list = return_params)

def modifyDiabetesCareLogSecuredNote(DiabetesCareLogSecuredNoteID, EntityID = 1, setDiabetesCareLogSecuredNoteID = None, setCreatedTime = None, setDiabetesCareLogID = None, setModifiedTime = None, setNote = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnDiabetesCareLogSecuredNoteID = False, returnCreatedTime = False, returnDiabetesCareLogID = False, returnModifiedTime = False, returnNote = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DiabetesCareLogSecuredNote/" + str(DiabetesCareLogSecuredNoteID), verb = "post", return_params_list = return_params, payload = payload_params)

def createDiabetesCareLogSecuredNote(EntityID = 1, setDiabetesCareLogSecuredNoteID = None, setCreatedTime = None, setDiabetesCareLogID = None, setModifiedTime = None, setNote = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnDiabetesCareLogSecuredNoteID = False, returnCreatedTime = False, returnDiabetesCareLogID = False, returnModifiedTime = False, returnNote = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DiabetesCareLogSecuredNote/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteDiabetesCareLogSecuredNote(DiabetesCareLogSecuredNoteID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DiabetesCareLogSecuredNote/" + str(DiabetesCareLogSecuredNoteID), verb = "delete")


def getEveryDiabetesCareLogTreatment(searchConditions = [], EntityID = 1, returnDiabetesCareLogTreatmentID = False, returnCreatedTime = False, returnDiabetesCareLogID = False, returnDiabetesTreatmentID = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every DiabetesCareLogTreatment in the district.

    This function returns a dataframe of every DiabetesCareLogTreatment in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DiabetesCareLogTreatment/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DiabetesCareLogTreatment/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getDiabetesCareLogTreatment(DiabetesCareLogTreatmentID, EntityID = 1, returnDiabetesCareLogTreatmentID = False, returnCreatedTime = False, returnDiabetesCareLogID = False, returnDiabetesTreatmentID = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DiabetesCareLogTreatment/" + str(DiabetesCareLogTreatmentID), verb = "get", return_params_list = return_params)

def modifyDiabetesCareLogTreatment(DiabetesCareLogTreatmentID, EntityID = 1, setDiabetesCareLogTreatmentID = None, setCreatedTime = None, setDiabetesCareLogID = None, setDiabetesTreatmentID = None, setModifiedTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnDiabetesCareLogTreatmentID = False, returnCreatedTime = False, returnDiabetesCareLogID = False, returnDiabetesTreatmentID = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DiabetesCareLogTreatment/" + str(DiabetesCareLogTreatmentID), verb = "post", return_params_list = return_params, payload = payload_params)

def createDiabetesCareLogTreatment(EntityID = 1, setDiabetesCareLogTreatmentID = None, setCreatedTime = None, setDiabetesCareLogID = None, setDiabetesTreatmentID = None, setModifiedTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnDiabetesCareLogTreatmentID = False, returnCreatedTime = False, returnDiabetesCareLogID = False, returnDiabetesTreatmentID = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DiabetesCareLogTreatment/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteDiabetesCareLogTreatment(DiabetesCareLogTreatmentID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DiabetesCareLogTreatment/" + str(DiabetesCareLogTreatmentID), verb = "delete")


def getEveryDiabetesGuardianNotification(searchConditions = [], EntityID = 1, returnDiabetesGuardianNotificationID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every DiabetesGuardianNotification in the district.

    This function returns a dataframe of every DiabetesGuardianNotification in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DiabetesGuardianNotification/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DiabetesGuardianNotification/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getDiabetesGuardianNotification(DiabetesGuardianNotificationID, EntityID = 1, returnDiabetesGuardianNotificationID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DiabetesGuardianNotification/" + str(DiabetesGuardianNotificationID), verb = "get", return_params_list = return_params)

def modifyDiabetesGuardianNotification(DiabetesGuardianNotificationID, EntityID = 1, setDiabetesGuardianNotificationID = None, setCode = None, setCodeDescription = None, setCreatedTime = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setModifiedTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnDiabetesGuardianNotificationID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DiabetesGuardianNotification/" + str(DiabetesGuardianNotificationID), verb = "post", return_params_list = return_params, payload = payload_params)

def createDiabetesGuardianNotification(EntityID = 1, setDiabetesGuardianNotificationID = None, setCode = None, setCodeDescription = None, setCreatedTime = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setModifiedTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnDiabetesGuardianNotificationID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DiabetesGuardianNotification/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteDiabetesGuardianNotification(DiabetesGuardianNotificationID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DiabetesGuardianNotification/" + str(DiabetesGuardianNotificationID), verb = "delete")


def getEveryDiabetesGuardianResponse(searchConditions = [], EntityID = 1, returnDiabetesGuardianResponseID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every DiabetesGuardianResponse in the district.

    This function returns a dataframe of every DiabetesGuardianResponse in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DiabetesGuardianResponse/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DiabetesGuardianResponse/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getDiabetesGuardianResponse(DiabetesGuardianResponseID, EntityID = 1, returnDiabetesGuardianResponseID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DiabetesGuardianResponse/" + str(DiabetesGuardianResponseID), verb = "get", return_params_list = return_params)

def modifyDiabetesGuardianResponse(DiabetesGuardianResponseID, EntityID = 1, setDiabetesGuardianResponseID = None, setCode = None, setCodeDescription = None, setCreatedTime = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setModifiedTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnDiabetesGuardianResponseID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DiabetesGuardianResponse/" + str(DiabetesGuardianResponseID), verb = "post", return_params_list = return_params, payload = payload_params)

def createDiabetesGuardianResponse(EntityID = 1, setDiabetesGuardianResponseID = None, setCode = None, setCodeDescription = None, setCreatedTime = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setModifiedTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnDiabetesGuardianResponseID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DiabetesGuardianResponse/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteDiabetesGuardianResponse(DiabetesGuardianResponseID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DiabetesGuardianResponse/" + str(DiabetesGuardianResponseID), verb = "delete")


def getEveryDiabetesKetoneResult(searchConditions = [], EntityID = 1, returnDiabetesKetoneResultID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every DiabetesKetoneResult in the district.

    This function returns a dataframe of every DiabetesKetoneResult in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DiabetesKetoneResult/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DiabetesKetoneResult/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getDiabetesKetoneResult(DiabetesKetoneResultID, EntityID = 1, returnDiabetesKetoneResultID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DiabetesKetoneResult/" + str(DiabetesKetoneResultID), verb = "get", return_params_list = return_params)

def modifyDiabetesKetoneResult(DiabetesKetoneResultID, EntityID = 1, setDiabetesKetoneResultID = None, setCode = None, setCodeDescription = None, setCreatedTime = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setModifiedTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnDiabetesKetoneResultID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DiabetesKetoneResult/" + str(DiabetesKetoneResultID), verb = "post", return_params_list = return_params, payload = payload_params)

def createDiabetesKetoneResult(EntityID = 1, setDiabetesKetoneResultID = None, setCode = None, setCodeDescription = None, setCreatedTime = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setModifiedTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnDiabetesKetoneResultID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DiabetesKetoneResult/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteDiabetesKetoneResult(DiabetesKetoneResultID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DiabetesKetoneResult/" + str(DiabetesKetoneResultID), verb = "delete")


def getEveryDiabetesReferralReason(searchConditions = [], EntityID = 1, returnDiabetesReferralReasonID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every DiabetesReferralReason in the district.

    This function returns a dataframe of every DiabetesReferralReason in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DiabetesReferralReason/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DiabetesReferralReason/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getDiabetesReferralReason(DiabetesReferralReasonID, EntityID = 1, returnDiabetesReferralReasonID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DiabetesReferralReason/" + str(DiabetesReferralReasonID), verb = "get", return_params_list = return_params)

def modifyDiabetesReferralReason(DiabetesReferralReasonID, EntityID = 1, setDiabetesReferralReasonID = None, setCode = None, setCodeDescription = None, setCreatedTime = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setModifiedTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnDiabetesReferralReasonID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DiabetesReferralReason/" + str(DiabetesReferralReasonID), verb = "post", return_params_list = return_params, payload = payload_params)

def createDiabetesReferralReason(EntityID = 1, setDiabetesReferralReasonID = None, setCode = None, setCodeDescription = None, setCreatedTime = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setModifiedTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnDiabetesReferralReasonID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DiabetesReferralReason/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteDiabetesReferralReason(DiabetesReferralReasonID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DiabetesReferralReason/" + str(DiabetesReferralReasonID), verb = "delete")


def getEveryDiabetesReferralResult(searchConditions = [], EntityID = 1, returnDiabetesReferralResultID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every DiabetesReferralResult in the district.

    This function returns a dataframe of every DiabetesReferralResult in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DiabetesReferralResult/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DiabetesReferralResult/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getDiabetesReferralResult(DiabetesReferralResultID, EntityID = 1, returnDiabetesReferralResultID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DiabetesReferralResult/" + str(DiabetesReferralResultID), verb = "get", return_params_list = return_params)

def modifyDiabetesReferralResult(DiabetesReferralResultID, EntityID = 1, setDiabetesReferralResultID = None, setCode = None, setCodeDescription = None, setCreatedTime = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setModifiedTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnDiabetesReferralResultID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DiabetesReferralResult/" + str(DiabetesReferralResultID), verb = "post", return_params_list = return_params, payload = payload_params)

def createDiabetesReferralResult(EntityID = 1, setDiabetesReferralResultID = None, setCode = None, setCodeDescription = None, setCreatedTime = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setModifiedTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnDiabetesReferralResultID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DiabetesReferralResult/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteDiabetesReferralResult(DiabetesReferralResultID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DiabetesReferralResult/" + str(DiabetesReferralResultID), verb = "delete")


def getEveryDiabetesTreatment(searchConditions = [], EntityID = 1, returnDiabetesTreatmentID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every DiabetesTreatment in the district.

    This function returns a dataframe of every DiabetesTreatment in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DiabetesTreatment/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DiabetesTreatment/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getDiabetesTreatment(DiabetesTreatmentID, EntityID = 1, returnDiabetesTreatmentID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DiabetesTreatment/" + str(DiabetesTreatmentID), verb = "get", return_params_list = return_params)

def modifyDiabetesTreatment(DiabetesTreatmentID, EntityID = 1, setDiabetesTreatmentID = None, setCode = None, setCodeDescription = None, setCreatedTime = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setModifiedTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnDiabetesTreatmentID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DiabetesTreatment/" + str(DiabetesTreatmentID), verb = "post", return_params_list = return_params, payload = payload_params)

def createDiabetesTreatment(EntityID = 1, setDiabetesTreatmentID = None, setCode = None, setCodeDescription = None, setCreatedTime = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setModifiedTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnDiabetesTreatmentID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DiabetesTreatment/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteDiabetesTreatment(DiabetesTreatmentID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DiabetesTreatment/" + str(DiabetesTreatmentID), verb = "delete")


def getEveryDoseInterval(searchConditions = [], EntityID = 1, returnDoseIntervalID = False, returnAgeHighMonths = False, returnAgeLowMonths = False, returnComplianceScheduleDetailID = False, returnCreatedTime = False, returnDoseHigh = False, returnDoseIntervalIDClonedFrom = False, returnDoseLow = False, returnGracePeriodDays = False, returnIntervalType = False, returnIntervalTypeCode = False, returnIntervalValue = False, returnIsConditionalInterval = False, returnIsDistrictDefined = False, returnIsRequired = False, returnModifiedTime = False, returnSkywardHash = False, returnSkywardID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnVaccineDateHigh = False, returnVaccineDateLow = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every DoseInterval in the district.

    This function returns a dataframe of every DoseInterval in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DoseInterval/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DoseInterval/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getDoseInterval(DoseIntervalID, EntityID = 1, returnDoseIntervalID = False, returnAgeHighMonths = False, returnAgeLowMonths = False, returnComplianceScheduleDetailID = False, returnCreatedTime = False, returnDoseHigh = False, returnDoseIntervalIDClonedFrom = False, returnDoseLow = False, returnGracePeriodDays = False, returnIntervalType = False, returnIntervalTypeCode = False, returnIntervalValue = False, returnIsConditionalInterval = False, returnIsDistrictDefined = False, returnIsRequired = False, returnModifiedTime = False, returnSkywardHash = False, returnSkywardID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnVaccineDateHigh = False, returnVaccineDateLow = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DoseInterval/" + str(DoseIntervalID), verb = "get", return_params_list = return_params)

def modifyDoseInterval(DoseIntervalID, EntityID = 1, setDoseIntervalID = None, setAgeHighMonths = None, setAgeLowMonths = None, setComplianceScheduleDetailID = None, setCreatedTime = None, setDoseHigh = None, setDoseIntervalIDClonedFrom = None, setDoseLow = None, setGracePeriodDays = None, setIntervalType = None, setIntervalTypeCode = None, setIntervalValue = None, setIsConditionalInterval = None, setIsDistrictDefined = None, setIsRequired = None, setModifiedTime = None, setSkywardHash = None, setSkywardID = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, setVaccineDateHigh = None, setVaccineDateLow = None, returnDoseIntervalID = False, returnAgeHighMonths = False, returnAgeLowMonths = False, returnComplianceScheduleDetailID = False, returnCreatedTime = False, returnDoseHigh = False, returnDoseIntervalIDClonedFrom = False, returnDoseLow = False, returnGracePeriodDays = False, returnIntervalType = False, returnIntervalTypeCode = False, returnIntervalValue = False, returnIsConditionalInterval = False, returnIsDistrictDefined = False, returnIsRequired = False, returnModifiedTime = False, returnSkywardHash = False, returnSkywardID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnVaccineDateHigh = False, returnVaccineDateLow = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DoseInterval/" + str(DoseIntervalID), verb = "post", return_params_list = return_params, payload = payload_params)

def createDoseInterval(EntityID = 1, setDoseIntervalID = None, setAgeHighMonths = None, setAgeLowMonths = None, setComplianceScheduleDetailID = None, setCreatedTime = None, setDoseHigh = None, setDoseIntervalIDClonedFrom = None, setDoseLow = None, setGracePeriodDays = None, setIntervalType = None, setIntervalTypeCode = None, setIntervalValue = None, setIsConditionalInterval = None, setIsDistrictDefined = None, setIsRequired = None, setModifiedTime = None, setSkywardHash = None, setSkywardID = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, setVaccineDateHigh = None, setVaccineDateLow = None, returnDoseIntervalID = False, returnAgeHighMonths = False, returnAgeLowMonths = False, returnComplianceScheduleDetailID = False, returnCreatedTime = False, returnDoseHigh = False, returnDoseIntervalIDClonedFrom = False, returnDoseLow = False, returnGracePeriodDays = False, returnIntervalType = False, returnIntervalTypeCode = False, returnIntervalValue = False, returnIsConditionalInterval = False, returnIsDistrictDefined = False, returnIsRequired = False, returnModifiedTime = False, returnSkywardHash = False, returnSkywardID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnVaccineDateHigh = False, returnVaccineDateLow = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DoseInterval/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteDoseInterval(DoseIntervalID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DoseInterval/" + str(DoseIntervalID), verb = "delete")


def getEveryDoseMinimumAge(searchConditions = [], EntityID = 1, returnDoseMinimumAgeID = False, returnAge = False, returnAgeUnitType = False, returnAgeUnitTypeCode = False, returnComplianceScheduleDetailID = False, returnCreatedTime = False, returnDoseMinimumAgeIDClonedFrom = False, returnDoseNumber = False, returnGracePeriodType = False, returnGracePeriodTypeCode = False, returnGraceValue = False, returnIsDistrictDefined = False, returnIsRequired = False, returnModifiedTime = False, returnSkywardHash = False, returnSkywardID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnVaccineDateHigh = False, returnVaccineDateLow = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every DoseMinimumAge in the district.

    This function returns a dataframe of every DoseMinimumAge in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DoseMinimumAge/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DoseMinimumAge/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getDoseMinimumAge(DoseMinimumAgeID, EntityID = 1, returnDoseMinimumAgeID = False, returnAge = False, returnAgeUnitType = False, returnAgeUnitTypeCode = False, returnComplianceScheduleDetailID = False, returnCreatedTime = False, returnDoseMinimumAgeIDClonedFrom = False, returnDoseNumber = False, returnGracePeriodType = False, returnGracePeriodTypeCode = False, returnGraceValue = False, returnIsDistrictDefined = False, returnIsRequired = False, returnModifiedTime = False, returnSkywardHash = False, returnSkywardID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnVaccineDateHigh = False, returnVaccineDateLow = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DoseMinimumAge/" + str(DoseMinimumAgeID), verb = "get", return_params_list = return_params)

def modifyDoseMinimumAge(DoseMinimumAgeID, EntityID = 1, setDoseMinimumAgeID = None, setAge = None, setAgeUnitType = None, setAgeUnitTypeCode = None, setComplianceScheduleDetailID = None, setCreatedTime = None, setDoseMinimumAgeIDClonedFrom = None, setDoseNumber = None, setGracePeriodType = None, setGracePeriodTypeCode = None, setGraceValue = None, setIsDistrictDefined = None, setIsRequired = None, setModifiedTime = None, setSkywardHash = None, setSkywardID = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, setVaccineDateHigh = None, setVaccineDateLow = None, returnDoseMinimumAgeID = False, returnAge = False, returnAgeUnitType = False, returnAgeUnitTypeCode = False, returnComplianceScheduleDetailID = False, returnCreatedTime = False, returnDoseMinimumAgeIDClonedFrom = False, returnDoseNumber = False, returnGracePeriodType = False, returnGracePeriodTypeCode = False, returnGraceValue = False, returnIsDistrictDefined = False, returnIsRequired = False, returnModifiedTime = False, returnSkywardHash = False, returnSkywardID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnVaccineDateHigh = False, returnVaccineDateLow = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DoseMinimumAge/" + str(DoseMinimumAgeID), verb = "post", return_params_list = return_params, payload = payload_params)

def createDoseMinimumAge(EntityID = 1, setDoseMinimumAgeID = None, setAge = None, setAgeUnitType = None, setAgeUnitTypeCode = None, setComplianceScheduleDetailID = None, setCreatedTime = None, setDoseMinimumAgeIDClonedFrom = None, setDoseNumber = None, setGracePeriodType = None, setGracePeriodTypeCode = None, setGraceValue = None, setIsDistrictDefined = None, setIsRequired = None, setModifiedTime = None, setSkywardHash = None, setSkywardID = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, setVaccineDateHigh = None, setVaccineDateLow = None, returnDoseMinimumAgeID = False, returnAge = False, returnAgeUnitType = False, returnAgeUnitTypeCode = False, returnComplianceScheduleDetailID = False, returnCreatedTime = False, returnDoseMinimumAgeIDClonedFrom = False, returnDoseNumber = False, returnGracePeriodType = False, returnGracePeriodTypeCode = False, returnGraceValue = False, returnIsDistrictDefined = False, returnIsRequired = False, returnModifiedTime = False, returnSkywardHash = False, returnSkywardID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnVaccineDateHigh = False, returnVaccineDateLow = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DoseMinimumAge/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteDoseMinimumAge(DoseMinimumAgeID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DoseMinimumAge/" + str(DoseMinimumAgeID), verb = "delete")


def getEveryHealthAttachment(searchConditions = [], EntityID = 1, returnHealthAttachmentID = False, returnAttachmentCount = False, returnAttachmentIndicatorColumn = False, returnCreatedTime = False, returnDescription = False, returnIsVoid = False, returnModifiedTime = False, returnNameID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnUserIDVoidedBy = False, returnVoidedTime = False, returnVoidNote = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every HealthAttachment in the district.

    This function returns a dataframe of every HealthAttachment in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HealthAttachment/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HealthAttachment/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getHealthAttachment(HealthAttachmentID, EntityID = 1, returnHealthAttachmentID = False, returnAttachmentCount = False, returnAttachmentIndicatorColumn = False, returnCreatedTime = False, returnDescription = False, returnIsVoid = False, returnModifiedTime = False, returnNameID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnUserIDVoidedBy = False, returnVoidedTime = False, returnVoidNote = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HealthAttachment/" + str(HealthAttachmentID), verb = "get", return_params_list = return_params)

def modifyHealthAttachment(HealthAttachmentID, EntityID = 1, setHealthAttachmentID = None, setAttachmentCount = None, setAttachmentIndicatorColumn = None, setCreatedTime = None, setDescription = None, setIsVoid = None, setModifiedTime = None, setNameID = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, setUserIDVoidedBy = None, setVoidedTime = None, setVoidNote = None, returnHealthAttachmentID = False, returnAttachmentCount = False, returnAttachmentIndicatorColumn = False, returnCreatedTime = False, returnDescription = False, returnIsVoid = False, returnModifiedTime = False, returnNameID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnUserIDVoidedBy = False, returnVoidedTime = False, returnVoidNote = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HealthAttachment/" + str(HealthAttachmentID), verb = "post", return_params_list = return_params, payload = payload_params)

def createHealthAttachment(EntityID = 1, setHealthAttachmentID = None, setAttachmentCount = None, setAttachmentIndicatorColumn = None, setCreatedTime = None, setDescription = None, setIsVoid = None, setModifiedTime = None, setNameID = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, setUserIDVoidedBy = None, setVoidedTime = None, setVoidNote = None, returnHealthAttachmentID = False, returnAttachmentCount = False, returnAttachmentIndicatorColumn = False, returnCreatedTime = False, returnDescription = False, returnIsVoid = False, returnModifiedTime = False, returnNameID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnUserIDVoidedBy = False, returnVoidedTime = False, returnVoidNote = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HealthAttachment/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteHealthAttachment(HealthAttachmentID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HealthAttachment/" + str(HealthAttachmentID), verb = "delete")


def getEveryHealthCondition(searchConditions = [], EntityID = 1, returnHealthConditionID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnIsSecuredIndicator = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnVaccinationGroupContraindication = False, returnVaccinationGroupContraindicationCode = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every HealthCondition in the district.

    This function returns a dataframe of every HealthCondition in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HealthCondition/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HealthCondition/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getHealthCondition(HealthConditionID, EntityID = 1, returnHealthConditionID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnIsSecuredIndicator = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnVaccinationGroupContraindication = False, returnVaccinationGroupContraindicationCode = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HealthCondition/" + str(HealthConditionID), verb = "get", return_params_list = return_params)

def modifyHealthCondition(HealthConditionID, EntityID = 1, setHealthConditionID = None, setCode = None, setCodeDescription = None, setCreatedTime = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setIsSecuredIndicator = None, setModifiedTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, setVaccinationGroupContraindication = None, setVaccinationGroupContraindicationCode = None, returnHealthConditionID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnIsSecuredIndicator = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnVaccinationGroupContraindication = False, returnVaccinationGroupContraindicationCode = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HealthCondition/" + str(HealthConditionID), verb = "post", return_params_list = return_params, payload = payload_params)

def createHealthCondition(EntityID = 1, setHealthConditionID = None, setCode = None, setCodeDescription = None, setCreatedTime = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setIsSecuredIndicator = None, setModifiedTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, setVaccinationGroupContraindication = None, setVaccinationGroupContraindicationCode = None, returnHealthConditionID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnIsSecuredIndicator = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnVaccinationGroupContraindication = False, returnVaccinationGroupContraindicationCode = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HealthCondition/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteHealthCondition(HealthConditionID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HealthCondition/" + str(HealthConditionID), verb = "delete")


def getEveryHealthConditionComment(searchConditions = [], EntityID = 1, returnHealthConditionCommentID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every HealthConditionComment in the district.

    This function returns a dataframe of every HealthConditionComment in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HealthConditionComment/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HealthConditionComment/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getHealthConditionComment(HealthConditionCommentID, EntityID = 1, returnHealthConditionCommentID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HealthConditionComment/" + str(HealthConditionCommentID), verb = "get", return_params_list = return_params)

def modifyHealthConditionComment(HealthConditionCommentID, EntityID = 1, setHealthConditionCommentID = None, setCode = None, setCodeDescription = None, setCreatedTime = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setModifiedTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnHealthConditionCommentID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HealthConditionComment/" + str(HealthConditionCommentID), verb = "post", return_params_list = return_params, payload = payload_params)

def createHealthConditionComment(EntityID = 1, setHealthConditionCommentID = None, setCode = None, setCodeDescription = None, setCreatedTime = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setModifiedTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnHealthConditionCommentID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HealthConditionComment/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteHealthConditionComment(HealthConditionCommentID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HealthConditionComment/" + str(HealthConditionCommentID), verb = "delete")


def getEveryHealthConditionTreatment(searchConditions = [], EntityID = 1, returnHealthConditionTreatmentID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every HealthConditionTreatment in the district.

    This function returns a dataframe of every HealthConditionTreatment in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HealthConditionTreatment/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HealthConditionTreatment/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getHealthConditionTreatment(HealthConditionTreatmentID, EntityID = 1, returnHealthConditionTreatmentID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HealthConditionTreatment/" + str(HealthConditionTreatmentID), verb = "get", return_params_list = return_params)

def modifyHealthConditionTreatment(HealthConditionTreatmentID, EntityID = 1, setHealthConditionTreatmentID = None, setCode = None, setCodeDescription = None, setCreatedTime = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setModifiedTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnHealthConditionTreatmentID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HealthConditionTreatment/" + str(HealthConditionTreatmentID), verb = "post", return_params_list = return_params, payload = payload_params)

def createHealthConditionTreatment(EntityID = 1, setHealthConditionTreatmentID = None, setCode = None, setCodeDescription = None, setCreatedTime = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setModifiedTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnHealthConditionTreatmentID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HealthConditionTreatment/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteHealthConditionTreatment(HealthConditionTreatmentID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HealthConditionTreatment/" + str(HealthConditionTreatmentID), verb = "delete")


def getEveryHealthProfessional(searchConditions = [], EntityID = 1, returnHealthProfessionalID = False, returnCreatedTime = False, returnDistrictGroupKey = False, returnDistrictID = False, returnHealthProfessionalTypeID = False, returnIsActive = False, returnIsDentist = False, returnIsPrimaryPhysician = False, returnModifiedTime = False, returnNameEmailIDDisplayEmail = False, returnNameID = False, returnNamePhoneIDDisplayPhone = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every HealthProfessional in the district.

    This function returns a dataframe of every HealthProfessional in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HealthProfessional/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HealthProfessional/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getHealthProfessional(HealthProfessionalID, EntityID = 1, returnHealthProfessionalID = False, returnCreatedTime = False, returnDistrictGroupKey = False, returnDistrictID = False, returnHealthProfessionalTypeID = False, returnIsActive = False, returnIsDentist = False, returnIsPrimaryPhysician = False, returnModifiedTime = False, returnNameEmailIDDisplayEmail = False, returnNameID = False, returnNamePhoneIDDisplayPhone = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HealthProfessional/" + str(HealthProfessionalID), verb = "get", return_params_list = return_params)

def modifyHealthProfessional(HealthProfessionalID, EntityID = 1, setHealthProfessionalID = None, setCreatedTime = None, setDistrictGroupKey = None, setDistrictID = None, setHealthProfessionalTypeID = None, setIsActive = None, setIsDentist = None, setIsPrimaryPhysician = None, setModifiedTime = None, setNameEmailIDDisplayEmail = None, setNameID = None, setNamePhoneIDDisplayPhone = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnHealthProfessionalID = False, returnCreatedTime = False, returnDistrictGroupKey = False, returnDistrictID = False, returnHealthProfessionalTypeID = False, returnIsActive = False, returnIsDentist = False, returnIsPrimaryPhysician = False, returnModifiedTime = False, returnNameEmailIDDisplayEmail = False, returnNameID = False, returnNamePhoneIDDisplayPhone = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HealthProfessional/" + str(HealthProfessionalID), verb = "post", return_params_list = return_params, payload = payload_params)

def createHealthProfessional(EntityID = 1, setHealthProfessionalID = None, setCreatedTime = None, setDistrictGroupKey = None, setDistrictID = None, setHealthProfessionalTypeID = None, setIsActive = None, setIsDentist = None, setIsPrimaryPhysician = None, setModifiedTime = None, setNameEmailIDDisplayEmail = None, setNameID = None, setNamePhoneIDDisplayPhone = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnHealthProfessionalID = False, returnCreatedTime = False, returnDistrictGroupKey = False, returnDistrictID = False, returnHealthProfessionalTypeID = False, returnIsActive = False, returnIsDentist = False, returnIsPrimaryPhysician = False, returnModifiedTime = False, returnNameEmailIDDisplayEmail = False, returnNameID = False, returnNamePhoneIDDisplayPhone = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HealthProfessional/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteHealthProfessional(HealthProfessionalID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HealthProfessional/" + str(HealthProfessionalID), verb = "delete")


def getEveryHealthProfessionalType(searchConditions = [], EntityID = 1, returnHealthProfessionalTypeID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every HealthProfessionalType in the district.

    This function returns a dataframe of every HealthProfessionalType in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HealthProfessionalType/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HealthProfessionalType/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getHealthProfessionalType(HealthProfessionalTypeID, EntityID = 1, returnHealthProfessionalTypeID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HealthProfessionalType/" + str(HealthProfessionalTypeID), verb = "get", return_params_list = return_params)

def modifyHealthProfessionalType(HealthProfessionalTypeID, EntityID = 1, setHealthProfessionalTypeID = None, setCode = None, setCodeDescription = None, setCreatedTime = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setModifiedTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnHealthProfessionalTypeID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HealthProfessionalType/" + str(HealthProfessionalTypeID), verb = "post", return_params_list = return_params, payload = payload_params)

def createHealthProfessionalType(EntityID = 1, setHealthProfessionalTypeID = None, setCode = None, setCodeDescription = None, setCreatedTime = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setModifiedTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnHealthProfessionalTypeID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HealthProfessionalType/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteHealthProfessionalType(HealthProfessionalTypeID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HealthProfessionalType/" + str(HealthProfessionalTypeID), verb = "delete")


def getEveryHearingComment(searchConditions = [], EntityID = 1, returnHearingCommentID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every HearingComment in the district.

    This function returns a dataframe of every HearingComment in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HearingComment/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HearingComment/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getHearingComment(HearingCommentID, EntityID = 1, returnHearingCommentID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HearingComment/" + str(HearingCommentID), verb = "get", return_params_list = return_params)

def modifyHearingComment(HearingCommentID, EntityID = 1, setHearingCommentID = None, setCode = None, setCodeDescription = None, setCreatedTime = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setModifiedTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnHearingCommentID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HearingComment/" + str(HearingCommentID), verb = "post", return_params_list = return_params, payload = payload_params)

def createHearingComment(EntityID = 1, setHearingCommentID = None, setCode = None, setCodeDescription = None, setCreatedTime = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setModifiedTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnHearingCommentID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HearingComment/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteHearingComment(HearingCommentID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HearingComment/" + str(HearingCommentID), verb = "delete")


def getEveryHearingDecibelLevel(searchConditions = [], EntityID = 1, returnHearingDecibelLevelID = False, returnCode = False, returnCreatedTime = False, returnDecibelLevel = False, returnDescription = False, returnDistrictID = False, returnHearingDecibelLevelDefaultID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every HearingDecibelLevel in the district.

    This function returns a dataframe of every HearingDecibelLevel in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HearingDecibelLevel/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HearingDecibelLevel/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getHearingDecibelLevel(HearingDecibelLevelID, EntityID = 1, returnHearingDecibelLevelID = False, returnCode = False, returnCreatedTime = False, returnDecibelLevel = False, returnDescription = False, returnDistrictID = False, returnHearingDecibelLevelDefaultID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HearingDecibelLevel/" + str(HearingDecibelLevelID), verb = "get", return_params_list = return_params)

def modifyHearingDecibelLevel(HearingDecibelLevelID, EntityID = 1, setHearingDecibelLevelID = None, setCode = None, setCreatedTime = None, setDecibelLevel = None, setDescription = None, setDistrictID = None, setHearingDecibelLevelDefaultID = None, setIsActive = None, setModifiedTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnHearingDecibelLevelID = False, returnCode = False, returnCreatedTime = False, returnDecibelLevel = False, returnDescription = False, returnDistrictID = False, returnHearingDecibelLevelDefaultID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HearingDecibelLevel/" + str(HearingDecibelLevelID), verb = "post", return_params_list = return_params, payload = payload_params)

def createHearingDecibelLevel(EntityID = 1, setHearingDecibelLevelID = None, setCode = None, setCreatedTime = None, setDecibelLevel = None, setDescription = None, setDistrictID = None, setHearingDecibelLevelDefaultID = None, setIsActive = None, setModifiedTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnHearingDecibelLevelID = False, returnCode = False, returnCreatedTime = False, returnDecibelLevel = False, returnDescription = False, returnDistrictID = False, returnHearingDecibelLevelDefaultID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HearingDecibelLevel/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteHearingDecibelLevel(HearingDecibelLevelID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HearingDecibelLevel/" + str(HearingDecibelLevelID), verb = "delete")


def getEveryHearingDecibelLevelDefault(searchConditions = [], EntityID = 1, returnHearingDecibelLevelDefaultID = False, returnCode = False, returnCreatedTime = False, returnDecibelLevel = False, returnDescription = False, returnModifiedTime = False, returnSkywardHash = False, returnSkywardID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every HearingDecibelLevelDefault in the district.

    This function returns a dataframe of every HearingDecibelLevelDefault in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HearingDecibelLevelDefault/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HearingDecibelLevelDefault/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getHearingDecibelLevelDefault(HearingDecibelLevelDefaultID, EntityID = 1, returnHearingDecibelLevelDefaultID = False, returnCode = False, returnCreatedTime = False, returnDecibelLevel = False, returnDescription = False, returnModifiedTime = False, returnSkywardHash = False, returnSkywardID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HearingDecibelLevelDefault/" + str(HearingDecibelLevelDefaultID), verb = "get", return_params_list = return_params)

def modifyHearingDecibelLevelDefault(HearingDecibelLevelDefaultID, EntityID = 1, setHearingDecibelLevelDefaultID = None, setCode = None, setCreatedTime = None, setDecibelLevel = None, setDescription = None, setModifiedTime = None, setSkywardHash = None, setSkywardID = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnHearingDecibelLevelDefaultID = False, returnCode = False, returnCreatedTime = False, returnDecibelLevel = False, returnDescription = False, returnModifiedTime = False, returnSkywardHash = False, returnSkywardID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HearingDecibelLevelDefault/" + str(HearingDecibelLevelDefaultID), verb = "post", return_params_list = return_params, payload = payload_params)

def createHearingDecibelLevelDefault(EntityID = 1, setHearingDecibelLevelDefaultID = None, setCode = None, setCreatedTime = None, setDecibelLevel = None, setDescription = None, setModifiedTime = None, setSkywardHash = None, setSkywardID = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnHearingDecibelLevelDefaultID = False, returnCode = False, returnCreatedTime = False, returnDecibelLevel = False, returnDescription = False, returnModifiedTime = False, returnSkywardHash = False, returnSkywardID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HearingDecibelLevelDefault/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteHearingDecibelLevelDefault(HearingDecibelLevelDefaultID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HearingDecibelLevelDefault/" + str(HearingDecibelLevelDefaultID), verb = "delete")


def getEveryHearingGuardianNotification(searchConditions = [], EntityID = 1, returnHearingGuardianNotificationID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every HearingGuardianNotification in the district.

    This function returns a dataframe of every HearingGuardianNotification in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HearingGuardianNotification/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HearingGuardianNotification/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getHearingGuardianNotification(HearingGuardianNotificationID, EntityID = 1, returnHearingGuardianNotificationID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HearingGuardianNotification/" + str(HearingGuardianNotificationID), verb = "get", return_params_list = return_params)

def modifyHearingGuardianNotification(HearingGuardianNotificationID, EntityID = 1, setHearingGuardianNotificationID = None, setCode = None, setCodeDescription = None, setCreatedTime = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setModifiedTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnHearingGuardianNotificationID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HearingGuardianNotification/" + str(HearingGuardianNotificationID), verb = "post", return_params_list = return_params, payload = payload_params)

def createHearingGuardianNotification(EntityID = 1, setHearingGuardianNotificationID = None, setCode = None, setCodeDescription = None, setCreatedTime = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setModifiedTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnHearingGuardianNotificationID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HearingGuardianNotification/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteHearingGuardianNotification(HearingGuardianNotificationID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HearingGuardianNotification/" + str(HearingGuardianNotificationID), verb = "delete")


def getEveryHearingGuardianResponse(searchConditions = [], EntityID = 1, returnHearingGuardianResponseID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every HearingGuardianResponse in the district.

    This function returns a dataframe of every HearingGuardianResponse in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HearingGuardianResponse/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HearingGuardianResponse/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getHearingGuardianResponse(HearingGuardianResponseID, EntityID = 1, returnHearingGuardianResponseID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HearingGuardianResponse/" + str(HearingGuardianResponseID), verb = "get", return_params_list = return_params)

def modifyHearingGuardianResponse(HearingGuardianResponseID, EntityID = 1, setHearingGuardianResponseID = None, setCode = None, setCodeDescription = None, setCreatedTime = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setModifiedTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnHearingGuardianResponseID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HearingGuardianResponse/" + str(HearingGuardianResponseID), verb = "post", return_params_list = return_params, payload = payload_params)

def createHearingGuardianResponse(EntityID = 1, setHearingGuardianResponseID = None, setCode = None, setCodeDescription = None, setCreatedTime = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setModifiedTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnHearingGuardianResponseID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HearingGuardianResponse/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteHearingGuardianResponse(HearingGuardianResponseID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HearingGuardianResponse/" + str(HearingGuardianResponseID), verb = "delete")


def getEveryHearingHertzLevel(searchConditions = [], EntityID = 1, returnHearingHertzLevelID = False, returnCode = False, returnCreatedTime = False, returnDescription = False, returnDistrictID = False, returnHearingHertzLevelDefaultID = False, returnHertzLevel = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every HearingHertzLevel in the district.

    This function returns a dataframe of every HearingHertzLevel in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HearingHertzLevel/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HearingHertzLevel/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getHearingHertzLevel(HearingHertzLevelID, EntityID = 1, returnHearingHertzLevelID = False, returnCode = False, returnCreatedTime = False, returnDescription = False, returnDistrictID = False, returnHearingHertzLevelDefaultID = False, returnHertzLevel = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HearingHertzLevel/" + str(HearingHertzLevelID), verb = "get", return_params_list = return_params)

def modifyHearingHertzLevel(HearingHertzLevelID, EntityID = 1, setHearingHertzLevelID = None, setCode = None, setCreatedTime = None, setDescription = None, setDistrictID = None, setHearingHertzLevelDefaultID = None, setHertzLevel = None, setIsActive = None, setModifiedTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnHearingHertzLevelID = False, returnCode = False, returnCreatedTime = False, returnDescription = False, returnDistrictID = False, returnHearingHertzLevelDefaultID = False, returnHertzLevel = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HearingHertzLevel/" + str(HearingHertzLevelID), verb = "post", return_params_list = return_params, payload = payload_params)

def createHearingHertzLevel(EntityID = 1, setHearingHertzLevelID = None, setCode = None, setCreatedTime = None, setDescription = None, setDistrictID = None, setHearingHertzLevelDefaultID = None, setHertzLevel = None, setIsActive = None, setModifiedTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnHearingHertzLevelID = False, returnCode = False, returnCreatedTime = False, returnDescription = False, returnDistrictID = False, returnHearingHertzLevelDefaultID = False, returnHertzLevel = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HearingHertzLevel/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteHearingHertzLevel(HearingHertzLevelID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HearingHertzLevel/" + str(HearingHertzLevelID), verb = "delete")


def getEveryHearingHertzLevelDefault(searchConditions = [], EntityID = 1, returnHearingHertzLevelDefaultID = False, returnCode = False, returnCreatedTime = False, returnDescription = False, returnHertzLevel = False, returnModifiedTime = False, returnSkywardHash = False, returnSkywardID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every HearingHertzLevelDefault in the district.

    This function returns a dataframe of every HearingHertzLevelDefault in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HearingHertzLevelDefault/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HearingHertzLevelDefault/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getHearingHertzLevelDefault(HearingHertzLevelDefaultID, EntityID = 1, returnHearingHertzLevelDefaultID = False, returnCode = False, returnCreatedTime = False, returnDescription = False, returnHertzLevel = False, returnModifiedTime = False, returnSkywardHash = False, returnSkywardID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HearingHertzLevelDefault/" + str(HearingHertzLevelDefaultID), verb = "get", return_params_list = return_params)

def modifyHearingHertzLevelDefault(HearingHertzLevelDefaultID, EntityID = 1, setHearingHertzLevelDefaultID = None, setCode = None, setCreatedTime = None, setDescription = None, setHertzLevel = None, setModifiedTime = None, setSkywardHash = None, setSkywardID = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnHearingHertzLevelDefaultID = False, returnCode = False, returnCreatedTime = False, returnDescription = False, returnHertzLevel = False, returnModifiedTime = False, returnSkywardHash = False, returnSkywardID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HearingHertzLevelDefault/" + str(HearingHertzLevelDefaultID), verb = "post", return_params_list = return_params, payload = payload_params)

def createHearingHertzLevelDefault(EntityID = 1, setHearingHertzLevelDefaultID = None, setCode = None, setCreatedTime = None, setDescription = None, setHertzLevel = None, setModifiedTime = None, setSkywardHash = None, setSkywardID = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnHearingHertzLevelDefaultID = False, returnCode = False, returnCreatedTime = False, returnDescription = False, returnHertzLevel = False, returnModifiedTime = False, returnSkywardHash = False, returnSkywardID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HearingHertzLevelDefault/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteHearingHertzLevelDefault(HearingHertzLevelDefaultID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HearingHertzLevelDefault/" + str(HearingHertzLevelDefaultID), verb = "delete")


def getEveryHearingObservation(searchConditions = [], EntityID = 1, returnHearingObservationID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every HearingObservation in the district.

    This function returns a dataframe of every HearingObservation in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HearingObservation/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HearingObservation/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getHearingObservation(HearingObservationID, EntityID = 1, returnHearingObservationID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HearingObservation/" + str(HearingObservationID), verb = "get", return_params_list = return_params)

def modifyHearingObservation(HearingObservationID, EntityID = 1, setHearingObservationID = None, setCode = None, setCodeDescription = None, setCreatedTime = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setModifiedTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnHearingObservationID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HearingObservation/" + str(HearingObservationID), verb = "post", return_params_list = return_params, payload = payload_params)

def createHearingObservation(EntityID = 1, setHearingObservationID = None, setCode = None, setCodeDescription = None, setCreatedTime = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setModifiedTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnHearingObservationID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HearingObservation/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteHearingObservation(HearingObservationID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HearingObservation/" + str(HearingObservationID), verb = "delete")


def getEveryHearingReferralReason(searchConditions = [], EntityID = 1, returnHearingReferralReasonID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every HearingReferralReason in the district.

    This function returns a dataframe of every HearingReferralReason in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HearingReferralReason/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HearingReferralReason/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getHearingReferralReason(HearingReferralReasonID, EntityID = 1, returnHearingReferralReasonID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HearingReferralReason/" + str(HearingReferralReasonID), verb = "get", return_params_list = return_params)

def modifyHearingReferralReason(HearingReferralReasonID, EntityID = 1, setHearingReferralReasonID = None, setCode = None, setCodeDescription = None, setCreatedTime = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setModifiedTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnHearingReferralReasonID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HearingReferralReason/" + str(HearingReferralReasonID), verb = "post", return_params_list = return_params, payload = payload_params)

def createHearingReferralReason(EntityID = 1, setHearingReferralReasonID = None, setCode = None, setCodeDescription = None, setCreatedTime = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setModifiedTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnHearingReferralReasonID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HearingReferralReason/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteHearingReferralReason(HearingReferralReasonID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HearingReferralReason/" + str(HearingReferralReasonID), verb = "delete")


def getEveryHearingReferralResult(searchConditions = [], EntityID = 1, returnHearingReferralResultID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every HearingReferralResult in the district.

    This function returns a dataframe of every HearingReferralResult in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HearingReferralResult/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HearingReferralResult/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getHearingReferralResult(HearingReferralResultID, EntityID = 1, returnHearingReferralResultID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HearingReferralResult/" + str(HearingReferralResultID), verb = "get", return_params_list = return_params)

def modifyHearingReferralResult(HearingReferralResultID, EntityID = 1, setHearingReferralResultID = None, setCode = None, setCodeDescription = None, setCreatedTime = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setModifiedTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnHearingReferralResultID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HearingReferralResult/" + str(HearingReferralResultID), verb = "post", return_params_list = return_params, payload = payload_params)

def createHearingReferralResult(EntityID = 1, setHearingReferralResultID = None, setCode = None, setCodeDescription = None, setCreatedTime = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setModifiedTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnHearingReferralResultID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HearingReferralResult/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteHearingReferralResult(HearingReferralResultID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HearingReferralResult/" + str(HearingReferralResultID), verb = "delete")


def getEveryHearingScreening(searchConditions = [], EntityID = 1, returnHearingScreeningID = False, returnCombinedResult = False, returnCombinedResultCode = False, returnCreatedTime = False, returnDistrictID = False, returnEntityIDEnrolledIn = False, returnGroupPercentLossLeftEar = False, returnGroupPercentLossRightEar = False, returnHealthProfessionalIDExaminedBy = False, returnIndividualPercentLossLeftEar = False, returnIndividualPercentLossRightEar = False, returnIsKnownCase = False, returnIsVoid = False, returnModifiedTime = False, returnNameID = False, returnNameOfficeVisitID = False, returnObservationDescriptionsListDisplay = False, returnReScreen = False, returnResultLeftEar = False, returnResultLeftEarCode = False, returnResultMiddleEar = False, returnResultMiddleEarCode = False, returnResultRightEar = False, returnResultRightEarCode = False, returnSchoolYearID = False, returnScreeningDate = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnUserIDVoidedBy = False, returnVoidedTime = False, returnVoidNote = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every HearingScreening in the district.

    This function returns a dataframe of every HearingScreening in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HearingScreening/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HearingScreening/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getHearingScreening(HearingScreeningID, EntityID = 1, returnHearingScreeningID = False, returnCombinedResult = False, returnCombinedResultCode = False, returnCreatedTime = False, returnDistrictID = False, returnEntityIDEnrolledIn = False, returnGroupPercentLossLeftEar = False, returnGroupPercentLossRightEar = False, returnHealthProfessionalIDExaminedBy = False, returnIndividualPercentLossLeftEar = False, returnIndividualPercentLossRightEar = False, returnIsKnownCase = False, returnIsVoid = False, returnModifiedTime = False, returnNameID = False, returnNameOfficeVisitID = False, returnObservationDescriptionsListDisplay = False, returnReScreen = False, returnResultLeftEar = False, returnResultLeftEarCode = False, returnResultMiddleEar = False, returnResultMiddleEarCode = False, returnResultRightEar = False, returnResultRightEarCode = False, returnSchoolYearID = False, returnScreeningDate = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnUserIDVoidedBy = False, returnVoidedTime = False, returnVoidNote = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HearingScreening/" + str(HearingScreeningID), verb = "get", return_params_list = return_params)

def modifyHearingScreening(HearingScreeningID, EntityID = 1, setHearingScreeningID = None, setCombinedResult = None, setCombinedResultCode = None, setCreatedTime = None, setDistrictID = None, setEntityIDEnrolledIn = None, setGroupPercentLossLeftEar = None, setGroupPercentLossRightEar = None, setHealthProfessionalIDExaminedBy = None, setIndividualPercentLossLeftEar = None, setIndividualPercentLossRightEar = None, setIsKnownCase = None, setIsVoid = None, setModifiedTime = None, setNameID = None, setNameOfficeVisitID = None, setObservationDescriptionsListDisplay = None, setReScreen = None, setResultLeftEar = None, setResultLeftEarCode = None, setResultMiddleEar = None, setResultMiddleEarCode = None, setResultRightEar = None, setResultRightEarCode = None, setSchoolYearID = None, setScreeningDate = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, setUserIDVoidedBy = None, setVoidedTime = None, setVoidNote = None, returnHearingScreeningID = False, returnCombinedResult = False, returnCombinedResultCode = False, returnCreatedTime = False, returnDistrictID = False, returnEntityIDEnrolledIn = False, returnGroupPercentLossLeftEar = False, returnGroupPercentLossRightEar = False, returnHealthProfessionalIDExaminedBy = False, returnIndividualPercentLossLeftEar = False, returnIndividualPercentLossRightEar = False, returnIsKnownCase = False, returnIsVoid = False, returnModifiedTime = False, returnNameID = False, returnNameOfficeVisitID = False, returnObservationDescriptionsListDisplay = False, returnReScreen = False, returnResultLeftEar = False, returnResultLeftEarCode = False, returnResultMiddleEar = False, returnResultMiddleEarCode = False, returnResultRightEar = False, returnResultRightEarCode = False, returnSchoolYearID = False, returnScreeningDate = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnUserIDVoidedBy = False, returnVoidedTime = False, returnVoidNote = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HearingScreening/" + str(HearingScreeningID), verb = "post", return_params_list = return_params, payload = payload_params)

def createHearingScreening(EntityID = 1, setHearingScreeningID = None, setCombinedResult = None, setCombinedResultCode = None, setCreatedTime = None, setDistrictID = None, setEntityIDEnrolledIn = None, setGroupPercentLossLeftEar = None, setGroupPercentLossRightEar = None, setHealthProfessionalIDExaminedBy = None, setIndividualPercentLossLeftEar = None, setIndividualPercentLossRightEar = None, setIsKnownCase = None, setIsVoid = None, setModifiedTime = None, setNameID = None, setNameOfficeVisitID = None, setObservationDescriptionsListDisplay = None, setReScreen = None, setResultLeftEar = None, setResultLeftEarCode = None, setResultMiddleEar = None, setResultMiddleEarCode = None, setResultRightEar = None, setResultRightEarCode = None, setSchoolYearID = None, setScreeningDate = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, setUserIDVoidedBy = None, setVoidedTime = None, setVoidNote = None, returnHearingScreeningID = False, returnCombinedResult = False, returnCombinedResultCode = False, returnCreatedTime = False, returnDistrictID = False, returnEntityIDEnrolledIn = False, returnGroupPercentLossLeftEar = False, returnGroupPercentLossRightEar = False, returnHealthProfessionalIDExaminedBy = False, returnIndividualPercentLossLeftEar = False, returnIndividualPercentLossRightEar = False, returnIsKnownCase = False, returnIsVoid = False, returnModifiedTime = False, returnNameID = False, returnNameOfficeVisitID = False, returnObservationDescriptionsListDisplay = False, returnReScreen = False, returnResultLeftEar = False, returnResultLeftEarCode = False, returnResultMiddleEar = False, returnResultMiddleEarCode = False, returnResultRightEar = False, returnResultRightEarCode = False, returnSchoolYearID = False, returnScreeningDate = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnUserIDVoidedBy = False, returnVoidedTime = False, returnVoidNote = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HearingScreening/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteHearingScreening(HearingScreeningID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HearingScreening/" + str(HearingScreeningID), verb = "delete")


def getEveryHearingScreeningComment(searchConditions = [], EntityID = 1, returnHearingScreeningCommentID = False, returnCreatedTime = False, returnHearingCommentID = False, returnHearingScreeningID = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every HearingScreeningComment in the district.

    This function returns a dataframe of every HearingScreeningComment in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HearingScreeningComment/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HearingScreeningComment/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getHearingScreeningComment(HearingScreeningCommentID, EntityID = 1, returnHearingScreeningCommentID = False, returnCreatedTime = False, returnHearingCommentID = False, returnHearingScreeningID = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HearingScreeningComment/" + str(HearingScreeningCommentID), verb = "get", return_params_list = return_params)

def modifyHearingScreeningComment(HearingScreeningCommentID, EntityID = 1, setHearingScreeningCommentID = None, setCreatedTime = None, setHearingCommentID = None, setHearingScreeningID = None, setModifiedTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnHearingScreeningCommentID = False, returnCreatedTime = False, returnHearingCommentID = False, returnHearingScreeningID = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HearingScreeningComment/" + str(HearingScreeningCommentID), verb = "post", return_params_list = return_params, payload = payload_params)

def createHearingScreeningComment(EntityID = 1, setHearingScreeningCommentID = None, setCreatedTime = None, setHearingCommentID = None, setHearingScreeningID = None, setModifiedTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnHearingScreeningCommentID = False, returnCreatedTime = False, returnHearingCommentID = False, returnHearingScreeningID = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HearingScreeningComment/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteHearingScreeningComment(HearingScreeningCommentID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HearingScreeningComment/" + str(HearingScreeningCommentID), verb = "delete")


def getEveryHearingScreeningNote(searchConditions = [], EntityID = 1, returnHearingScreeningNoteID = False, returnCreatedTime = False, returnHearingScreeningID = False, returnModifiedTime = False, returnNote = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every HearingScreeningNote in the district.

    This function returns a dataframe of every HearingScreeningNote in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HearingScreeningNote/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HearingScreeningNote/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getHearingScreeningNote(HearingScreeningNoteID, EntityID = 1, returnHearingScreeningNoteID = False, returnCreatedTime = False, returnHearingScreeningID = False, returnModifiedTime = False, returnNote = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HearingScreeningNote/" + str(HearingScreeningNoteID), verb = "get", return_params_list = return_params)

def modifyHearingScreeningNote(HearingScreeningNoteID, EntityID = 1, setHearingScreeningNoteID = None, setCreatedTime = None, setHearingScreeningID = None, setModifiedTime = None, setNote = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnHearingScreeningNoteID = False, returnCreatedTime = False, returnHearingScreeningID = False, returnModifiedTime = False, returnNote = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HearingScreeningNote/" + str(HearingScreeningNoteID), verb = "post", return_params_list = return_params, payload = payload_params)

def createHearingScreeningNote(EntityID = 1, setHearingScreeningNoteID = None, setCreatedTime = None, setHearingScreeningID = None, setModifiedTime = None, setNote = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnHearingScreeningNoteID = False, returnCreatedTime = False, returnHearingScreeningID = False, returnModifiedTime = False, returnNote = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HearingScreeningNote/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteHearingScreeningNote(HearingScreeningNoteID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HearingScreeningNote/" + str(HearingScreeningNoteID), verb = "delete")


def getEveryHearingScreeningObservation(searchConditions = [], EntityID = 1, returnHearingScreeningObservationID = False, returnCreatedTime = False, returnHearingObservationID = False, returnHearingScreeningID = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every HearingScreeningObservation in the district.

    This function returns a dataframe of every HearingScreeningObservation in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HearingScreeningObservation/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HearingScreeningObservation/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getHearingScreeningObservation(HearingScreeningObservationID, EntityID = 1, returnHearingScreeningObservationID = False, returnCreatedTime = False, returnHearingObservationID = False, returnHearingScreeningID = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HearingScreeningObservation/" + str(HearingScreeningObservationID), verb = "get", return_params_list = return_params)

def modifyHearingScreeningObservation(HearingScreeningObservationID, EntityID = 1, setHearingScreeningObservationID = None, setCreatedTime = None, setHearingObservationID = None, setHearingScreeningID = None, setModifiedTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnHearingScreeningObservationID = False, returnCreatedTime = False, returnHearingObservationID = False, returnHearingScreeningID = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HearingScreeningObservation/" + str(HearingScreeningObservationID), verb = "post", return_params_list = return_params, payload = payload_params)

def createHearingScreeningObservation(EntityID = 1, setHearingScreeningObservationID = None, setCreatedTime = None, setHearingObservationID = None, setHearingScreeningID = None, setModifiedTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnHearingScreeningObservationID = False, returnCreatedTime = False, returnHearingObservationID = False, returnHearingScreeningID = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HearingScreeningObservation/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteHearingScreeningObservation(HearingScreeningObservationID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HearingScreeningObservation/" + str(HearingScreeningObservationID), verb = "delete")


def getEveryHearingScreeningReferral(searchConditions = [], EntityID = 1, returnHearingScreeningReferralID = False, returnCompletionDate = False, returnCreatedTime = False, returnHealthProfessionalIDReferredBy = False, returnHealthProfessionalIDReferredTo = False, returnHearingGuardianNotificationID = False, returnHearingGuardianResponseID = False, returnHearingReferralReasonID = False, returnHearingReferralResultID = False, returnHearingScreeningID = False, returnIsVoid = False, returnModifiedTime = False, returnReferralCompleted = False, returnReferralDate = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnUserIDVoidedBy = False, returnVoidedTime = False, returnVoidNote = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every HearingScreeningReferral in the district.

    This function returns a dataframe of every HearingScreeningReferral in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HearingScreeningReferral/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HearingScreeningReferral/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getHearingScreeningReferral(HearingScreeningReferralID, EntityID = 1, returnHearingScreeningReferralID = False, returnCompletionDate = False, returnCreatedTime = False, returnHealthProfessionalIDReferredBy = False, returnHealthProfessionalIDReferredTo = False, returnHearingGuardianNotificationID = False, returnHearingGuardianResponseID = False, returnHearingReferralReasonID = False, returnHearingReferralResultID = False, returnHearingScreeningID = False, returnIsVoid = False, returnModifiedTime = False, returnReferralCompleted = False, returnReferralDate = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnUserIDVoidedBy = False, returnVoidedTime = False, returnVoidNote = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HearingScreeningReferral/" + str(HearingScreeningReferralID), verb = "get", return_params_list = return_params)

def modifyHearingScreeningReferral(HearingScreeningReferralID, EntityID = 1, setHearingScreeningReferralID = None, setCompletionDate = None, setCreatedTime = None, setHealthProfessionalIDReferredBy = None, setHealthProfessionalIDReferredTo = None, setHearingGuardianNotificationID = None, setHearingGuardianResponseID = None, setHearingReferralReasonID = None, setHearingReferralResultID = None, setHearingScreeningID = None, setIsVoid = None, setModifiedTime = None, setReferralCompleted = None, setReferralDate = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, setUserIDVoidedBy = None, setVoidedTime = None, setVoidNote = None, returnHearingScreeningReferralID = False, returnCompletionDate = False, returnCreatedTime = False, returnHealthProfessionalIDReferredBy = False, returnHealthProfessionalIDReferredTo = False, returnHearingGuardianNotificationID = False, returnHearingGuardianResponseID = False, returnHearingReferralReasonID = False, returnHearingReferralResultID = False, returnHearingScreeningID = False, returnIsVoid = False, returnModifiedTime = False, returnReferralCompleted = False, returnReferralDate = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnUserIDVoidedBy = False, returnVoidedTime = False, returnVoidNote = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HearingScreeningReferral/" + str(HearingScreeningReferralID), verb = "post", return_params_list = return_params, payload = payload_params)

def createHearingScreeningReferral(EntityID = 1, setHearingScreeningReferralID = None, setCompletionDate = None, setCreatedTime = None, setHealthProfessionalIDReferredBy = None, setHealthProfessionalIDReferredTo = None, setHearingGuardianNotificationID = None, setHearingGuardianResponseID = None, setHearingReferralReasonID = None, setHearingReferralResultID = None, setHearingScreeningID = None, setIsVoid = None, setModifiedTime = None, setReferralCompleted = None, setReferralDate = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, setUserIDVoidedBy = None, setVoidedTime = None, setVoidNote = None, returnHearingScreeningReferralID = False, returnCompletionDate = False, returnCreatedTime = False, returnHealthProfessionalIDReferredBy = False, returnHealthProfessionalIDReferredTo = False, returnHearingGuardianNotificationID = False, returnHearingGuardianResponseID = False, returnHearingReferralReasonID = False, returnHearingReferralResultID = False, returnHearingScreeningID = False, returnIsVoid = False, returnModifiedTime = False, returnReferralCompleted = False, returnReferralDate = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnUserIDVoidedBy = False, returnVoidedTime = False, returnVoidNote = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HearingScreeningReferral/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteHearingScreeningReferral(HearingScreeningReferralID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HearingScreeningReferral/" + str(HearingScreeningReferralID), verb = "delete")


def getEveryHearingScreeningSecuredNote(searchConditions = [], EntityID = 1, returnHearingScreeningSecuredNoteID = False, returnCreatedTime = False, returnHearingScreeningID = False, returnModifiedTime = False, returnNote = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every HearingScreeningSecuredNote in the district.

    This function returns a dataframe of every HearingScreeningSecuredNote in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HearingScreeningSecuredNote/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HearingScreeningSecuredNote/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getHearingScreeningSecuredNote(HearingScreeningSecuredNoteID, EntityID = 1, returnHearingScreeningSecuredNoteID = False, returnCreatedTime = False, returnHearingScreeningID = False, returnModifiedTime = False, returnNote = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HearingScreeningSecuredNote/" + str(HearingScreeningSecuredNoteID), verb = "get", return_params_list = return_params)

def modifyHearingScreeningSecuredNote(HearingScreeningSecuredNoteID, EntityID = 1, setHearingScreeningSecuredNoteID = None, setCreatedTime = None, setHearingScreeningID = None, setModifiedTime = None, setNote = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnHearingScreeningSecuredNoteID = False, returnCreatedTime = False, returnHearingScreeningID = False, returnModifiedTime = False, returnNote = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HearingScreeningSecuredNote/" + str(HearingScreeningSecuredNoteID), verb = "post", return_params_list = return_params, payload = payload_params)

def createHearingScreeningSecuredNote(EntityID = 1, setHearingScreeningSecuredNoteID = None, setCreatedTime = None, setHearingScreeningID = None, setModifiedTime = None, setNote = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnHearingScreeningSecuredNoteID = False, returnCreatedTime = False, returnHearingScreeningID = False, returnModifiedTime = False, returnNote = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HearingScreeningSecuredNote/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteHearingScreeningSecuredNote(HearingScreeningSecuredNoteID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HearingScreeningSecuredNote/" + str(HearingScreeningSecuredNoteID), verb = "delete")


def getEveryHearingScreeningThreshold(searchConditions = [], EntityID = 1, returnHearingScreeningThresholdID = False, returnCreatedTime = False, returnHearingDecibelLevelIDLeftEar = False, returnHearingDecibelLevelIDRightEar = False, returnHearingHertzLevelID = False, returnHearingScreeningID = False, returnLeftEarPassed = False, returnModifiedTime = False, returnRightEarPassed = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every HearingScreeningThreshold in the district.

    This function returns a dataframe of every HearingScreeningThreshold in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HearingScreeningThreshold/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HearingScreeningThreshold/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getHearingScreeningThreshold(HearingScreeningThresholdID, EntityID = 1, returnHearingScreeningThresholdID = False, returnCreatedTime = False, returnHearingDecibelLevelIDLeftEar = False, returnHearingDecibelLevelIDRightEar = False, returnHearingHertzLevelID = False, returnHearingScreeningID = False, returnLeftEarPassed = False, returnModifiedTime = False, returnRightEarPassed = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HearingScreeningThreshold/" + str(HearingScreeningThresholdID), verb = "get", return_params_list = return_params)

def modifyHearingScreeningThreshold(HearingScreeningThresholdID, EntityID = 1, setHearingScreeningThresholdID = None, setCreatedTime = None, setHearingDecibelLevelIDLeftEar = None, setHearingDecibelLevelIDRightEar = None, setHearingHertzLevelID = None, setHearingScreeningID = None, setLeftEarPassed = None, setModifiedTime = None, setRightEarPassed = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnHearingScreeningThresholdID = False, returnCreatedTime = False, returnHearingDecibelLevelIDLeftEar = False, returnHearingDecibelLevelIDRightEar = False, returnHearingHertzLevelID = False, returnHearingScreeningID = False, returnLeftEarPassed = False, returnModifiedTime = False, returnRightEarPassed = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HearingScreeningThreshold/" + str(HearingScreeningThresholdID), verb = "post", return_params_list = return_params, payload = payload_params)

def createHearingScreeningThreshold(EntityID = 1, setHearingScreeningThresholdID = None, setCreatedTime = None, setHearingDecibelLevelIDLeftEar = None, setHearingDecibelLevelIDRightEar = None, setHearingHertzLevelID = None, setHearingScreeningID = None, setLeftEarPassed = None, setModifiedTime = None, setRightEarPassed = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnHearingScreeningThresholdID = False, returnCreatedTime = False, returnHearingDecibelLevelIDLeftEar = False, returnHearingDecibelLevelIDRightEar = False, returnHearingHertzLevelID = False, returnHearingScreeningID = False, returnLeftEarPassed = False, returnModifiedTime = False, returnRightEarPassed = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HearingScreeningThreshold/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteHearingScreeningThreshold(HearingScreeningThresholdID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HearingScreeningThreshold/" + str(HearingScreeningThresholdID), verb = "delete")


def getEveryInjury(searchConditions = [], EntityID = 1, returnInjuryID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every Injury in the district.

    This function returns a dataframe of every Injury in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/Injury/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/Injury/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getInjury(InjuryID, EntityID = 1, returnInjuryID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/Injury/" + str(InjuryID), verb = "get", return_params_list = return_params)

def modifyInjury(InjuryID, EntityID = 1, setInjuryID = None, setCode = None, setCodeDescription = None, setCreatedTime = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setModifiedTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnInjuryID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/Injury/" + str(InjuryID), verb = "post", return_params_list = return_params, payload = payload_params)

def createInjury(EntityID = 1, setInjuryID = None, setCode = None, setCodeDescription = None, setCreatedTime = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setModifiedTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnInjuryID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/Injury/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteInjury(InjuryID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/Injury/" + str(InjuryID), verb = "delete")


def getEveryInjuryOccurrence(searchConditions = [], EntityID = 1, returnInjuryOccurrenceID = False, returnBodyParts = False, returnCreatedTime = False, returnDaysMissed = False, returnDistrictID = False, returnHealthProfessionalID = False, returnInjuryDateTime = False, returnInjuryDateTimeDate = False, returnInjuryDateTimeTime = False, returnIsImmediateCareRequired = False, returnIsVoid = False, returnLocationID = False, returnModifiedTime = False, returnNameID = False, returnNameIDReportedBy = False, returnNameIDRespondedBy = False, returnReportFileDate = False, returnSchoolID = False, returnSchoolYearID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnUserIDVoidedBy = False, returnVoidedTime = False, returnVoidNote = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every InjuryOccurrence in the district.

    This function returns a dataframe of every InjuryOccurrence in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/InjuryOccurrence/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/InjuryOccurrence/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getInjuryOccurrence(InjuryOccurrenceID, EntityID = 1, returnInjuryOccurrenceID = False, returnBodyParts = False, returnCreatedTime = False, returnDaysMissed = False, returnDistrictID = False, returnHealthProfessionalID = False, returnInjuryDateTime = False, returnInjuryDateTimeDate = False, returnInjuryDateTimeTime = False, returnIsImmediateCareRequired = False, returnIsVoid = False, returnLocationID = False, returnModifiedTime = False, returnNameID = False, returnNameIDReportedBy = False, returnNameIDRespondedBy = False, returnReportFileDate = False, returnSchoolID = False, returnSchoolYearID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnUserIDVoidedBy = False, returnVoidedTime = False, returnVoidNote = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/InjuryOccurrence/" + str(InjuryOccurrenceID), verb = "get", return_params_list = return_params)

def modifyInjuryOccurrence(InjuryOccurrenceID, EntityID = 1, setInjuryOccurrenceID = None, setBodyParts = None, setCreatedTime = None, setDaysMissed = None, setDistrictID = None, setHealthProfessionalID = None, setInjuryDateTime = None, setInjuryDateTimeDate = None, setInjuryDateTimeTime = None, setIsImmediateCareRequired = None, setIsVoid = None, setLocationID = None, setModifiedTime = None, setNameID = None, setNameIDReportedBy = None, setNameIDRespondedBy = None, setReportFileDate = None, setSchoolID = None, setSchoolYearID = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, setUserIDVoidedBy = None, setVoidedTime = None, setVoidNote = None, returnInjuryOccurrenceID = False, returnBodyParts = False, returnCreatedTime = False, returnDaysMissed = False, returnDistrictID = False, returnHealthProfessionalID = False, returnInjuryDateTime = False, returnInjuryDateTimeDate = False, returnInjuryDateTimeTime = False, returnIsImmediateCareRequired = False, returnIsVoid = False, returnLocationID = False, returnModifiedTime = False, returnNameID = False, returnNameIDReportedBy = False, returnNameIDRespondedBy = False, returnReportFileDate = False, returnSchoolID = False, returnSchoolYearID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnUserIDVoidedBy = False, returnVoidedTime = False, returnVoidNote = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/InjuryOccurrence/" + str(InjuryOccurrenceID), verb = "post", return_params_list = return_params, payload = payload_params)

def createInjuryOccurrence(EntityID = 1, setInjuryOccurrenceID = None, setBodyParts = None, setCreatedTime = None, setDaysMissed = None, setDistrictID = None, setHealthProfessionalID = None, setInjuryDateTime = None, setInjuryDateTimeDate = None, setInjuryDateTimeTime = None, setIsImmediateCareRequired = None, setIsVoid = None, setLocationID = None, setModifiedTime = None, setNameID = None, setNameIDReportedBy = None, setNameIDRespondedBy = None, setReportFileDate = None, setSchoolID = None, setSchoolYearID = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, setUserIDVoidedBy = None, setVoidedTime = None, setVoidNote = None, returnInjuryOccurrenceID = False, returnBodyParts = False, returnCreatedTime = False, returnDaysMissed = False, returnDistrictID = False, returnHealthProfessionalID = False, returnInjuryDateTime = False, returnInjuryDateTimeDate = False, returnInjuryDateTimeTime = False, returnIsImmediateCareRequired = False, returnIsVoid = False, returnLocationID = False, returnModifiedTime = False, returnNameID = False, returnNameIDReportedBy = False, returnNameIDRespondedBy = False, returnReportFileDate = False, returnSchoolID = False, returnSchoolYearID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnUserIDVoidedBy = False, returnVoidedTime = False, returnVoidNote = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/InjuryOccurrence/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteInjuryOccurrence(InjuryOccurrenceID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/InjuryOccurrence/" + str(InjuryOccurrenceID), verb = "delete")


def getEveryInjuryOccurrenceBodyPart(searchConditions = [], EntityID = 1, returnInjuryOccurrenceBodyPartID = False, returnBodyPartID = False, returnCreatedTime = False, returnInjuryOccurrenceID = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every InjuryOccurrenceBodyPart in the district.

    This function returns a dataframe of every InjuryOccurrenceBodyPart in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/InjuryOccurrenceBodyPart/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/InjuryOccurrenceBodyPart/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getInjuryOccurrenceBodyPart(InjuryOccurrenceBodyPartID, EntityID = 1, returnInjuryOccurrenceBodyPartID = False, returnBodyPartID = False, returnCreatedTime = False, returnInjuryOccurrenceID = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/InjuryOccurrenceBodyPart/" + str(InjuryOccurrenceBodyPartID), verb = "get", return_params_list = return_params)

def modifyInjuryOccurrenceBodyPart(InjuryOccurrenceBodyPartID, EntityID = 1, setInjuryOccurrenceBodyPartID = None, setBodyPartID = None, setCreatedTime = None, setInjuryOccurrenceID = None, setModifiedTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnInjuryOccurrenceBodyPartID = False, returnBodyPartID = False, returnCreatedTime = False, returnInjuryOccurrenceID = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/InjuryOccurrenceBodyPart/" + str(InjuryOccurrenceBodyPartID), verb = "post", return_params_list = return_params, payload = payload_params)

def createInjuryOccurrenceBodyPart(EntityID = 1, setInjuryOccurrenceBodyPartID = None, setBodyPartID = None, setCreatedTime = None, setInjuryOccurrenceID = None, setModifiedTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnInjuryOccurrenceBodyPartID = False, returnBodyPartID = False, returnCreatedTime = False, returnInjuryOccurrenceID = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/InjuryOccurrenceBodyPart/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteInjuryOccurrenceBodyPart(InjuryOccurrenceBodyPartID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/InjuryOccurrenceBodyPart/" + str(InjuryOccurrenceBodyPartID), verb = "delete")


def getEveryInjuryOccurrenceBodyPartInjury(searchConditions = [], EntityID = 1, returnInjuryOccurrenceBodyPartInjuryID = False, returnCreatedTime = False, returnInjuryID = False, returnInjuryOccurrenceBodyPartID = False, returnModifiedTime = False, returnTreatments = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every InjuryOccurrenceBodyPartInjury in the district.

    This function returns a dataframe of every InjuryOccurrenceBodyPartInjury in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/InjuryOccurrenceBodyPartInjury/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/InjuryOccurrenceBodyPartInjury/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getInjuryOccurrenceBodyPartInjury(InjuryOccurrenceBodyPartInjuryID, EntityID = 1, returnInjuryOccurrenceBodyPartInjuryID = False, returnCreatedTime = False, returnInjuryID = False, returnInjuryOccurrenceBodyPartID = False, returnModifiedTime = False, returnTreatments = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/InjuryOccurrenceBodyPartInjury/" + str(InjuryOccurrenceBodyPartInjuryID), verb = "get", return_params_list = return_params)

def modifyInjuryOccurrenceBodyPartInjury(InjuryOccurrenceBodyPartInjuryID, EntityID = 1, setInjuryOccurrenceBodyPartInjuryID = None, setCreatedTime = None, setInjuryID = None, setInjuryOccurrenceBodyPartID = None, setModifiedTime = None, setTreatments = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnInjuryOccurrenceBodyPartInjuryID = False, returnCreatedTime = False, returnInjuryID = False, returnInjuryOccurrenceBodyPartID = False, returnModifiedTime = False, returnTreatments = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/InjuryOccurrenceBodyPartInjury/" + str(InjuryOccurrenceBodyPartInjuryID), verb = "post", return_params_list = return_params, payload = payload_params)

def createInjuryOccurrenceBodyPartInjury(EntityID = 1, setInjuryOccurrenceBodyPartInjuryID = None, setCreatedTime = None, setInjuryID = None, setInjuryOccurrenceBodyPartID = None, setModifiedTime = None, setTreatments = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnInjuryOccurrenceBodyPartInjuryID = False, returnCreatedTime = False, returnInjuryID = False, returnInjuryOccurrenceBodyPartID = False, returnModifiedTime = False, returnTreatments = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/InjuryOccurrenceBodyPartInjury/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteInjuryOccurrenceBodyPartInjury(InjuryOccurrenceBodyPartInjuryID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/InjuryOccurrenceBodyPartInjury/" + str(InjuryOccurrenceBodyPartInjuryID), verb = "delete")


def getEveryInjuryOccurrenceBodyPartInjuryTreatment(searchConditions = [], EntityID = 1, returnInjuryOccurrenceBodyPartInjuryTreatmentID = False, returnCreatedTime = False, returnInjuryOccurrenceBodyPartInjuryID = False, returnModifiedTime = False, returnTreatmentID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every InjuryOccurrenceBodyPartInjuryTreatment in the district.

    This function returns a dataframe of every InjuryOccurrenceBodyPartInjuryTreatment in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/InjuryOccurrenceBodyPartInjuryTreatment/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/InjuryOccurrenceBodyPartInjuryTreatment/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getInjuryOccurrenceBodyPartInjuryTreatment(InjuryOccurrenceBodyPartInjuryTreatmentID, EntityID = 1, returnInjuryOccurrenceBodyPartInjuryTreatmentID = False, returnCreatedTime = False, returnInjuryOccurrenceBodyPartInjuryID = False, returnModifiedTime = False, returnTreatmentID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/InjuryOccurrenceBodyPartInjuryTreatment/" + str(InjuryOccurrenceBodyPartInjuryTreatmentID), verb = "get", return_params_list = return_params)

def modifyInjuryOccurrenceBodyPartInjuryTreatment(InjuryOccurrenceBodyPartInjuryTreatmentID, EntityID = 1, setInjuryOccurrenceBodyPartInjuryTreatmentID = None, setCreatedTime = None, setInjuryOccurrenceBodyPartInjuryID = None, setModifiedTime = None, setTreatmentID = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnInjuryOccurrenceBodyPartInjuryTreatmentID = False, returnCreatedTime = False, returnInjuryOccurrenceBodyPartInjuryID = False, returnModifiedTime = False, returnTreatmentID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/InjuryOccurrenceBodyPartInjuryTreatment/" + str(InjuryOccurrenceBodyPartInjuryTreatmentID), verb = "post", return_params_list = return_params, payload = payload_params)

def createInjuryOccurrenceBodyPartInjuryTreatment(EntityID = 1, setInjuryOccurrenceBodyPartInjuryTreatmentID = None, setCreatedTime = None, setInjuryOccurrenceBodyPartInjuryID = None, setModifiedTime = None, setTreatmentID = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnInjuryOccurrenceBodyPartInjuryTreatmentID = False, returnCreatedTime = False, returnInjuryOccurrenceBodyPartInjuryID = False, returnModifiedTime = False, returnTreatmentID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/InjuryOccurrenceBodyPartInjuryTreatment/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteInjuryOccurrenceBodyPartInjuryTreatment(InjuryOccurrenceBodyPartInjuryTreatmentID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/InjuryOccurrenceBodyPartInjuryTreatment/" + str(InjuryOccurrenceBodyPartInjuryTreatmentID), verb = "delete")


def getEveryInjuryOccurrenceComment(searchConditions = [], EntityID = 1, returnInjuryOccurrenceCommentID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every InjuryOccurrenceComment in the district.

    This function returns a dataframe of every InjuryOccurrenceComment in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/InjuryOccurrenceComment/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/InjuryOccurrenceComment/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getInjuryOccurrenceComment(InjuryOccurrenceCommentID, EntityID = 1, returnInjuryOccurrenceCommentID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/InjuryOccurrenceComment/" + str(InjuryOccurrenceCommentID), verb = "get", return_params_list = return_params)

def modifyInjuryOccurrenceComment(InjuryOccurrenceCommentID, EntityID = 1, setInjuryOccurrenceCommentID = None, setCode = None, setCodeDescription = None, setCreatedTime = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setModifiedTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnInjuryOccurrenceCommentID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/InjuryOccurrenceComment/" + str(InjuryOccurrenceCommentID), verb = "post", return_params_list = return_params, payload = payload_params)

def createInjuryOccurrenceComment(EntityID = 1, setInjuryOccurrenceCommentID = None, setCode = None, setCodeDescription = None, setCreatedTime = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setModifiedTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnInjuryOccurrenceCommentID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/InjuryOccurrenceComment/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteInjuryOccurrenceComment(InjuryOccurrenceCommentID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/InjuryOccurrenceComment/" + str(InjuryOccurrenceCommentID), verb = "delete")


def getEveryInjuryOccurrenceGuardianNotification(searchConditions = [], EntityID = 1, returnInjuryOccurrenceGuardianNotificationID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every InjuryOccurrenceGuardianNotification in the district.

    This function returns a dataframe of every InjuryOccurrenceGuardianNotification in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/InjuryOccurrenceGuardianNotification/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/InjuryOccurrenceGuardianNotification/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getInjuryOccurrenceGuardianNotification(InjuryOccurrenceGuardianNotificationID, EntityID = 1, returnInjuryOccurrenceGuardianNotificationID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/InjuryOccurrenceGuardianNotification/" + str(InjuryOccurrenceGuardianNotificationID), verb = "get", return_params_list = return_params)

def modifyInjuryOccurrenceGuardianNotification(InjuryOccurrenceGuardianNotificationID, EntityID = 1, setInjuryOccurrenceGuardianNotificationID = None, setCode = None, setCodeDescription = None, setCreatedTime = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setModifiedTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnInjuryOccurrenceGuardianNotificationID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/InjuryOccurrenceGuardianNotification/" + str(InjuryOccurrenceGuardianNotificationID), verb = "post", return_params_list = return_params, payload = payload_params)

def createInjuryOccurrenceGuardianNotification(EntityID = 1, setInjuryOccurrenceGuardianNotificationID = None, setCode = None, setCodeDescription = None, setCreatedTime = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setModifiedTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnInjuryOccurrenceGuardianNotificationID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/InjuryOccurrenceGuardianNotification/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteInjuryOccurrenceGuardianNotification(InjuryOccurrenceGuardianNotificationID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/InjuryOccurrenceGuardianNotification/" + str(InjuryOccurrenceGuardianNotificationID), verb = "delete")


def getEveryInjuryOccurrenceGuardianResponse(searchConditions = [], EntityID = 1, returnInjuryOccurrenceGuardianResponseID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every InjuryOccurrenceGuardianResponse in the district.

    This function returns a dataframe of every InjuryOccurrenceGuardianResponse in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/InjuryOccurrenceGuardianResponse/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/InjuryOccurrenceGuardianResponse/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getInjuryOccurrenceGuardianResponse(InjuryOccurrenceGuardianResponseID, EntityID = 1, returnInjuryOccurrenceGuardianResponseID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/InjuryOccurrenceGuardianResponse/" + str(InjuryOccurrenceGuardianResponseID), verb = "get", return_params_list = return_params)

def modifyInjuryOccurrenceGuardianResponse(InjuryOccurrenceGuardianResponseID, EntityID = 1, setInjuryOccurrenceGuardianResponseID = None, setCode = None, setCodeDescription = None, setCreatedTime = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setModifiedTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnInjuryOccurrenceGuardianResponseID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/InjuryOccurrenceGuardianResponse/" + str(InjuryOccurrenceGuardianResponseID), verb = "post", return_params_list = return_params, payload = payload_params)

def createInjuryOccurrenceGuardianResponse(EntityID = 1, setInjuryOccurrenceGuardianResponseID = None, setCode = None, setCodeDescription = None, setCreatedTime = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setModifiedTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnInjuryOccurrenceGuardianResponseID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/InjuryOccurrenceGuardianResponse/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteInjuryOccurrenceGuardianResponse(InjuryOccurrenceGuardianResponseID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/InjuryOccurrenceGuardianResponse/" + str(InjuryOccurrenceGuardianResponseID), verb = "delete")


def getEveryInjuryOccurrenceInjuryOccurrenceComment(searchConditions = [], EntityID = 1, returnInjuryOccurrenceInjuryOccurrenceCommentID = False, returnCreatedTime = False, returnInjuryOccurrenceCommentID = False, returnInjuryOccurrenceID = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every InjuryOccurrenceInjuryOccurrenceComment in the district.

    This function returns a dataframe of every InjuryOccurrenceInjuryOccurrenceComment in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/InjuryOccurrenceInjuryOccurrenceComment/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/InjuryOccurrenceInjuryOccurrenceComment/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getInjuryOccurrenceInjuryOccurrenceComment(InjuryOccurrenceInjuryOccurrenceCommentID, EntityID = 1, returnInjuryOccurrenceInjuryOccurrenceCommentID = False, returnCreatedTime = False, returnInjuryOccurrenceCommentID = False, returnInjuryOccurrenceID = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/InjuryOccurrenceInjuryOccurrenceComment/" + str(InjuryOccurrenceInjuryOccurrenceCommentID), verb = "get", return_params_list = return_params)

def modifyInjuryOccurrenceInjuryOccurrenceComment(InjuryOccurrenceInjuryOccurrenceCommentID, EntityID = 1, setInjuryOccurrenceInjuryOccurrenceCommentID = None, setCreatedTime = None, setInjuryOccurrenceCommentID = None, setInjuryOccurrenceID = None, setModifiedTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnInjuryOccurrenceInjuryOccurrenceCommentID = False, returnCreatedTime = False, returnInjuryOccurrenceCommentID = False, returnInjuryOccurrenceID = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/InjuryOccurrenceInjuryOccurrenceComment/" + str(InjuryOccurrenceInjuryOccurrenceCommentID), verb = "post", return_params_list = return_params, payload = payload_params)

def createInjuryOccurrenceInjuryOccurrenceComment(EntityID = 1, setInjuryOccurrenceInjuryOccurrenceCommentID = None, setCreatedTime = None, setInjuryOccurrenceCommentID = None, setInjuryOccurrenceID = None, setModifiedTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnInjuryOccurrenceInjuryOccurrenceCommentID = False, returnCreatedTime = False, returnInjuryOccurrenceCommentID = False, returnInjuryOccurrenceID = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/InjuryOccurrenceInjuryOccurrenceComment/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteInjuryOccurrenceInjuryOccurrenceComment(InjuryOccurrenceInjuryOccurrenceCommentID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/InjuryOccurrenceInjuryOccurrenceComment/" + str(InjuryOccurrenceInjuryOccurrenceCommentID), verb = "delete")


def getEveryInjuryOccurrenceNote(searchConditions = [], EntityID = 1, returnInjuryOccurrenceNoteID = False, returnCreatedTime = False, returnInjuryOccurrenceID = False, returnModifiedTime = False, returnNote = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every InjuryOccurrenceNote in the district.

    This function returns a dataframe of every InjuryOccurrenceNote in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/InjuryOccurrenceNote/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/InjuryOccurrenceNote/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getInjuryOccurrenceNote(InjuryOccurrenceNoteID, EntityID = 1, returnInjuryOccurrenceNoteID = False, returnCreatedTime = False, returnInjuryOccurrenceID = False, returnModifiedTime = False, returnNote = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/InjuryOccurrenceNote/" + str(InjuryOccurrenceNoteID), verb = "get", return_params_list = return_params)

def modifyInjuryOccurrenceNote(InjuryOccurrenceNoteID, EntityID = 1, setInjuryOccurrenceNoteID = None, setCreatedTime = None, setInjuryOccurrenceID = None, setModifiedTime = None, setNote = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnInjuryOccurrenceNoteID = False, returnCreatedTime = False, returnInjuryOccurrenceID = False, returnModifiedTime = False, returnNote = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/InjuryOccurrenceNote/" + str(InjuryOccurrenceNoteID), verb = "post", return_params_list = return_params, payload = payload_params)

def createInjuryOccurrenceNote(EntityID = 1, setInjuryOccurrenceNoteID = None, setCreatedTime = None, setInjuryOccurrenceID = None, setModifiedTime = None, setNote = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnInjuryOccurrenceNoteID = False, returnCreatedTime = False, returnInjuryOccurrenceID = False, returnModifiedTime = False, returnNote = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/InjuryOccurrenceNote/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteInjuryOccurrenceNote(InjuryOccurrenceNoteID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/InjuryOccurrenceNote/" + str(InjuryOccurrenceNoteID), verb = "delete")


def getEveryInjuryOccurrenceReferral(searchConditions = [], EntityID = 1, returnInjuryOccurrenceReferralID = False, returnCompletionDate = False, returnCreatedTime = False, returnHealthProfessionalIDReferredBy = False, returnHealthProfessionalIDReferredTo = False, returnInjuryOccurrenceGuardianNotificationID = False, returnInjuryOccurrenceGuardianResponseID = False, returnInjuryOccurrenceID = False, returnInjuryOccurrenceReferralReasonID = False, returnInjuryOccurrenceReferralResultID = False, returnIsVoid = False, returnModifiedTime = False, returnReferralCompleted = False, returnReferralDate = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnUserIDVoidedBy = False, returnVoidedTime = False, returnVoidNote = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every InjuryOccurrenceReferral in the district.

    This function returns a dataframe of every InjuryOccurrenceReferral in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/InjuryOccurrenceReferral/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/InjuryOccurrenceReferral/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getInjuryOccurrenceReferral(InjuryOccurrenceReferralID, EntityID = 1, returnInjuryOccurrenceReferralID = False, returnCompletionDate = False, returnCreatedTime = False, returnHealthProfessionalIDReferredBy = False, returnHealthProfessionalIDReferredTo = False, returnInjuryOccurrenceGuardianNotificationID = False, returnInjuryOccurrenceGuardianResponseID = False, returnInjuryOccurrenceID = False, returnInjuryOccurrenceReferralReasonID = False, returnInjuryOccurrenceReferralResultID = False, returnIsVoid = False, returnModifiedTime = False, returnReferralCompleted = False, returnReferralDate = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnUserIDVoidedBy = False, returnVoidedTime = False, returnVoidNote = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/InjuryOccurrenceReferral/" + str(InjuryOccurrenceReferralID), verb = "get", return_params_list = return_params)

def modifyInjuryOccurrenceReferral(InjuryOccurrenceReferralID, EntityID = 1, setInjuryOccurrenceReferralID = None, setCompletionDate = None, setCreatedTime = None, setHealthProfessionalIDReferredBy = None, setHealthProfessionalIDReferredTo = None, setInjuryOccurrenceGuardianNotificationID = None, setInjuryOccurrenceGuardianResponseID = None, setInjuryOccurrenceID = None, setInjuryOccurrenceReferralReasonID = None, setInjuryOccurrenceReferralResultID = None, setIsVoid = None, setModifiedTime = None, setReferralCompleted = None, setReferralDate = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, setUserIDVoidedBy = None, setVoidedTime = None, setVoidNote = None, returnInjuryOccurrenceReferralID = False, returnCompletionDate = False, returnCreatedTime = False, returnHealthProfessionalIDReferredBy = False, returnHealthProfessionalIDReferredTo = False, returnInjuryOccurrenceGuardianNotificationID = False, returnInjuryOccurrenceGuardianResponseID = False, returnInjuryOccurrenceID = False, returnInjuryOccurrenceReferralReasonID = False, returnInjuryOccurrenceReferralResultID = False, returnIsVoid = False, returnModifiedTime = False, returnReferralCompleted = False, returnReferralDate = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnUserIDVoidedBy = False, returnVoidedTime = False, returnVoidNote = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/InjuryOccurrenceReferral/" + str(InjuryOccurrenceReferralID), verb = "post", return_params_list = return_params, payload = payload_params)

def createInjuryOccurrenceReferral(EntityID = 1, setInjuryOccurrenceReferralID = None, setCompletionDate = None, setCreatedTime = None, setHealthProfessionalIDReferredBy = None, setHealthProfessionalIDReferredTo = None, setInjuryOccurrenceGuardianNotificationID = None, setInjuryOccurrenceGuardianResponseID = None, setInjuryOccurrenceID = None, setInjuryOccurrenceReferralReasonID = None, setInjuryOccurrenceReferralResultID = None, setIsVoid = None, setModifiedTime = None, setReferralCompleted = None, setReferralDate = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, setUserIDVoidedBy = None, setVoidedTime = None, setVoidNote = None, returnInjuryOccurrenceReferralID = False, returnCompletionDate = False, returnCreatedTime = False, returnHealthProfessionalIDReferredBy = False, returnHealthProfessionalIDReferredTo = False, returnInjuryOccurrenceGuardianNotificationID = False, returnInjuryOccurrenceGuardianResponseID = False, returnInjuryOccurrenceID = False, returnInjuryOccurrenceReferralReasonID = False, returnInjuryOccurrenceReferralResultID = False, returnIsVoid = False, returnModifiedTime = False, returnReferralCompleted = False, returnReferralDate = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnUserIDVoidedBy = False, returnVoidedTime = False, returnVoidNote = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/InjuryOccurrenceReferral/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteInjuryOccurrenceReferral(InjuryOccurrenceReferralID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/InjuryOccurrenceReferral/" + str(InjuryOccurrenceReferralID), verb = "delete")


def getEveryInjuryOccurrenceReferralReason(searchConditions = [], EntityID = 1, returnInjuryOccurrenceReferralReasonID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every InjuryOccurrenceReferralReason in the district.

    This function returns a dataframe of every InjuryOccurrenceReferralReason in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/InjuryOccurrenceReferralReason/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/InjuryOccurrenceReferralReason/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getInjuryOccurrenceReferralReason(InjuryOccurrenceReferralReasonID, EntityID = 1, returnInjuryOccurrenceReferralReasonID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/InjuryOccurrenceReferralReason/" + str(InjuryOccurrenceReferralReasonID), verb = "get", return_params_list = return_params)

def modifyInjuryOccurrenceReferralReason(InjuryOccurrenceReferralReasonID, EntityID = 1, setInjuryOccurrenceReferralReasonID = None, setCode = None, setCodeDescription = None, setCreatedTime = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setModifiedTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnInjuryOccurrenceReferralReasonID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/InjuryOccurrenceReferralReason/" + str(InjuryOccurrenceReferralReasonID), verb = "post", return_params_list = return_params, payload = payload_params)

def createInjuryOccurrenceReferralReason(EntityID = 1, setInjuryOccurrenceReferralReasonID = None, setCode = None, setCodeDescription = None, setCreatedTime = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setModifiedTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnInjuryOccurrenceReferralReasonID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/InjuryOccurrenceReferralReason/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteInjuryOccurrenceReferralReason(InjuryOccurrenceReferralReasonID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/InjuryOccurrenceReferralReason/" + str(InjuryOccurrenceReferralReasonID), verb = "delete")


def getEveryInjuryOccurrenceReferralResult(searchConditions = [], EntityID = 1, returnInjuryOccurrenceReferralResultID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every InjuryOccurrenceReferralResult in the district.

    This function returns a dataframe of every InjuryOccurrenceReferralResult in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/InjuryOccurrenceReferralResult/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/InjuryOccurrenceReferralResult/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getInjuryOccurrenceReferralResult(InjuryOccurrenceReferralResultID, EntityID = 1, returnInjuryOccurrenceReferralResultID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/InjuryOccurrenceReferralResult/" + str(InjuryOccurrenceReferralResultID), verb = "get", return_params_list = return_params)

def modifyInjuryOccurrenceReferralResult(InjuryOccurrenceReferralResultID, EntityID = 1, setInjuryOccurrenceReferralResultID = None, setCode = None, setCodeDescription = None, setCreatedTime = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setModifiedTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnInjuryOccurrenceReferralResultID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/InjuryOccurrenceReferralResult/" + str(InjuryOccurrenceReferralResultID), verb = "post", return_params_list = return_params, payload = payload_params)

def createInjuryOccurrenceReferralResult(EntityID = 1, setInjuryOccurrenceReferralResultID = None, setCode = None, setCodeDescription = None, setCreatedTime = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setModifiedTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnInjuryOccurrenceReferralResultID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/InjuryOccurrenceReferralResult/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteInjuryOccurrenceReferralResult(InjuryOccurrenceReferralResultID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/InjuryOccurrenceReferralResult/" + str(InjuryOccurrenceReferralResultID), verb = "delete")


def getEveryInjuryOccurrenceSecuredNote(searchConditions = [], EntityID = 1, returnInjuryOccurrenceSecuredNoteID = False, returnCreatedTime = False, returnInjuryOccurrenceID = False, returnModifiedTime = False, returnNote = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every InjuryOccurrenceSecuredNote in the district.

    This function returns a dataframe of every InjuryOccurrenceSecuredNote in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/InjuryOccurrenceSecuredNote/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/InjuryOccurrenceSecuredNote/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getInjuryOccurrenceSecuredNote(InjuryOccurrenceSecuredNoteID, EntityID = 1, returnInjuryOccurrenceSecuredNoteID = False, returnCreatedTime = False, returnInjuryOccurrenceID = False, returnModifiedTime = False, returnNote = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/InjuryOccurrenceSecuredNote/" + str(InjuryOccurrenceSecuredNoteID), verb = "get", return_params_list = return_params)

def modifyInjuryOccurrenceSecuredNote(InjuryOccurrenceSecuredNoteID, EntityID = 1, setInjuryOccurrenceSecuredNoteID = None, setCreatedTime = None, setInjuryOccurrenceID = None, setModifiedTime = None, setNote = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnInjuryOccurrenceSecuredNoteID = False, returnCreatedTime = False, returnInjuryOccurrenceID = False, returnModifiedTime = False, returnNote = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/InjuryOccurrenceSecuredNote/" + str(InjuryOccurrenceSecuredNoteID), verb = "post", return_params_list = return_params, payload = payload_params)

def createInjuryOccurrenceSecuredNote(EntityID = 1, setInjuryOccurrenceSecuredNoteID = None, setCreatedTime = None, setInjuryOccurrenceID = None, setModifiedTime = None, setNote = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnInjuryOccurrenceSecuredNoteID = False, returnCreatedTime = False, returnInjuryOccurrenceID = False, returnModifiedTime = False, returnNote = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/InjuryOccurrenceSecuredNote/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteInjuryOccurrenceSecuredNote(InjuryOccurrenceSecuredNoteID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/InjuryOccurrenceSecuredNote/" + str(InjuryOccurrenceSecuredNoteID), verb = "delete")


def getEveryLocation(searchConditions = [], EntityID = 1, returnLocationID = False, returnCode = False, returnCreatedTime = False, returnDescription = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every Location in the district.

    This function returns a dataframe of every Location in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/Location/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/Location/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getLocation(LocationID, EntityID = 1, returnLocationID = False, returnCode = False, returnCreatedTime = False, returnDescription = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/Location/" + str(LocationID), verb = "get", return_params_list = return_params)

def modifyLocation(LocationID, EntityID = 1, setLocationID = None, setCode = None, setCreatedTime = None, setDescription = None, setModifiedTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnLocationID = False, returnCode = False, returnCreatedTime = False, returnDescription = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/Location/" + str(LocationID), verb = "post", return_params_list = return_params, payload = payload_params)

def createLocation(EntityID = 1, setLocationID = None, setCode = None, setCreatedTime = None, setDescription = None, setModifiedTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnLocationID = False, returnCode = False, returnCreatedTime = False, returnDescription = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/Location/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteLocation(LocationID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/Location/" + str(LocationID), verb = "delete")


def getEveryMedication(searchConditions = [], EntityID = 1, returnMedicationID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every Medication in the district.

    This function returns a dataframe of every Medication in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/Medication/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/Medication/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getMedication(MedicationID, EntityID = 1, returnMedicationID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/Medication/" + str(MedicationID), verb = "get", return_params_list = return_params)

def modifyMedication(MedicationID, EntityID = 1, setMedicationID = None, setCode = None, setCodeDescription = None, setCreatedTime = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setModifiedTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnMedicationID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/Medication/" + str(MedicationID), verb = "post", return_params_list = return_params, payload = payload_params)

def createMedication(EntityID = 1, setMedicationID = None, setCode = None, setCodeDescription = None, setCreatedTime = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setModifiedTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnMedicationID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/Medication/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteMedication(MedicationID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/Medication/" + str(MedicationID), verb = "delete")


def getEveryMedicationClassification(searchConditions = [], EntityID = 1, returnMedicationClassificationID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every MedicationClassification in the district.

    This function returns a dataframe of every MedicationClassification in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/MedicationClassification/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/MedicationClassification/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getMedicationClassification(MedicationClassificationID, EntityID = 1, returnMedicationClassificationID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/MedicationClassification/" + str(MedicationClassificationID), verb = "get", return_params_list = return_params)

def modifyMedicationClassification(MedicationClassificationID, EntityID = 1, setMedicationClassificationID = None, setCode = None, setCodeDescription = None, setCreatedTime = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setModifiedTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnMedicationClassificationID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/MedicationClassification/" + str(MedicationClassificationID), verb = "post", return_params_list = return_params, payload = payload_params)

def createMedicationClassification(EntityID = 1, setMedicationClassificationID = None, setCode = None, setCodeDescription = None, setCreatedTime = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setModifiedTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnMedicationClassificationID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/MedicationClassification/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteMedicationClassification(MedicationClassificationID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/MedicationClassification/" + str(MedicationClassificationID), verb = "delete")


def getEveryMedicationClassificationMedication(searchConditions = [], EntityID = 1, returnMedicationClassificationMedicationID = False, returnCreatedTime = False, returnMedicationClassificationID = False, returnMedicationID = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every MedicationClassificationMedication in the district.

    This function returns a dataframe of every MedicationClassificationMedication in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/MedicationClassificationMedication/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/MedicationClassificationMedication/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getMedicationClassificationMedication(MedicationClassificationMedicationID, EntityID = 1, returnMedicationClassificationMedicationID = False, returnCreatedTime = False, returnMedicationClassificationID = False, returnMedicationID = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/MedicationClassificationMedication/" + str(MedicationClassificationMedicationID), verb = "get", return_params_list = return_params)

def modifyMedicationClassificationMedication(MedicationClassificationMedicationID, EntityID = 1, setMedicationClassificationMedicationID = None, setCreatedTime = None, setMedicationClassificationID = None, setMedicationID = None, setModifiedTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnMedicationClassificationMedicationID = False, returnCreatedTime = False, returnMedicationClassificationID = False, returnMedicationID = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/MedicationClassificationMedication/" + str(MedicationClassificationMedicationID), verb = "post", return_params_list = return_params, payload = payload_params)

def createMedicationClassificationMedication(EntityID = 1, setMedicationClassificationMedicationID = None, setCreatedTime = None, setMedicationClassificationID = None, setMedicationID = None, setModifiedTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnMedicationClassificationMedicationID = False, returnCreatedTime = False, returnMedicationClassificationID = False, returnMedicationID = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/MedicationClassificationMedication/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteMedicationClassificationMedication(MedicationClassificationMedicationID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/MedicationClassificationMedication/" + str(MedicationClassificationMedicationID), verb = "delete")


def getEveryMedicationComment(searchConditions = [], EntityID = 1, returnMedicationCommentID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every MedicationComment in the district.

    This function returns a dataframe of every MedicationComment in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/MedicationComment/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/MedicationComment/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getMedicationComment(MedicationCommentID, EntityID = 1, returnMedicationCommentID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/MedicationComment/" + str(MedicationCommentID), verb = "get", return_params_list = return_params)

def modifyMedicationComment(MedicationCommentID, EntityID = 1, setMedicationCommentID = None, setCode = None, setCodeDescription = None, setCreatedTime = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setModifiedTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnMedicationCommentID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/MedicationComment/" + str(MedicationCommentID), verb = "post", return_params_list = return_params, payload = payload_params)

def createMedicationComment(EntityID = 1, setMedicationCommentID = None, setCode = None, setCodeDescription = None, setCreatedTime = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setModifiedTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnMedicationCommentID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/MedicationComment/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteMedicationComment(MedicationCommentID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/MedicationComment/" + str(MedicationCommentID), verb = "delete")


def getEveryMedicationDosageUnit(searchConditions = [], EntityID = 1, returnMedicationDosageUnitID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnIsActive = False, returnModifiedTime = False, returnSkywardHash = False, returnSkywardID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every MedicationDosageUnit in the district.

    This function returns a dataframe of every MedicationDosageUnit in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/MedicationDosageUnit/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/MedicationDosageUnit/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getMedicationDosageUnit(MedicationDosageUnitID, EntityID = 1, returnMedicationDosageUnitID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnIsActive = False, returnModifiedTime = False, returnSkywardHash = False, returnSkywardID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/MedicationDosageUnit/" + str(MedicationDosageUnitID), verb = "get", return_params_list = return_params)

def modifyMedicationDosageUnit(MedicationDosageUnitID, EntityID = 1, setMedicationDosageUnitID = None, setCode = None, setCodeDescription = None, setCreatedTime = None, setDescription = None, setIsActive = None, setModifiedTime = None, setSkywardHash = None, setSkywardID = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnMedicationDosageUnitID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnIsActive = False, returnModifiedTime = False, returnSkywardHash = False, returnSkywardID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/MedicationDosageUnit/" + str(MedicationDosageUnitID), verb = "post", return_params_list = return_params, payload = payload_params)

def createMedicationDosageUnit(EntityID = 1, setMedicationDosageUnitID = None, setCode = None, setCodeDescription = None, setCreatedTime = None, setDescription = None, setIsActive = None, setModifiedTime = None, setSkywardHash = None, setSkywardID = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnMedicationDosageUnitID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnIsActive = False, returnModifiedTime = False, returnSkywardHash = False, returnSkywardID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/MedicationDosageUnit/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteMedicationDosageUnit(MedicationDosageUnitID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/MedicationDosageUnit/" + str(MedicationDosageUnitID), verb = "delete")


def getEveryMedicationRoute(searchConditions = [], EntityID = 1, returnMedicationRouteID = False, returnCreatedTime = False, returnDescription = False, returnFDACode = False, returnIsActive = False, returnModifiedTime = False, returnName = False, returnNCIConceptCode = False, returnSkywardHash = False, returnSkywardID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every MedicationRoute in the district.

    This function returns a dataframe of every MedicationRoute in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/MedicationRoute/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/MedicationRoute/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getMedicationRoute(MedicationRouteID, EntityID = 1, returnMedicationRouteID = False, returnCreatedTime = False, returnDescription = False, returnFDACode = False, returnIsActive = False, returnModifiedTime = False, returnName = False, returnNCIConceptCode = False, returnSkywardHash = False, returnSkywardID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/MedicationRoute/" + str(MedicationRouteID), verb = "get", return_params_list = return_params)

def modifyMedicationRoute(MedicationRouteID, EntityID = 1, setMedicationRouteID = None, setCreatedTime = None, setDescription = None, setFDACode = None, setIsActive = None, setModifiedTime = None, setName = None, setNCIConceptCode = None, setSkywardHash = None, setSkywardID = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnMedicationRouteID = False, returnCreatedTime = False, returnDescription = False, returnFDACode = False, returnIsActive = False, returnModifiedTime = False, returnName = False, returnNCIConceptCode = False, returnSkywardHash = False, returnSkywardID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/MedicationRoute/" + str(MedicationRouteID), verb = "post", return_params_list = return_params, payload = payload_params)

def createMedicationRoute(EntityID = 1, setMedicationRouteID = None, setCreatedTime = None, setDescription = None, setFDACode = None, setIsActive = None, setModifiedTime = None, setName = None, setNCIConceptCode = None, setSkywardHash = None, setSkywardID = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnMedicationRouteID = False, returnCreatedTime = False, returnDescription = False, returnFDACode = False, returnIsActive = False, returnModifiedTime = False, returnName = False, returnNCIConceptCode = False, returnSkywardHash = False, returnSkywardID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/MedicationRoute/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteMedicationRoute(MedicationRouteID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/MedicationRoute/" + str(MedicationRouteID), verb = "delete")


def getEveryNameMedication(searchConditions = [], EntityID = 1, returnNameMedicationID = False, returnAdministrationInstruction = False, returnAttachmentCount = False, returnAttachmentIndicatorColumn = False, returnCreatedTime = False, returnDistributionType = False, returnDistributionTypeCode = False, returnEndDate = False, returnEndStatus = False, returnEndStatusCode = False, returnHealthProfessionalIDPrescribedBy = False, returnIsVoid = False, returnMaxDosesPerDay = False, returnMedicationDosageUnitID = False, returnMedicationID = False, returnMedicationRouteID = False, returnModifiedTime = False, returnNameID = False, returnOriginalEndDate = False, returnReceivedDoctorForm = False, returnReceivedParentReleaseForm = False, returnReceivedVerbalParentPermission = False, returnStartDate = False, returnUnitsPerDoseHigh = False, returnUnitsPerDoseLow = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnUserIDVoidedBy = False, returnVoidedTime = False, returnVoidNote = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every NameMedication in the district.

    This function returns a dataframe of every NameMedication in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/NameMedication/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/NameMedication/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getNameMedication(NameMedicationID, EntityID = 1, returnNameMedicationID = False, returnAdministrationInstruction = False, returnAttachmentCount = False, returnAttachmentIndicatorColumn = False, returnCreatedTime = False, returnDistributionType = False, returnDistributionTypeCode = False, returnEndDate = False, returnEndStatus = False, returnEndStatusCode = False, returnHealthProfessionalIDPrescribedBy = False, returnIsVoid = False, returnMaxDosesPerDay = False, returnMedicationDosageUnitID = False, returnMedicationID = False, returnMedicationRouteID = False, returnModifiedTime = False, returnNameID = False, returnOriginalEndDate = False, returnReceivedDoctorForm = False, returnReceivedParentReleaseForm = False, returnReceivedVerbalParentPermission = False, returnStartDate = False, returnUnitsPerDoseHigh = False, returnUnitsPerDoseLow = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnUserIDVoidedBy = False, returnVoidedTime = False, returnVoidNote = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/NameMedication/" + str(NameMedicationID), verb = "get", return_params_list = return_params)

def modifyNameMedication(NameMedicationID, EntityID = 1, setNameMedicationID = None, setAdministrationInstruction = None, setAttachmentCount = None, setAttachmentIndicatorColumn = None, setCreatedTime = None, setDistributionType = None, setDistributionTypeCode = None, setEndDate = None, setEndStatus = None, setEndStatusCode = None, setHealthProfessionalIDPrescribedBy = None, setIsVoid = None, setMaxDosesPerDay = None, setMedicationDosageUnitID = None, setMedicationID = None, setMedicationRouteID = None, setModifiedTime = None, setNameID = None, setOriginalEndDate = None, setReceivedDoctorForm = None, setReceivedParentReleaseForm = None, setReceivedVerbalParentPermission = None, setStartDate = None, setUnitsPerDoseHigh = None, setUnitsPerDoseLow = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, setUserIDVoidedBy = None, setVoidedTime = None, setVoidNote = None, returnNameMedicationID = False, returnAdministrationInstruction = False, returnAttachmentCount = False, returnAttachmentIndicatorColumn = False, returnCreatedTime = False, returnDistributionType = False, returnDistributionTypeCode = False, returnEndDate = False, returnEndStatus = False, returnEndStatusCode = False, returnHealthProfessionalIDPrescribedBy = False, returnIsVoid = False, returnMaxDosesPerDay = False, returnMedicationDosageUnitID = False, returnMedicationID = False, returnMedicationRouteID = False, returnModifiedTime = False, returnNameID = False, returnOriginalEndDate = False, returnReceivedDoctorForm = False, returnReceivedParentReleaseForm = False, returnReceivedVerbalParentPermission = False, returnStartDate = False, returnUnitsPerDoseHigh = False, returnUnitsPerDoseLow = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnUserIDVoidedBy = False, returnVoidedTime = False, returnVoidNote = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/NameMedication/" + str(NameMedicationID), verb = "post", return_params_list = return_params, payload = payload_params)

def createNameMedication(EntityID = 1, setNameMedicationID = None, setAdministrationInstruction = None, setAttachmentCount = None, setAttachmentIndicatorColumn = None, setCreatedTime = None, setDistributionType = None, setDistributionTypeCode = None, setEndDate = None, setEndStatus = None, setEndStatusCode = None, setHealthProfessionalIDPrescribedBy = None, setIsVoid = None, setMaxDosesPerDay = None, setMedicationDosageUnitID = None, setMedicationID = None, setMedicationRouteID = None, setModifiedTime = None, setNameID = None, setOriginalEndDate = None, setReceivedDoctorForm = None, setReceivedParentReleaseForm = None, setReceivedVerbalParentPermission = None, setStartDate = None, setUnitsPerDoseHigh = None, setUnitsPerDoseLow = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, setUserIDVoidedBy = None, setVoidedTime = None, setVoidNote = None, returnNameMedicationID = False, returnAdministrationInstruction = False, returnAttachmentCount = False, returnAttachmentIndicatorColumn = False, returnCreatedTime = False, returnDistributionType = False, returnDistributionTypeCode = False, returnEndDate = False, returnEndStatus = False, returnEndStatusCode = False, returnHealthProfessionalIDPrescribedBy = False, returnIsVoid = False, returnMaxDosesPerDay = False, returnMedicationDosageUnitID = False, returnMedicationID = False, returnMedicationRouteID = False, returnModifiedTime = False, returnNameID = False, returnOriginalEndDate = False, returnReceivedDoctorForm = False, returnReceivedParentReleaseForm = False, returnReceivedVerbalParentPermission = False, returnStartDate = False, returnUnitsPerDoseHigh = False, returnUnitsPerDoseLow = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnUserIDVoidedBy = False, returnVoidedTime = False, returnVoidNote = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/NameMedication/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteNameMedication(NameMedicationID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/NameMedication/" + str(NameMedicationID), verb = "delete")


def getEveryNameMedicationComment(searchConditions = [], EntityID = 1, returnNameMedicationCommentID = False, returnCreatedTime = False, returnMedicationCommentID = False, returnModifiedTime = False, returnNameMedicationID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every NameMedicationComment in the district.

    This function returns a dataframe of every NameMedicationComment in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/NameMedicationComment/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/NameMedicationComment/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getNameMedicationComment(NameMedicationCommentID, EntityID = 1, returnNameMedicationCommentID = False, returnCreatedTime = False, returnMedicationCommentID = False, returnModifiedTime = False, returnNameMedicationID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/NameMedicationComment/" + str(NameMedicationCommentID), verb = "get", return_params_list = return_params)

def modifyNameMedicationComment(NameMedicationCommentID, EntityID = 1, setNameMedicationCommentID = None, setCreatedTime = None, setMedicationCommentID = None, setModifiedTime = None, setNameMedicationID = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnNameMedicationCommentID = False, returnCreatedTime = False, returnMedicationCommentID = False, returnModifiedTime = False, returnNameMedicationID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/NameMedicationComment/" + str(NameMedicationCommentID), verb = "post", return_params_list = return_params, payload = payload_params)

def createNameMedicationComment(EntityID = 1, setNameMedicationCommentID = None, setCreatedTime = None, setMedicationCommentID = None, setModifiedTime = None, setNameMedicationID = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnNameMedicationCommentID = False, returnCreatedTime = False, returnMedicationCommentID = False, returnModifiedTime = False, returnNameMedicationID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/NameMedicationComment/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteNameMedicationComment(NameMedicationCommentID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/NameMedicationComment/" + str(NameMedicationCommentID), verb = "delete")


def getEveryNameMedicationNote(searchConditions = [], EntityID = 1, returnNameMedicationNoteID = False, returnCreatedTime = False, returnModifiedTime = False, returnNameMedicationID = False, returnNote = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every NameMedicationNote in the district.

    This function returns a dataframe of every NameMedicationNote in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/NameMedicationNote/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/NameMedicationNote/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getNameMedicationNote(NameMedicationNoteID, EntityID = 1, returnNameMedicationNoteID = False, returnCreatedTime = False, returnModifiedTime = False, returnNameMedicationID = False, returnNote = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/NameMedicationNote/" + str(NameMedicationNoteID), verb = "get", return_params_list = return_params)

def modifyNameMedicationNote(NameMedicationNoteID, EntityID = 1, setNameMedicationNoteID = None, setCreatedTime = None, setModifiedTime = None, setNameMedicationID = None, setNote = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnNameMedicationNoteID = False, returnCreatedTime = False, returnModifiedTime = False, returnNameMedicationID = False, returnNote = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/NameMedicationNote/" + str(NameMedicationNoteID), verb = "post", return_params_list = return_params, payload = payload_params)

def createNameMedicationNote(EntityID = 1, setNameMedicationNoteID = None, setCreatedTime = None, setModifiedTime = None, setNameMedicationID = None, setNote = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnNameMedicationNoteID = False, returnCreatedTime = False, returnModifiedTime = False, returnNameMedicationID = False, returnNote = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/NameMedicationNote/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteNameMedicationNote(NameMedicationNoteID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/NameMedicationNote/" + str(NameMedicationNoteID), verb = "delete")


def getEveryNameMedicationPrescription(searchConditions = [], EntityID = 1, returnNameMedicationPrescriptionID = False, returnCreatedTime = False, returnExpirationDate = False, returnIsVoid = False, returnModifiedTime = False, returnNameIDPharmacy = False, returnNameMedicationID = False, returnPrescriptionNumber = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnUserIDVoidedBy = False, returnVoidedTime = False, returnVoidNote = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every NameMedicationPrescription in the district.

    This function returns a dataframe of every NameMedicationPrescription in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/NameMedicationPrescription/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/NameMedicationPrescription/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getNameMedicationPrescription(NameMedicationPrescriptionID, EntityID = 1, returnNameMedicationPrescriptionID = False, returnCreatedTime = False, returnExpirationDate = False, returnIsVoid = False, returnModifiedTime = False, returnNameIDPharmacy = False, returnNameMedicationID = False, returnPrescriptionNumber = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnUserIDVoidedBy = False, returnVoidedTime = False, returnVoidNote = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/NameMedicationPrescription/" + str(NameMedicationPrescriptionID), verb = "get", return_params_list = return_params)

def modifyNameMedicationPrescription(NameMedicationPrescriptionID, EntityID = 1, setNameMedicationPrescriptionID = None, setCreatedTime = None, setExpirationDate = None, setIsVoid = None, setModifiedTime = None, setNameIDPharmacy = None, setNameMedicationID = None, setPrescriptionNumber = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, setUserIDVoidedBy = None, setVoidedTime = None, setVoidNote = None, returnNameMedicationPrescriptionID = False, returnCreatedTime = False, returnExpirationDate = False, returnIsVoid = False, returnModifiedTime = False, returnNameIDPharmacy = False, returnNameMedicationID = False, returnPrescriptionNumber = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnUserIDVoidedBy = False, returnVoidedTime = False, returnVoidNote = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/NameMedicationPrescription/" + str(NameMedicationPrescriptionID), verb = "post", return_params_list = return_params, payload = payload_params)

def createNameMedicationPrescription(EntityID = 1, setNameMedicationPrescriptionID = None, setCreatedTime = None, setExpirationDate = None, setIsVoid = None, setModifiedTime = None, setNameIDPharmacy = None, setNameMedicationID = None, setPrescriptionNumber = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, setUserIDVoidedBy = None, setVoidedTime = None, setVoidNote = None, returnNameMedicationPrescriptionID = False, returnCreatedTime = False, returnExpirationDate = False, returnIsVoid = False, returnModifiedTime = False, returnNameIDPharmacy = False, returnNameMedicationID = False, returnPrescriptionNumber = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnUserIDVoidedBy = False, returnVoidedTime = False, returnVoidNote = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/NameMedicationPrescription/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteNameMedicationPrescription(NameMedicationPrescriptionID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/NameMedicationPrescription/" + str(NameMedicationPrescriptionID), verb = "delete")


def getEveryNameMedicationSchedule(searchConditions = [], EntityID = 1, returnNameMedicationScheduleID = False, returnCreatedTime = False, returnEndDate = False, returnFriday = False, returnIsAdministrableAsOfSpecifiedDate = False, returnIsAdministrableAsOfToday = False, returnIsVoid = False, returnModifiedTime = False, returnMonday = False, returnNameMedicationID = False, returnSaturday = False, returnScheduledAdministrationTime = False, returnScheduledAdministrationTimeTime = False, returnStartDate = False, returnSunday = False, returnThursday = False, returnTuesday = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnUserIDVoidedBy = False, returnVoidedTime = False, returnVoidNote = False, returnWednesday = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every NameMedicationSchedule in the district.

    This function returns a dataframe of every NameMedicationSchedule in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/NameMedicationSchedule/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/NameMedicationSchedule/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getNameMedicationSchedule(NameMedicationScheduleID, EntityID = 1, returnNameMedicationScheduleID = False, returnCreatedTime = False, returnEndDate = False, returnFriday = False, returnIsAdministrableAsOfSpecifiedDate = False, returnIsAdministrableAsOfToday = False, returnIsVoid = False, returnModifiedTime = False, returnMonday = False, returnNameMedicationID = False, returnSaturday = False, returnScheduledAdministrationTime = False, returnScheduledAdministrationTimeTime = False, returnStartDate = False, returnSunday = False, returnThursday = False, returnTuesday = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnUserIDVoidedBy = False, returnVoidedTime = False, returnVoidNote = False, returnWednesday = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/NameMedicationSchedule/" + str(NameMedicationScheduleID), verb = "get", return_params_list = return_params)

def modifyNameMedicationSchedule(NameMedicationScheduleID, EntityID = 1, setNameMedicationScheduleID = None, setCreatedTime = None, setEndDate = None, setFriday = None, setIsAdministrableAsOfSpecifiedDate = None, setIsAdministrableAsOfToday = None, setIsVoid = None, setModifiedTime = None, setMonday = None, setNameMedicationID = None, setSaturday = None, setScheduledAdministrationTime = None, setScheduledAdministrationTimeTime = None, setStartDate = None, setSunday = None, setThursday = None, setTuesday = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, setUserIDVoidedBy = None, setVoidedTime = None, setVoidNote = None, setWednesday = None, returnNameMedicationScheduleID = False, returnCreatedTime = False, returnEndDate = False, returnFriday = False, returnIsAdministrableAsOfSpecifiedDate = False, returnIsAdministrableAsOfToday = False, returnIsVoid = False, returnModifiedTime = False, returnMonday = False, returnNameMedicationID = False, returnSaturday = False, returnScheduledAdministrationTime = False, returnScheduledAdministrationTimeTime = False, returnStartDate = False, returnSunday = False, returnThursday = False, returnTuesday = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnUserIDVoidedBy = False, returnVoidedTime = False, returnVoidNote = False, returnWednesday = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/NameMedicationSchedule/" + str(NameMedicationScheduleID), verb = "post", return_params_list = return_params, payload = payload_params)

def createNameMedicationSchedule(EntityID = 1, setNameMedicationScheduleID = None, setCreatedTime = None, setEndDate = None, setFriday = None, setIsAdministrableAsOfSpecifiedDate = None, setIsAdministrableAsOfToday = None, setIsVoid = None, setModifiedTime = None, setMonday = None, setNameMedicationID = None, setSaturday = None, setScheduledAdministrationTime = None, setScheduledAdministrationTimeTime = None, setStartDate = None, setSunday = None, setThursday = None, setTuesday = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, setUserIDVoidedBy = None, setVoidedTime = None, setVoidNote = None, setWednesday = None, returnNameMedicationScheduleID = False, returnCreatedTime = False, returnEndDate = False, returnFriday = False, returnIsAdministrableAsOfSpecifiedDate = False, returnIsAdministrableAsOfToday = False, returnIsVoid = False, returnModifiedTime = False, returnMonday = False, returnNameMedicationID = False, returnSaturday = False, returnScheduledAdministrationTime = False, returnScheduledAdministrationTimeTime = False, returnStartDate = False, returnSunday = False, returnThursday = False, returnTuesday = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnUserIDVoidedBy = False, returnVoidedTime = False, returnVoidNote = False, returnWednesday = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/NameMedicationSchedule/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteNameMedicationSchedule(NameMedicationScheduleID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/NameMedicationSchedule/" + str(NameMedicationScheduleID), verb = "delete")


def getEveryNameMedicationSecuredNote(searchConditions = [], EntityID = 1, returnNameMedicationSecuredNoteID = False, returnCreatedTime = False, returnModifiedTime = False, returnNameMedicationID = False, returnNote = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every NameMedicationSecuredNote in the district.

    This function returns a dataframe of every NameMedicationSecuredNote in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/NameMedicationSecuredNote/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/NameMedicationSecuredNote/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getNameMedicationSecuredNote(NameMedicationSecuredNoteID, EntityID = 1, returnNameMedicationSecuredNoteID = False, returnCreatedTime = False, returnModifiedTime = False, returnNameMedicationID = False, returnNote = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/NameMedicationSecuredNote/" + str(NameMedicationSecuredNoteID), verb = "get", return_params_list = return_params)

def modifyNameMedicationSecuredNote(NameMedicationSecuredNoteID, EntityID = 1, setNameMedicationSecuredNoteID = None, setCreatedTime = None, setModifiedTime = None, setNameMedicationID = None, setNote = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnNameMedicationSecuredNoteID = False, returnCreatedTime = False, returnModifiedTime = False, returnNameMedicationID = False, returnNote = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/NameMedicationSecuredNote/" + str(NameMedicationSecuredNoteID), verb = "post", return_params_list = return_params, payload = payload_params)

def createNameMedicationSecuredNote(EntityID = 1, setNameMedicationSecuredNoteID = None, setCreatedTime = None, setModifiedTime = None, setNameMedicationID = None, setNote = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnNameMedicationSecuredNoteID = False, returnCreatedTime = False, returnModifiedTime = False, returnNameMedicationID = False, returnNote = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/NameMedicationSecuredNote/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteNameMedicationSecuredNote(NameMedicationSecuredNoteID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/NameMedicationSecuredNote/" + str(NameMedicationSecuredNoteID), verb = "delete")


def getEveryNameOfficeVisit(searchConditions = [], EntityID = 1, returnNameOfficeVisitID = False, returnCreatedTime = False, returnDisplayStatus = False, returnDocumentationIsComplete = False, returnEntityID = False, returnHasBeenReleased = False, returnHealthProfessionalIDExaminedBy = False, returnIsNameOfficeVisitToday = False, returnIsVoid = False, returnModifiedTime = False, returnNameID = False, returnNameOfficeVisitDispositionsListDisplay = False, returnNameOfficeVisitReasonsListDisplay = False, returnNameOfficeVisitTreatmentsListDisplay = False, returnOfficeVisitCommentID = False, returnSchoolID = False, returnSchoolYearID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnUserIDVoidedBy = False, returnVoidedTime = False, returnVoidNote = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every NameOfficeVisit in the district.

    This function returns a dataframe of every NameOfficeVisit in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/NameOfficeVisit/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/NameOfficeVisit/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getNameOfficeVisit(NameOfficeVisitID, EntityID = 1, returnNameOfficeVisitID = False, returnCreatedTime = False, returnDisplayStatus = False, returnDocumentationIsComplete = False, returnEntityID = False, returnHasBeenReleased = False, returnHealthProfessionalIDExaminedBy = False, returnIsNameOfficeVisitToday = False, returnIsVoid = False, returnModifiedTime = False, returnNameID = False, returnNameOfficeVisitDispositionsListDisplay = False, returnNameOfficeVisitReasonsListDisplay = False, returnNameOfficeVisitTreatmentsListDisplay = False, returnOfficeVisitCommentID = False, returnSchoolID = False, returnSchoolYearID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnUserIDVoidedBy = False, returnVoidedTime = False, returnVoidNote = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/NameOfficeVisit/" + str(NameOfficeVisitID), verb = "get", return_params_list = return_params)

def modifyNameOfficeVisit(NameOfficeVisitID, EntityID = 1, setNameOfficeVisitID = None, setCreatedTime = None, setDisplayStatus = None, setDocumentationIsComplete = None, setEntityID = None, setHasBeenReleased = None, setHealthProfessionalIDExaminedBy = None, setIsNameOfficeVisitToday = None, setIsVoid = None, setModifiedTime = None, setNameID = None, setNameOfficeVisitDispositionsListDisplay = None, setNameOfficeVisitReasonsListDisplay = None, setNameOfficeVisitTreatmentsListDisplay = None, setOfficeVisitCommentID = None, setSchoolID = None, setSchoolYearID = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, setUserIDVoidedBy = None, setVoidedTime = None, setVoidNote = None, returnNameOfficeVisitID = False, returnCreatedTime = False, returnDisplayStatus = False, returnDocumentationIsComplete = False, returnEntityID = False, returnHasBeenReleased = False, returnHealthProfessionalIDExaminedBy = False, returnIsNameOfficeVisitToday = False, returnIsVoid = False, returnModifiedTime = False, returnNameID = False, returnNameOfficeVisitDispositionsListDisplay = False, returnNameOfficeVisitReasonsListDisplay = False, returnNameOfficeVisitTreatmentsListDisplay = False, returnOfficeVisitCommentID = False, returnSchoolID = False, returnSchoolYearID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnUserIDVoidedBy = False, returnVoidedTime = False, returnVoidNote = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/NameOfficeVisit/" + str(NameOfficeVisitID), verb = "post", return_params_list = return_params, payload = payload_params)

def createNameOfficeVisit(EntityID = 1, setNameOfficeVisitID = None, setCreatedTime = None, setDisplayStatus = None, setDocumentationIsComplete = None, setEntityID = None, setHasBeenReleased = None, setHealthProfessionalIDExaminedBy = None, setIsNameOfficeVisitToday = None, setIsVoid = None, setModifiedTime = None, setNameID = None, setNameOfficeVisitDispositionsListDisplay = None, setNameOfficeVisitReasonsListDisplay = None, setNameOfficeVisitTreatmentsListDisplay = None, setOfficeVisitCommentID = None, setSchoolID = None, setSchoolYearID = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, setUserIDVoidedBy = None, setVoidedTime = None, setVoidNote = None, returnNameOfficeVisitID = False, returnCreatedTime = False, returnDisplayStatus = False, returnDocumentationIsComplete = False, returnEntityID = False, returnHasBeenReleased = False, returnHealthProfessionalIDExaminedBy = False, returnIsNameOfficeVisitToday = False, returnIsVoid = False, returnModifiedTime = False, returnNameID = False, returnNameOfficeVisitDispositionsListDisplay = False, returnNameOfficeVisitReasonsListDisplay = False, returnNameOfficeVisitTreatmentsListDisplay = False, returnOfficeVisitCommentID = False, returnSchoolID = False, returnSchoolYearID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnUserIDVoidedBy = False, returnVoidedTime = False, returnVoidNote = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/NameOfficeVisit/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteNameOfficeVisit(NameOfficeVisitID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/NameOfficeVisit/" + str(NameOfficeVisitID), verb = "delete")


def getEveryNameOfficeVisitDisposition(searchConditions = [], EntityID = 1, returnNameOfficeVisitDispositionID = False, returnCreatedTime = False, returnModifiedTime = False, returnNameOfficeVisitID = False, returnOfficeVisitDispositionID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every NameOfficeVisitDisposition in the district.

    This function returns a dataframe of every NameOfficeVisitDisposition in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/NameOfficeVisitDisposition/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/NameOfficeVisitDisposition/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getNameOfficeVisitDisposition(NameOfficeVisitDispositionID, EntityID = 1, returnNameOfficeVisitDispositionID = False, returnCreatedTime = False, returnModifiedTime = False, returnNameOfficeVisitID = False, returnOfficeVisitDispositionID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/NameOfficeVisitDisposition/" + str(NameOfficeVisitDispositionID), verb = "get", return_params_list = return_params)

def modifyNameOfficeVisitDisposition(NameOfficeVisitDispositionID, EntityID = 1, setNameOfficeVisitDispositionID = None, setCreatedTime = None, setModifiedTime = None, setNameOfficeVisitID = None, setOfficeVisitDispositionID = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnNameOfficeVisitDispositionID = False, returnCreatedTime = False, returnModifiedTime = False, returnNameOfficeVisitID = False, returnOfficeVisitDispositionID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/NameOfficeVisitDisposition/" + str(NameOfficeVisitDispositionID), verb = "post", return_params_list = return_params, payload = payload_params)

def createNameOfficeVisitDisposition(EntityID = 1, setNameOfficeVisitDispositionID = None, setCreatedTime = None, setModifiedTime = None, setNameOfficeVisitID = None, setOfficeVisitDispositionID = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnNameOfficeVisitDispositionID = False, returnCreatedTime = False, returnModifiedTime = False, returnNameOfficeVisitID = False, returnOfficeVisitDispositionID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/NameOfficeVisitDisposition/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteNameOfficeVisitDisposition(NameOfficeVisitDispositionID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/NameOfficeVisitDisposition/" + str(NameOfficeVisitDispositionID), verb = "delete")


def getEveryNameOfficeVisitNote(searchConditions = [], EntityID = 1, returnNameOfficeVisitNoteID = False, returnCreatedTime = False, returnModifiedTime = False, returnNameOfficeVisitID = False, returnNote = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every NameOfficeVisitNote in the district.

    This function returns a dataframe of every NameOfficeVisitNote in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/NameOfficeVisitNote/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/NameOfficeVisitNote/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getNameOfficeVisitNote(NameOfficeVisitNoteID, EntityID = 1, returnNameOfficeVisitNoteID = False, returnCreatedTime = False, returnModifiedTime = False, returnNameOfficeVisitID = False, returnNote = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/NameOfficeVisitNote/" + str(NameOfficeVisitNoteID), verb = "get", return_params_list = return_params)

def modifyNameOfficeVisitNote(NameOfficeVisitNoteID, EntityID = 1, setNameOfficeVisitNoteID = None, setCreatedTime = None, setModifiedTime = None, setNameOfficeVisitID = None, setNote = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnNameOfficeVisitNoteID = False, returnCreatedTime = False, returnModifiedTime = False, returnNameOfficeVisitID = False, returnNote = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/NameOfficeVisitNote/" + str(NameOfficeVisitNoteID), verb = "post", return_params_list = return_params, payload = payload_params)

def createNameOfficeVisitNote(EntityID = 1, setNameOfficeVisitNoteID = None, setCreatedTime = None, setModifiedTime = None, setNameOfficeVisitID = None, setNote = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnNameOfficeVisitNoteID = False, returnCreatedTime = False, returnModifiedTime = False, returnNameOfficeVisitID = False, returnNote = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/NameOfficeVisitNote/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteNameOfficeVisitNote(NameOfficeVisitNoteID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/NameOfficeVisitNote/" + str(NameOfficeVisitNoteID), verb = "delete")


def getEveryNameOfficeVisitNotification(searchConditions = [], EntityID = 1, returnNameOfficeVisitNotificationID = False, returnCreatedTime = False, returnModifiedTime = False, returnNameID = False, returnNameOfficeVisitID = False, returnNote = False, returnNotificationMethodID = False, returnNotificationTime = False, returnNotificationTimeDate = False, returnNotificationTimeTime = False, returnOfficeVisitGuardianResponseID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every NameOfficeVisitNotification in the district.

    This function returns a dataframe of every NameOfficeVisitNotification in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/NameOfficeVisitNotification/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/NameOfficeVisitNotification/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getNameOfficeVisitNotification(NameOfficeVisitNotificationID, EntityID = 1, returnNameOfficeVisitNotificationID = False, returnCreatedTime = False, returnModifiedTime = False, returnNameID = False, returnNameOfficeVisitID = False, returnNote = False, returnNotificationMethodID = False, returnNotificationTime = False, returnNotificationTimeDate = False, returnNotificationTimeTime = False, returnOfficeVisitGuardianResponseID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/NameOfficeVisitNotification/" + str(NameOfficeVisitNotificationID), verb = "get", return_params_list = return_params)

def modifyNameOfficeVisitNotification(NameOfficeVisitNotificationID, EntityID = 1, setNameOfficeVisitNotificationID = None, setCreatedTime = None, setModifiedTime = None, setNameID = None, setNameOfficeVisitID = None, setNote = None, setNotificationMethodID = None, setNotificationTime = None, setNotificationTimeDate = None, setNotificationTimeTime = None, setOfficeVisitGuardianResponseID = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnNameOfficeVisitNotificationID = False, returnCreatedTime = False, returnModifiedTime = False, returnNameID = False, returnNameOfficeVisitID = False, returnNote = False, returnNotificationMethodID = False, returnNotificationTime = False, returnNotificationTimeDate = False, returnNotificationTimeTime = False, returnOfficeVisitGuardianResponseID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/NameOfficeVisitNotification/" + str(NameOfficeVisitNotificationID), verb = "post", return_params_list = return_params, payload = payload_params)

def createNameOfficeVisitNotification(EntityID = 1, setNameOfficeVisitNotificationID = None, setCreatedTime = None, setModifiedTime = None, setNameID = None, setNameOfficeVisitID = None, setNote = None, setNotificationMethodID = None, setNotificationTime = None, setNotificationTimeDate = None, setNotificationTimeTime = None, setOfficeVisitGuardianResponseID = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnNameOfficeVisitNotificationID = False, returnCreatedTime = False, returnModifiedTime = False, returnNameID = False, returnNameOfficeVisitID = False, returnNote = False, returnNotificationMethodID = False, returnNotificationTime = False, returnNotificationTimeDate = False, returnNotificationTimeTime = False, returnOfficeVisitGuardianResponseID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/NameOfficeVisitNotification/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteNameOfficeVisitNotification(NameOfficeVisitNotificationID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/NameOfficeVisitNotification/" + str(NameOfficeVisitNotificationID), verb = "delete")


def getEveryNameOfficeVisitReason(searchConditions = [], EntityID = 1, returnNameOfficeVisitReasonID = False, returnCreatedTime = False, returnModifiedTime = False, returnNameOfficeVisitID = False, returnOfficeVisitReasonID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every NameOfficeVisitReason in the district.

    This function returns a dataframe of every NameOfficeVisitReason in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/NameOfficeVisitReason/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/NameOfficeVisitReason/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getNameOfficeVisitReason(NameOfficeVisitReasonID, EntityID = 1, returnNameOfficeVisitReasonID = False, returnCreatedTime = False, returnModifiedTime = False, returnNameOfficeVisitID = False, returnOfficeVisitReasonID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/NameOfficeVisitReason/" + str(NameOfficeVisitReasonID), verb = "get", return_params_list = return_params)

def modifyNameOfficeVisitReason(NameOfficeVisitReasonID, EntityID = 1, setNameOfficeVisitReasonID = None, setCreatedTime = None, setModifiedTime = None, setNameOfficeVisitID = None, setOfficeVisitReasonID = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnNameOfficeVisitReasonID = False, returnCreatedTime = False, returnModifiedTime = False, returnNameOfficeVisitID = False, returnOfficeVisitReasonID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/NameOfficeVisitReason/" + str(NameOfficeVisitReasonID), verb = "post", return_params_list = return_params, payload = payload_params)

def createNameOfficeVisitReason(EntityID = 1, setNameOfficeVisitReasonID = None, setCreatedTime = None, setModifiedTime = None, setNameOfficeVisitID = None, setOfficeVisitReasonID = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnNameOfficeVisitReasonID = False, returnCreatedTime = False, returnModifiedTime = False, returnNameOfficeVisitID = False, returnOfficeVisitReasonID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/NameOfficeVisitReason/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteNameOfficeVisitReason(NameOfficeVisitReasonID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/NameOfficeVisitReason/" + str(NameOfficeVisitReasonID), verb = "delete")


def getEveryNameOfficeVisitReferral(searchConditions = [], EntityID = 1, returnNameOfficeVisitReferralID = False, returnCompletionDate = False, returnCreatedTime = False, returnHealthProfessionalIDReferredBy = False, returnHealthProfessionalIDReferredTo = False, returnIsVoid = False, returnModifiedTime = False, returnNameOfficeVisitID = False, returnOfficeVisitGuardianResponseID = False, returnOfficeVisitReferralReasonID = False, returnOfficeVisitReferralResultID = False, returnReferralCompleted = False, returnReferralDate = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnUserIDVoidedBy = False, returnVoidedTime = False, returnVoidNote = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every NameOfficeVisitReferral in the district.

    This function returns a dataframe of every NameOfficeVisitReferral in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/NameOfficeVisitReferral/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/NameOfficeVisitReferral/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getNameOfficeVisitReferral(NameOfficeVisitReferralID, EntityID = 1, returnNameOfficeVisitReferralID = False, returnCompletionDate = False, returnCreatedTime = False, returnHealthProfessionalIDReferredBy = False, returnHealthProfessionalIDReferredTo = False, returnIsVoid = False, returnModifiedTime = False, returnNameOfficeVisitID = False, returnOfficeVisitGuardianResponseID = False, returnOfficeVisitReferralReasonID = False, returnOfficeVisitReferralResultID = False, returnReferralCompleted = False, returnReferralDate = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnUserIDVoidedBy = False, returnVoidedTime = False, returnVoidNote = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/NameOfficeVisitReferral/" + str(NameOfficeVisitReferralID), verb = "get", return_params_list = return_params)

def modifyNameOfficeVisitReferral(NameOfficeVisitReferralID, EntityID = 1, setNameOfficeVisitReferralID = None, setCompletionDate = None, setCreatedTime = None, setHealthProfessionalIDReferredBy = None, setHealthProfessionalIDReferredTo = None, setIsVoid = None, setModifiedTime = None, setNameOfficeVisitID = None, setOfficeVisitGuardianResponseID = None, setOfficeVisitReferralReasonID = None, setOfficeVisitReferralResultID = None, setReferralCompleted = None, setReferralDate = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, setUserIDVoidedBy = None, setVoidedTime = None, setVoidNote = None, returnNameOfficeVisitReferralID = False, returnCompletionDate = False, returnCreatedTime = False, returnHealthProfessionalIDReferredBy = False, returnHealthProfessionalIDReferredTo = False, returnIsVoid = False, returnModifiedTime = False, returnNameOfficeVisitID = False, returnOfficeVisitGuardianResponseID = False, returnOfficeVisitReferralReasonID = False, returnOfficeVisitReferralResultID = False, returnReferralCompleted = False, returnReferralDate = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnUserIDVoidedBy = False, returnVoidedTime = False, returnVoidNote = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/NameOfficeVisitReferral/" + str(NameOfficeVisitReferralID), verb = "post", return_params_list = return_params, payload = payload_params)

def createNameOfficeVisitReferral(EntityID = 1, setNameOfficeVisitReferralID = None, setCompletionDate = None, setCreatedTime = None, setHealthProfessionalIDReferredBy = None, setHealthProfessionalIDReferredTo = None, setIsVoid = None, setModifiedTime = None, setNameOfficeVisitID = None, setOfficeVisitGuardianResponseID = None, setOfficeVisitReferralReasonID = None, setOfficeVisitReferralResultID = None, setReferralCompleted = None, setReferralDate = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, setUserIDVoidedBy = None, setVoidedTime = None, setVoidNote = None, returnNameOfficeVisitReferralID = False, returnCompletionDate = False, returnCreatedTime = False, returnHealthProfessionalIDReferredBy = False, returnHealthProfessionalIDReferredTo = False, returnIsVoid = False, returnModifiedTime = False, returnNameOfficeVisitID = False, returnOfficeVisitGuardianResponseID = False, returnOfficeVisitReferralReasonID = False, returnOfficeVisitReferralResultID = False, returnReferralCompleted = False, returnReferralDate = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnUserIDVoidedBy = False, returnVoidedTime = False, returnVoidNote = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/NameOfficeVisitReferral/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteNameOfficeVisitReferral(NameOfficeVisitReferralID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/NameOfficeVisitReferral/" + str(NameOfficeVisitReferralID), verb = "delete")


def getEveryNameOfficeVisitSecuredNote(searchConditions = [], EntityID = 1, returnNameOfficeVisitSecuredNoteID = False, returnCreatedTime = False, returnModifiedTime = False, returnNameOfficeVisitID = False, returnNote = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every NameOfficeVisitSecuredNote in the district.

    This function returns a dataframe of every NameOfficeVisitSecuredNote in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/NameOfficeVisitSecuredNote/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/NameOfficeVisitSecuredNote/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getNameOfficeVisitSecuredNote(NameOfficeVisitSecuredNoteID, EntityID = 1, returnNameOfficeVisitSecuredNoteID = False, returnCreatedTime = False, returnModifiedTime = False, returnNameOfficeVisitID = False, returnNote = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/NameOfficeVisitSecuredNote/" + str(NameOfficeVisitSecuredNoteID), verb = "get", return_params_list = return_params)

def modifyNameOfficeVisitSecuredNote(NameOfficeVisitSecuredNoteID, EntityID = 1, setNameOfficeVisitSecuredNoteID = None, setCreatedTime = None, setModifiedTime = None, setNameOfficeVisitID = None, setNote = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnNameOfficeVisitSecuredNoteID = False, returnCreatedTime = False, returnModifiedTime = False, returnNameOfficeVisitID = False, returnNote = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/NameOfficeVisitSecuredNote/" + str(NameOfficeVisitSecuredNoteID), verb = "post", return_params_list = return_params, payload = payload_params)

def createNameOfficeVisitSecuredNote(EntityID = 1, setNameOfficeVisitSecuredNoteID = None, setCreatedTime = None, setModifiedTime = None, setNameOfficeVisitID = None, setNote = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnNameOfficeVisitSecuredNoteID = False, returnCreatedTime = False, returnModifiedTime = False, returnNameOfficeVisitID = False, returnNote = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/NameOfficeVisitSecuredNote/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteNameOfficeVisitSecuredNote(NameOfficeVisitSecuredNoteID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/NameOfficeVisitSecuredNote/" + str(NameOfficeVisitSecuredNoteID), verb = "delete")


def getEveryNameOfficeVisitTimeTransaction(searchConditions = [], EntityID = 1, returnNameOfficeVisitTimeTransactionID = False, returnCreatedTime = False, returnDisplayDuration = False, returnDisplayOrder = False, returnDuration = False, returnEndTime = False, returnEndTimeDate = False, returnEndTimeTime = False, returnModifiedTime = False, returnNameOfficeVisitID = False, returnNote = False, returnStartTime = False, returnStartTimeDate = False, returnStartTimeTime = False, returnStatus = False, returnStatusCode = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every NameOfficeVisitTimeTransaction in the district.

    This function returns a dataframe of every NameOfficeVisitTimeTransaction in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/NameOfficeVisitTimeTransaction/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/NameOfficeVisitTimeTransaction/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getNameOfficeVisitTimeTransaction(NameOfficeVisitTimeTransactionID, EntityID = 1, returnNameOfficeVisitTimeTransactionID = False, returnCreatedTime = False, returnDisplayDuration = False, returnDisplayOrder = False, returnDuration = False, returnEndTime = False, returnEndTimeDate = False, returnEndTimeTime = False, returnModifiedTime = False, returnNameOfficeVisitID = False, returnNote = False, returnStartTime = False, returnStartTimeDate = False, returnStartTimeTime = False, returnStatus = False, returnStatusCode = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/NameOfficeVisitTimeTransaction/" + str(NameOfficeVisitTimeTransactionID), verb = "get", return_params_list = return_params)

def modifyNameOfficeVisitTimeTransaction(NameOfficeVisitTimeTransactionID, EntityID = 1, setNameOfficeVisitTimeTransactionID = None, setCreatedTime = None, setDisplayDuration = None, setDisplayOrder = None, setDuration = None, setEndTime = None, setEndTimeDate = None, setEndTimeTime = None, setModifiedTime = None, setNameOfficeVisitID = None, setNote = None, setStartTime = None, setStartTimeDate = None, setStartTimeTime = None, setStatus = None, setStatusCode = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnNameOfficeVisitTimeTransactionID = False, returnCreatedTime = False, returnDisplayDuration = False, returnDisplayOrder = False, returnDuration = False, returnEndTime = False, returnEndTimeDate = False, returnEndTimeTime = False, returnModifiedTime = False, returnNameOfficeVisitID = False, returnNote = False, returnStartTime = False, returnStartTimeDate = False, returnStartTimeTime = False, returnStatus = False, returnStatusCode = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/NameOfficeVisitTimeTransaction/" + str(NameOfficeVisitTimeTransactionID), verb = "post", return_params_list = return_params, payload = payload_params)

def createNameOfficeVisitTimeTransaction(EntityID = 1, setNameOfficeVisitTimeTransactionID = None, setCreatedTime = None, setDisplayDuration = None, setDisplayOrder = None, setDuration = None, setEndTime = None, setEndTimeDate = None, setEndTimeTime = None, setModifiedTime = None, setNameOfficeVisitID = None, setNote = None, setStartTime = None, setStartTimeDate = None, setStartTimeTime = None, setStatus = None, setStatusCode = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnNameOfficeVisitTimeTransactionID = False, returnCreatedTime = False, returnDisplayDuration = False, returnDisplayOrder = False, returnDuration = False, returnEndTime = False, returnEndTimeDate = False, returnEndTimeTime = False, returnModifiedTime = False, returnNameOfficeVisitID = False, returnNote = False, returnStartTime = False, returnStartTimeDate = False, returnStartTimeTime = False, returnStatus = False, returnStatusCode = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/NameOfficeVisitTimeTransaction/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteNameOfficeVisitTimeTransaction(NameOfficeVisitTimeTransactionID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/NameOfficeVisitTimeTransaction/" + str(NameOfficeVisitTimeTransactionID), verb = "delete")


def getEveryNameOfficeVisitTreatment(searchConditions = [], EntityID = 1, returnNameOfficeVisitTreatmentID = False, returnCreatedTime = False, returnModifiedTime = False, returnNameOfficeVisitID = False, returnTreatmentID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every NameOfficeVisitTreatment in the district.

    This function returns a dataframe of every NameOfficeVisitTreatment in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/NameOfficeVisitTreatment/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/NameOfficeVisitTreatment/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getNameOfficeVisitTreatment(NameOfficeVisitTreatmentID, EntityID = 1, returnNameOfficeVisitTreatmentID = False, returnCreatedTime = False, returnModifiedTime = False, returnNameOfficeVisitID = False, returnTreatmentID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/NameOfficeVisitTreatment/" + str(NameOfficeVisitTreatmentID), verb = "get", return_params_list = return_params)

def modifyNameOfficeVisitTreatment(NameOfficeVisitTreatmentID, EntityID = 1, setNameOfficeVisitTreatmentID = None, setCreatedTime = None, setModifiedTime = None, setNameOfficeVisitID = None, setTreatmentID = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnNameOfficeVisitTreatmentID = False, returnCreatedTime = False, returnModifiedTime = False, returnNameOfficeVisitID = False, returnTreatmentID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/NameOfficeVisitTreatment/" + str(NameOfficeVisitTreatmentID), verb = "post", return_params_list = return_params, payload = payload_params)

def createNameOfficeVisitTreatment(EntityID = 1, setNameOfficeVisitTreatmentID = None, setCreatedTime = None, setModifiedTime = None, setNameOfficeVisitID = None, setTreatmentID = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnNameOfficeVisitTreatmentID = False, returnCreatedTime = False, returnModifiedTime = False, returnNameOfficeVisitID = False, returnTreatmentID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/NameOfficeVisitTreatment/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteNameOfficeVisitTreatment(NameOfficeVisitTreatmentID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/NameOfficeVisitTreatment/" + str(NameOfficeVisitTreatmentID), verb = "delete")


def getEveryNameProcedure(searchConditions = [], EntityID = 1, returnNameProcedureID = False, returnAttachmentCount = False, returnAttachmentIndicatorColumn = False, returnCanCreateOccurrenceAsOfDate = False, returnCanCreateScheduleAsOfDate = False, returnCreatedTime = False, returnDistributionType = False, returnDistributionTypeCode = False, returnEndDate = False, returnGreatestProcedureOccurrenceDate = False, returnGreatestProcedureScheduleEndDate = False, returnIsActiveAsOfDate = False, returnIsVoid = False, returnModifiedTime = False, returnNameID = False, returnProcedureID = False, returnProcedureInstruction = False, returnReceivedParentReleaseForm = False, returnReceivedPhysicianDocumentation = False, returnStartDate = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnUserIDVoidedBy = False, returnVoidedTime = False, returnVoidNote = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every NameProcedure in the district.

    This function returns a dataframe of every NameProcedure in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/NameProcedure/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/NameProcedure/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getNameProcedure(NameProcedureID, EntityID = 1, returnNameProcedureID = False, returnAttachmentCount = False, returnAttachmentIndicatorColumn = False, returnCanCreateOccurrenceAsOfDate = False, returnCanCreateScheduleAsOfDate = False, returnCreatedTime = False, returnDistributionType = False, returnDistributionTypeCode = False, returnEndDate = False, returnGreatestProcedureOccurrenceDate = False, returnGreatestProcedureScheduleEndDate = False, returnIsActiveAsOfDate = False, returnIsVoid = False, returnModifiedTime = False, returnNameID = False, returnProcedureID = False, returnProcedureInstruction = False, returnReceivedParentReleaseForm = False, returnReceivedPhysicianDocumentation = False, returnStartDate = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnUserIDVoidedBy = False, returnVoidedTime = False, returnVoidNote = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/NameProcedure/" + str(NameProcedureID), verb = "get", return_params_list = return_params)

def modifyNameProcedure(NameProcedureID, EntityID = 1, setNameProcedureID = None, setAttachmentCount = None, setAttachmentIndicatorColumn = None, setCanCreateOccurrenceAsOfDate = None, setCanCreateScheduleAsOfDate = None, setCreatedTime = None, setDistributionType = None, setDistributionTypeCode = None, setEndDate = None, setGreatestProcedureOccurrenceDate = None, setGreatestProcedureScheduleEndDate = None, setIsActiveAsOfDate = None, setIsVoid = None, setModifiedTime = None, setNameID = None, setProcedureID = None, setProcedureInstruction = None, setReceivedParentReleaseForm = None, setReceivedPhysicianDocumentation = None, setStartDate = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, setUserIDVoidedBy = None, setVoidedTime = None, setVoidNote = None, returnNameProcedureID = False, returnAttachmentCount = False, returnAttachmentIndicatorColumn = False, returnCanCreateOccurrenceAsOfDate = False, returnCanCreateScheduleAsOfDate = False, returnCreatedTime = False, returnDistributionType = False, returnDistributionTypeCode = False, returnEndDate = False, returnGreatestProcedureOccurrenceDate = False, returnGreatestProcedureScheduleEndDate = False, returnIsActiveAsOfDate = False, returnIsVoid = False, returnModifiedTime = False, returnNameID = False, returnProcedureID = False, returnProcedureInstruction = False, returnReceivedParentReleaseForm = False, returnReceivedPhysicianDocumentation = False, returnStartDate = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnUserIDVoidedBy = False, returnVoidedTime = False, returnVoidNote = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/NameProcedure/" + str(NameProcedureID), verb = "post", return_params_list = return_params, payload = payload_params)

def createNameProcedure(EntityID = 1, setNameProcedureID = None, setAttachmentCount = None, setAttachmentIndicatorColumn = None, setCanCreateOccurrenceAsOfDate = None, setCanCreateScheduleAsOfDate = None, setCreatedTime = None, setDistributionType = None, setDistributionTypeCode = None, setEndDate = None, setGreatestProcedureOccurrenceDate = None, setGreatestProcedureScheduleEndDate = None, setIsActiveAsOfDate = None, setIsVoid = None, setModifiedTime = None, setNameID = None, setProcedureID = None, setProcedureInstruction = None, setReceivedParentReleaseForm = None, setReceivedPhysicianDocumentation = None, setStartDate = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, setUserIDVoidedBy = None, setVoidedTime = None, setVoidNote = None, returnNameProcedureID = False, returnAttachmentCount = False, returnAttachmentIndicatorColumn = False, returnCanCreateOccurrenceAsOfDate = False, returnCanCreateScheduleAsOfDate = False, returnCreatedTime = False, returnDistributionType = False, returnDistributionTypeCode = False, returnEndDate = False, returnGreatestProcedureOccurrenceDate = False, returnGreatestProcedureScheduleEndDate = False, returnIsActiveAsOfDate = False, returnIsVoid = False, returnModifiedTime = False, returnNameID = False, returnProcedureID = False, returnProcedureInstruction = False, returnReceivedParentReleaseForm = False, returnReceivedPhysicianDocumentation = False, returnStartDate = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnUserIDVoidedBy = False, returnVoidedTime = False, returnVoidNote = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/NameProcedure/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteNameProcedure(NameProcedureID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/NameProcedure/" + str(NameProcedureID), verb = "delete")


def getEveryNameProcedureNote(searchConditions = [], EntityID = 1, returnNameProcedureNoteID = False, returnCreatedTime = False, returnModifiedTime = False, returnNameProcedureID = False, returnNote = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every NameProcedureNote in the district.

    This function returns a dataframe of every NameProcedureNote in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/NameProcedureNote/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/NameProcedureNote/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getNameProcedureNote(NameProcedureNoteID, EntityID = 1, returnNameProcedureNoteID = False, returnCreatedTime = False, returnModifiedTime = False, returnNameProcedureID = False, returnNote = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/NameProcedureNote/" + str(NameProcedureNoteID), verb = "get", return_params_list = return_params)

def modifyNameProcedureNote(NameProcedureNoteID, EntityID = 1, setNameProcedureNoteID = None, setCreatedTime = None, setModifiedTime = None, setNameProcedureID = None, setNote = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnNameProcedureNoteID = False, returnCreatedTime = False, returnModifiedTime = False, returnNameProcedureID = False, returnNote = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/NameProcedureNote/" + str(NameProcedureNoteID), verb = "post", return_params_list = return_params, payload = payload_params)

def createNameProcedureNote(EntityID = 1, setNameProcedureNoteID = None, setCreatedTime = None, setModifiedTime = None, setNameProcedureID = None, setNote = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnNameProcedureNoteID = False, returnCreatedTime = False, returnModifiedTime = False, returnNameProcedureID = False, returnNote = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/NameProcedureNote/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteNameProcedureNote(NameProcedureNoteID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/NameProcedureNote/" + str(NameProcedureNoteID), verb = "delete")


def getEveryNameProcedureOccurrence(searchConditions = [], EntityID = 1, returnNameProcedureOccurrenceID = False, returnCreatedTime = False, returnEndTime = False, returnEntityID = False, returnFromOfficeVisit = False, returnIsVoid = False, returnModifiedTime = False, returnNameIDPerformedByOverride = False, returnNameOfficeVisitID = False, returnNameProcedureID = False, returnNameProcedureScheduleDayID = False, returnNote = False, returnNotPerformedReasonID = False, returnOccurrenceDate = False, returnOccurrenceType = False, returnOccurrenceTypeCode = False, returnProcedureInstructionDisplay = False, returnScheduledStartTimeOverride = False, returnStartTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnUserIDVoidedBy = False, returnVoidedTime = False, returnVoidNote = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every NameProcedureOccurrence in the district.

    This function returns a dataframe of every NameProcedureOccurrence in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/NameProcedureOccurrence/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/NameProcedureOccurrence/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getNameProcedureOccurrence(NameProcedureOccurrenceID, EntityID = 1, returnNameProcedureOccurrenceID = False, returnCreatedTime = False, returnEndTime = False, returnEntityID = False, returnFromOfficeVisit = False, returnIsVoid = False, returnModifiedTime = False, returnNameIDPerformedByOverride = False, returnNameOfficeVisitID = False, returnNameProcedureID = False, returnNameProcedureScheduleDayID = False, returnNote = False, returnNotPerformedReasonID = False, returnOccurrenceDate = False, returnOccurrenceType = False, returnOccurrenceTypeCode = False, returnProcedureInstructionDisplay = False, returnScheduledStartTimeOverride = False, returnStartTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnUserIDVoidedBy = False, returnVoidedTime = False, returnVoidNote = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/NameProcedureOccurrence/" + str(NameProcedureOccurrenceID), verb = "get", return_params_list = return_params)

def modifyNameProcedureOccurrence(NameProcedureOccurrenceID, EntityID = 1, setNameProcedureOccurrenceID = None, setCreatedTime = None, setEndTime = None, setEntityID = None, setFromOfficeVisit = None, setIsVoid = None, setModifiedTime = None, setNameIDPerformedByOverride = None, setNameOfficeVisitID = None, setNameProcedureID = None, setNameProcedureScheduleDayID = None, setNote = None, setNotPerformedReasonID = None, setOccurrenceDate = None, setOccurrenceType = None, setOccurrenceTypeCode = None, setProcedureInstructionDisplay = None, setScheduledStartTimeOverride = None, setStartTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, setUserIDVoidedBy = None, setVoidedTime = None, setVoidNote = None, returnNameProcedureOccurrenceID = False, returnCreatedTime = False, returnEndTime = False, returnEntityID = False, returnFromOfficeVisit = False, returnIsVoid = False, returnModifiedTime = False, returnNameIDPerformedByOverride = False, returnNameOfficeVisitID = False, returnNameProcedureID = False, returnNameProcedureScheduleDayID = False, returnNote = False, returnNotPerformedReasonID = False, returnOccurrenceDate = False, returnOccurrenceType = False, returnOccurrenceTypeCode = False, returnProcedureInstructionDisplay = False, returnScheduledStartTimeOverride = False, returnStartTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnUserIDVoidedBy = False, returnVoidedTime = False, returnVoidNote = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/NameProcedureOccurrence/" + str(NameProcedureOccurrenceID), verb = "post", return_params_list = return_params, payload = payload_params)

def createNameProcedureOccurrence(EntityID = 1, setNameProcedureOccurrenceID = None, setCreatedTime = None, setEndTime = None, setEntityID = None, setFromOfficeVisit = None, setIsVoid = None, setModifiedTime = None, setNameIDPerformedByOverride = None, setNameOfficeVisitID = None, setNameProcedureID = None, setNameProcedureScheduleDayID = None, setNote = None, setNotPerformedReasonID = None, setOccurrenceDate = None, setOccurrenceType = None, setOccurrenceTypeCode = None, setProcedureInstructionDisplay = None, setScheduledStartTimeOverride = None, setStartTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, setUserIDVoidedBy = None, setVoidedTime = None, setVoidNote = None, returnNameProcedureOccurrenceID = False, returnCreatedTime = False, returnEndTime = False, returnEntityID = False, returnFromOfficeVisit = False, returnIsVoid = False, returnModifiedTime = False, returnNameIDPerformedByOverride = False, returnNameOfficeVisitID = False, returnNameProcedureID = False, returnNameProcedureScheduleDayID = False, returnNote = False, returnNotPerformedReasonID = False, returnOccurrenceDate = False, returnOccurrenceType = False, returnOccurrenceTypeCode = False, returnProcedureInstructionDisplay = False, returnScheduledStartTimeOverride = False, returnStartTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnUserIDVoidedBy = False, returnVoidedTime = False, returnVoidNote = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/NameProcedureOccurrence/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteNameProcedureOccurrence(NameProcedureOccurrenceID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/NameProcedureOccurrence/" + str(NameProcedureOccurrenceID), verb = "delete")


def getEveryNameProcedureSchedule(searchConditions = [], EntityID = 1, returnNameProcedureScheduleID = False, returnCalendarID = False, returnCreatedTime = False, returnDescription = False, returnEndDate = False, returnEntityID = False, returnHasEndedAsOfDate = False, returnIncludePartialDays = False, returnIsVoid = False, returnLastCompletedOccurrenceDate = False, returnModifiedTime = False, returnNameIDPerformedBy = False, returnNameProcedureID = False, returnProcedureInstructionOverride = False, returnRepeatsBiWeekly = False, returnScheduledStartTime = False, returnStartDate = False, returnUseProcedureInstructionOverride = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnUserIDVoidedBy = False, returnVoidedTime = False, returnVoidNote = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every NameProcedureSchedule in the district.

    This function returns a dataframe of every NameProcedureSchedule in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/NameProcedureSchedule/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/NameProcedureSchedule/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getNameProcedureSchedule(NameProcedureScheduleID, EntityID = 1, returnNameProcedureScheduleID = False, returnCalendarID = False, returnCreatedTime = False, returnDescription = False, returnEndDate = False, returnEntityID = False, returnHasEndedAsOfDate = False, returnIncludePartialDays = False, returnIsVoid = False, returnLastCompletedOccurrenceDate = False, returnModifiedTime = False, returnNameIDPerformedBy = False, returnNameProcedureID = False, returnProcedureInstructionOverride = False, returnRepeatsBiWeekly = False, returnScheduledStartTime = False, returnStartDate = False, returnUseProcedureInstructionOverride = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnUserIDVoidedBy = False, returnVoidedTime = False, returnVoidNote = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/NameProcedureSchedule/" + str(NameProcedureScheduleID), verb = "get", return_params_list = return_params)

def modifyNameProcedureSchedule(NameProcedureScheduleID, EntityID = 1, setNameProcedureScheduleID = None, setCalendarID = None, setCreatedTime = None, setDescription = None, setEndDate = None, setEntityID = None, setHasEndedAsOfDate = None, setIncludePartialDays = None, setIsVoid = None, setLastCompletedOccurrenceDate = None, setModifiedTime = None, setNameIDPerformedBy = None, setNameProcedureID = None, setProcedureInstructionOverride = None, setRepeatsBiWeekly = None, setScheduledStartTime = None, setStartDate = None, setUseProcedureInstructionOverride = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, setUserIDVoidedBy = None, setVoidedTime = None, setVoidNote = None, returnNameProcedureScheduleID = False, returnCalendarID = False, returnCreatedTime = False, returnDescription = False, returnEndDate = False, returnEntityID = False, returnHasEndedAsOfDate = False, returnIncludePartialDays = False, returnIsVoid = False, returnLastCompletedOccurrenceDate = False, returnModifiedTime = False, returnNameIDPerformedBy = False, returnNameProcedureID = False, returnProcedureInstructionOverride = False, returnRepeatsBiWeekly = False, returnScheduledStartTime = False, returnStartDate = False, returnUseProcedureInstructionOverride = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnUserIDVoidedBy = False, returnVoidedTime = False, returnVoidNote = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/NameProcedureSchedule/" + str(NameProcedureScheduleID), verb = "post", return_params_list = return_params, payload = payload_params)

def createNameProcedureSchedule(EntityID = 1, setNameProcedureScheduleID = None, setCalendarID = None, setCreatedTime = None, setDescription = None, setEndDate = None, setEntityID = None, setHasEndedAsOfDate = None, setIncludePartialDays = None, setIsVoid = None, setLastCompletedOccurrenceDate = None, setModifiedTime = None, setNameIDPerformedBy = None, setNameProcedureID = None, setProcedureInstructionOverride = None, setRepeatsBiWeekly = None, setScheduledStartTime = None, setStartDate = None, setUseProcedureInstructionOverride = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, setUserIDVoidedBy = None, setVoidedTime = None, setVoidNote = None, returnNameProcedureScheduleID = False, returnCalendarID = False, returnCreatedTime = False, returnDescription = False, returnEndDate = False, returnEntityID = False, returnHasEndedAsOfDate = False, returnIncludePartialDays = False, returnIsVoid = False, returnLastCompletedOccurrenceDate = False, returnModifiedTime = False, returnNameIDPerformedBy = False, returnNameProcedureID = False, returnProcedureInstructionOverride = False, returnRepeatsBiWeekly = False, returnScheduledStartTime = False, returnStartDate = False, returnUseProcedureInstructionOverride = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnUserIDVoidedBy = False, returnVoidedTime = False, returnVoidNote = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/NameProcedureSchedule/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteNameProcedureSchedule(NameProcedureScheduleID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/NameProcedureSchedule/" + str(NameProcedureScheduleID), verb = "delete")


def getEveryNameProcedureScheduleDay(searchConditions = [], EntityID = 1, returnNameProcedureScheduleDayID = False, returnCreatedTime = False, returnDay = False, returnDayOfTheWeek = False, returnIsActive = False, returnModifiedTime = False, returnNameIDPerformedByOverride = False, returnNameProcedureScheduleID = False, returnScheduledStartTimeOverride = False, returnStartTime = False, returnUsePerformedByNameOverride = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnUseScheduledStartTimeOverride = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every NameProcedureScheduleDay in the district.

    This function returns a dataframe of every NameProcedureScheduleDay in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/NameProcedureScheduleDay/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/NameProcedureScheduleDay/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getNameProcedureScheduleDay(NameProcedureScheduleDayID, EntityID = 1, returnNameProcedureScheduleDayID = False, returnCreatedTime = False, returnDay = False, returnDayOfTheWeek = False, returnIsActive = False, returnModifiedTime = False, returnNameIDPerformedByOverride = False, returnNameProcedureScheduleID = False, returnScheduledStartTimeOverride = False, returnStartTime = False, returnUsePerformedByNameOverride = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnUseScheduledStartTimeOverride = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/NameProcedureScheduleDay/" + str(NameProcedureScheduleDayID), verb = "get", return_params_list = return_params)

def modifyNameProcedureScheduleDay(NameProcedureScheduleDayID, EntityID = 1, setNameProcedureScheduleDayID = None, setCreatedTime = None, setDay = None, setDayOfTheWeek = None, setIsActive = None, setModifiedTime = None, setNameIDPerformedByOverride = None, setNameProcedureScheduleID = None, setScheduledStartTimeOverride = None, setStartTime = None, setUsePerformedByNameOverride = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, setUseScheduledStartTimeOverride = None, returnNameProcedureScheduleDayID = False, returnCreatedTime = False, returnDay = False, returnDayOfTheWeek = False, returnIsActive = False, returnModifiedTime = False, returnNameIDPerformedByOverride = False, returnNameProcedureScheduleID = False, returnScheduledStartTimeOverride = False, returnStartTime = False, returnUsePerformedByNameOverride = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnUseScheduledStartTimeOverride = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/NameProcedureScheduleDay/" + str(NameProcedureScheduleDayID), verb = "post", return_params_list = return_params, payload = payload_params)

def createNameProcedureScheduleDay(EntityID = 1, setNameProcedureScheduleDayID = None, setCreatedTime = None, setDay = None, setDayOfTheWeek = None, setIsActive = None, setModifiedTime = None, setNameIDPerformedByOverride = None, setNameProcedureScheduleID = None, setScheduledStartTimeOverride = None, setStartTime = None, setUsePerformedByNameOverride = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, setUseScheduledStartTimeOverride = None, returnNameProcedureScheduleDayID = False, returnCreatedTime = False, returnDay = False, returnDayOfTheWeek = False, returnIsActive = False, returnModifiedTime = False, returnNameIDPerformedByOverride = False, returnNameProcedureScheduleID = False, returnScheduledStartTimeOverride = False, returnStartTime = False, returnUsePerformedByNameOverride = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnUseScheduledStartTimeOverride = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/NameProcedureScheduleDay/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteNameProcedureScheduleDay(NameProcedureScheduleDayID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/NameProcedureScheduleDay/" + str(NameProcedureScheduleDayID), verb = "delete")


def getEveryNameProcedureSecuredNote(searchConditions = [], EntityID = 1, returnNameProcedureSecuredNoteID = False, returnCreatedTime = False, returnModifiedTime = False, returnNameProcedureID = False, returnNote = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every NameProcedureSecuredNote in the district.

    This function returns a dataframe of every NameProcedureSecuredNote in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/NameProcedureSecuredNote/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/NameProcedureSecuredNote/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getNameProcedureSecuredNote(NameProcedureSecuredNoteID, EntityID = 1, returnNameProcedureSecuredNoteID = False, returnCreatedTime = False, returnModifiedTime = False, returnNameProcedureID = False, returnNote = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/NameProcedureSecuredNote/" + str(NameProcedureSecuredNoteID), verb = "get", return_params_list = return_params)

def modifyNameProcedureSecuredNote(NameProcedureSecuredNoteID, EntityID = 1, setNameProcedureSecuredNoteID = None, setCreatedTime = None, setModifiedTime = None, setNameProcedureID = None, setNote = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnNameProcedureSecuredNoteID = False, returnCreatedTime = False, returnModifiedTime = False, returnNameProcedureID = False, returnNote = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/NameProcedureSecuredNote/" + str(NameProcedureSecuredNoteID), verb = "post", return_params_list = return_params, payload = payload_params)

def createNameProcedureSecuredNote(EntityID = 1, setNameProcedureSecuredNoteID = None, setCreatedTime = None, setModifiedTime = None, setNameProcedureID = None, setNote = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnNameProcedureSecuredNoteID = False, returnCreatedTime = False, returnModifiedTime = False, returnNameProcedureID = False, returnNote = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/NameProcedureSecuredNote/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteNameProcedureSecuredNote(NameProcedureSecuredNoteID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/NameProcedureSecuredNote/" + str(NameProcedureSecuredNoteID), verb = "delete")


def getEveryNotificationMethod(searchConditions = [], EntityID = 1, returnNotificationMethodID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every NotificationMethod in the district.

    This function returns a dataframe of every NotificationMethod in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/NotificationMethod/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/NotificationMethod/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getNotificationMethod(NotificationMethodID, EntityID = 1, returnNotificationMethodID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/NotificationMethod/" + str(NotificationMethodID), verb = "get", return_params_list = return_params)

def modifyNotificationMethod(NotificationMethodID, EntityID = 1, setNotificationMethodID = None, setCode = None, setCodeDescription = None, setCreatedTime = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setModifiedTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnNotificationMethodID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/NotificationMethod/" + str(NotificationMethodID), verb = "post", return_params_list = return_params, payload = payload_params)

def createNotificationMethod(EntityID = 1, setNotificationMethodID = None, setCode = None, setCodeDescription = None, setCreatedTime = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setModifiedTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnNotificationMethodID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/NotificationMethod/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteNotificationMethod(NotificationMethodID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/NotificationMethod/" + str(NotificationMethodID), verb = "delete")


def getEveryNotPerformedReason(searchConditions = [], EntityID = 1, returnNotPerformedReasonID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every NotPerformedReason in the district.

    This function returns a dataframe of every NotPerformedReason in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/NotPerformedReason/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/NotPerformedReason/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getNotPerformedReason(NotPerformedReasonID, EntityID = 1, returnNotPerformedReasonID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/NotPerformedReason/" + str(NotPerformedReasonID), verb = "get", return_params_list = return_params)

def modifyNotPerformedReason(NotPerformedReasonID, EntityID = 1, setNotPerformedReasonID = None, setCode = None, setCodeDescription = None, setCreatedTime = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setModifiedTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnNotPerformedReasonID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/NotPerformedReason/" + str(NotPerformedReasonID), verb = "post", return_params_list = return_params, payload = payload_params)

def createNotPerformedReason(EntityID = 1, setNotPerformedReasonID = None, setCode = None, setCodeDescription = None, setCreatedTime = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setModifiedTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnNotPerformedReasonID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/NotPerformedReason/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteNotPerformedReason(NotPerformedReasonID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/NotPerformedReason/" + str(NotPerformedReasonID), verb = "delete")


def getEveryOfficeVisitComment(searchConditions = [], EntityID = 1, returnOfficeVisitCommentID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every OfficeVisitComment in the district.

    This function returns a dataframe of every OfficeVisitComment in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/OfficeVisitComment/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/OfficeVisitComment/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getOfficeVisitComment(OfficeVisitCommentID, EntityID = 1, returnOfficeVisitCommentID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/OfficeVisitComment/" + str(OfficeVisitCommentID), verb = "get", return_params_list = return_params)

def modifyOfficeVisitComment(OfficeVisitCommentID, EntityID = 1, setOfficeVisitCommentID = None, setCode = None, setCodeDescription = None, setCreatedTime = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setModifiedTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnOfficeVisitCommentID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/OfficeVisitComment/" + str(OfficeVisitCommentID), verb = "post", return_params_list = return_params, payload = payload_params)

def createOfficeVisitComment(EntityID = 1, setOfficeVisitCommentID = None, setCode = None, setCodeDescription = None, setCreatedTime = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setModifiedTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnOfficeVisitCommentID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/OfficeVisitComment/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteOfficeVisitComment(OfficeVisitCommentID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/OfficeVisitComment/" + str(OfficeVisitCommentID), verb = "delete")


def getEveryOfficeVisitDisposition(searchConditions = [], EntityID = 1, returnOfficeVisitDispositionID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every OfficeVisitDisposition in the district.

    This function returns a dataframe of every OfficeVisitDisposition in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/OfficeVisitDisposition/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/OfficeVisitDisposition/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getOfficeVisitDisposition(OfficeVisitDispositionID, EntityID = 1, returnOfficeVisitDispositionID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/OfficeVisitDisposition/" + str(OfficeVisitDispositionID), verb = "get", return_params_list = return_params)

def modifyOfficeVisitDisposition(OfficeVisitDispositionID, EntityID = 1, setOfficeVisitDispositionID = None, setCode = None, setCodeDescription = None, setCreatedTime = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setModifiedTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnOfficeVisitDispositionID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/OfficeVisitDisposition/" + str(OfficeVisitDispositionID), verb = "post", return_params_list = return_params, payload = payload_params)

def createOfficeVisitDisposition(EntityID = 1, setOfficeVisitDispositionID = None, setCode = None, setCodeDescription = None, setCreatedTime = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setModifiedTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnOfficeVisitDispositionID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/OfficeVisitDisposition/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteOfficeVisitDisposition(OfficeVisitDispositionID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/OfficeVisitDisposition/" + str(OfficeVisitDispositionID), verb = "delete")


def getEveryOfficeVisitGuardianResponse(searchConditions = [], EntityID = 1, returnOfficeVisitGuardianResponseID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every OfficeVisitGuardianResponse in the district.

    This function returns a dataframe of every OfficeVisitGuardianResponse in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/OfficeVisitGuardianResponse/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/OfficeVisitGuardianResponse/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getOfficeVisitGuardianResponse(OfficeVisitGuardianResponseID, EntityID = 1, returnOfficeVisitGuardianResponseID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/OfficeVisitGuardianResponse/" + str(OfficeVisitGuardianResponseID), verb = "get", return_params_list = return_params)

def modifyOfficeVisitGuardianResponse(OfficeVisitGuardianResponseID, EntityID = 1, setOfficeVisitGuardianResponseID = None, setCode = None, setCodeDescription = None, setCreatedTime = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setModifiedTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnOfficeVisitGuardianResponseID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/OfficeVisitGuardianResponse/" + str(OfficeVisitGuardianResponseID), verb = "post", return_params_list = return_params, payload = payload_params)

def createOfficeVisitGuardianResponse(EntityID = 1, setOfficeVisitGuardianResponseID = None, setCode = None, setCodeDescription = None, setCreatedTime = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setModifiedTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnOfficeVisitGuardianResponseID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/OfficeVisitGuardianResponse/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteOfficeVisitGuardianResponse(OfficeVisitGuardianResponseID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/OfficeVisitGuardianResponse/" + str(OfficeVisitGuardianResponseID), verb = "delete")


def getEveryOfficeVisitReason(searchConditions = [], EntityID = 1, returnOfficeVisitReasonID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every OfficeVisitReason in the district.

    This function returns a dataframe of every OfficeVisitReason in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/OfficeVisitReason/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/OfficeVisitReason/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getOfficeVisitReason(OfficeVisitReasonID, EntityID = 1, returnOfficeVisitReasonID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/OfficeVisitReason/" + str(OfficeVisitReasonID), verb = "get", return_params_list = return_params)

def modifyOfficeVisitReason(OfficeVisitReasonID, EntityID = 1, setOfficeVisitReasonID = None, setCode = None, setCodeDescription = None, setCreatedTime = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setModifiedTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnOfficeVisitReasonID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/OfficeVisitReason/" + str(OfficeVisitReasonID), verb = "post", return_params_list = return_params, payload = payload_params)

def createOfficeVisitReason(EntityID = 1, setOfficeVisitReasonID = None, setCode = None, setCodeDescription = None, setCreatedTime = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setModifiedTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnOfficeVisitReasonID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/OfficeVisitReason/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteOfficeVisitReason(OfficeVisitReasonID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/OfficeVisitReason/" + str(OfficeVisitReasonID), verb = "delete")


def getEveryOfficeVisitReferralReason(searchConditions = [], EntityID = 1, returnOfficeVisitReferralReasonID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every OfficeVisitReferralReason in the district.

    This function returns a dataframe of every OfficeVisitReferralReason in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/OfficeVisitReferralReason/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/OfficeVisitReferralReason/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getOfficeVisitReferralReason(OfficeVisitReferralReasonID, EntityID = 1, returnOfficeVisitReferralReasonID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/OfficeVisitReferralReason/" + str(OfficeVisitReferralReasonID), verb = "get", return_params_list = return_params)

def modifyOfficeVisitReferralReason(OfficeVisitReferralReasonID, EntityID = 1, setOfficeVisitReferralReasonID = None, setCode = None, setCodeDescription = None, setCreatedTime = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setModifiedTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnOfficeVisitReferralReasonID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/OfficeVisitReferralReason/" + str(OfficeVisitReferralReasonID), verb = "post", return_params_list = return_params, payload = payload_params)

def createOfficeVisitReferralReason(EntityID = 1, setOfficeVisitReferralReasonID = None, setCode = None, setCodeDescription = None, setCreatedTime = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setModifiedTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnOfficeVisitReferralReasonID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/OfficeVisitReferralReason/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteOfficeVisitReferralReason(OfficeVisitReferralReasonID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/OfficeVisitReferralReason/" + str(OfficeVisitReferralReasonID), verb = "delete")


def getEveryOfficeVisitReferralResult(searchConditions = [], EntityID = 1, returnOfficeVisitReferralResultID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every OfficeVisitReferralResult in the district.

    This function returns a dataframe of every OfficeVisitReferralResult in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/OfficeVisitReferralResult/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/OfficeVisitReferralResult/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getOfficeVisitReferralResult(OfficeVisitReferralResultID, EntityID = 1, returnOfficeVisitReferralResultID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/OfficeVisitReferralResult/" + str(OfficeVisitReferralResultID), verb = "get", return_params_list = return_params)

def modifyOfficeVisitReferralResult(OfficeVisitReferralResultID, EntityID = 1, setOfficeVisitReferralResultID = None, setCode = None, setCodeDescription = None, setCreatedTime = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setModifiedTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnOfficeVisitReferralResultID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/OfficeVisitReferralResult/" + str(OfficeVisitReferralResultID), verb = "post", return_params_list = return_params, payload = payload_params)

def createOfficeVisitReferralResult(EntityID = 1, setOfficeVisitReferralResultID = None, setCode = None, setCodeDescription = None, setCreatedTime = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setModifiedTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnOfficeVisitReferralResultID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/OfficeVisitReferralResult/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteOfficeVisitReferralResult(OfficeVisitReferralResultID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/OfficeVisitReferralResult/" + str(OfficeVisitReferralResultID), verb = "delete")


def getEveryPhysicalComment(searchConditions = [], EntityID = 1, returnPhysicalCommentID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every PhysicalComment in the district.

    This function returns a dataframe of every PhysicalComment in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/PhysicalComment/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/PhysicalComment/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getPhysicalComment(PhysicalCommentID, EntityID = 1, returnPhysicalCommentID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/PhysicalComment/" + str(PhysicalCommentID), verb = "get", return_params_list = return_params)

def modifyPhysicalComment(PhysicalCommentID, EntityID = 1, setPhysicalCommentID = None, setCode = None, setCodeDescription = None, setCreatedTime = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setModifiedTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnPhysicalCommentID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/PhysicalComment/" + str(PhysicalCommentID), verb = "post", return_params_list = return_params, payload = payload_params)

def createPhysicalComment(EntityID = 1, setPhysicalCommentID = None, setCode = None, setCodeDescription = None, setCreatedTime = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setModifiedTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnPhysicalCommentID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/PhysicalComment/", verb = "put", return_params_list = return_params, payload = payload_params)

def deletePhysicalComment(PhysicalCommentID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/PhysicalComment/" + str(PhysicalCommentID), verb = "delete")


def getEveryPhysicalGuardianNotification(searchConditions = [], EntityID = 1, returnPhysicalGuardianNotificationID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every PhysicalGuardianNotification in the district.

    This function returns a dataframe of every PhysicalGuardianNotification in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/PhysicalGuardianNotification/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/PhysicalGuardianNotification/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getPhysicalGuardianNotification(PhysicalGuardianNotificationID, EntityID = 1, returnPhysicalGuardianNotificationID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/PhysicalGuardianNotification/" + str(PhysicalGuardianNotificationID), verb = "get", return_params_list = return_params)

def modifyPhysicalGuardianNotification(PhysicalGuardianNotificationID, EntityID = 1, setPhysicalGuardianNotificationID = None, setCode = None, setCodeDescription = None, setCreatedTime = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setModifiedTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnPhysicalGuardianNotificationID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/PhysicalGuardianNotification/" + str(PhysicalGuardianNotificationID), verb = "post", return_params_list = return_params, payload = payload_params)

def createPhysicalGuardianNotification(EntityID = 1, setPhysicalGuardianNotificationID = None, setCode = None, setCodeDescription = None, setCreatedTime = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setModifiedTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnPhysicalGuardianNotificationID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/PhysicalGuardianNotification/", verb = "put", return_params_list = return_params, payload = payload_params)

def deletePhysicalGuardianNotification(PhysicalGuardianNotificationID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/PhysicalGuardianNotification/" + str(PhysicalGuardianNotificationID), verb = "delete")


def getEveryPhysicalGuardianResponse(searchConditions = [], EntityID = 1, returnPhysicalGuardianResponseID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every PhysicalGuardianResponse in the district.

    This function returns a dataframe of every PhysicalGuardianResponse in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/PhysicalGuardianResponse/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/PhysicalGuardianResponse/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getPhysicalGuardianResponse(PhysicalGuardianResponseID, EntityID = 1, returnPhysicalGuardianResponseID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/PhysicalGuardianResponse/" + str(PhysicalGuardianResponseID), verb = "get", return_params_list = return_params)

def modifyPhysicalGuardianResponse(PhysicalGuardianResponseID, EntityID = 1, setPhysicalGuardianResponseID = None, setCode = None, setCodeDescription = None, setCreatedTime = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setModifiedTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnPhysicalGuardianResponseID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/PhysicalGuardianResponse/" + str(PhysicalGuardianResponseID), verb = "post", return_params_list = return_params, payload = payload_params)

def createPhysicalGuardianResponse(EntityID = 1, setPhysicalGuardianResponseID = None, setCode = None, setCodeDescription = None, setCreatedTime = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setModifiedTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnPhysicalGuardianResponseID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/PhysicalGuardianResponse/", verb = "put", return_params_list = return_params, payload = payload_params)

def deletePhysicalGuardianResponse(PhysicalGuardianResponseID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/PhysicalGuardianResponse/" + str(PhysicalGuardianResponseID), verb = "delete")


def getEveryPhysicalObservation(searchConditions = [], EntityID = 1, returnPhysicalObservationID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every PhysicalObservation in the district.

    This function returns a dataframe of every PhysicalObservation in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/PhysicalObservation/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/PhysicalObservation/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getPhysicalObservation(PhysicalObservationID, EntityID = 1, returnPhysicalObservationID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/PhysicalObservation/" + str(PhysicalObservationID), verb = "get", return_params_list = return_params)

def modifyPhysicalObservation(PhysicalObservationID, EntityID = 1, setPhysicalObservationID = None, setCode = None, setCodeDescription = None, setCreatedTime = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setModifiedTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnPhysicalObservationID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/PhysicalObservation/" + str(PhysicalObservationID), verb = "post", return_params_list = return_params, payload = payload_params)

def createPhysicalObservation(EntityID = 1, setPhysicalObservationID = None, setCode = None, setCodeDescription = None, setCreatedTime = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setModifiedTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnPhysicalObservationID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/PhysicalObservation/", verb = "put", return_params_list = return_params, payload = payload_params)

def deletePhysicalObservation(PhysicalObservationID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/PhysicalObservation/" + str(PhysicalObservationID), verb = "delete")


def getEveryPhysicalReferralReason(searchConditions = [], EntityID = 1, returnPhysicalReferralReasonID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every PhysicalReferralReason in the district.

    This function returns a dataframe of every PhysicalReferralReason in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/PhysicalReferralReason/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/PhysicalReferralReason/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getPhysicalReferralReason(PhysicalReferralReasonID, EntityID = 1, returnPhysicalReferralReasonID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/PhysicalReferralReason/" + str(PhysicalReferralReasonID), verb = "get", return_params_list = return_params)

def modifyPhysicalReferralReason(PhysicalReferralReasonID, EntityID = 1, setPhysicalReferralReasonID = None, setCode = None, setCodeDescription = None, setCreatedTime = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setModifiedTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnPhysicalReferralReasonID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/PhysicalReferralReason/" + str(PhysicalReferralReasonID), verb = "post", return_params_list = return_params, payload = payload_params)

def createPhysicalReferralReason(EntityID = 1, setPhysicalReferralReasonID = None, setCode = None, setCodeDescription = None, setCreatedTime = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setModifiedTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnPhysicalReferralReasonID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/PhysicalReferralReason/", verb = "put", return_params_list = return_params, payload = payload_params)

def deletePhysicalReferralReason(PhysicalReferralReasonID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/PhysicalReferralReason/" + str(PhysicalReferralReasonID), verb = "delete")


def getEveryPhysicalReferralResult(searchConditions = [], EntityID = 1, returnPhysicalReferralResultID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every PhysicalReferralResult in the district.

    This function returns a dataframe of every PhysicalReferralResult in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/PhysicalReferralResult/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/PhysicalReferralResult/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getPhysicalReferralResult(PhysicalReferralResultID, EntityID = 1, returnPhysicalReferralResultID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/PhysicalReferralResult/" + str(PhysicalReferralResultID), verb = "get", return_params_list = return_params)

def modifyPhysicalReferralResult(PhysicalReferralResultID, EntityID = 1, setPhysicalReferralResultID = None, setCode = None, setCodeDescription = None, setCreatedTime = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setModifiedTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnPhysicalReferralResultID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/PhysicalReferralResult/" + str(PhysicalReferralResultID), verb = "post", return_params_list = return_params, payload = payload_params)

def createPhysicalReferralResult(EntityID = 1, setPhysicalReferralResultID = None, setCode = None, setCodeDescription = None, setCreatedTime = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setModifiedTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnPhysicalReferralResultID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/PhysicalReferralResult/", verb = "put", return_params_list = return_params, payload = payload_params)

def deletePhysicalReferralResult(PhysicalReferralResultID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/PhysicalReferralResult/" + str(PhysicalReferralResultID), verb = "delete")


def getEveryPhysicalScreening(searchConditions = [], EntityID = 1, returnPhysicalScreeningID = False, returnAtRiskForDiabetes = False, returnAttachmentCount = False, returnAttachmentIndicatorColumn = False, returnBodyMassIndex = False, returnBodyMassIndexPercentile = False, returnCreatedTime = False, returnDiabetesScreened = False, returnDisplayHeight = False, returnDistrictID = False, returnEntityIDEnrolledIn = False, returnFirstBloodPressureReading = False, returnHealthProfessionalIDExaminedBy = False, returnHeight = False, returnHeightFeet = False, returnHeightInches = False, returnIsVoid = False, returnModifiedTime = False, returnNameID = False, returnNameOfficeVisitID = False, returnSchoolYearID = False, returnScreeningDate = False, returnSecondBloodPressureReading = False, returnSportsPhysical = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnUserIDVoidedBy = False, returnVoidedTime = False, returnVoidNote = False, returnWeight = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every PhysicalScreening in the district.

    This function returns a dataframe of every PhysicalScreening in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/PhysicalScreening/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/PhysicalScreening/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getPhysicalScreening(PhysicalScreeningID, EntityID = 1, returnPhysicalScreeningID = False, returnAtRiskForDiabetes = False, returnAttachmentCount = False, returnAttachmentIndicatorColumn = False, returnBodyMassIndex = False, returnBodyMassIndexPercentile = False, returnCreatedTime = False, returnDiabetesScreened = False, returnDisplayHeight = False, returnDistrictID = False, returnEntityIDEnrolledIn = False, returnFirstBloodPressureReading = False, returnHealthProfessionalIDExaminedBy = False, returnHeight = False, returnHeightFeet = False, returnHeightInches = False, returnIsVoid = False, returnModifiedTime = False, returnNameID = False, returnNameOfficeVisitID = False, returnSchoolYearID = False, returnScreeningDate = False, returnSecondBloodPressureReading = False, returnSportsPhysical = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnUserIDVoidedBy = False, returnVoidedTime = False, returnVoidNote = False, returnWeight = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/PhysicalScreening/" + str(PhysicalScreeningID), verb = "get", return_params_list = return_params)

def modifyPhysicalScreening(PhysicalScreeningID, EntityID = 1, setPhysicalScreeningID = None, setAtRiskForDiabetes = None, setAttachmentCount = None, setAttachmentIndicatorColumn = None, setBodyMassIndex = None, setBodyMassIndexPercentile = None, setCreatedTime = None, setDiabetesScreened = None, setDisplayHeight = None, setDistrictID = None, setEntityIDEnrolledIn = None, setFirstBloodPressureReading = None, setHealthProfessionalIDExaminedBy = None, setHeight = None, setHeightFeet = None, setHeightInches = None, setIsVoid = None, setModifiedTime = None, setNameID = None, setNameOfficeVisitID = None, setSchoolYearID = None, setScreeningDate = None, setSecondBloodPressureReading = None, setSportsPhysical = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, setUserIDVoidedBy = None, setVoidedTime = None, setVoidNote = None, setWeight = None, returnPhysicalScreeningID = False, returnAtRiskForDiabetes = False, returnAttachmentCount = False, returnAttachmentIndicatorColumn = False, returnBodyMassIndex = False, returnBodyMassIndexPercentile = False, returnCreatedTime = False, returnDiabetesScreened = False, returnDisplayHeight = False, returnDistrictID = False, returnEntityIDEnrolledIn = False, returnFirstBloodPressureReading = False, returnHealthProfessionalIDExaminedBy = False, returnHeight = False, returnHeightFeet = False, returnHeightInches = False, returnIsVoid = False, returnModifiedTime = False, returnNameID = False, returnNameOfficeVisitID = False, returnSchoolYearID = False, returnScreeningDate = False, returnSecondBloodPressureReading = False, returnSportsPhysical = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnUserIDVoidedBy = False, returnVoidedTime = False, returnVoidNote = False, returnWeight = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/PhysicalScreening/" + str(PhysicalScreeningID), verb = "post", return_params_list = return_params, payload = payload_params)

def createPhysicalScreening(EntityID = 1, setPhysicalScreeningID = None, setAtRiskForDiabetes = None, setAttachmentCount = None, setAttachmentIndicatorColumn = None, setBodyMassIndex = None, setBodyMassIndexPercentile = None, setCreatedTime = None, setDiabetesScreened = None, setDisplayHeight = None, setDistrictID = None, setEntityIDEnrolledIn = None, setFirstBloodPressureReading = None, setHealthProfessionalIDExaminedBy = None, setHeight = None, setHeightFeet = None, setHeightInches = None, setIsVoid = None, setModifiedTime = None, setNameID = None, setNameOfficeVisitID = None, setSchoolYearID = None, setScreeningDate = None, setSecondBloodPressureReading = None, setSportsPhysical = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, setUserIDVoidedBy = None, setVoidedTime = None, setVoidNote = None, setWeight = None, returnPhysicalScreeningID = False, returnAtRiskForDiabetes = False, returnAttachmentCount = False, returnAttachmentIndicatorColumn = False, returnBodyMassIndex = False, returnBodyMassIndexPercentile = False, returnCreatedTime = False, returnDiabetesScreened = False, returnDisplayHeight = False, returnDistrictID = False, returnEntityIDEnrolledIn = False, returnFirstBloodPressureReading = False, returnHealthProfessionalIDExaminedBy = False, returnHeight = False, returnHeightFeet = False, returnHeightInches = False, returnIsVoid = False, returnModifiedTime = False, returnNameID = False, returnNameOfficeVisitID = False, returnSchoolYearID = False, returnScreeningDate = False, returnSecondBloodPressureReading = False, returnSportsPhysical = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnUserIDVoidedBy = False, returnVoidedTime = False, returnVoidNote = False, returnWeight = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/PhysicalScreening/", verb = "put", return_params_list = return_params, payload = payload_params)

def deletePhysicalScreening(PhysicalScreeningID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/PhysicalScreening/" + str(PhysicalScreeningID), verb = "delete")


def getEveryPhysicalScreeningComment(searchConditions = [], EntityID = 1, returnPhysicalScreeningCommentID = False, returnCreatedTime = False, returnModifiedTime = False, returnPhysicalCommentID = False, returnPhysicalScreeningID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every PhysicalScreeningComment in the district.

    This function returns a dataframe of every PhysicalScreeningComment in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/PhysicalScreeningComment/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/PhysicalScreeningComment/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getPhysicalScreeningComment(PhysicalScreeningCommentID, EntityID = 1, returnPhysicalScreeningCommentID = False, returnCreatedTime = False, returnModifiedTime = False, returnPhysicalCommentID = False, returnPhysicalScreeningID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/PhysicalScreeningComment/" + str(PhysicalScreeningCommentID), verb = "get", return_params_list = return_params)

def modifyPhysicalScreeningComment(PhysicalScreeningCommentID, EntityID = 1, setPhysicalScreeningCommentID = None, setCreatedTime = None, setModifiedTime = None, setPhysicalCommentID = None, setPhysicalScreeningID = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnPhysicalScreeningCommentID = False, returnCreatedTime = False, returnModifiedTime = False, returnPhysicalCommentID = False, returnPhysicalScreeningID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/PhysicalScreeningComment/" + str(PhysicalScreeningCommentID), verb = "post", return_params_list = return_params, payload = payload_params)

def createPhysicalScreeningComment(EntityID = 1, setPhysicalScreeningCommentID = None, setCreatedTime = None, setModifiedTime = None, setPhysicalCommentID = None, setPhysicalScreeningID = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnPhysicalScreeningCommentID = False, returnCreatedTime = False, returnModifiedTime = False, returnPhysicalCommentID = False, returnPhysicalScreeningID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/PhysicalScreeningComment/", verb = "put", return_params_list = return_params, payload = payload_params)

def deletePhysicalScreeningComment(PhysicalScreeningCommentID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/PhysicalScreeningComment/" + str(PhysicalScreeningCommentID), verb = "delete")


def getEveryPhysicalScreeningNote(searchConditions = [], EntityID = 1, returnPhysicalScreeningNoteID = False, returnCreatedTime = False, returnModifiedTime = False, returnNote = False, returnPhysicalScreeningID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every PhysicalScreeningNote in the district.

    This function returns a dataframe of every PhysicalScreeningNote in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/PhysicalScreeningNote/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/PhysicalScreeningNote/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getPhysicalScreeningNote(PhysicalScreeningNoteID, EntityID = 1, returnPhysicalScreeningNoteID = False, returnCreatedTime = False, returnModifiedTime = False, returnNote = False, returnPhysicalScreeningID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/PhysicalScreeningNote/" + str(PhysicalScreeningNoteID), verb = "get", return_params_list = return_params)

def modifyPhysicalScreeningNote(PhysicalScreeningNoteID, EntityID = 1, setPhysicalScreeningNoteID = None, setCreatedTime = None, setModifiedTime = None, setNote = None, setPhysicalScreeningID = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnPhysicalScreeningNoteID = False, returnCreatedTime = False, returnModifiedTime = False, returnNote = False, returnPhysicalScreeningID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/PhysicalScreeningNote/" + str(PhysicalScreeningNoteID), verb = "post", return_params_list = return_params, payload = payload_params)

def createPhysicalScreeningNote(EntityID = 1, setPhysicalScreeningNoteID = None, setCreatedTime = None, setModifiedTime = None, setNote = None, setPhysicalScreeningID = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnPhysicalScreeningNoteID = False, returnCreatedTime = False, returnModifiedTime = False, returnNote = False, returnPhysicalScreeningID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/PhysicalScreeningNote/", verb = "put", return_params_list = return_params, payload = payload_params)

def deletePhysicalScreeningNote(PhysicalScreeningNoteID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/PhysicalScreeningNote/" + str(PhysicalScreeningNoteID), verb = "delete")


def getEveryPhysicalScreeningObservation(searchConditions = [], EntityID = 1, returnPhysicalScreeningObservationID = False, returnCreatedTime = False, returnModifiedTime = False, returnPhysicalObservationID = False, returnPhysicalScreeningID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every PhysicalScreeningObservation in the district.

    This function returns a dataframe of every PhysicalScreeningObservation in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/PhysicalScreeningObservation/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/PhysicalScreeningObservation/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getPhysicalScreeningObservation(PhysicalScreeningObservationID, EntityID = 1, returnPhysicalScreeningObservationID = False, returnCreatedTime = False, returnModifiedTime = False, returnPhysicalObservationID = False, returnPhysicalScreeningID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/PhysicalScreeningObservation/" + str(PhysicalScreeningObservationID), verb = "get", return_params_list = return_params)

def modifyPhysicalScreeningObservation(PhysicalScreeningObservationID, EntityID = 1, setPhysicalScreeningObservationID = None, setCreatedTime = None, setModifiedTime = None, setPhysicalObservationID = None, setPhysicalScreeningID = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnPhysicalScreeningObservationID = False, returnCreatedTime = False, returnModifiedTime = False, returnPhysicalObservationID = False, returnPhysicalScreeningID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/PhysicalScreeningObservation/" + str(PhysicalScreeningObservationID), verb = "post", return_params_list = return_params, payload = payload_params)

def createPhysicalScreeningObservation(EntityID = 1, setPhysicalScreeningObservationID = None, setCreatedTime = None, setModifiedTime = None, setPhysicalObservationID = None, setPhysicalScreeningID = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnPhysicalScreeningObservationID = False, returnCreatedTime = False, returnModifiedTime = False, returnPhysicalObservationID = False, returnPhysicalScreeningID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/PhysicalScreeningObservation/", verb = "put", return_params_list = return_params, payload = payload_params)

def deletePhysicalScreeningObservation(PhysicalScreeningObservationID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/PhysicalScreeningObservation/" + str(PhysicalScreeningObservationID), verb = "delete")


def getEveryPhysicalScreeningReferral(searchConditions = [], EntityID = 1, returnPhysicalScreeningReferralID = False, returnCompletionDate = False, returnCreatedTime = False, returnHealthProfessionalIDReferredBy = False, returnHealthProfessionalIDReferredTo = False, returnIsVoid = False, returnModifiedTime = False, returnPhysicalGuardianNotificationID = False, returnPhysicalGuardianResponseID = False, returnPhysicalReferralReasonID = False, returnPhysicalReferralResultID = False, returnPhysicalScreeningID = False, returnReferralCompleted = False, returnReferralDate = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnUserIDVoidedBy = False, returnVoidedTime = False, returnVoidNote = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every PhysicalScreeningReferral in the district.

    This function returns a dataframe of every PhysicalScreeningReferral in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/PhysicalScreeningReferral/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/PhysicalScreeningReferral/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getPhysicalScreeningReferral(PhysicalScreeningReferralID, EntityID = 1, returnPhysicalScreeningReferralID = False, returnCompletionDate = False, returnCreatedTime = False, returnHealthProfessionalIDReferredBy = False, returnHealthProfessionalIDReferredTo = False, returnIsVoid = False, returnModifiedTime = False, returnPhysicalGuardianNotificationID = False, returnPhysicalGuardianResponseID = False, returnPhysicalReferralReasonID = False, returnPhysicalReferralResultID = False, returnPhysicalScreeningID = False, returnReferralCompleted = False, returnReferralDate = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnUserIDVoidedBy = False, returnVoidedTime = False, returnVoidNote = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/PhysicalScreeningReferral/" + str(PhysicalScreeningReferralID), verb = "get", return_params_list = return_params)

def modifyPhysicalScreeningReferral(PhysicalScreeningReferralID, EntityID = 1, setPhysicalScreeningReferralID = None, setCompletionDate = None, setCreatedTime = None, setHealthProfessionalIDReferredBy = None, setHealthProfessionalIDReferredTo = None, setIsVoid = None, setModifiedTime = None, setPhysicalGuardianNotificationID = None, setPhysicalGuardianResponseID = None, setPhysicalReferralReasonID = None, setPhysicalReferralResultID = None, setPhysicalScreeningID = None, setReferralCompleted = None, setReferralDate = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, setUserIDVoidedBy = None, setVoidedTime = None, setVoidNote = None, returnPhysicalScreeningReferralID = False, returnCompletionDate = False, returnCreatedTime = False, returnHealthProfessionalIDReferredBy = False, returnHealthProfessionalIDReferredTo = False, returnIsVoid = False, returnModifiedTime = False, returnPhysicalGuardianNotificationID = False, returnPhysicalGuardianResponseID = False, returnPhysicalReferralReasonID = False, returnPhysicalReferralResultID = False, returnPhysicalScreeningID = False, returnReferralCompleted = False, returnReferralDate = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnUserIDVoidedBy = False, returnVoidedTime = False, returnVoidNote = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/PhysicalScreeningReferral/" + str(PhysicalScreeningReferralID), verb = "post", return_params_list = return_params, payload = payload_params)

def createPhysicalScreeningReferral(EntityID = 1, setPhysicalScreeningReferralID = None, setCompletionDate = None, setCreatedTime = None, setHealthProfessionalIDReferredBy = None, setHealthProfessionalIDReferredTo = None, setIsVoid = None, setModifiedTime = None, setPhysicalGuardianNotificationID = None, setPhysicalGuardianResponseID = None, setPhysicalReferralReasonID = None, setPhysicalReferralResultID = None, setPhysicalScreeningID = None, setReferralCompleted = None, setReferralDate = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, setUserIDVoidedBy = None, setVoidedTime = None, setVoidNote = None, returnPhysicalScreeningReferralID = False, returnCompletionDate = False, returnCreatedTime = False, returnHealthProfessionalIDReferredBy = False, returnHealthProfessionalIDReferredTo = False, returnIsVoid = False, returnModifiedTime = False, returnPhysicalGuardianNotificationID = False, returnPhysicalGuardianResponseID = False, returnPhysicalReferralReasonID = False, returnPhysicalReferralResultID = False, returnPhysicalScreeningID = False, returnReferralCompleted = False, returnReferralDate = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnUserIDVoidedBy = False, returnVoidedTime = False, returnVoidNote = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/PhysicalScreeningReferral/", verb = "put", return_params_list = return_params, payload = payload_params)

def deletePhysicalScreeningReferral(PhysicalScreeningReferralID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/PhysicalScreeningReferral/" + str(PhysicalScreeningReferralID), verb = "delete")


def getEveryPhysicalScreeningSecuredNote(searchConditions = [], EntityID = 1, returnPhysicalScreeningSecuredNoteID = False, returnCreatedTime = False, returnModifiedTime = False, returnNote = False, returnPhysicalScreeningID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every PhysicalScreeningSecuredNote in the district.

    This function returns a dataframe of every PhysicalScreeningSecuredNote in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/PhysicalScreeningSecuredNote/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/PhysicalScreeningSecuredNote/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getPhysicalScreeningSecuredNote(PhysicalScreeningSecuredNoteID, EntityID = 1, returnPhysicalScreeningSecuredNoteID = False, returnCreatedTime = False, returnModifiedTime = False, returnNote = False, returnPhysicalScreeningID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/PhysicalScreeningSecuredNote/" + str(PhysicalScreeningSecuredNoteID), verb = "get", return_params_list = return_params)

def modifyPhysicalScreeningSecuredNote(PhysicalScreeningSecuredNoteID, EntityID = 1, setPhysicalScreeningSecuredNoteID = None, setCreatedTime = None, setModifiedTime = None, setNote = None, setPhysicalScreeningID = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnPhysicalScreeningSecuredNoteID = False, returnCreatedTime = False, returnModifiedTime = False, returnNote = False, returnPhysicalScreeningID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/PhysicalScreeningSecuredNote/" + str(PhysicalScreeningSecuredNoteID), verb = "post", return_params_list = return_params, payload = payload_params)

def createPhysicalScreeningSecuredNote(EntityID = 1, setPhysicalScreeningSecuredNoteID = None, setCreatedTime = None, setModifiedTime = None, setNote = None, setPhysicalScreeningID = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnPhysicalScreeningSecuredNoteID = False, returnCreatedTime = False, returnModifiedTime = False, returnNote = False, returnPhysicalScreeningID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/PhysicalScreeningSecuredNote/", verb = "put", return_params_list = return_params, payload = payload_params)

def deletePhysicalScreeningSecuredNote(PhysicalScreeningSecuredNoteID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/PhysicalScreeningSecuredNote/" + str(PhysicalScreeningSecuredNoteID), verb = "delete")


def getEveryProcedure(searchConditions = [], EntityID = 1, returnProcedureID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnTreatmentID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every Procedure in the district.

    This function returns a dataframe of every Procedure in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/Procedure/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/Procedure/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getProcedure(ProcedureID, EntityID = 1, returnProcedureID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnTreatmentID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/Procedure/" + str(ProcedureID), verb = "get", return_params_list = return_params)

def modifyProcedure(ProcedureID, EntityID = 1, setProcedureID = None, setCode = None, setCodeDescription = None, setCreatedTime = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setModifiedTime = None, setTreatmentID = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnProcedureID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnTreatmentID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/Procedure/" + str(ProcedureID), verb = "post", return_params_list = return_params, payload = payload_params)

def createProcedure(EntityID = 1, setProcedureID = None, setCode = None, setCodeDescription = None, setCreatedTime = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setModifiedTime = None, setTreatmentID = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnProcedureID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnTreatmentID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/Procedure/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteProcedure(ProcedureID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/Procedure/" + str(ProcedureID), verb = "delete")


def getEveryScoliosisComment(searchConditions = [], EntityID = 1, returnScoliosisCommentID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every ScoliosisComment in the district.

    This function returns a dataframe of every ScoliosisComment in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ScoliosisComment/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ScoliosisComment/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getScoliosisComment(ScoliosisCommentID, EntityID = 1, returnScoliosisCommentID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ScoliosisComment/" + str(ScoliosisCommentID), verb = "get", return_params_list = return_params)

def modifyScoliosisComment(ScoliosisCommentID, EntityID = 1, setScoliosisCommentID = None, setCode = None, setCodeDescription = None, setCreatedTime = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setModifiedTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnScoliosisCommentID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ScoliosisComment/" + str(ScoliosisCommentID), verb = "post", return_params_list = return_params, payload = payload_params)

def createScoliosisComment(EntityID = 1, setScoliosisCommentID = None, setCode = None, setCodeDescription = None, setCreatedTime = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setModifiedTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnScoliosisCommentID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ScoliosisComment/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteScoliosisComment(ScoliosisCommentID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ScoliosisComment/" + str(ScoliosisCommentID), verb = "delete")


def getEveryScoliosisGuardianNotification(searchConditions = [], EntityID = 1, returnScoliosisGuardianNotificationID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every ScoliosisGuardianNotification in the district.

    This function returns a dataframe of every ScoliosisGuardianNotification in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ScoliosisGuardianNotification/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ScoliosisGuardianNotification/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getScoliosisGuardianNotification(ScoliosisGuardianNotificationID, EntityID = 1, returnScoliosisGuardianNotificationID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ScoliosisGuardianNotification/" + str(ScoliosisGuardianNotificationID), verb = "get", return_params_list = return_params)

def modifyScoliosisGuardianNotification(ScoliosisGuardianNotificationID, EntityID = 1, setScoliosisGuardianNotificationID = None, setCode = None, setCodeDescription = None, setCreatedTime = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setModifiedTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnScoliosisGuardianNotificationID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ScoliosisGuardianNotification/" + str(ScoliosisGuardianNotificationID), verb = "post", return_params_list = return_params, payload = payload_params)

def createScoliosisGuardianNotification(EntityID = 1, setScoliosisGuardianNotificationID = None, setCode = None, setCodeDescription = None, setCreatedTime = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setModifiedTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnScoliosisGuardianNotificationID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ScoliosisGuardianNotification/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteScoliosisGuardianNotification(ScoliosisGuardianNotificationID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ScoliosisGuardianNotification/" + str(ScoliosisGuardianNotificationID), verb = "delete")


def getEveryScoliosisGuardianResponse(searchConditions = [], EntityID = 1, returnScoliosisGuardianResponseID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every ScoliosisGuardianResponse in the district.

    This function returns a dataframe of every ScoliosisGuardianResponse in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ScoliosisGuardianResponse/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ScoliosisGuardianResponse/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getScoliosisGuardianResponse(ScoliosisGuardianResponseID, EntityID = 1, returnScoliosisGuardianResponseID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ScoliosisGuardianResponse/" + str(ScoliosisGuardianResponseID), verb = "get", return_params_list = return_params)

def modifyScoliosisGuardianResponse(ScoliosisGuardianResponseID, EntityID = 1, setScoliosisGuardianResponseID = None, setCode = None, setCodeDescription = None, setCreatedTime = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setModifiedTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnScoliosisGuardianResponseID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ScoliosisGuardianResponse/" + str(ScoliosisGuardianResponseID), verb = "post", return_params_list = return_params, payload = payload_params)

def createScoliosisGuardianResponse(EntityID = 1, setScoliosisGuardianResponseID = None, setCode = None, setCodeDescription = None, setCreatedTime = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setModifiedTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnScoliosisGuardianResponseID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ScoliosisGuardianResponse/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteScoliosisGuardianResponse(ScoliosisGuardianResponseID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ScoliosisGuardianResponse/" + str(ScoliosisGuardianResponseID), verb = "delete")


def getEveryScoliosisObservation(searchConditions = [], EntityID = 1, returnScoliosisObservationID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every ScoliosisObservation in the district.

    This function returns a dataframe of every ScoliosisObservation in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ScoliosisObservation/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ScoliosisObservation/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getScoliosisObservation(ScoliosisObservationID, EntityID = 1, returnScoliosisObservationID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ScoliosisObservation/" + str(ScoliosisObservationID), verb = "get", return_params_list = return_params)

def modifyScoliosisObservation(ScoliosisObservationID, EntityID = 1, setScoliosisObservationID = None, setCode = None, setCodeDescription = None, setCreatedTime = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setModifiedTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnScoliosisObservationID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ScoliosisObservation/" + str(ScoliosisObservationID), verb = "post", return_params_list = return_params, payload = payload_params)

def createScoliosisObservation(EntityID = 1, setScoliosisObservationID = None, setCode = None, setCodeDescription = None, setCreatedTime = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setModifiedTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnScoliosisObservationID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ScoliosisObservation/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteScoliosisObservation(ScoliosisObservationID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ScoliosisObservation/" + str(ScoliosisObservationID), verb = "delete")


def getEveryScoliosisReferralReason(searchConditions = [], EntityID = 1, returnScoliosisReferralReasonID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every ScoliosisReferralReason in the district.

    This function returns a dataframe of every ScoliosisReferralReason in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ScoliosisReferralReason/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ScoliosisReferralReason/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getScoliosisReferralReason(ScoliosisReferralReasonID, EntityID = 1, returnScoliosisReferralReasonID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ScoliosisReferralReason/" + str(ScoliosisReferralReasonID), verb = "get", return_params_list = return_params)

def modifyScoliosisReferralReason(ScoliosisReferralReasonID, EntityID = 1, setScoliosisReferralReasonID = None, setCode = None, setCodeDescription = None, setCreatedTime = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setModifiedTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnScoliosisReferralReasonID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ScoliosisReferralReason/" + str(ScoliosisReferralReasonID), verb = "post", return_params_list = return_params, payload = payload_params)

def createScoliosisReferralReason(EntityID = 1, setScoliosisReferralReasonID = None, setCode = None, setCodeDescription = None, setCreatedTime = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setModifiedTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnScoliosisReferralReasonID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ScoliosisReferralReason/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteScoliosisReferralReason(ScoliosisReferralReasonID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ScoliosisReferralReason/" + str(ScoliosisReferralReasonID), verb = "delete")


def getEveryScoliosisReferralResult(searchConditions = [], EntityID = 1, returnScoliosisReferralResultID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every ScoliosisReferralResult in the district.

    This function returns a dataframe of every ScoliosisReferralResult in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ScoliosisReferralResult/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ScoliosisReferralResult/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getScoliosisReferralResult(ScoliosisReferralResultID, EntityID = 1, returnScoliosisReferralResultID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ScoliosisReferralResult/" + str(ScoliosisReferralResultID), verb = "get", return_params_list = return_params)

def modifyScoliosisReferralResult(ScoliosisReferralResultID, EntityID = 1, setScoliosisReferralResultID = None, setCode = None, setCodeDescription = None, setCreatedTime = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setModifiedTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnScoliosisReferralResultID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ScoliosisReferralResult/" + str(ScoliosisReferralResultID), verb = "post", return_params_list = return_params, payload = payload_params)

def createScoliosisReferralResult(EntityID = 1, setScoliosisReferralResultID = None, setCode = None, setCodeDescription = None, setCreatedTime = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setModifiedTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnScoliosisReferralResultID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ScoliosisReferralResult/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteScoliosisReferralResult(ScoliosisReferralResultID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ScoliosisReferralResult/" + str(ScoliosisReferralResultID), verb = "delete")


def getEveryScoliosisResult(searchConditions = [], EntityID = 1, returnScoliosisResultID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnType = False, returnTypeCode = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every ScoliosisResult in the district.

    This function returns a dataframe of every ScoliosisResult in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ScoliosisResult/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ScoliosisResult/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getScoliosisResult(ScoliosisResultID, EntityID = 1, returnScoliosisResultID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnType = False, returnTypeCode = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ScoliosisResult/" + str(ScoliosisResultID), verb = "get", return_params_list = return_params)

def modifyScoliosisResult(ScoliosisResultID, EntityID = 1, setScoliosisResultID = None, setCode = None, setCodeDescription = None, setCreatedTime = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setModifiedTime = None, setType = None, setTypeCode = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnScoliosisResultID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnType = False, returnTypeCode = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ScoliosisResult/" + str(ScoliosisResultID), verb = "post", return_params_list = return_params, payload = payload_params)

def createScoliosisResult(EntityID = 1, setScoliosisResultID = None, setCode = None, setCodeDescription = None, setCreatedTime = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setModifiedTime = None, setType = None, setTypeCode = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnScoliosisResultID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnType = False, returnTypeCode = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ScoliosisResult/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteScoliosisResult(ScoliosisResultID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ScoliosisResult/" + str(ScoliosisResultID), verb = "delete")


def getEveryScoliosisScreening(searchConditions = [], EntityID = 1, returnScoliosisScreeningID = False, returnCreatedTime = False, returnDistrictID = False, returnEntityIDEnrolledIn = False, returnHealthProfessionalIDExaminedBy = False, returnIsVoid = False, returnLatestScoliosisScreeningReferral = False, returnModifiedTime = False, returnNameID = False, returnObservationDescriptionsListDisplay = False, returnRescreen = False, returnSchoolYearID = False, returnScoliosisResultID = False, returnScoliosisTreatmentID = False, returnScreeningDate = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnUserIDVoidedBy = False, returnVoidedTime = False, returnVoidNote = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every ScoliosisScreening in the district.

    This function returns a dataframe of every ScoliosisScreening in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ScoliosisScreening/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ScoliosisScreening/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getScoliosisScreening(ScoliosisScreeningID, EntityID = 1, returnScoliosisScreeningID = False, returnCreatedTime = False, returnDistrictID = False, returnEntityIDEnrolledIn = False, returnHealthProfessionalIDExaminedBy = False, returnIsVoid = False, returnLatestScoliosisScreeningReferral = False, returnModifiedTime = False, returnNameID = False, returnObservationDescriptionsListDisplay = False, returnRescreen = False, returnSchoolYearID = False, returnScoliosisResultID = False, returnScoliosisTreatmentID = False, returnScreeningDate = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnUserIDVoidedBy = False, returnVoidedTime = False, returnVoidNote = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ScoliosisScreening/" + str(ScoliosisScreeningID), verb = "get", return_params_list = return_params)

def modifyScoliosisScreening(ScoliosisScreeningID, EntityID = 1, setScoliosisScreeningID = None, setCreatedTime = None, setDistrictID = None, setEntityIDEnrolledIn = None, setHealthProfessionalIDExaminedBy = None, setIsVoid = None, setLatestScoliosisScreeningReferral = None, setModifiedTime = None, setNameID = None, setObservationDescriptionsListDisplay = None, setRescreen = None, setSchoolYearID = None, setScoliosisResultID = None, setScoliosisTreatmentID = None, setScreeningDate = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, setUserIDVoidedBy = None, setVoidedTime = None, setVoidNote = None, returnScoliosisScreeningID = False, returnCreatedTime = False, returnDistrictID = False, returnEntityIDEnrolledIn = False, returnHealthProfessionalIDExaminedBy = False, returnIsVoid = False, returnLatestScoliosisScreeningReferral = False, returnModifiedTime = False, returnNameID = False, returnObservationDescriptionsListDisplay = False, returnRescreen = False, returnSchoolYearID = False, returnScoliosisResultID = False, returnScoliosisTreatmentID = False, returnScreeningDate = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnUserIDVoidedBy = False, returnVoidedTime = False, returnVoidNote = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ScoliosisScreening/" + str(ScoliosisScreeningID), verb = "post", return_params_list = return_params, payload = payload_params)

def createScoliosisScreening(EntityID = 1, setScoliosisScreeningID = None, setCreatedTime = None, setDistrictID = None, setEntityIDEnrolledIn = None, setHealthProfessionalIDExaminedBy = None, setIsVoid = None, setLatestScoliosisScreeningReferral = None, setModifiedTime = None, setNameID = None, setObservationDescriptionsListDisplay = None, setRescreen = None, setSchoolYearID = None, setScoliosisResultID = None, setScoliosisTreatmentID = None, setScreeningDate = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, setUserIDVoidedBy = None, setVoidedTime = None, setVoidNote = None, returnScoliosisScreeningID = False, returnCreatedTime = False, returnDistrictID = False, returnEntityIDEnrolledIn = False, returnHealthProfessionalIDExaminedBy = False, returnIsVoid = False, returnLatestScoliosisScreeningReferral = False, returnModifiedTime = False, returnNameID = False, returnObservationDescriptionsListDisplay = False, returnRescreen = False, returnSchoolYearID = False, returnScoliosisResultID = False, returnScoliosisTreatmentID = False, returnScreeningDate = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnUserIDVoidedBy = False, returnVoidedTime = False, returnVoidNote = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ScoliosisScreening/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteScoliosisScreening(ScoliosisScreeningID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ScoliosisScreening/" + str(ScoliosisScreeningID), verb = "delete")


def getEveryScoliosisScreeningComment(searchConditions = [], EntityID = 1, returnScoliosisScreeningCommentID = False, returnCreatedTime = False, returnModifiedTime = False, returnScoliosisCommentID = False, returnScoliosisScreeningID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every ScoliosisScreeningComment in the district.

    This function returns a dataframe of every ScoliosisScreeningComment in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ScoliosisScreeningComment/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ScoliosisScreeningComment/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getScoliosisScreeningComment(ScoliosisScreeningCommentID, EntityID = 1, returnScoliosisScreeningCommentID = False, returnCreatedTime = False, returnModifiedTime = False, returnScoliosisCommentID = False, returnScoliosisScreeningID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ScoliosisScreeningComment/" + str(ScoliosisScreeningCommentID), verb = "get", return_params_list = return_params)

def modifyScoliosisScreeningComment(ScoliosisScreeningCommentID, EntityID = 1, setScoliosisScreeningCommentID = None, setCreatedTime = None, setModifiedTime = None, setScoliosisCommentID = None, setScoliosisScreeningID = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnScoliosisScreeningCommentID = False, returnCreatedTime = False, returnModifiedTime = False, returnScoliosisCommentID = False, returnScoliosisScreeningID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ScoliosisScreeningComment/" + str(ScoliosisScreeningCommentID), verb = "post", return_params_list = return_params, payload = payload_params)

def createScoliosisScreeningComment(EntityID = 1, setScoliosisScreeningCommentID = None, setCreatedTime = None, setModifiedTime = None, setScoliosisCommentID = None, setScoliosisScreeningID = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnScoliosisScreeningCommentID = False, returnCreatedTime = False, returnModifiedTime = False, returnScoliosisCommentID = False, returnScoliosisScreeningID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ScoliosisScreeningComment/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteScoliosisScreeningComment(ScoliosisScreeningCommentID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ScoliosisScreeningComment/" + str(ScoliosisScreeningCommentID), verb = "delete")


def getEveryScoliosisScreeningNote(searchConditions = [], EntityID = 1, returnScoliosisScreeningNoteID = False, returnCreatedTime = False, returnModifiedTime = False, returnNote = False, returnScoliosisScreeningID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every ScoliosisScreeningNote in the district.

    This function returns a dataframe of every ScoliosisScreeningNote in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ScoliosisScreeningNote/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ScoliosisScreeningNote/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getScoliosisScreeningNote(ScoliosisScreeningNoteID, EntityID = 1, returnScoliosisScreeningNoteID = False, returnCreatedTime = False, returnModifiedTime = False, returnNote = False, returnScoliosisScreeningID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ScoliosisScreeningNote/" + str(ScoliosisScreeningNoteID), verb = "get", return_params_list = return_params)

def modifyScoliosisScreeningNote(ScoliosisScreeningNoteID, EntityID = 1, setScoliosisScreeningNoteID = None, setCreatedTime = None, setModifiedTime = None, setNote = None, setScoliosisScreeningID = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnScoliosisScreeningNoteID = False, returnCreatedTime = False, returnModifiedTime = False, returnNote = False, returnScoliosisScreeningID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ScoliosisScreeningNote/" + str(ScoliosisScreeningNoteID), verb = "post", return_params_list = return_params, payload = payload_params)

def createScoliosisScreeningNote(EntityID = 1, setScoliosisScreeningNoteID = None, setCreatedTime = None, setModifiedTime = None, setNote = None, setScoliosisScreeningID = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnScoliosisScreeningNoteID = False, returnCreatedTime = False, returnModifiedTime = False, returnNote = False, returnScoliosisScreeningID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ScoliosisScreeningNote/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteScoliosisScreeningNote(ScoliosisScreeningNoteID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ScoliosisScreeningNote/" + str(ScoliosisScreeningNoteID), verb = "delete")


def getEveryScoliosisScreeningObservation(searchConditions = [], EntityID = 1, returnScoliosisScreeningObservationID = False, returnCreatedTime = False, returnModifiedTime = False, returnScoliosisObservationID = False, returnScoliosisScreeningID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every ScoliosisScreeningObservation in the district.

    This function returns a dataframe of every ScoliosisScreeningObservation in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ScoliosisScreeningObservation/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ScoliosisScreeningObservation/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getScoliosisScreeningObservation(ScoliosisScreeningObservationID, EntityID = 1, returnScoliosisScreeningObservationID = False, returnCreatedTime = False, returnModifiedTime = False, returnScoliosisObservationID = False, returnScoliosisScreeningID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ScoliosisScreeningObservation/" + str(ScoliosisScreeningObservationID), verb = "get", return_params_list = return_params)

def modifyScoliosisScreeningObservation(ScoliosisScreeningObservationID, EntityID = 1, setScoliosisScreeningObservationID = None, setCreatedTime = None, setModifiedTime = None, setScoliosisObservationID = None, setScoliosisScreeningID = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnScoliosisScreeningObservationID = False, returnCreatedTime = False, returnModifiedTime = False, returnScoliosisObservationID = False, returnScoliosisScreeningID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ScoliosisScreeningObservation/" + str(ScoliosisScreeningObservationID), verb = "post", return_params_list = return_params, payload = payload_params)

def createScoliosisScreeningObservation(EntityID = 1, setScoliosisScreeningObservationID = None, setCreatedTime = None, setModifiedTime = None, setScoliosisObservationID = None, setScoliosisScreeningID = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnScoliosisScreeningObservationID = False, returnCreatedTime = False, returnModifiedTime = False, returnScoliosisObservationID = False, returnScoliosisScreeningID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ScoliosisScreeningObservation/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteScoliosisScreeningObservation(ScoliosisScreeningObservationID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ScoliosisScreeningObservation/" + str(ScoliosisScreeningObservationID), verb = "delete")


def getEveryScoliosisScreeningReferral(searchConditions = [], EntityID = 1, returnScoliosisScreeningReferralID = False, returnCompletionDate = False, returnCreatedTime = False, returnHealthProfessionalIDReferredBy = False, returnHealthProfessionalIDReferredTo = False, returnIsVoid = False, returnModifiedTime = False, returnReferralCompleted = False, returnReferralDate = False, returnScoliosisGuardianNotificationID = False, returnScoliosisGuardianResponseID = False, returnScoliosisReferralReasonID = False, returnScoliosisReferralResultID = False, returnScoliosisScreeningID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnUserIDVoidedBy = False, returnVoidedTime = False, returnVoidNote = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every ScoliosisScreeningReferral in the district.

    This function returns a dataframe of every ScoliosisScreeningReferral in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ScoliosisScreeningReferral/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ScoliosisScreeningReferral/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getScoliosisScreeningReferral(ScoliosisScreeningReferralID, EntityID = 1, returnScoliosisScreeningReferralID = False, returnCompletionDate = False, returnCreatedTime = False, returnHealthProfessionalIDReferredBy = False, returnHealthProfessionalIDReferredTo = False, returnIsVoid = False, returnModifiedTime = False, returnReferralCompleted = False, returnReferralDate = False, returnScoliosisGuardianNotificationID = False, returnScoliosisGuardianResponseID = False, returnScoliosisReferralReasonID = False, returnScoliosisReferralResultID = False, returnScoliosisScreeningID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnUserIDVoidedBy = False, returnVoidedTime = False, returnVoidNote = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ScoliosisScreeningReferral/" + str(ScoliosisScreeningReferralID), verb = "get", return_params_list = return_params)

def modifyScoliosisScreeningReferral(ScoliosisScreeningReferralID, EntityID = 1, setScoliosisScreeningReferralID = None, setCompletionDate = None, setCreatedTime = None, setHealthProfessionalIDReferredBy = None, setHealthProfessionalIDReferredTo = None, setIsVoid = None, setModifiedTime = None, setReferralCompleted = None, setReferralDate = None, setScoliosisGuardianNotificationID = None, setScoliosisGuardianResponseID = None, setScoliosisReferralReasonID = None, setScoliosisReferralResultID = None, setScoliosisScreeningID = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, setUserIDVoidedBy = None, setVoidedTime = None, setVoidNote = None, returnScoliosisScreeningReferralID = False, returnCompletionDate = False, returnCreatedTime = False, returnHealthProfessionalIDReferredBy = False, returnHealthProfessionalIDReferredTo = False, returnIsVoid = False, returnModifiedTime = False, returnReferralCompleted = False, returnReferralDate = False, returnScoliosisGuardianNotificationID = False, returnScoliosisGuardianResponseID = False, returnScoliosisReferralReasonID = False, returnScoliosisReferralResultID = False, returnScoliosisScreeningID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnUserIDVoidedBy = False, returnVoidedTime = False, returnVoidNote = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ScoliosisScreeningReferral/" + str(ScoliosisScreeningReferralID), verb = "post", return_params_list = return_params, payload = payload_params)

def createScoliosisScreeningReferral(EntityID = 1, setScoliosisScreeningReferralID = None, setCompletionDate = None, setCreatedTime = None, setHealthProfessionalIDReferredBy = None, setHealthProfessionalIDReferredTo = None, setIsVoid = None, setModifiedTime = None, setReferralCompleted = None, setReferralDate = None, setScoliosisGuardianNotificationID = None, setScoliosisGuardianResponseID = None, setScoliosisReferralReasonID = None, setScoliosisReferralResultID = None, setScoliosisScreeningID = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, setUserIDVoidedBy = None, setVoidedTime = None, setVoidNote = None, returnScoliosisScreeningReferralID = False, returnCompletionDate = False, returnCreatedTime = False, returnHealthProfessionalIDReferredBy = False, returnHealthProfessionalIDReferredTo = False, returnIsVoid = False, returnModifiedTime = False, returnReferralCompleted = False, returnReferralDate = False, returnScoliosisGuardianNotificationID = False, returnScoliosisGuardianResponseID = False, returnScoliosisReferralReasonID = False, returnScoliosisReferralResultID = False, returnScoliosisScreeningID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnUserIDVoidedBy = False, returnVoidedTime = False, returnVoidNote = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ScoliosisScreeningReferral/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteScoliosisScreeningReferral(ScoliosisScreeningReferralID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ScoliosisScreeningReferral/" + str(ScoliosisScreeningReferralID), verb = "delete")


def getEveryScoliosisScreeningSecuredNote(searchConditions = [], EntityID = 1, returnScoliosisScreeningSecuredNoteID = False, returnCreatedTime = False, returnModifiedTime = False, returnNote = False, returnScoliosisScreeningID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every ScoliosisScreeningSecuredNote in the district.

    This function returns a dataframe of every ScoliosisScreeningSecuredNote in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ScoliosisScreeningSecuredNote/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ScoliosisScreeningSecuredNote/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getScoliosisScreeningSecuredNote(ScoliosisScreeningSecuredNoteID, EntityID = 1, returnScoliosisScreeningSecuredNoteID = False, returnCreatedTime = False, returnModifiedTime = False, returnNote = False, returnScoliosisScreeningID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ScoliosisScreeningSecuredNote/" + str(ScoliosisScreeningSecuredNoteID), verb = "get", return_params_list = return_params)

def modifyScoliosisScreeningSecuredNote(ScoliosisScreeningSecuredNoteID, EntityID = 1, setScoliosisScreeningSecuredNoteID = None, setCreatedTime = None, setModifiedTime = None, setNote = None, setScoliosisScreeningID = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnScoliosisScreeningSecuredNoteID = False, returnCreatedTime = False, returnModifiedTime = False, returnNote = False, returnScoliosisScreeningID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ScoliosisScreeningSecuredNote/" + str(ScoliosisScreeningSecuredNoteID), verb = "post", return_params_list = return_params, payload = payload_params)

def createScoliosisScreeningSecuredNote(EntityID = 1, setScoliosisScreeningSecuredNoteID = None, setCreatedTime = None, setModifiedTime = None, setNote = None, setScoliosisScreeningID = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnScoliosisScreeningSecuredNoteID = False, returnCreatedTime = False, returnModifiedTime = False, returnNote = False, returnScoliosisScreeningID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ScoliosisScreeningSecuredNote/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteScoliosisScreeningSecuredNote(ScoliosisScreeningSecuredNoteID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ScoliosisScreeningSecuredNote/" + str(ScoliosisScreeningSecuredNoteID), verb = "delete")


def getEveryScoliosisTreatment(searchConditions = [], EntityID = 1, returnScoliosisTreatmentID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every ScoliosisTreatment in the district.

    This function returns a dataframe of every ScoliosisTreatment in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ScoliosisTreatment/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ScoliosisTreatment/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getScoliosisTreatment(ScoliosisTreatmentID, EntityID = 1, returnScoliosisTreatmentID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ScoliosisTreatment/" + str(ScoliosisTreatmentID), verb = "get", return_params_list = return_params)

def modifyScoliosisTreatment(ScoliosisTreatmentID, EntityID = 1, setScoliosisTreatmentID = None, setCode = None, setCodeDescription = None, setCreatedTime = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setModifiedTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnScoliosisTreatmentID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ScoliosisTreatment/" + str(ScoliosisTreatmentID), verb = "post", return_params_list = return_params, payload = payload_params)

def createScoliosisTreatment(EntityID = 1, setScoliosisTreatmentID = None, setCode = None, setCodeDescription = None, setCreatedTime = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setModifiedTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnScoliosisTreatmentID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ScoliosisTreatment/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteScoliosisTreatment(ScoliosisTreatmentID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ScoliosisTreatment/" + str(ScoliosisTreatmentID), verb = "delete")


def getEveryStudentChildhoodIllness(searchConditions = [], EntityID = 1, returnStudentChildhoodIllnessID = False, returnAgeDiagnosed = False, returnChildhoodIllnessID = False, returnCreatedTime = False, returnDistrictID = False, returnHealthProfessionalIDExaminedBy = False, returnIsVoid = False, returnModifiedTime = False, returnObservationDescriptionsListDisplay = False, returnSchoolYearID = False, returnScreeningDate = False, returnStudentID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnUserIDVoidedBy = False, returnVoidedTime = False, returnVoidNote = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every StudentChildhoodIllness in the district.

    This function returns a dataframe of every StudentChildhoodIllness in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/StudentChildhoodIllness/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/StudentChildhoodIllness/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getStudentChildhoodIllness(StudentChildhoodIllnessID, EntityID = 1, returnStudentChildhoodIllnessID = False, returnAgeDiagnosed = False, returnChildhoodIllnessID = False, returnCreatedTime = False, returnDistrictID = False, returnHealthProfessionalIDExaminedBy = False, returnIsVoid = False, returnModifiedTime = False, returnObservationDescriptionsListDisplay = False, returnSchoolYearID = False, returnScreeningDate = False, returnStudentID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnUserIDVoidedBy = False, returnVoidedTime = False, returnVoidNote = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/StudentChildhoodIllness/" + str(StudentChildhoodIllnessID), verb = "get", return_params_list = return_params)

def modifyStudentChildhoodIllness(StudentChildhoodIllnessID, EntityID = 1, setStudentChildhoodIllnessID = None, setAgeDiagnosed = None, setChildhoodIllnessID = None, setCreatedTime = None, setDistrictID = None, setHealthProfessionalIDExaminedBy = None, setIsVoid = None, setModifiedTime = None, setObservationDescriptionsListDisplay = None, setSchoolYearID = None, setScreeningDate = None, setStudentID = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, setUserIDVoidedBy = None, setVoidedTime = None, setVoidNote = None, returnStudentChildhoodIllnessID = False, returnAgeDiagnosed = False, returnChildhoodIllnessID = False, returnCreatedTime = False, returnDistrictID = False, returnHealthProfessionalIDExaminedBy = False, returnIsVoid = False, returnModifiedTime = False, returnObservationDescriptionsListDisplay = False, returnSchoolYearID = False, returnScreeningDate = False, returnStudentID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnUserIDVoidedBy = False, returnVoidedTime = False, returnVoidNote = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/StudentChildhoodIllness/" + str(StudentChildhoodIllnessID), verb = "post", return_params_list = return_params, payload = payload_params)

def createStudentChildhoodIllness(EntityID = 1, setStudentChildhoodIllnessID = None, setAgeDiagnosed = None, setChildhoodIllnessID = None, setCreatedTime = None, setDistrictID = None, setHealthProfessionalIDExaminedBy = None, setIsVoid = None, setModifiedTime = None, setObservationDescriptionsListDisplay = None, setSchoolYearID = None, setScreeningDate = None, setStudentID = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, setUserIDVoidedBy = None, setVoidedTime = None, setVoidNote = None, returnStudentChildhoodIllnessID = False, returnAgeDiagnosed = False, returnChildhoodIllnessID = False, returnCreatedTime = False, returnDistrictID = False, returnHealthProfessionalIDExaminedBy = False, returnIsVoid = False, returnModifiedTime = False, returnObservationDescriptionsListDisplay = False, returnSchoolYearID = False, returnScreeningDate = False, returnStudentID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnUserIDVoidedBy = False, returnVoidedTime = False, returnVoidNote = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/StudentChildhoodIllness/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteStudentChildhoodIllness(StudentChildhoodIllnessID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/StudentChildhoodIllness/" + str(StudentChildhoodIllnessID), verb = "delete")


def getEveryStudentChildhoodIllnessComment(searchConditions = [], EntityID = 1, returnStudentChildhoodIllnessCommentID = False, returnChildhoodIllnessCommentID = False, returnCreatedTime = False, returnModifiedTime = False, returnStudentChildhoodIllnessID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every StudentChildhoodIllnessComment in the district.

    This function returns a dataframe of every StudentChildhoodIllnessComment in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/StudentChildhoodIllnessComment/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/StudentChildhoodIllnessComment/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getStudentChildhoodIllnessComment(StudentChildhoodIllnessCommentID, EntityID = 1, returnStudentChildhoodIllnessCommentID = False, returnChildhoodIllnessCommentID = False, returnCreatedTime = False, returnModifiedTime = False, returnStudentChildhoodIllnessID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/StudentChildhoodIllnessComment/" + str(StudentChildhoodIllnessCommentID), verb = "get", return_params_list = return_params)

def modifyStudentChildhoodIllnessComment(StudentChildhoodIllnessCommentID, EntityID = 1, setStudentChildhoodIllnessCommentID = None, setChildhoodIllnessCommentID = None, setCreatedTime = None, setModifiedTime = None, setStudentChildhoodIllnessID = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnStudentChildhoodIllnessCommentID = False, returnChildhoodIllnessCommentID = False, returnCreatedTime = False, returnModifiedTime = False, returnStudentChildhoodIllnessID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/StudentChildhoodIllnessComment/" + str(StudentChildhoodIllnessCommentID), verb = "post", return_params_list = return_params, payload = payload_params)

def createStudentChildhoodIllnessComment(EntityID = 1, setStudentChildhoodIllnessCommentID = None, setChildhoodIllnessCommentID = None, setCreatedTime = None, setModifiedTime = None, setStudentChildhoodIllnessID = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnStudentChildhoodIllnessCommentID = False, returnChildhoodIllnessCommentID = False, returnCreatedTime = False, returnModifiedTime = False, returnStudentChildhoodIllnessID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/StudentChildhoodIllnessComment/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteStudentChildhoodIllnessComment(StudentChildhoodIllnessCommentID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/StudentChildhoodIllnessComment/" + str(StudentChildhoodIllnessCommentID), verb = "delete")


def getEveryStudentChildhoodIllnessNote(searchConditions = [], EntityID = 1, returnStudentChildhoodIllnessNoteID = False, returnCreatedTime = False, returnModifiedTime = False, returnNote = False, returnStudentChildhoodIllnessID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every StudentChildhoodIllnessNote in the district.

    This function returns a dataframe of every StudentChildhoodIllnessNote in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/StudentChildhoodIllnessNote/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/StudentChildhoodIllnessNote/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getStudentChildhoodIllnessNote(StudentChildhoodIllnessNoteID, EntityID = 1, returnStudentChildhoodIllnessNoteID = False, returnCreatedTime = False, returnModifiedTime = False, returnNote = False, returnStudentChildhoodIllnessID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/StudentChildhoodIllnessNote/" + str(StudentChildhoodIllnessNoteID), verb = "get", return_params_list = return_params)

def modifyStudentChildhoodIllnessNote(StudentChildhoodIllnessNoteID, EntityID = 1, setStudentChildhoodIllnessNoteID = None, setCreatedTime = None, setModifiedTime = None, setNote = None, setStudentChildhoodIllnessID = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnStudentChildhoodIllnessNoteID = False, returnCreatedTime = False, returnModifiedTime = False, returnNote = False, returnStudentChildhoodIllnessID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/StudentChildhoodIllnessNote/" + str(StudentChildhoodIllnessNoteID), verb = "post", return_params_list = return_params, payload = payload_params)

def createStudentChildhoodIllnessNote(EntityID = 1, setStudentChildhoodIllnessNoteID = None, setCreatedTime = None, setModifiedTime = None, setNote = None, setStudentChildhoodIllnessID = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnStudentChildhoodIllnessNoteID = False, returnCreatedTime = False, returnModifiedTime = False, returnNote = False, returnStudentChildhoodIllnessID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/StudentChildhoodIllnessNote/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteStudentChildhoodIllnessNote(StudentChildhoodIllnessNoteID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/StudentChildhoodIllnessNote/" + str(StudentChildhoodIllnessNoteID), verb = "delete")


def getEveryStudentChildhoodIllnessObservation(searchConditions = [], EntityID = 1, returnStudentChildhoodIllnessObservationID = False, returnChildhoodIllnessObservationID = False, returnCreatedTime = False, returnModifiedTime = False, returnStudentChildhoodIllnessID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every StudentChildhoodIllnessObservation in the district.

    This function returns a dataframe of every StudentChildhoodIllnessObservation in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/StudentChildhoodIllnessObservation/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/StudentChildhoodIllnessObservation/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getStudentChildhoodIllnessObservation(StudentChildhoodIllnessObservationID, EntityID = 1, returnStudentChildhoodIllnessObservationID = False, returnChildhoodIllnessObservationID = False, returnCreatedTime = False, returnModifiedTime = False, returnStudentChildhoodIllnessID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/StudentChildhoodIllnessObservation/" + str(StudentChildhoodIllnessObservationID), verb = "get", return_params_list = return_params)

def modifyStudentChildhoodIllnessObservation(StudentChildhoodIllnessObservationID, EntityID = 1, setStudentChildhoodIllnessObservationID = None, setChildhoodIllnessObservationID = None, setCreatedTime = None, setModifiedTime = None, setStudentChildhoodIllnessID = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnStudentChildhoodIllnessObservationID = False, returnChildhoodIllnessObservationID = False, returnCreatedTime = False, returnModifiedTime = False, returnStudentChildhoodIllnessID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/StudentChildhoodIllnessObservation/" + str(StudentChildhoodIllnessObservationID), verb = "post", return_params_list = return_params, payload = payload_params)

def createStudentChildhoodIllnessObservation(EntityID = 1, setStudentChildhoodIllnessObservationID = None, setChildhoodIllnessObservationID = None, setCreatedTime = None, setModifiedTime = None, setStudentChildhoodIllnessID = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnStudentChildhoodIllnessObservationID = False, returnChildhoodIllnessObservationID = False, returnCreatedTime = False, returnModifiedTime = False, returnStudentChildhoodIllnessID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/StudentChildhoodIllnessObservation/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteStudentChildhoodIllnessObservation(StudentChildhoodIllnessObservationID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/StudentChildhoodIllnessObservation/" + str(StudentChildhoodIllnessObservationID), verb = "delete")


def getEveryStudentChildhoodIllnessReferral(searchConditions = [], EntityID = 1, returnStudentChildhoodIllnessReferralID = False, returnChildhoodIllnessGuardianNotificationID = False, returnChildhoodIllnessGuardianResponseID = False, returnChildhoodIllnessReferralReasonID = False, returnChildhoodIllnessReferralResultID = False, returnCompletionDate = False, returnCreatedTime = False, returnHealthProfessionalIDReferredBy = False, returnHealthProfessionalIDReferredTo = False, returnIsVoid = False, returnModifiedTime = False, returnReferralCompleted = False, returnReferralDate = False, returnStudentChildhoodIllnessID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnUserIDVoidedBy = False, returnVoidedTime = False, returnVoidNote = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every StudentChildhoodIllnessReferral in the district.

    This function returns a dataframe of every StudentChildhoodIllnessReferral in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/StudentChildhoodIllnessReferral/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/StudentChildhoodIllnessReferral/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getStudentChildhoodIllnessReferral(StudentChildhoodIllnessReferralID, EntityID = 1, returnStudentChildhoodIllnessReferralID = False, returnChildhoodIllnessGuardianNotificationID = False, returnChildhoodIllnessGuardianResponseID = False, returnChildhoodIllnessReferralReasonID = False, returnChildhoodIllnessReferralResultID = False, returnCompletionDate = False, returnCreatedTime = False, returnHealthProfessionalIDReferredBy = False, returnHealthProfessionalIDReferredTo = False, returnIsVoid = False, returnModifiedTime = False, returnReferralCompleted = False, returnReferralDate = False, returnStudentChildhoodIllnessID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnUserIDVoidedBy = False, returnVoidedTime = False, returnVoidNote = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/StudentChildhoodIllnessReferral/" + str(StudentChildhoodIllnessReferralID), verb = "get", return_params_list = return_params)

def modifyStudentChildhoodIllnessReferral(StudentChildhoodIllnessReferralID, EntityID = 1, setStudentChildhoodIllnessReferralID = None, setChildhoodIllnessGuardianNotificationID = None, setChildhoodIllnessGuardianResponseID = None, setChildhoodIllnessReferralReasonID = None, setChildhoodIllnessReferralResultID = None, setCompletionDate = None, setCreatedTime = None, setHealthProfessionalIDReferredBy = None, setHealthProfessionalIDReferredTo = None, setIsVoid = None, setModifiedTime = None, setReferralCompleted = None, setReferralDate = None, setStudentChildhoodIllnessID = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, setUserIDVoidedBy = None, setVoidedTime = None, setVoidNote = None, returnStudentChildhoodIllnessReferralID = False, returnChildhoodIllnessGuardianNotificationID = False, returnChildhoodIllnessGuardianResponseID = False, returnChildhoodIllnessReferralReasonID = False, returnChildhoodIllnessReferralResultID = False, returnCompletionDate = False, returnCreatedTime = False, returnHealthProfessionalIDReferredBy = False, returnHealthProfessionalIDReferredTo = False, returnIsVoid = False, returnModifiedTime = False, returnReferralCompleted = False, returnReferralDate = False, returnStudentChildhoodIllnessID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnUserIDVoidedBy = False, returnVoidedTime = False, returnVoidNote = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/StudentChildhoodIllnessReferral/" + str(StudentChildhoodIllnessReferralID), verb = "post", return_params_list = return_params, payload = payload_params)

def createStudentChildhoodIllnessReferral(EntityID = 1, setStudentChildhoodIllnessReferralID = None, setChildhoodIllnessGuardianNotificationID = None, setChildhoodIllnessGuardianResponseID = None, setChildhoodIllnessReferralReasonID = None, setChildhoodIllnessReferralResultID = None, setCompletionDate = None, setCreatedTime = None, setHealthProfessionalIDReferredBy = None, setHealthProfessionalIDReferredTo = None, setIsVoid = None, setModifiedTime = None, setReferralCompleted = None, setReferralDate = None, setStudentChildhoodIllnessID = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, setUserIDVoidedBy = None, setVoidedTime = None, setVoidNote = None, returnStudentChildhoodIllnessReferralID = False, returnChildhoodIllnessGuardianNotificationID = False, returnChildhoodIllnessGuardianResponseID = False, returnChildhoodIllnessReferralReasonID = False, returnChildhoodIllnessReferralResultID = False, returnCompletionDate = False, returnCreatedTime = False, returnHealthProfessionalIDReferredBy = False, returnHealthProfessionalIDReferredTo = False, returnIsVoid = False, returnModifiedTime = False, returnReferralCompleted = False, returnReferralDate = False, returnStudentChildhoodIllnessID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnUserIDVoidedBy = False, returnVoidedTime = False, returnVoidNote = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/StudentChildhoodIllnessReferral/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteStudentChildhoodIllnessReferral(StudentChildhoodIllnessReferralID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/StudentChildhoodIllnessReferral/" + str(StudentChildhoodIllnessReferralID), verb = "delete")


def getEveryStudentChildhoodIllnessSecuredNote(searchConditions = [], EntityID = 1, returnStudentChildhoodIllnessSecuredNoteID = False, returnCreatedTime = False, returnModifiedTime = False, returnNote = False, returnStudentChildhoodIllnessID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every StudentChildhoodIllnessSecuredNote in the district.

    This function returns a dataframe of every StudentChildhoodIllnessSecuredNote in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/StudentChildhoodIllnessSecuredNote/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/StudentChildhoodIllnessSecuredNote/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getStudentChildhoodIllnessSecuredNote(StudentChildhoodIllnessSecuredNoteID, EntityID = 1, returnStudentChildhoodIllnessSecuredNoteID = False, returnCreatedTime = False, returnModifiedTime = False, returnNote = False, returnStudentChildhoodIllnessID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/StudentChildhoodIllnessSecuredNote/" + str(StudentChildhoodIllnessSecuredNoteID), verb = "get", return_params_list = return_params)

def modifyStudentChildhoodIllnessSecuredNote(StudentChildhoodIllnessSecuredNoteID, EntityID = 1, setStudentChildhoodIllnessSecuredNoteID = None, setCreatedTime = None, setModifiedTime = None, setNote = None, setStudentChildhoodIllnessID = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnStudentChildhoodIllnessSecuredNoteID = False, returnCreatedTime = False, returnModifiedTime = False, returnNote = False, returnStudentChildhoodIllnessID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/StudentChildhoodIllnessSecuredNote/" + str(StudentChildhoodIllnessSecuredNoteID), verb = "post", return_params_list = return_params, payload = payload_params)

def createStudentChildhoodIllnessSecuredNote(EntityID = 1, setStudentChildhoodIllnessSecuredNoteID = None, setCreatedTime = None, setModifiedTime = None, setNote = None, setStudentChildhoodIllnessID = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnStudentChildhoodIllnessSecuredNoteID = False, returnCreatedTime = False, returnModifiedTime = False, returnNote = False, returnStudentChildhoodIllnessID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/StudentChildhoodIllnessSecuredNote/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteStudentChildhoodIllnessSecuredNote(StudentChildhoodIllnessSecuredNoteID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/StudentChildhoodIllnessSecuredNote/" + str(StudentChildhoodIllnessSecuredNoteID), verb = "delete")


def getEveryStudentHealthCondition(searchConditions = [], EntityID = 1, returnStudentHealthConditionID = False, returnAttachmentCount = False, returnAttachmentIndicatorColumn = False, returnCreatedTime = False, returnDescription = False, returnEndDate = False, returnHealthConditionID = False, returnHealthConditionTreatmentID = False, returnHealthProfessionalIDExaminedBy = False, returnIsActive = False, returnIsVoid = False, returnModifiedTime = False, returnOriginalEndDate = False, returnStartDate = False, returnStudentID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnUserIDVoidedBy = False, returnVoidedTime = False, returnVoidNote = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every StudentHealthCondition in the district.

    This function returns a dataframe of every StudentHealthCondition in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/StudentHealthCondition/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/StudentHealthCondition/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getStudentHealthCondition(StudentHealthConditionID, EntityID = 1, returnStudentHealthConditionID = False, returnAttachmentCount = False, returnAttachmentIndicatorColumn = False, returnCreatedTime = False, returnDescription = False, returnEndDate = False, returnHealthConditionID = False, returnHealthConditionTreatmentID = False, returnHealthProfessionalIDExaminedBy = False, returnIsActive = False, returnIsVoid = False, returnModifiedTime = False, returnOriginalEndDate = False, returnStartDate = False, returnStudentID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnUserIDVoidedBy = False, returnVoidedTime = False, returnVoidNote = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/StudentHealthCondition/" + str(StudentHealthConditionID), verb = "get", return_params_list = return_params)

def modifyStudentHealthCondition(StudentHealthConditionID, EntityID = 1, setStudentHealthConditionID = None, setAttachmentCount = None, setAttachmentIndicatorColumn = None, setCreatedTime = None, setDescription = None, setEndDate = None, setHealthConditionID = None, setHealthConditionTreatmentID = None, setHealthProfessionalIDExaminedBy = None, setIsActive = None, setIsVoid = None, setModifiedTime = None, setOriginalEndDate = None, setStartDate = None, setStudentID = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, setUserIDVoidedBy = None, setVoidedTime = None, setVoidNote = None, returnStudentHealthConditionID = False, returnAttachmentCount = False, returnAttachmentIndicatorColumn = False, returnCreatedTime = False, returnDescription = False, returnEndDate = False, returnHealthConditionID = False, returnHealthConditionTreatmentID = False, returnHealthProfessionalIDExaminedBy = False, returnIsActive = False, returnIsVoid = False, returnModifiedTime = False, returnOriginalEndDate = False, returnStartDate = False, returnStudentID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnUserIDVoidedBy = False, returnVoidedTime = False, returnVoidNote = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/StudentHealthCondition/" + str(StudentHealthConditionID), verb = "post", return_params_list = return_params, payload = payload_params)

def createStudentHealthCondition(EntityID = 1, setStudentHealthConditionID = None, setAttachmentCount = None, setAttachmentIndicatorColumn = None, setCreatedTime = None, setDescription = None, setEndDate = None, setHealthConditionID = None, setHealthConditionTreatmentID = None, setHealthProfessionalIDExaminedBy = None, setIsActive = None, setIsVoid = None, setModifiedTime = None, setOriginalEndDate = None, setStartDate = None, setStudentID = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, setUserIDVoidedBy = None, setVoidedTime = None, setVoidNote = None, returnStudentHealthConditionID = False, returnAttachmentCount = False, returnAttachmentIndicatorColumn = False, returnCreatedTime = False, returnDescription = False, returnEndDate = False, returnHealthConditionID = False, returnHealthConditionTreatmentID = False, returnHealthProfessionalIDExaminedBy = False, returnIsActive = False, returnIsVoid = False, returnModifiedTime = False, returnOriginalEndDate = False, returnStartDate = False, returnStudentID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnUserIDVoidedBy = False, returnVoidedTime = False, returnVoidNote = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/StudentHealthCondition/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteStudentHealthCondition(StudentHealthConditionID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/StudentHealthCondition/" + str(StudentHealthConditionID), verb = "delete")


def getEveryStudentHealthConditionComment(searchConditions = [], EntityID = 1, returnStudentHealthConditionCommentID = False, returnCreatedTime = False, returnHealthConditionCommentID = False, returnModifiedTime = False, returnStudentHealthConditionID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every StudentHealthConditionComment in the district.

    This function returns a dataframe of every StudentHealthConditionComment in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/StudentHealthConditionComment/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/StudentHealthConditionComment/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getStudentHealthConditionComment(StudentHealthConditionCommentID, EntityID = 1, returnStudentHealthConditionCommentID = False, returnCreatedTime = False, returnHealthConditionCommentID = False, returnModifiedTime = False, returnStudentHealthConditionID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/StudentHealthConditionComment/" + str(StudentHealthConditionCommentID), verb = "get", return_params_list = return_params)

def modifyStudentHealthConditionComment(StudentHealthConditionCommentID, EntityID = 1, setStudentHealthConditionCommentID = None, setCreatedTime = None, setHealthConditionCommentID = None, setModifiedTime = None, setStudentHealthConditionID = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnStudentHealthConditionCommentID = False, returnCreatedTime = False, returnHealthConditionCommentID = False, returnModifiedTime = False, returnStudentHealthConditionID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/StudentHealthConditionComment/" + str(StudentHealthConditionCommentID), verb = "post", return_params_list = return_params, payload = payload_params)

def createStudentHealthConditionComment(EntityID = 1, setStudentHealthConditionCommentID = None, setCreatedTime = None, setHealthConditionCommentID = None, setModifiedTime = None, setStudentHealthConditionID = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnStudentHealthConditionCommentID = False, returnCreatedTime = False, returnHealthConditionCommentID = False, returnModifiedTime = False, returnStudentHealthConditionID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/StudentHealthConditionComment/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteStudentHealthConditionComment(StudentHealthConditionCommentID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/StudentHealthConditionComment/" + str(StudentHealthConditionCommentID), verb = "delete")


def getEveryStudentHealthConditionNote(searchConditions = [], EntityID = 1, returnStudentHealthConditionNoteID = False, returnCreatedTime = False, returnIsNoteEnteredByGuardian = False, returnModifiedTime = False, returnNote = False, returnNoteEnteredByType = False, returnNoteEnteredByTypeCode = False, returnNoteEnteredByTypeLabel = False, returnStudentHealthConditionID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every StudentHealthConditionNote in the district.

    This function returns a dataframe of every StudentHealthConditionNote in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/StudentHealthConditionNote/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/StudentHealthConditionNote/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getStudentHealthConditionNote(StudentHealthConditionNoteID, EntityID = 1, returnStudentHealthConditionNoteID = False, returnCreatedTime = False, returnIsNoteEnteredByGuardian = False, returnModifiedTime = False, returnNote = False, returnNoteEnteredByType = False, returnNoteEnteredByTypeCode = False, returnNoteEnteredByTypeLabel = False, returnStudentHealthConditionID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/StudentHealthConditionNote/" + str(StudentHealthConditionNoteID), verb = "get", return_params_list = return_params)

def modifyStudentHealthConditionNote(StudentHealthConditionNoteID, EntityID = 1, setStudentHealthConditionNoteID = None, setCreatedTime = None, setIsNoteEnteredByGuardian = None, setModifiedTime = None, setNote = None, setNoteEnteredByType = None, setNoteEnteredByTypeCode = None, setNoteEnteredByTypeLabel = None, setStudentHealthConditionID = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnStudentHealthConditionNoteID = False, returnCreatedTime = False, returnIsNoteEnteredByGuardian = False, returnModifiedTime = False, returnNote = False, returnNoteEnteredByType = False, returnNoteEnteredByTypeCode = False, returnNoteEnteredByTypeLabel = False, returnStudentHealthConditionID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/StudentHealthConditionNote/" + str(StudentHealthConditionNoteID), verb = "post", return_params_list = return_params, payload = payload_params)

def createStudentHealthConditionNote(EntityID = 1, setStudentHealthConditionNoteID = None, setCreatedTime = None, setIsNoteEnteredByGuardian = None, setModifiedTime = None, setNote = None, setNoteEnteredByType = None, setNoteEnteredByTypeCode = None, setNoteEnteredByTypeLabel = None, setStudentHealthConditionID = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnStudentHealthConditionNoteID = False, returnCreatedTime = False, returnIsNoteEnteredByGuardian = False, returnModifiedTime = False, returnNote = False, returnNoteEnteredByType = False, returnNoteEnteredByTypeCode = False, returnNoteEnteredByTypeLabel = False, returnStudentHealthConditionID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/StudentHealthConditionNote/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteStudentHealthConditionNote(StudentHealthConditionNoteID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/StudentHealthConditionNote/" + str(StudentHealthConditionNoteID), verb = "delete")


def getEveryStudentHealthConditionSecuredNote(searchConditions = [], EntityID = 1, returnStudentHealthConditionSecuredNoteID = False, returnCreatedTime = False, returnModifiedTime = False, returnNote = False, returnStudentHealthConditionID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every StudentHealthConditionSecuredNote in the district.

    This function returns a dataframe of every StudentHealthConditionSecuredNote in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/StudentHealthConditionSecuredNote/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/StudentHealthConditionSecuredNote/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getStudentHealthConditionSecuredNote(StudentHealthConditionSecuredNoteID, EntityID = 1, returnStudentHealthConditionSecuredNoteID = False, returnCreatedTime = False, returnModifiedTime = False, returnNote = False, returnStudentHealthConditionID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/StudentHealthConditionSecuredNote/" + str(StudentHealthConditionSecuredNoteID), verb = "get", return_params_list = return_params)

def modifyStudentHealthConditionSecuredNote(StudentHealthConditionSecuredNoteID, EntityID = 1, setStudentHealthConditionSecuredNoteID = None, setCreatedTime = None, setModifiedTime = None, setNote = None, setStudentHealthConditionID = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnStudentHealthConditionSecuredNoteID = False, returnCreatedTime = False, returnModifiedTime = False, returnNote = False, returnStudentHealthConditionID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/StudentHealthConditionSecuredNote/" + str(StudentHealthConditionSecuredNoteID), verb = "post", return_params_list = return_params, payload = payload_params)

def createStudentHealthConditionSecuredNote(EntityID = 1, setStudentHealthConditionSecuredNoteID = None, setCreatedTime = None, setModifiedTime = None, setNote = None, setStudentHealthConditionID = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnStudentHealthConditionSecuredNoteID = False, returnCreatedTime = False, returnModifiedTime = False, returnNote = False, returnStudentHealthConditionID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/StudentHealthConditionSecuredNote/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteStudentHealthConditionSecuredNote(StudentHealthConditionSecuredNoteID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/StudentHealthConditionSecuredNote/" + str(StudentHealthConditionSecuredNoteID), verb = "delete")


def getEveryStudentIHP(searchConditions = [], EntityID = 1, returnStudentIHPID = False, returnAttachmentComments = False, returnAttachmentCount = False, returnAttachmentIndicatorColumn = False, returnCreatedTime = False, returnEndDate = False, returnFormDescription = False, returnIsActive = False, returnIsVoid = False, returnModifiedTime = False, returnStartDate = False, returnStudentID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnUserIDVoidedBy = False, returnVoidedTime = False, returnVoidNote = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every StudentIHP in the district.

    This function returns a dataframe of every StudentIHP in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/StudentIHP/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/StudentIHP/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getStudentIHP(StudentIHPID, EntityID = 1, returnStudentIHPID = False, returnAttachmentComments = False, returnAttachmentCount = False, returnAttachmentIndicatorColumn = False, returnCreatedTime = False, returnEndDate = False, returnFormDescription = False, returnIsActive = False, returnIsVoid = False, returnModifiedTime = False, returnStartDate = False, returnStudentID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnUserIDVoidedBy = False, returnVoidedTime = False, returnVoidNote = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/StudentIHP/" + str(StudentIHPID), verb = "get", return_params_list = return_params)

def modifyStudentIHP(StudentIHPID, EntityID = 1, setStudentIHPID = None, setAttachmentComments = None, setAttachmentCount = None, setAttachmentIndicatorColumn = None, setCreatedTime = None, setEndDate = None, setFormDescription = None, setIsActive = None, setIsVoid = None, setModifiedTime = None, setStartDate = None, setStudentID = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, setUserIDVoidedBy = None, setVoidedTime = None, setVoidNote = None, returnStudentIHPID = False, returnAttachmentComments = False, returnAttachmentCount = False, returnAttachmentIndicatorColumn = False, returnCreatedTime = False, returnEndDate = False, returnFormDescription = False, returnIsActive = False, returnIsVoid = False, returnModifiedTime = False, returnStartDate = False, returnStudentID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnUserIDVoidedBy = False, returnVoidedTime = False, returnVoidNote = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/StudentIHP/" + str(StudentIHPID), verb = "post", return_params_list = return_params, payload = payload_params)

def createStudentIHP(EntityID = 1, setStudentIHPID = None, setAttachmentComments = None, setAttachmentCount = None, setAttachmentIndicatorColumn = None, setCreatedTime = None, setEndDate = None, setFormDescription = None, setIsActive = None, setIsVoid = None, setModifiedTime = None, setStartDate = None, setStudentID = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, setUserIDVoidedBy = None, setVoidedTime = None, setVoidNote = None, returnStudentIHPID = False, returnAttachmentComments = False, returnAttachmentCount = False, returnAttachmentIndicatorColumn = False, returnCreatedTime = False, returnEndDate = False, returnFormDescription = False, returnIsActive = False, returnIsVoid = False, returnModifiedTime = False, returnStartDate = False, returnStudentID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnUserIDVoidedBy = False, returnVoidedTime = False, returnVoidNote = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/StudentIHP/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteStudentIHP(StudentIHPID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/StudentIHP/" + str(StudentIHPID), verb = "delete")


def getEveryStudentVaccinationWaiver(searchConditions = [], EntityID = 1, returnStudentVaccinationWaiverID = False, returnClaimDate = False, returnCreatedTime = False, returnExpirationDate = False, returnModifiedTime = False, returnStudentID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnVaccinationWaiverID = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every StudentVaccinationWaiver in the district.

    This function returns a dataframe of every StudentVaccinationWaiver in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/StudentVaccinationWaiver/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/StudentVaccinationWaiver/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getStudentVaccinationWaiver(StudentVaccinationWaiverID, EntityID = 1, returnStudentVaccinationWaiverID = False, returnClaimDate = False, returnCreatedTime = False, returnExpirationDate = False, returnModifiedTime = False, returnStudentID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnVaccinationWaiverID = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/StudentVaccinationWaiver/" + str(StudentVaccinationWaiverID), verb = "get", return_params_list = return_params)

def modifyStudentVaccinationWaiver(StudentVaccinationWaiverID, EntityID = 1, setStudentVaccinationWaiverID = None, setClaimDate = None, setCreatedTime = None, setExpirationDate = None, setModifiedTime = None, setStudentID = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, setVaccinationWaiverID = None, returnStudentVaccinationWaiverID = False, returnClaimDate = False, returnCreatedTime = False, returnExpirationDate = False, returnModifiedTime = False, returnStudentID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnVaccinationWaiverID = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/StudentVaccinationWaiver/" + str(StudentVaccinationWaiverID), verb = "post", return_params_list = return_params, payload = payload_params)

def createStudentVaccinationWaiver(EntityID = 1, setStudentVaccinationWaiverID = None, setClaimDate = None, setCreatedTime = None, setExpirationDate = None, setModifiedTime = None, setStudentID = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, setVaccinationWaiverID = None, returnStudentVaccinationWaiverID = False, returnClaimDate = False, returnCreatedTime = False, returnExpirationDate = False, returnModifiedTime = False, returnStudentID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnVaccinationWaiverID = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/StudentVaccinationWaiver/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteStudentVaccinationWaiver(StudentVaccinationWaiverID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/StudentVaccinationWaiver/" + str(StudentVaccinationWaiverID), verb = "delete")


def getEveryStudentVaccinationYear(searchConditions = [], EntityID = 1, returnStudentVaccinationYearID = False, returnCalculatedGradeCode = False, returnCalculatedGradeNumeric = False, returnCreatedTime = False, returnEffectiveDate = False, returnModifiedTime = False, returnStudentID = False, returnStudentVaccineCount = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnVaccinationYearID = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every StudentVaccinationYear in the district.

    This function returns a dataframe of every StudentVaccinationYear in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/StudentVaccinationYear/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/StudentVaccinationYear/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getStudentVaccinationYear(StudentVaccinationYearID, EntityID = 1, returnStudentVaccinationYearID = False, returnCalculatedGradeCode = False, returnCalculatedGradeNumeric = False, returnCreatedTime = False, returnEffectiveDate = False, returnModifiedTime = False, returnStudentID = False, returnStudentVaccineCount = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnVaccinationYearID = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/StudentVaccinationYear/" + str(StudentVaccinationYearID), verb = "get", return_params_list = return_params)

def modifyStudentVaccinationYear(StudentVaccinationYearID, EntityID = 1, setStudentVaccinationYearID = None, setCalculatedGradeCode = None, setCalculatedGradeNumeric = None, setCreatedTime = None, setEffectiveDate = None, setModifiedTime = None, setStudentID = None, setStudentVaccineCount = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, setVaccinationYearID = None, returnStudentVaccinationYearID = False, returnCalculatedGradeCode = False, returnCalculatedGradeNumeric = False, returnCreatedTime = False, returnEffectiveDate = False, returnModifiedTime = False, returnStudentID = False, returnStudentVaccineCount = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnVaccinationYearID = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/StudentVaccinationYear/" + str(StudentVaccinationYearID), verb = "post", return_params_list = return_params, payload = payload_params)

def createStudentVaccinationYear(EntityID = 1, setStudentVaccinationYearID = None, setCalculatedGradeCode = None, setCalculatedGradeNumeric = None, setCreatedTime = None, setEffectiveDate = None, setModifiedTime = None, setStudentID = None, setStudentVaccineCount = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, setVaccinationYearID = None, returnStudentVaccinationYearID = False, returnCalculatedGradeCode = False, returnCalculatedGradeNumeric = False, returnCreatedTime = False, returnEffectiveDate = False, returnModifiedTime = False, returnStudentID = False, returnStudentVaccineCount = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnVaccinationYearID = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/StudentVaccinationYear/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteStudentVaccinationYear(StudentVaccinationYearID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/StudentVaccinationYear/" + str(StudentVaccinationYearID), verb = "delete")


def getEveryStudentVaccinationYearStatus(searchConditions = [], EntityID = 1, returnStudentVaccinationYearStatusID = False, returnAllDoseDates = False, returnComplianceScheduleDetailID = False, returnComplianceStatus = False, returnCreatedTime = False, returnEndDate = False, returnInvalidDoseDates = False, returnIsConditional = False, returnIsInComplianceByVaccines = False, returnIsOutOfCompliance = False, returnIsOutOfComplianceConditionalDisplay = False, returnIsProvisional = False, returnModifiedTime = False, returnReasonConditional = False, returnReasonOutOfCompliance = False, returnStartDate = False, returnStudentChildhoodIllnessID = False, returnStudentID = False, returnStudentVaccinationWaiverID = False, returnStudentVaccinationYearID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnVaccinationYearComplianceScheduleID = False, returnValidDoseDates = False, returnValidDoses = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every StudentVaccinationYearStatus in the district.

    This function returns a dataframe of every StudentVaccinationYearStatus in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/StudentVaccinationYearStatus/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/StudentVaccinationYearStatus/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getStudentVaccinationYearStatus(StudentVaccinationYearStatusID, EntityID = 1, returnStudentVaccinationYearStatusID = False, returnAllDoseDates = False, returnComplianceScheduleDetailID = False, returnComplianceStatus = False, returnCreatedTime = False, returnEndDate = False, returnInvalidDoseDates = False, returnIsConditional = False, returnIsInComplianceByVaccines = False, returnIsOutOfCompliance = False, returnIsOutOfComplianceConditionalDisplay = False, returnIsProvisional = False, returnModifiedTime = False, returnReasonConditional = False, returnReasonOutOfCompliance = False, returnStartDate = False, returnStudentChildhoodIllnessID = False, returnStudentID = False, returnStudentVaccinationWaiverID = False, returnStudentVaccinationYearID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnVaccinationYearComplianceScheduleID = False, returnValidDoseDates = False, returnValidDoses = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/StudentVaccinationYearStatus/" + str(StudentVaccinationYearStatusID), verb = "get", return_params_list = return_params)

def modifyStudentVaccinationYearStatus(StudentVaccinationYearStatusID, EntityID = 1, setStudentVaccinationYearStatusID = None, setAllDoseDates = None, setComplianceScheduleDetailID = None, setComplianceStatus = None, setCreatedTime = None, setEndDate = None, setInvalidDoseDates = None, setIsConditional = None, setIsInComplianceByVaccines = None, setIsOutOfCompliance = None, setIsOutOfComplianceConditionalDisplay = None, setIsProvisional = None, setModifiedTime = None, setReasonConditional = None, setReasonOutOfCompliance = None, setStartDate = None, setStudentChildhoodIllnessID = None, setStudentID = None, setStudentVaccinationWaiverID = None, setStudentVaccinationYearID = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, setVaccinationYearComplianceScheduleID = None, setValidDoseDates = None, setValidDoses = None, returnStudentVaccinationYearStatusID = False, returnAllDoseDates = False, returnComplianceScheduleDetailID = False, returnComplianceStatus = False, returnCreatedTime = False, returnEndDate = False, returnInvalidDoseDates = False, returnIsConditional = False, returnIsInComplianceByVaccines = False, returnIsOutOfCompliance = False, returnIsOutOfComplianceConditionalDisplay = False, returnIsProvisional = False, returnModifiedTime = False, returnReasonConditional = False, returnReasonOutOfCompliance = False, returnStartDate = False, returnStudentChildhoodIllnessID = False, returnStudentID = False, returnStudentVaccinationWaiverID = False, returnStudentVaccinationYearID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnVaccinationYearComplianceScheduleID = False, returnValidDoseDates = False, returnValidDoses = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/StudentVaccinationYearStatus/" + str(StudentVaccinationYearStatusID), verb = "post", return_params_list = return_params, payload = payload_params)

def createStudentVaccinationYearStatus(EntityID = 1, setStudentVaccinationYearStatusID = None, setAllDoseDates = None, setComplianceScheduleDetailID = None, setComplianceStatus = None, setCreatedTime = None, setEndDate = None, setInvalidDoseDates = None, setIsConditional = None, setIsInComplianceByVaccines = None, setIsOutOfCompliance = None, setIsOutOfComplianceConditionalDisplay = None, setIsProvisional = None, setModifiedTime = None, setReasonConditional = None, setReasonOutOfCompliance = None, setStartDate = None, setStudentChildhoodIllnessID = None, setStudentID = None, setStudentVaccinationWaiverID = None, setStudentVaccinationYearID = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, setVaccinationYearComplianceScheduleID = None, setValidDoseDates = None, setValidDoses = None, returnStudentVaccinationYearStatusID = False, returnAllDoseDates = False, returnComplianceScheduleDetailID = False, returnComplianceStatus = False, returnCreatedTime = False, returnEndDate = False, returnInvalidDoseDates = False, returnIsConditional = False, returnIsInComplianceByVaccines = False, returnIsOutOfCompliance = False, returnIsOutOfComplianceConditionalDisplay = False, returnIsProvisional = False, returnModifiedTime = False, returnReasonConditional = False, returnReasonOutOfCompliance = False, returnStartDate = False, returnStudentChildhoodIllnessID = False, returnStudentID = False, returnStudentVaccinationWaiverID = False, returnStudentVaccinationYearID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnVaccinationYearComplianceScheduleID = False, returnValidDoseDates = False, returnValidDoses = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/StudentVaccinationYearStatus/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteStudentVaccinationYearStatus(StudentVaccinationYearStatusID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/StudentVaccinationYearStatus/" + str(StudentVaccinationYearStatusID), verb = "delete")


def getEveryStudentVaccinationYearStatusStudentVaccine(searchConditions = [], EntityID = 1, returnStudentVaccinationYearStatusStudentVaccineID = False, returnCreatedTime = False, returnInvalidDoseReason = False, returnIsValidDose = False, returnModifiedTime = False, returnStudentVaccinationYearStatusID = False, returnStudentVaccineID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every StudentVaccinationYearStatusStudentVaccine in the district.

    This function returns a dataframe of every StudentVaccinationYearStatusStudentVaccine in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/StudentVaccinationYearStatusStudentVaccine/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/StudentVaccinationYearStatusStudentVaccine/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getStudentVaccinationYearStatusStudentVaccine(StudentVaccinationYearStatusStudentVaccineID, EntityID = 1, returnStudentVaccinationYearStatusStudentVaccineID = False, returnCreatedTime = False, returnInvalidDoseReason = False, returnIsValidDose = False, returnModifiedTime = False, returnStudentVaccinationYearStatusID = False, returnStudentVaccineID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/StudentVaccinationYearStatusStudentVaccine/" + str(StudentVaccinationYearStatusStudentVaccineID), verb = "get", return_params_list = return_params)

def modifyStudentVaccinationYearStatusStudentVaccine(StudentVaccinationYearStatusStudentVaccineID, EntityID = 1, setStudentVaccinationYearStatusStudentVaccineID = None, setCreatedTime = None, setInvalidDoseReason = None, setIsValidDose = None, setModifiedTime = None, setStudentVaccinationYearStatusID = None, setStudentVaccineID = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnStudentVaccinationYearStatusStudentVaccineID = False, returnCreatedTime = False, returnInvalidDoseReason = False, returnIsValidDose = False, returnModifiedTime = False, returnStudentVaccinationYearStatusID = False, returnStudentVaccineID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/StudentVaccinationYearStatusStudentVaccine/" + str(StudentVaccinationYearStatusStudentVaccineID), verb = "post", return_params_list = return_params, payload = payload_params)

def createStudentVaccinationYearStatusStudentVaccine(EntityID = 1, setStudentVaccinationYearStatusStudentVaccineID = None, setCreatedTime = None, setInvalidDoseReason = None, setIsValidDose = None, setModifiedTime = None, setStudentVaccinationYearStatusID = None, setStudentVaccineID = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnStudentVaccinationYearStatusStudentVaccineID = False, returnCreatedTime = False, returnInvalidDoseReason = False, returnIsValidDose = False, returnModifiedTime = False, returnStudentVaccinationYearStatusID = False, returnStudentVaccineID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/StudentVaccinationYearStatusStudentVaccine/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteStudentVaccinationYearStatusStudentVaccine(StudentVaccinationYearStatusStudentVaccineID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/StudentVaccinationYearStatusStudentVaccine/" + str(StudentVaccinationYearStatusStudentVaccineID), verb = "delete")


def getEveryStudentVaccine(searchConditions = [], EntityID = 1, returnStudentVaccineID = False, returnCreatedTime = False, returnDate = False, returnLotNumber = False, returnModifiedTime = False, returnStudentID = False, returnStudentVaccineDates = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnVaccineID = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every StudentVaccine in the district.

    This function returns a dataframe of every StudentVaccine in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/StudentVaccine/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/StudentVaccine/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getStudentVaccine(StudentVaccineID, EntityID = 1, returnStudentVaccineID = False, returnCreatedTime = False, returnDate = False, returnLotNumber = False, returnModifiedTime = False, returnStudentID = False, returnStudentVaccineDates = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnVaccineID = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/StudentVaccine/" + str(StudentVaccineID), verb = "get", return_params_list = return_params)

def modifyStudentVaccine(StudentVaccineID, EntityID = 1, setStudentVaccineID = None, setCreatedTime = None, setDate = None, setLotNumber = None, setModifiedTime = None, setStudentID = None, setStudentVaccineDates = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, setVaccineID = None, returnStudentVaccineID = False, returnCreatedTime = False, returnDate = False, returnLotNumber = False, returnModifiedTime = False, returnStudentID = False, returnStudentVaccineDates = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnVaccineID = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/StudentVaccine/" + str(StudentVaccineID), verb = "post", return_params_list = return_params, payload = payload_params)

def createStudentVaccine(EntityID = 1, setStudentVaccineID = None, setCreatedTime = None, setDate = None, setLotNumber = None, setModifiedTime = None, setStudentID = None, setStudentVaccineDates = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, setVaccineID = None, returnStudentVaccineID = False, returnCreatedTime = False, returnDate = False, returnLotNumber = False, returnModifiedTime = False, returnStudentID = False, returnStudentVaccineDates = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnVaccineID = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/StudentVaccine/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteStudentVaccine(StudentVaccineID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/StudentVaccine/" + str(StudentVaccineID), verb = "delete")


def getEveryStudentVaccineMaintenance(searchConditions = [], EntityID = 1, returnVaccineID = False, returnDate1 = False, returnDate2 = False, returnDate3 = False, returnDate4 = False, returnDate5 = False, returnDate6 = False, returnDate7 = False, returnHasExistingStudentVaccines = False, returnLotNumber1 = False, returnLotNumber2 = False, returnLotNumber3 = False, returnLotNumber4 = False, returnLotNumber5 = False, returnLotNumber6 = False, returnLotNumber7 = False, returnStudentID = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every StudentVaccineMaintenance in the district.

    This function returns a dataframe of every StudentVaccineMaintenance in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/StudentVaccineMaintenance/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/StudentVaccineMaintenance/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getStudentVaccineMaintenance(VaccineID, EntityID = 1, returnVaccineID = False, returnDate1 = False, returnDate2 = False, returnDate3 = False, returnDate4 = False, returnDate5 = False, returnDate6 = False, returnDate7 = False, returnHasExistingStudentVaccines = False, returnLotNumber1 = False, returnLotNumber2 = False, returnLotNumber3 = False, returnLotNumber4 = False, returnLotNumber5 = False, returnLotNumber6 = False, returnLotNumber7 = False, returnStudentID = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/StudentVaccineMaintenance/" + str(VaccineID), verb = "get", return_params_list = return_params)

def modifyStudentVaccineMaintenance(VaccineID, EntityID = 1, setVaccineID = None, setDate1 = None, setDate2 = None, setDate3 = None, setDate4 = None, setDate5 = None, setDate6 = None, setDate7 = None, setHasExistingStudentVaccines = None, setLotNumber1 = None, setLotNumber2 = None, setLotNumber3 = None, setLotNumber4 = None, setLotNumber5 = None, setLotNumber6 = None, setLotNumber7 = None, setStudentID = None, returnVaccineID = False, returnDate1 = False, returnDate2 = False, returnDate3 = False, returnDate4 = False, returnDate5 = False, returnDate6 = False, returnDate7 = False, returnHasExistingStudentVaccines = False, returnLotNumber1 = False, returnLotNumber2 = False, returnLotNumber3 = False, returnLotNumber4 = False, returnLotNumber5 = False, returnLotNumber6 = False, returnLotNumber7 = False, returnStudentID = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/StudentVaccineMaintenance/" + str(VaccineID), verb = "post", return_params_list = return_params, payload = payload_params)

def createStudentVaccineMaintenance(EntityID = 1, setVaccineID = None, setDate1 = None, setDate2 = None, setDate3 = None, setDate4 = None, setDate5 = None, setDate6 = None, setDate7 = None, setHasExistingStudentVaccines = None, setLotNumber1 = None, setLotNumber2 = None, setLotNumber3 = None, setLotNumber4 = None, setLotNumber5 = None, setLotNumber6 = None, setLotNumber7 = None, setStudentID = None, returnVaccineID = False, returnDate1 = False, returnDate2 = False, returnDate3 = False, returnDate4 = False, returnDate5 = False, returnDate6 = False, returnDate7 = False, returnHasExistingStudentVaccines = False, returnLotNumber1 = False, returnLotNumber2 = False, returnLotNumber3 = False, returnLotNumber4 = False, returnLotNumber5 = False, returnLotNumber6 = False, returnLotNumber7 = False, returnStudentID = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/StudentVaccineMaintenance/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteStudentVaccineMaintenance(VaccineID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/StudentVaccineMaintenance/" + str(VaccineID), verb = "delete")


def getEveryTempAdministerNameMedication(searchConditions = [], EntityID = 1, returnTempAdministerNameMedicationID = False, returnAdministerNameMedicationID = False, returnAdministrationTime = False, returnCreatedTime = False, returnDosesAdministered = False, returnErrorMessage = False, returnMedicationCode = False, returnModifiedTime = False, returnName = False, returnNewDosesAdministered = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every TempAdministerNameMedication in the district.

    This function returns a dataframe of every TempAdministerNameMedication in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/TempAdministerNameMedication/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/TempAdministerNameMedication/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getTempAdministerNameMedication(TempAdministerNameMedicationID, EntityID = 1, returnTempAdministerNameMedicationID = False, returnAdministerNameMedicationID = False, returnAdministrationTime = False, returnCreatedTime = False, returnDosesAdministered = False, returnErrorMessage = False, returnMedicationCode = False, returnModifiedTime = False, returnName = False, returnNewDosesAdministered = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/TempAdministerNameMedication/" + str(TempAdministerNameMedicationID), verb = "get", return_params_list = return_params)

def modifyTempAdministerNameMedication(TempAdministerNameMedicationID, EntityID = 1, setTempAdministerNameMedicationID = None, setAdministerNameMedicationID = None, setAdministrationTime = None, setCreatedTime = None, setDosesAdministered = None, setErrorMessage = None, setMedicationCode = None, setModifiedTime = None, setName = None, setNewDosesAdministered = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnTempAdministerNameMedicationID = False, returnAdministerNameMedicationID = False, returnAdministrationTime = False, returnCreatedTime = False, returnDosesAdministered = False, returnErrorMessage = False, returnMedicationCode = False, returnModifiedTime = False, returnName = False, returnNewDosesAdministered = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/TempAdministerNameMedication/" + str(TempAdministerNameMedicationID), verb = "post", return_params_list = return_params, payload = payload_params)

def createTempAdministerNameMedication(EntityID = 1, setTempAdministerNameMedicationID = None, setAdministerNameMedicationID = None, setAdministrationTime = None, setCreatedTime = None, setDosesAdministered = None, setErrorMessage = None, setMedicationCode = None, setModifiedTime = None, setName = None, setNewDosesAdministered = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnTempAdministerNameMedicationID = False, returnAdministerNameMedicationID = False, returnAdministrationTime = False, returnCreatedTime = False, returnDosesAdministered = False, returnErrorMessage = False, returnMedicationCode = False, returnModifiedTime = False, returnName = False, returnNewDosesAdministered = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/TempAdministerNameMedication/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteTempAdministerNameMedication(TempAdministerNameMedicationID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/TempAdministerNameMedication/" + str(TempAdministerNameMedicationID), verb = "delete")


def getEveryTempNameMedication(searchConditions = [], EntityID = 1, returnTempNameMedicationID = False, returnAdministrationInstruction = False, returnCode = False, returnCreatedTime = False, returnDistributionType = False, returnDistributionTypeCode = False, returnEndDate = False, returnEndStatusCode = False, returnErrorCount = False, returnFullNameLFM = False, returnHasErrors = False, returnHealthProfessionalIDPrescribedBy = False, returnMaxDosesPerDay = False, returnMedicationCode = False, returnMedicationCommentID = False, returnMedicationDosageUnitID = False, returnMedicationID = False, returnMedicationRouteID = False, returnModifiedTime = False, returnNameID = False, returnNameMedicationID = False, returnNewCode = False, returnNewMaxDosesPerDay = False, returnNewMedicationDosageUnitID = False, returnNewMedicationRouteID = False, returnNewRouteName = False, returnNewUnitsPerDoseHigh = False, returnNewUnitsPerDoseLow = False, returnNote = False, returnOrderType = False, returnOrderTypeCode = False, returnReceivedDoctorForm = False, returnReceivedParentReleaseForm = False, returnReceivedVerbalParentPermission = False, returnRouteName = False, returnStartDate = False, returnUnitsPerDoseHigh = False, returnUnitsPerDoseLow = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every TempNameMedication in the district.

    This function returns a dataframe of every TempNameMedication in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/TempNameMedication/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/TempNameMedication/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getTempNameMedication(TempNameMedicationID, EntityID = 1, returnTempNameMedicationID = False, returnAdministrationInstruction = False, returnCode = False, returnCreatedTime = False, returnDistributionType = False, returnDistributionTypeCode = False, returnEndDate = False, returnEndStatusCode = False, returnErrorCount = False, returnFullNameLFM = False, returnHasErrors = False, returnHealthProfessionalIDPrescribedBy = False, returnMaxDosesPerDay = False, returnMedicationCode = False, returnMedicationCommentID = False, returnMedicationDosageUnitID = False, returnMedicationID = False, returnMedicationRouteID = False, returnModifiedTime = False, returnNameID = False, returnNameMedicationID = False, returnNewCode = False, returnNewMaxDosesPerDay = False, returnNewMedicationDosageUnitID = False, returnNewMedicationRouteID = False, returnNewRouteName = False, returnNewUnitsPerDoseHigh = False, returnNewUnitsPerDoseLow = False, returnNote = False, returnOrderType = False, returnOrderTypeCode = False, returnReceivedDoctorForm = False, returnReceivedParentReleaseForm = False, returnReceivedVerbalParentPermission = False, returnRouteName = False, returnStartDate = False, returnUnitsPerDoseHigh = False, returnUnitsPerDoseLow = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/TempNameMedication/" + str(TempNameMedicationID), verb = "get", return_params_list = return_params)

def modifyTempNameMedication(TempNameMedicationID, EntityID = 1, setTempNameMedicationID = None, setAdministrationInstruction = None, setCode = None, setCreatedTime = None, setDistributionType = None, setDistributionTypeCode = None, setEndDate = None, setEndStatusCode = None, setErrorCount = None, setFullNameLFM = None, setHasErrors = None, setHealthProfessionalIDPrescribedBy = None, setMaxDosesPerDay = None, setMedicationCode = None, setMedicationCommentID = None, setMedicationDosageUnitID = None, setMedicationID = None, setMedicationRouteID = None, setModifiedTime = None, setNameID = None, setNameMedicationID = None, setNewCode = None, setNewMaxDosesPerDay = None, setNewMedicationDosageUnitID = None, setNewMedicationRouteID = None, setNewRouteName = None, setNewUnitsPerDoseHigh = None, setNewUnitsPerDoseLow = None, setNote = None, setOrderType = None, setOrderTypeCode = None, setReceivedDoctorForm = None, setReceivedParentReleaseForm = None, setReceivedVerbalParentPermission = None, setRouteName = None, setStartDate = None, setUnitsPerDoseHigh = None, setUnitsPerDoseLow = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnTempNameMedicationID = False, returnAdministrationInstruction = False, returnCode = False, returnCreatedTime = False, returnDistributionType = False, returnDistributionTypeCode = False, returnEndDate = False, returnEndStatusCode = False, returnErrorCount = False, returnFullNameLFM = False, returnHasErrors = False, returnHealthProfessionalIDPrescribedBy = False, returnMaxDosesPerDay = False, returnMedicationCode = False, returnMedicationCommentID = False, returnMedicationDosageUnitID = False, returnMedicationID = False, returnMedicationRouteID = False, returnModifiedTime = False, returnNameID = False, returnNameMedicationID = False, returnNewCode = False, returnNewMaxDosesPerDay = False, returnNewMedicationDosageUnitID = False, returnNewMedicationRouteID = False, returnNewRouteName = False, returnNewUnitsPerDoseHigh = False, returnNewUnitsPerDoseLow = False, returnNote = False, returnOrderType = False, returnOrderTypeCode = False, returnReceivedDoctorForm = False, returnReceivedParentReleaseForm = False, returnReceivedVerbalParentPermission = False, returnRouteName = False, returnStartDate = False, returnUnitsPerDoseHigh = False, returnUnitsPerDoseLow = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/TempNameMedication/" + str(TempNameMedicationID), verb = "post", return_params_list = return_params, payload = payload_params)

def createTempNameMedication(EntityID = 1, setTempNameMedicationID = None, setAdministrationInstruction = None, setCode = None, setCreatedTime = None, setDistributionType = None, setDistributionTypeCode = None, setEndDate = None, setEndStatusCode = None, setErrorCount = None, setFullNameLFM = None, setHasErrors = None, setHealthProfessionalIDPrescribedBy = None, setMaxDosesPerDay = None, setMedicationCode = None, setMedicationCommentID = None, setMedicationDosageUnitID = None, setMedicationID = None, setMedicationRouteID = None, setModifiedTime = None, setNameID = None, setNameMedicationID = None, setNewCode = None, setNewMaxDosesPerDay = None, setNewMedicationDosageUnitID = None, setNewMedicationRouteID = None, setNewRouteName = None, setNewUnitsPerDoseHigh = None, setNewUnitsPerDoseLow = None, setNote = None, setOrderType = None, setOrderTypeCode = None, setReceivedDoctorForm = None, setReceivedParentReleaseForm = None, setReceivedVerbalParentPermission = None, setRouteName = None, setStartDate = None, setUnitsPerDoseHigh = None, setUnitsPerDoseLow = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnTempNameMedicationID = False, returnAdministrationInstruction = False, returnCode = False, returnCreatedTime = False, returnDistributionType = False, returnDistributionTypeCode = False, returnEndDate = False, returnEndStatusCode = False, returnErrorCount = False, returnFullNameLFM = False, returnHasErrors = False, returnHealthProfessionalIDPrescribedBy = False, returnMaxDosesPerDay = False, returnMedicationCode = False, returnMedicationCommentID = False, returnMedicationDosageUnitID = False, returnMedicationID = False, returnMedicationRouteID = False, returnModifiedTime = False, returnNameID = False, returnNameMedicationID = False, returnNewCode = False, returnNewMaxDosesPerDay = False, returnNewMedicationDosageUnitID = False, returnNewMedicationRouteID = False, returnNewRouteName = False, returnNewUnitsPerDoseHigh = False, returnNewUnitsPerDoseLow = False, returnNote = False, returnOrderType = False, returnOrderTypeCode = False, returnReceivedDoctorForm = False, returnReceivedParentReleaseForm = False, returnReceivedVerbalParentPermission = False, returnRouteName = False, returnStartDate = False, returnUnitsPerDoseHigh = False, returnUnitsPerDoseLow = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/TempNameMedication/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteTempNameMedication(TempNameMedicationID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/TempNameMedication/" + str(TempNameMedicationID), verb = "delete")


def getEveryTempNameMedicationErrorDetail(searchConditions = [], EntityID = 1, returnTempNameMedicationErrorDetailID = False, returnCreatedTime = False, returnError = False, returnErrorDetail = False, returnModifiedTime = False, returnTempNameMedicationID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every TempNameMedicationErrorDetail in the district.

    This function returns a dataframe of every TempNameMedicationErrorDetail in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/TempNameMedicationErrorDetail/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/TempNameMedicationErrorDetail/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getTempNameMedicationErrorDetail(TempNameMedicationErrorDetailID, EntityID = 1, returnTempNameMedicationErrorDetailID = False, returnCreatedTime = False, returnError = False, returnErrorDetail = False, returnModifiedTime = False, returnTempNameMedicationID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/TempNameMedicationErrorDetail/" + str(TempNameMedicationErrorDetailID), verb = "get", return_params_list = return_params)

def modifyTempNameMedicationErrorDetail(TempNameMedicationErrorDetailID, EntityID = 1, setTempNameMedicationErrorDetailID = None, setCreatedTime = None, setError = None, setErrorDetail = None, setModifiedTime = None, setTempNameMedicationID = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnTempNameMedicationErrorDetailID = False, returnCreatedTime = False, returnError = False, returnErrorDetail = False, returnModifiedTime = False, returnTempNameMedicationID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/TempNameMedicationErrorDetail/" + str(TempNameMedicationErrorDetailID), verb = "post", return_params_list = return_params, payload = payload_params)

def createTempNameMedicationErrorDetail(EntityID = 1, setTempNameMedicationErrorDetailID = None, setCreatedTime = None, setError = None, setErrorDetail = None, setModifiedTime = None, setTempNameMedicationID = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnTempNameMedicationErrorDetailID = False, returnCreatedTime = False, returnError = False, returnErrorDetail = False, returnModifiedTime = False, returnTempNameMedicationID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/TempNameMedicationErrorDetail/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteTempNameMedicationErrorDetail(TempNameMedicationErrorDetailID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/TempNameMedicationErrorDetail/" + str(TempNameMedicationErrorDetailID), verb = "delete")


def getEveryTempNameProcedureOccurrence(searchConditions = [], EntityID = 1, returnTempNameProcedureOccurrenceID = False, returnCreatedTime = False, returnDayOfTheWeek = False, returnErrorCount = False, returnHasErrors = False, returnModifiedTime = False, returnNameIDPerformedBy = False, returnNameProcedureOccurrenceID = False, returnNameScheduled = False, returnOccurrenceDate = False, returnOldNameIDPerformedBy = False, returnOldNameScheduled = False, returnOldStartTime = False, returnPendingStatus = False, returnSchedulingErrorMessage = False, returnStartTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every TempNameProcedureOccurrence in the district.

    This function returns a dataframe of every TempNameProcedureOccurrence in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/TempNameProcedureOccurrence/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/TempNameProcedureOccurrence/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getTempNameProcedureOccurrence(TempNameProcedureOccurrenceID, EntityID = 1, returnTempNameProcedureOccurrenceID = False, returnCreatedTime = False, returnDayOfTheWeek = False, returnErrorCount = False, returnHasErrors = False, returnModifiedTime = False, returnNameIDPerformedBy = False, returnNameProcedureOccurrenceID = False, returnNameScheduled = False, returnOccurrenceDate = False, returnOldNameIDPerformedBy = False, returnOldNameScheduled = False, returnOldStartTime = False, returnPendingStatus = False, returnSchedulingErrorMessage = False, returnStartTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/TempNameProcedureOccurrence/" + str(TempNameProcedureOccurrenceID), verb = "get", return_params_list = return_params)

def modifyTempNameProcedureOccurrence(TempNameProcedureOccurrenceID, EntityID = 1, setTempNameProcedureOccurrenceID = None, setCreatedTime = None, setDayOfTheWeek = None, setErrorCount = None, setHasErrors = None, setModifiedTime = None, setNameIDPerformedBy = None, setNameProcedureOccurrenceID = None, setNameScheduled = None, setOccurrenceDate = None, setOldNameIDPerformedBy = None, setOldNameScheduled = None, setOldStartTime = None, setPendingStatus = None, setSchedulingErrorMessage = None, setStartTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnTempNameProcedureOccurrenceID = False, returnCreatedTime = False, returnDayOfTheWeek = False, returnErrorCount = False, returnHasErrors = False, returnModifiedTime = False, returnNameIDPerformedBy = False, returnNameProcedureOccurrenceID = False, returnNameScheduled = False, returnOccurrenceDate = False, returnOldNameIDPerformedBy = False, returnOldNameScheduled = False, returnOldStartTime = False, returnPendingStatus = False, returnSchedulingErrorMessage = False, returnStartTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/TempNameProcedureOccurrence/" + str(TempNameProcedureOccurrenceID), verb = "post", return_params_list = return_params, payload = payload_params)

def createTempNameProcedureOccurrence(EntityID = 1, setTempNameProcedureOccurrenceID = None, setCreatedTime = None, setDayOfTheWeek = None, setErrorCount = None, setHasErrors = None, setModifiedTime = None, setNameIDPerformedBy = None, setNameProcedureOccurrenceID = None, setNameScheduled = None, setOccurrenceDate = None, setOldNameIDPerformedBy = None, setOldNameScheduled = None, setOldStartTime = None, setPendingStatus = None, setSchedulingErrorMessage = None, setStartTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnTempNameProcedureOccurrenceID = False, returnCreatedTime = False, returnDayOfTheWeek = False, returnErrorCount = False, returnHasErrors = False, returnModifiedTime = False, returnNameIDPerformedBy = False, returnNameProcedureOccurrenceID = False, returnNameScheduled = False, returnOccurrenceDate = False, returnOldNameIDPerformedBy = False, returnOldNameScheduled = False, returnOldStartTime = False, returnPendingStatus = False, returnSchedulingErrorMessage = False, returnStartTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/TempNameProcedureOccurrence/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteTempNameProcedureOccurrence(TempNameProcedureOccurrenceID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/TempNameProcedureOccurrence/" + str(TempNameProcedureOccurrenceID), verb = "delete")


def getEveryTempNameProcedureOccurrenceErrorDetail(searchConditions = [], EntityID = 1, returnTempNameProcedureOccurrenceErrorDetailID = False, returnCreatedTime = False, returnError = False, returnErrorDetail = False, returnModifiedTime = False, returnTempNameProcedureOccurrenceID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every TempNameProcedureOccurrenceErrorDetail in the district.

    This function returns a dataframe of every TempNameProcedureOccurrenceErrorDetail in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/TempNameProcedureOccurrenceErrorDetail/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/TempNameProcedureOccurrenceErrorDetail/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getTempNameProcedureOccurrenceErrorDetail(TempNameProcedureOccurrenceErrorDetailID, EntityID = 1, returnTempNameProcedureOccurrenceErrorDetailID = False, returnCreatedTime = False, returnError = False, returnErrorDetail = False, returnModifiedTime = False, returnTempNameProcedureOccurrenceID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/TempNameProcedureOccurrenceErrorDetail/" + str(TempNameProcedureOccurrenceErrorDetailID), verb = "get", return_params_list = return_params)

def modifyTempNameProcedureOccurrenceErrorDetail(TempNameProcedureOccurrenceErrorDetailID, EntityID = 1, setTempNameProcedureOccurrenceErrorDetailID = None, setCreatedTime = None, setError = None, setErrorDetail = None, setModifiedTime = None, setTempNameProcedureOccurrenceID = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnTempNameProcedureOccurrenceErrorDetailID = False, returnCreatedTime = False, returnError = False, returnErrorDetail = False, returnModifiedTime = False, returnTempNameProcedureOccurrenceID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/TempNameProcedureOccurrenceErrorDetail/" + str(TempNameProcedureOccurrenceErrorDetailID), verb = "post", return_params_list = return_params, payload = payload_params)

def createTempNameProcedureOccurrenceErrorDetail(EntityID = 1, setTempNameProcedureOccurrenceErrorDetailID = None, setCreatedTime = None, setError = None, setErrorDetail = None, setModifiedTime = None, setTempNameProcedureOccurrenceID = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnTempNameProcedureOccurrenceErrorDetailID = False, returnCreatedTime = False, returnError = False, returnErrorDetail = False, returnModifiedTime = False, returnTempNameProcedureOccurrenceID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/TempNameProcedureOccurrenceErrorDetail/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteTempNameProcedureOccurrenceErrorDetail(TempNameProcedureOccurrenceErrorDetailID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/TempNameProcedureOccurrenceErrorDetail/" + str(TempNameProcedureOccurrenceErrorDetailID), verb = "delete")


def getEveryTempNameProcedureScheduleDay(searchConditions = [], EntityID = 1, returnTempNameProcedureScheduleDayID = False, returnCreatedTime = False, returnDay = False, returnDayOfTheWeek = False, returnErrorCount = False, returnExistingIsActive = False, returnExistingNameIDPerformedByOverride = False, returnExistingScheduledStartTimeOverride = False, returnHasErrors = False, returnIsActive = False, returnModifiedTime = False, returnNameIDPerformedByOverride = False, returnNameProcedureScheduleDayID = False, returnScheduledStartTimeOverride = False, returnUseNamePerformedByOverride = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnUseScheduledStartTimeOverride = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every TempNameProcedureScheduleDay in the district.

    This function returns a dataframe of every TempNameProcedureScheduleDay in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/TempNameProcedureScheduleDay/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/TempNameProcedureScheduleDay/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getTempNameProcedureScheduleDay(TempNameProcedureScheduleDayID, EntityID = 1, returnTempNameProcedureScheduleDayID = False, returnCreatedTime = False, returnDay = False, returnDayOfTheWeek = False, returnErrorCount = False, returnExistingIsActive = False, returnExistingNameIDPerformedByOverride = False, returnExistingScheduledStartTimeOverride = False, returnHasErrors = False, returnIsActive = False, returnModifiedTime = False, returnNameIDPerformedByOverride = False, returnNameProcedureScheduleDayID = False, returnScheduledStartTimeOverride = False, returnUseNamePerformedByOverride = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnUseScheduledStartTimeOverride = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/TempNameProcedureScheduleDay/" + str(TempNameProcedureScheduleDayID), verb = "get", return_params_list = return_params)

def modifyTempNameProcedureScheduleDay(TempNameProcedureScheduleDayID, EntityID = 1, setTempNameProcedureScheduleDayID = None, setCreatedTime = None, setDay = None, setDayOfTheWeek = None, setErrorCount = None, setExistingIsActive = None, setExistingNameIDPerformedByOverride = None, setExistingScheduledStartTimeOverride = None, setHasErrors = None, setIsActive = None, setModifiedTime = None, setNameIDPerformedByOverride = None, setNameProcedureScheduleDayID = None, setScheduledStartTimeOverride = None, setUseNamePerformedByOverride = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, setUseScheduledStartTimeOverride = None, returnTempNameProcedureScheduleDayID = False, returnCreatedTime = False, returnDay = False, returnDayOfTheWeek = False, returnErrorCount = False, returnExistingIsActive = False, returnExistingNameIDPerformedByOverride = False, returnExistingScheduledStartTimeOverride = False, returnHasErrors = False, returnIsActive = False, returnModifiedTime = False, returnNameIDPerformedByOverride = False, returnNameProcedureScheduleDayID = False, returnScheduledStartTimeOverride = False, returnUseNamePerformedByOverride = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnUseScheduledStartTimeOverride = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/TempNameProcedureScheduleDay/" + str(TempNameProcedureScheduleDayID), verb = "post", return_params_list = return_params, payload = payload_params)

def createTempNameProcedureScheduleDay(EntityID = 1, setTempNameProcedureScheduleDayID = None, setCreatedTime = None, setDay = None, setDayOfTheWeek = None, setErrorCount = None, setExistingIsActive = None, setExistingNameIDPerformedByOverride = None, setExistingScheduledStartTimeOverride = None, setHasErrors = None, setIsActive = None, setModifiedTime = None, setNameIDPerformedByOverride = None, setNameProcedureScheduleDayID = None, setScheduledStartTimeOverride = None, setUseNamePerformedByOverride = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, setUseScheduledStartTimeOverride = None, returnTempNameProcedureScheduleDayID = False, returnCreatedTime = False, returnDay = False, returnDayOfTheWeek = False, returnErrorCount = False, returnExistingIsActive = False, returnExistingNameIDPerformedByOverride = False, returnExistingScheduledStartTimeOverride = False, returnHasErrors = False, returnIsActive = False, returnModifiedTime = False, returnNameIDPerformedByOverride = False, returnNameProcedureScheduleDayID = False, returnScheduledStartTimeOverride = False, returnUseNamePerformedByOverride = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnUseScheduledStartTimeOverride = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/TempNameProcedureScheduleDay/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteTempNameProcedureScheduleDay(TempNameProcedureScheduleDayID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/TempNameProcedureScheduleDay/" + str(TempNameProcedureScheduleDayID), verb = "delete")


def getEveryTempNameProcedureScheduleDayErrorDetail(searchConditions = [], EntityID = 1, returnTempNameProcedureScheduleDayErrorDetailID = False, returnCreatedTime = False, returnError = False, returnErrorDetail = False, returnModifiedTime = False, returnTempNameProcedureScheduleDayID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every TempNameProcedureScheduleDayErrorDetail in the district.

    This function returns a dataframe of every TempNameProcedureScheduleDayErrorDetail in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/TempNameProcedureScheduleDayErrorDetail/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/TempNameProcedureScheduleDayErrorDetail/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getTempNameProcedureScheduleDayErrorDetail(TempNameProcedureScheduleDayErrorDetailID, EntityID = 1, returnTempNameProcedureScheduleDayErrorDetailID = False, returnCreatedTime = False, returnError = False, returnErrorDetail = False, returnModifiedTime = False, returnTempNameProcedureScheduleDayID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/TempNameProcedureScheduleDayErrorDetail/" + str(TempNameProcedureScheduleDayErrorDetailID), verb = "get", return_params_list = return_params)

def modifyTempNameProcedureScheduleDayErrorDetail(TempNameProcedureScheduleDayErrorDetailID, EntityID = 1, setTempNameProcedureScheduleDayErrorDetailID = None, setCreatedTime = None, setError = None, setErrorDetail = None, setModifiedTime = None, setTempNameProcedureScheduleDayID = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnTempNameProcedureScheduleDayErrorDetailID = False, returnCreatedTime = False, returnError = False, returnErrorDetail = False, returnModifiedTime = False, returnTempNameProcedureScheduleDayID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/TempNameProcedureScheduleDayErrorDetail/" + str(TempNameProcedureScheduleDayErrorDetailID), verb = "post", return_params_list = return_params, payload = payload_params)

def createTempNameProcedureScheduleDayErrorDetail(EntityID = 1, setTempNameProcedureScheduleDayErrorDetailID = None, setCreatedTime = None, setError = None, setErrorDetail = None, setModifiedTime = None, setTempNameProcedureScheduleDayID = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnTempNameProcedureScheduleDayErrorDetailID = False, returnCreatedTime = False, returnError = False, returnErrorDetail = False, returnModifiedTime = False, returnTempNameProcedureScheduleDayID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/TempNameProcedureScheduleDayErrorDetail/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteTempNameProcedureScheduleDayErrorDetail(TempNameProcedureScheduleDayErrorDetailID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/TempNameProcedureScheduleDayErrorDetail/" + str(TempNameProcedureScheduleDayErrorDetailID), verb = "delete")


def getEveryTempNameProcedureScheduleError(searchConditions = [], EntityID = 1, returnTempNameProcedureScheduleErrorID = False, returnCreatedTime = False, returnDescription = False, returnEndDate = False, returnErrorCount = False, returnModifiedTime = False, returnStartDate = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every TempNameProcedureScheduleError in the district.

    This function returns a dataframe of every TempNameProcedureScheduleError in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/TempNameProcedureScheduleError/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/TempNameProcedureScheduleError/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getTempNameProcedureScheduleError(TempNameProcedureScheduleErrorID, EntityID = 1, returnTempNameProcedureScheduleErrorID = False, returnCreatedTime = False, returnDescription = False, returnEndDate = False, returnErrorCount = False, returnModifiedTime = False, returnStartDate = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/TempNameProcedureScheduleError/" + str(TempNameProcedureScheduleErrorID), verb = "get", return_params_list = return_params)

def modifyTempNameProcedureScheduleError(TempNameProcedureScheduleErrorID, EntityID = 1, setTempNameProcedureScheduleErrorID = None, setCreatedTime = None, setDescription = None, setEndDate = None, setErrorCount = None, setModifiedTime = None, setStartDate = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnTempNameProcedureScheduleErrorID = False, returnCreatedTime = False, returnDescription = False, returnEndDate = False, returnErrorCount = False, returnModifiedTime = False, returnStartDate = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/TempNameProcedureScheduleError/" + str(TempNameProcedureScheduleErrorID), verb = "post", return_params_list = return_params, payload = payload_params)

def createTempNameProcedureScheduleError(EntityID = 1, setTempNameProcedureScheduleErrorID = None, setCreatedTime = None, setDescription = None, setEndDate = None, setErrorCount = None, setModifiedTime = None, setStartDate = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnTempNameProcedureScheduleErrorID = False, returnCreatedTime = False, returnDescription = False, returnEndDate = False, returnErrorCount = False, returnModifiedTime = False, returnStartDate = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/TempNameProcedureScheduleError/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteTempNameProcedureScheduleError(TempNameProcedureScheduleErrorID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/TempNameProcedureScheduleError/" + str(TempNameProcedureScheduleErrorID), verb = "delete")


def getEveryTempNameProcedureScheduleErrorDetail(searchConditions = [], EntityID = 1, returnTempNameProcedureScheduleErrorDetailID = False, returnCreatedTime = False, returnError = False, returnErrorDetail = False, returnModifiedTime = False, returnTempNameProcedureScheduleErrorID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every TempNameProcedureScheduleErrorDetail in the district.

    This function returns a dataframe of every TempNameProcedureScheduleErrorDetail in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/TempNameProcedureScheduleErrorDetail/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/TempNameProcedureScheduleErrorDetail/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getTempNameProcedureScheduleErrorDetail(TempNameProcedureScheduleErrorDetailID, EntityID = 1, returnTempNameProcedureScheduleErrorDetailID = False, returnCreatedTime = False, returnError = False, returnErrorDetail = False, returnModifiedTime = False, returnTempNameProcedureScheduleErrorID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/TempNameProcedureScheduleErrorDetail/" + str(TempNameProcedureScheduleErrorDetailID), verb = "get", return_params_list = return_params)

def modifyTempNameProcedureScheduleErrorDetail(TempNameProcedureScheduleErrorDetailID, EntityID = 1, setTempNameProcedureScheduleErrorDetailID = None, setCreatedTime = None, setError = None, setErrorDetail = None, setModifiedTime = None, setTempNameProcedureScheduleErrorID = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnTempNameProcedureScheduleErrorDetailID = False, returnCreatedTime = False, returnError = False, returnErrorDetail = False, returnModifiedTime = False, returnTempNameProcedureScheduleErrorID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/TempNameProcedureScheduleErrorDetail/" + str(TempNameProcedureScheduleErrorDetailID), verb = "post", return_params_list = return_params, payload = payload_params)

def createTempNameProcedureScheduleErrorDetail(EntityID = 1, setTempNameProcedureScheduleErrorDetailID = None, setCreatedTime = None, setError = None, setErrorDetail = None, setModifiedTime = None, setTempNameProcedureScheduleErrorID = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnTempNameProcedureScheduleErrorDetailID = False, returnCreatedTime = False, returnError = False, returnErrorDetail = False, returnModifiedTime = False, returnTempNameProcedureScheduleErrorID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/TempNameProcedureScheduleErrorDetail/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteTempNameProcedureScheduleErrorDetail(TempNameProcedureScheduleErrorDetailID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/TempNameProcedureScheduleErrorDetail/" + str(TempNameProcedureScheduleErrorDetailID), verb = "delete")


def getEveryTempStudentChildhoodIllness(searchConditions = [], EntityID = 1, returnTempStudentChildhoodIllnessID = False, returnAgeDiagnosed = False, returnChildhoodIllnessCode = False, returnChildhoodIllnessDescription = False, returnCreatedTime = False, returnIsVoid = False, returnModifiedTime = False, returnNewChildhoodIllnessCode = False, returnNewChildhoodIllnessDescription = False, returnNewChildhoodIllnessID = False, returnSchoolYear = False, returnScreeningDate = False, returnStudentChildhoodIllnessID = False, returnStudentName = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every TempStudentChildhoodIllness in the district.

    This function returns a dataframe of every TempStudentChildhoodIllness in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/TempStudentChildhoodIllness/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/TempStudentChildhoodIllness/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getTempStudentChildhoodIllness(TempStudentChildhoodIllnessID, EntityID = 1, returnTempStudentChildhoodIllnessID = False, returnAgeDiagnosed = False, returnChildhoodIllnessCode = False, returnChildhoodIllnessDescription = False, returnCreatedTime = False, returnIsVoid = False, returnModifiedTime = False, returnNewChildhoodIllnessCode = False, returnNewChildhoodIllnessDescription = False, returnNewChildhoodIllnessID = False, returnSchoolYear = False, returnScreeningDate = False, returnStudentChildhoodIllnessID = False, returnStudentName = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/TempStudentChildhoodIllness/" + str(TempStudentChildhoodIllnessID), verb = "get", return_params_list = return_params)

def modifyTempStudentChildhoodIllness(TempStudentChildhoodIllnessID, EntityID = 1, setTempStudentChildhoodIllnessID = None, setAgeDiagnosed = None, setChildhoodIllnessCode = None, setChildhoodIllnessDescription = None, setCreatedTime = None, setIsVoid = None, setModifiedTime = None, setNewChildhoodIllnessCode = None, setNewChildhoodIllnessDescription = None, setNewChildhoodIllnessID = None, setSchoolYear = None, setScreeningDate = None, setStudentChildhoodIllnessID = None, setStudentName = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnTempStudentChildhoodIllnessID = False, returnAgeDiagnosed = False, returnChildhoodIllnessCode = False, returnChildhoodIllnessDescription = False, returnCreatedTime = False, returnIsVoid = False, returnModifiedTime = False, returnNewChildhoodIllnessCode = False, returnNewChildhoodIllnessDescription = False, returnNewChildhoodIllnessID = False, returnSchoolYear = False, returnScreeningDate = False, returnStudentChildhoodIllnessID = False, returnStudentName = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/TempStudentChildhoodIllness/" + str(TempStudentChildhoodIllnessID), verb = "post", return_params_list = return_params, payload = payload_params)

def createTempStudentChildhoodIllness(EntityID = 1, setTempStudentChildhoodIllnessID = None, setAgeDiagnosed = None, setChildhoodIllnessCode = None, setChildhoodIllnessDescription = None, setCreatedTime = None, setIsVoid = None, setModifiedTime = None, setNewChildhoodIllnessCode = None, setNewChildhoodIllnessDescription = None, setNewChildhoodIllnessID = None, setSchoolYear = None, setScreeningDate = None, setStudentChildhoodIllnessID = None, setStudentName = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnTempStudentChildhoodIllnessID = False, returnAgeDiagnosed = False, returnChildhoodIllnessCode = False, returnChildhoodIllnessDescription = False, returnCreatedTime = False, returnIsVoid = False, returnModifiedTime = False, returnNewChildhoodIllnessCode = False, returnNewChildhoodIllnessDescription = False, returnNewChildhoodIllnessID = False, returnSchoolYear = False, returnScreeningDate = False, returnStudentChildhoodIllnessID = False, returnStudentName = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/TempStudentChildhoodIllness/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteTempStudentChildhoodIllness(TempStudentChildhoodIllnessID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/TempStudentChildhoodIllness/" + str(TempStudentChildhoodIllnessID), verb = "delete")


def getEveryTempStudentVaccine(searchConditions = [], EntityID = 1, returnTempStudentVaccineID = False, returnCreatedTime = False, returnCVXCode = False, returnDate = False, returnIsDuplicate = False, returnModifiedTime = False, returnNewCVXCode = False, returnNewVaccineCode = False, returnNewVaccineID = False, returnStudentName = False, returnStudentVaccineID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnVaccineCode = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every TempStudentVaccine in the district.

    This function returns a dataframe of every TempStudentVaccine in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/TempStudentVaccine/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/TempStudentVaccine/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getTempStudentVaccine(TempStudentVaccineID, EntityID = 1, returnTempStudentVaccineID = False, returnCreatedTime = False, returnCVXCode = False, returnDate = False, returnIsDuplicate = False, returnModifiedTime = False, returnNewCVXCode = False, returnNewVaccineCode = False, returnNewVaccineID = False, returnStudentName = False, returnStudentVaccineID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnVaccineCode = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/TempStudentVaccine/" + str(TempStudentVaccineID), verb = "get", return_params_list = return_params)

def modifyTempStudentVaccine(TempStudentVaccineID, EntityID = 1, setTempStudentVaccineID = None, setCreatedTime = None, setCVXCode = None, setDate = None, setIsDuplicate = None, setModifiedTime = None, setNewCVXCode = None, setNewVaccineCode = None, setNewVaccineID = None, setStudentName = None, setStudentVaccineID = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, setVaccineCode = None, returnTempStudentVaccineID = False, returnCreatedTime = False, returnCVXCode = False, returnDate = False, returnIsDuplicate = False, returnModifiedTime = False, returnNewCVXCode = False, returnNewVaccineCode = False, returnNewVaccineID = False, returnStudentName = False, returnStudentVaccineID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnVaccineCode = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/TempStudentVaccine/" + str(TempStudentVaccineID), verb = "post", return_params_list = return_params, payload = payload_params)

def createTempStudentVaccine(EntityID = 1, setTempStudentVaccineID = None, setCreatedTime = None, setCVXCode = None, setDate = None, setIsDuplicate = None, setModifiedTime = None, setNewCVXCode = None, setNewVaccineCode = None, setNewVaccineID = None, setStudentName = None, setStudentVaccineID = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, setVaccineCode = None, returnTempStudentVaccineID = False, returnCreatedTime = False, returnCVXCode = False, returnDate = False, returnIsDuplicate = False, returnModifiedTime = False, returnNewCVXCode = False, returnNewVaccineCode = False, returnNewVaccineID = False, returnStudentName = False, returnStudentVaccineID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnVaccineCode = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/TempStudentVaccine/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteTempStudentVaccine(TempStudentVaccineID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/TempStudentVaccine/" + str(TempStudentVaccineID), verb = "delete")


def getEveryTreatment(searchConditions = [], EntityID = 1, returnTreatmentID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every Treatment in the district.

    This function returns a dataframe of every Treatment in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/Treatment/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/Treatment/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getTreatment(TreatmentID, EntityID = 1, returnTreatmentID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/Treatment/" + str(TreatmentID), verb = "get", return_params_list = return_params)

def modifyTreatment(TreatmentID, EntityID = 1, setTreatmentID = None, setCode = None, setCodeDescription = None, setCreatedTime = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setModifiedTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnTreatmentID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/Treatment/" + str(TreatmentID), verb = "post", return_params_list = return_params, payload = payload_params)

def createTreatment(EntityID = 1, setTreatmentID = None, setCode = None, setCodeDescription = None, setCreatedTime = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setModifiedTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnTreatmentID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/Treatment/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteTreatment(TreatmentID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/Treatment/" + str(TreatmentID), verb = "delete")


def getEveryVaccination(searchConditions = [], EntityID = 1, returnVaccinationID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDisplayOrder = False, returnIsDistrictDefined = False, returnModifiedTime = False, returnSkywardHash = False, returnSkywardID = False, returnUsedByDistrict = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnVaccinationWaiverCountsForCompliance = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every Vaccination in the district.

    This function returns a dataframe of every Vaccination in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/Vaccination/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/Vaccination/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getVaccination(VaccinationID, EntityID = 1, returnVaccinationID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDisplayOrder = False, returnIsDistrictDefined = False, returnModifiedTime = False, returnSkywardHash = False, returnSkywardID = False, returnUsedByDistrict = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnVaccinationWaiverCountsForCompliance = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/Vaccination/" + str(VaccinationID), verb = "get", return_params_list = return_params)

def modifyVaccination(VaccinationID, EntityID = 1, setVaccinationID = None, setCode = None, setCodeDescription = None, setCreatedTime = None, setDescription = None, setDisplayOrder = None, setIsDistrictDefined = None, setModifiedTime = None, setSkywardHash = None, setSkywardID = None, setUsedByDistrict = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, setVaccinationWaiverCountsForCompliance = None, returnVaccinationID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDisplayOrder = False, returnIsDistrictDefined = False, returnModifiedTime = False, returnSkywardHash = False, returnSkywardID = False, returnUsedByDistrict = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnVaccinationWaiverCountsForCompliance = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/Vaccination/" + str(VaccinationID), verb = "post", return_params_list = return_params, payload = payload_params)

def createVaccination(EntityID = 1, setVaccinationID = None, setCode = None, setCodeDescription = None, setCreatedTime = None, setDescription = None, setDisplayOrder = None, setIsDistrictDefined = None, setModifiedTime = None, setSkywardHash = None, setSkywardID = None, setUsedByDistrict = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, setVaccinationWaiverCountsForCompliance = None, returnVaccinationID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDisplayOrder = False, returnIsDistrictDefined = False, returnModifiedTime = False, returnSkywardHash = False, returnSkywardID = False, returnUsedByDistrict = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnVaccinationWaiverCountsForCompliance = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/Vaccination/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteVaccination(VaccinationID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/Vaccination/" + str(VaccinationID), verb = "delete")


def getEveryVaccinationChildhoodIllness(searchConditions = [], EntityID = 1, returnVaccinationChildhoodIllnessID = False, returnChildhoodIllnessID = False, returnCreatedTime = False, returnModifiedTime = False, returnSkywardHash = False, returnSkywardID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnVaccinationID = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every VaccinationChildhoodIllness in the district.

    This function returns a dataframe of every VaccinationChildhoodIllness in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/VaccinationChildhoodIllness/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/VaccinationChildhoodIllness/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getVaccinationChildhoodIllness(VaccinationChildhoodIllnessID, EntityID = 1, returnVaccinationChildhoodIllnessID = False, returnChildhoodIllnessID = False, returnCreatedTime = False, returnModifiedTime = False, returnSkywardHash = False, returnSkywardID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnVaccinationID = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/VaccinationChildhoodIllness/" + str(VaccinationChildhoodIllnessID), verb = "get", return_params_list = return_params)

def modifyVaccinationChildhoodIllness(VaccinationChildhoodIllnessID, EntityID = 1, setVaccinationChildhoodIllnessID = None, setChildhoodIllnessID = None, setCreatedTime = None, setModifiedTime = None, setSkywardHash = None, setSkywardID = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, setVaccinationID = None, returnVaccinationChildhoodIllnessID = False, returnChildhoodIllnessID = False, returnCreatedTime = False, returnModifiedTime = False, returnSkywardHash = False, returnSkywardID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnVaccinationID = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/VaccinationChildhoodIllness/" + str(VaccinationChildhoodIllnessID), verb = "post", return_params_list = return_params, payload = payload_params)

def createVaccinationChildhoodIllness(EntityID = 1, setVaccinationChildhoodIllnessID = None, setChildhoodIllnessID = None, setCreatedTime = None, setModifiedTime = None, setSkywardHash = None, setSkywardID = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, setVaccinationID = None, returnVaccinationChildhoodIllnessID = False, returnChildhoodIllnessID = False, returnCreatedTime = False, returnModifiedTime = False, returnSkywardHash = False, returnSkywardID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnVaccinationID = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/VaccinationChildhoodIllness/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteVaccinationChildhoodIllness(VaccinationChildhoodIllnessID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/VaccinationChildhoodIllness/" + str(VaccinationChildhoodIllnessID), verb = "delete")


def getEveryVaccinationWaiver(searchConditions = [], EntityID = 1, returnVaccinationWaiverID = False, returnCountsForCompliance = False, returnCreatedTime = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnVaccinationID = False, returnWaiverID = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every VaccinationWaiver in the district.

    This function returns a dataframe of every VaccinationWaiver in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/VaccinationWaiver/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/VaccinationWaiver/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getVaccinationWaiver(VaccinationWaiverID, EntityID = 1, returnVaccinationWaiverID = False, returnCountsForCompliance = False, returnCreatedTime = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnVaccinationID = False, returnWaiverID = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/VaccinationWaiver/" + str(VaccinationWaiverID), verb = "get", return_params_list = return_params)

def modifyVaccinationWaiver(VaccinationWaiverID, EntityID = 1, setVaccinationWaiverID = None, setCountsForCompliance = None, setCreatedTime = None, setModifiedTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, setVaccinationID = None, setWaiverID = None, returnVaccinationWaiverID = False, returnCountsForCompliance = False, returnCreatedTime = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnVaccinationID = False, returnWaiverID = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/VaccinationWaiver/" + str(VaccinationWaiverID), verb = "post", return_params_list = return_params, payload = payload_params)

def createVaccinationWaiver(EntityID = 1, setVaccinationWaiverID = None, setCountsForCompliance = None, setCreatedTime = None, setModifiedTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, setVaccinationID = None, setWaiverID = None, returnVaccinationWaiverID = False, returnCountsForCompliance = False, returnCreatedTime = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnVaccinationID = False, returnWaiverID = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/VaccinationWaiver/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteVaccinationWaiver(VaccinationWaiverID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/VaccinationWaiver/" + str(VaccinationWaiverID), verb = "delete")


def getEveryVaccinationYear(searchConditions = [], EntityID = 1, returnVaccinationYearID = False, returnCreatedTime = False, returnIsDistrictDefined = False, returnModifiedTime = False, returnProcessByType = False, returnProcessByTypeCode = False, returnRequiredAgeHigh = False, returnRequiredAgeHighDescription = False, returnRequiredAgeHighUnitType = False, returnRequiredAgeHighUnitTypeCode = False, returnRequiredAgeLow = False, returnRequiredAgeLowDescription = False, returnRequiredAgeLowUnitType = False, returnRequiredAgeLowUnitTypeCode = False, returnSchoolYearID = False, returnSkywardHash = False, returnSkywardID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnVaccinationID = False, returnVaccinationYearIDClonedFrom = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every VaccinationYear in the district.

    This function returns a dataframe of every VaccinationYear in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/VaccinationYear/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/VaccinationYear/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getVaccinationYear(VaccinationYearID, EntityID = 1, returnVaccinationYearID = False, returnCreatedTime = False, returnIsDistrictDefined = False, returnModifiedTime = False, returnProcessByType = False, returnProcessByTypeCode = False, returnRequiredAgeHigh = False, returnRequiredAgeHighDescription = False, returnRequiredAgeHighUnitType = False, returnRequiredAgeHighUnitTypeCode = False, returnRequiredAgeLow = False, returnRequiredAgeLowDescription = False, returnRequiredAgeLowUnitType = False, returnRequiredAgeLowUnitTypeCode = False, returnSchoolYearID = False, returnSkywardHash = False, returnSkywardID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnVaccinationID = False, returnVaccinationYearIDClonedFrom = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/VaccinationYear/" + str(VaccinationYearID), verb = "get", return_params_list = return_params)

def modifyVaccinationYear(VaccinationYearID, EntityID = 1, setVaccinationYearID = None, setCreatedTime = None, setIsDistrictDefined = None, setModifiedTime = None, setProcessByType = None, setProcessByTypeCode = None, setRequiredAgeHigh = None, setRequiredAgeHighDescription = None, setRequiredAgeHighUnitType = None, setRequiredAgeHighUnitTypeCode = None, setRequiredAgeLow = None, setRequiredAgeLowDescription = None, setRequiredAgeLowUnitType = None, setRequiredAgeLowUnitTypeCode = None, setSchoolYearID = None, setSkywardHash = None, setSkywardID = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, setVaccinationID = None, setVaccinationYearIDClonedFrom = None, returnVaccinationYearID = False, returnCreatedTime = False, returnIsDistrictDefined = False, returnModifiedTime = False, returnProcessByType = False, returnProcessByTypeCode = False, returnRequiredAgeHigh = False, returnRequiredAgeHighDescription = False, returnRequiredAgeHighUnitType = False, returnRequiredAgeHighUnitTypeCode = False, returnRequiredAgeLow = False, returnRequiredAgeLowDescription = False, returnRequiredAgeLowUnitType = False, returnRequiredAgeLowUnitTypeCode = False, returnSchoolYearID = False, returnSkywardHash = False, returnSkywardID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnVaccinationID = False, returnVaccinationYearIDClonedFrom = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/VaccinationYear/" + str(VaccinationYearID), verb = "post", return_params_list = return_params, payload = payload_params)

def createVaccinationYear(EntityID = 1, setVaccinationYearID = None, setCreatedTime = None, setIsDistrictDefined = None, setModifiedTime = None, setProcessByType = None, setProcessByTypeCode = None, setRequiredAgeHigh = None, setRequiredAgeHighDescription = None, setRequiredAgeHighUnitType = None, setRequiredAgeHighUnitTypeCode = None, setRequiredAgeLow = None, setRequiredAgeLowDescription = None, setRequiredAgeLowUnitType = None, setRequiredAgeLowUnitTypeCode = None, setSchoolYearID = None, setSkywardHash = None, setSkywardID = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, setVaccinationID = None, setVaccinationYearIDClonedFrom = None, returnVaccinationYearID = False, returnCreatedTime = False, returnIsDistrictDefined = False, returnModifiedTime = False, returnProcessByType = False, returnProcessByTypeCode = False, returnRequiredAgeHigh = False, returnRequiredAgeHighDescription = False, returnRequiredAgeHighUnitType = False, returnRequiredAgeHighUnitTypeCode = False, returnRequiredAgeLow = False, returnRequiredAgeLowDescription = False, returnRequiredAgeLowUnitType = False, returnRequiredAgeLowUnitTypeCode = False, returnSchoolYearID = False, returnSkywardHash = False, returnSkywardID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnVaccinationID = False, returnVaccinationYearIDClonedFrom = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/VaccinationYear/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteVaccinationYear(VaccinationYearID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/VaccinationYear/" + str(VaccinationYearID), verb = "delete")


def getEveryVaccinationYearComplianceSchedule(searchConditions = [], EntityID = 1, returnVaccinationYearComplianceScheduleID = False, returnComplianceScheduleID = False, returnCreatedTime = False, returnIsDistrictDefined = False, returnModifiedTime = False, returnRank = False, returnSkywardHash = False, returnSkywardID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnVaccinationYearComplianceScheduleIDClonedFrom = False, returnVaccinationYearID = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every VaccinationYearComplianceSchedule in the district.

    This function returns a dataframe of every VaccinationYearComplianceSchedule in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/VaccinationYearComplianceSchedule/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/VaccinationYearComplianceSchedule/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getVaccinationYearComplianceSchedule(VaccinationYearComplianceScheduleID, EntityID = 1, returnVaccinationYearComplianceScheduleID = False, returnComplianceScheduleID = False, returnCreatedTime = False, returnIsDistrictDefined = False, returnModifiedTime = False, returnRank = False, returnSkywardHash = False, returnSkywardID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnVaccinationYearComplianceScheduleIDClonedFrom = False, returnVaccinationYearID = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/VaccinationYearComplianceSchedule/" + str(VaccinationYearComplianceScheduleID), verb = "get", return_params_list = return_params)

def modifyVaccinationYearComplianceSchedule(VaccinationYearComplianceScheduleID, EntityID = 1, setVaccinationYearComplianceScheduleID = None, setComplianceScheduleID = None, setCreatedTime = None, setIsDistrictDefined = None, setModifiedTime = None, setRank = None, setSkywardHash = None, setSkywardID = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, setVaccinationYearComplianceScheduleIDClonedFrom = None, setVaccinationYearID = None, returnVaccinationYearComplianceScheduleID = False, returnComplianceScheduleID = False, returnCreatedTime = False, returnIsDistrictDefined = False, returnModifiedTime = False, returnRank = False, returnSkywardHash = False, returnSkywardID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnVaccinationYearComplianceScheduleIDClonedFrom = False, returnVaccinationYearID = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/VaccinationYearComplianceSchedule/" + str(VaccinationYearComplianceScheduleID), verb = "post", return_params_list = return_params, payload = payload_params)

def createVaccinationYearComplianceSchedule(EntityID = 1, setVaccinationYearComplianceScheduleID = None, setComplianceScheduleID = None, setCreatedTime = None, setIsDistrictDefined = None, setModifiedTime = None, setRank = None, setSkywardHash = None, setSkywardID = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, setVaccinationYearComplianceScheduleIDClonedFrom = None, setVaccinationYearID = None, returnVaccinationYearComplianceScheduleID = False, returnComplianceScheduleID = False, returnCreatedTime = False, returnIsDistrictDefined = False, returnModifiedTime = False, returnRank = False, returnSkywardHash = False, returnSkywardID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnVaccinationYearComplianceScheduleIDClonedFrom = False, returnVaccinationYearID = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/VaccinationYearComplianceSchedule/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteVaccinationYearComplianceSchedule(VaccinationYearComplianceScheduleID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/VaccinationYearComplianceSchedule/" + str(VaccinationYearComplianceScheduleID), verb = "delete")


def getEveryVaccinationYearComplianceScheduleRule(searchConditions = [], EntityID = 1, returnVaccinationYearComplianceScheduleRuleID = False, returnComplianceScheduleRuleID = False, returnCreatedTime = False, returnDoseIntervalID = False, returnModifiedTime = False, returnRuleType = False, returnRuleTypeCode = False, returnSkywardHash = False, returnSkywardID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnVaccinationYearComplianceScheduleID = False, returnVaccinationYearComplianceScheduleRuleIDClonedFrom = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every VaccinationYearComplianceScheduleRule in the district.

    This function returns a dataframe of every VaccinationYearComplianceScheduleRule in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/VaccinationYearComplianceScheduleRule/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/VaccinationYearComplianceScheduleRule/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getVaccinationYearComplianceScheduleRule(VaccinationYearComplianceScheduleRuleID, EntityID = 1, returnVaccinationYearComplianceScheduleRuleID = False, returnComplianceScheduleRuleID = False, returnCreatedTime = False, returnDoseIntervalID = False, returnModifiedTime = False, returnRuleType = False, returnRuleTypeCode = False, returnSkywardHash = False, returnSkywardID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnVaccinationYearComplianceScheduleID = False, returnVaccinationYearComplianceScheduleRuleIDClonedFrom = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/VaccinationYearComplianceScheduleRule/" + str(VaccinationYearComplianceScheduleRuleID), verb = "get", return_params_list = return_params)

def modifyVaccinationYearComplianceScheduleRule(VaccinationYearComplianceScheduleRuleID, EntityID = 1, setVaccinationYearComplianceScheduleRuleID = None, setComplianceScheduleRuleID = None, setCreatedTime = None, setDoseIntervalID = None, setModifiedTime = None, setRuleType = None, setRuleTypeCode = None, setSkywardHash = None, setSkywardID = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, setVaccinationYearComplianceScheduleID = None, setVaccinationYearComplianceScheduleRuleIDClonedFrom = None, returnVaccinationYearComplianceScheduleRuleID = False, returnComplianceScheduleRuleID = False, returnCreatedTime = False, returnDoseIntervalID = False, returnModifiedTime = False, returnRuleType = False, returnRuleTypeCode = False, returnSkywardHash = False, returnSkywardID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnVaccinationYearComplianceScheduleID = False, returnVaccinationYearComplianceScheduleRuleIDClonedFrom = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/VaccinationYearComplianceScheduleRule/" + str(VaccinationYearComplianceScheduleRuleID), verb = "post", return_params_list = return_params, payload = payload_params)

def createVaccinationYearComplianceScheduleRule(EntityID = 1, setVaccinationYearComplianceScheduleRuleID = None, setComplianceScheduleRuleID = None, setCreatedTime = None, setDoseIntervalID = None, setModifiedTime = None, setRuleType = None, setRuleTypeCode = None, setSkywardHash = None, setSkywardID = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, setVaccinationYearComplianceScheduleID = None, setVaccinationYearComplianceScheduleRuleIDClonedFrom = None, returnVaccinationYearComplianceScheduleRuleID = False, returnComplianceScheduleRuleID = False, returnCreatedTime = False, returnDoseIntervalID = False, returnModifiedTime = False, returnRuleType = False, returnRuleTypeCode = False, returnSkywardHash = False, returnSkywardID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnVaccinationYearComplianceScheduleID = False, returnVaccinationYearComplianceScheduleRuleIDClonedFrom = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/VaccinationYearComplianceScheduleRule/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteVaccinationYearComplianceScheduleRule(VaccinationYearComplianceScheduleRuleID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/VaccinationYearComplianceScheduleRule/" + str(VaccinationYearComplianceScheduleRuleID), verb = "delete")


def getEveryVaccine(searchConditions = [], EntityID = 1, returnVaccineID = False, returnCode = False, returnCPTCode = False, returnCPTCodeDescription = False, returnCPTDescription = False, returnCreatedTime = False, returnCVXCode = False, returnCVXFullName = False, returnCVXName = False, returnDescription = False, returnDisplayCode = False, returnDisplayDescription = False, returnDisplayOrder = False, returnIsLiveVaccine = False, returnModifiedTime = False, returnSkywardHash = False, returnSkywardID = False, returnUsedByDistrict = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every Vaccine in the district.

    This function returns a dataframe of every Vaccine in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/Vaccine/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/Vaccine/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getVaccine(VaccineID, EntityID = 1, returnVaccineID = False, returnCode = False, returnCPTCode = False, returnCPTCodeDescription = False, returnCPTDescription = False, returnCreatedTime = False, returnCVXCode = False, returnCVXFullName = False, returnCVXName = False, returnDescription = False, returnDisplayCode = False, returnDisplayDescription = False, returnDisplayOrder = False, returnIsLiveVaccine = False, returnModifiedTime = False, returnSkywardHash = False, returnSkywardID = False, returnUsedByDistrict = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/Vaccine/" + str(VaccineID), verb = "get", return_params_list = return_params)

def modifyVaccine(VaccineID, EntityID = 1, setVaccineID = None, setCode = None, setCPTCode = None, setCPTCodeDescription = None, setCPTDescription = None, setCreatedTime = None, setCVXCode = None, setCVXFullName = None, setCVXName = None, setDescription = None, setDisplayCode = None, setDisplayDescription = None, setDisplayOrder = None, setIsLiveVaccine = None, setModifiedTime = None, setSkywardHash = None, setSkywardID = None, setUsedByDistrict = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnVaccineID = False, returnCode = False, returnCPTCode = False, returnCPTCodeDescription = False, returnCPTDescription = False, returnCreatedTime = False, returnCVXCode = False, returnCVXFullName = False, returnCVXName = False, returnDescription = False, returnDisplayCode = False, returnDisplayDescription = False, returnDisplayOrder = False, returnIsLiveVaccine = False, returnModifiedTime = False, returnSkywardHash = False, returnSkywardID = False, returnUsedByDistrict = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/Vaccine/" + str(VaccineID), verb = "post", return_params_list = return_params, payload = payload_params)

def createVaccine(EntityID = 1, setVaccineID = None, setCode = None, setCPTCode = None, setCPTCodeDescription = None, setCPTDescription = None, setCreatedTime = None, setCVXCode = None, setCVXFullName = None, setCVXName = None, setDescription = None, setDisplayCode = None, setDisplayDescription = None, setDisplayOrder = None, setIsLiveVaccine = None, setModifiedTime = None, setSkywardHash = None, setSkywardID = None, setUsedByDistrict = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnVaccineID = False, returnCode = False, returnCPTCode = False, returnCPTCodeDescription = False, returnCPTDescription = False, returnCreatedTime = False, returnCVXCode = False, returnCVXFullName = False, returnCVXName = False, returnDescription = False, returnDisplayCode = False, returnDisplayDescription = False, returnDisplayOrder = False, returnIsLiveVaccine = False, returnModifiedTime = False, returnSkywardHash = False, returnSkywardID = False, returnUsedByDistrict = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/Vaccine/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteVaccine(VaccineID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/Vaccine/" + str(VaccineID), verb = "delete")


def getEveryVaccineContent(searchConditions = [], EntityID = 1, returnVaccineContentID = False, returnCreatedTime = False, returnHighDate = False, returnIsDistrictDefined = False, returnLowDate = False, returnModifiedTime = False, returnSkywardHash = False, returnSkywardID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnVaccinationID = False, returnVaccineID = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every VaccineContent in the district.

    This function returns a dataframe of every VaccineContent in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/VaccineContent/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/VaccineContent/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getVaccineContent(VaccineContentID, EntityID = 1, returnVaccineContentID = False, returnCreatedTime = False, returnHighDate = False, returnIsDistrictDefined = False, returnLowDate = False, returnModifiedTime = False, returnSkywardHash = False, returnSkywardID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnVaccinationID = False, returnVaccineID = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/VaccineContent/" + str(VaccineContentID), verb = "get", return_params_list = return_params)

def modifyVaccineContent(VaccineContentID, EntityID = 1, setVaccineContentID = None, setCreatedTime = None, setHighDate = None, setIsDistrictDefined = None, setLowDate = None, setModifiedTime = None, setSkywardHash = None, setSkywardID = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, setVaccinationID = None, setVaccineID = None, returnVaccineContentID = False, returnCreatedTime = False, returnHighDate = False, returnIsDistrictDefined = False, returnLowDate = False, returnModifiedTime = False, returnSkywardHash = False, returnSkywardID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnVaccinationID = False, returnVaccineID = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/VaccineContent/" + str(VaccineContentID), verb = "post", return_params_list = return_params, payload = payload_params)

def createVaccineContent(EntityID = 1, setVaccineContentID = None, setCreatedTime = None, setHighDate = None, setIsDistrictDefined = None, setLowDate = None, setModifiedTime = None, setSkywardHash = None, setSkywardID = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, setVaccinationID = None, setVaccineID = None, returnVaccineContentID = False, returnCreatedTime = False, returnHighDate = False, returnIsDistrictDefined = False, returnLowDate = False, returnModifiedTime = False, returnSkywardHash = False, returnSkywardID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnVaccinationID = False, returnVaccineID = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/VaccineContent/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteVaccineContent(VaccineContentID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/VaccineContent/" + str(VaccineContentID), verb = "delete")


def getEveryVisionComment(searchConditions = [], EntityID = 1, returnVisionCommentID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every VisionComment in the district.

    This function returns a dataframe of every VisionComment in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/VisionComment/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/VisionComment/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getVisionComment(VisionCommentID, EntityID = 1, returnVisionCommentID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/VisionComment/" + str(VisionCommentID), verb = "get", return_params_list = return_params)

def modifyVisionComment(VisionCommentID, EntityID = 1, setVisionCommentID = None, setCode = None, setCodeDescription = None, setCreatedTime = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setModifiedTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnVisionCommentID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/VisionComment/" + str(VisionCommentID), verb = "post", return_params_list = return_params, payload = payload_params)

def createVisionComment(EntityID = 1, setVisionCommentID = None, setCode = None, setCodeDescription = None, setCreatedTime = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setModifiedTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnVisionCommentID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/VisionComment/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteVisionComment(VisionCommentID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/VisionComment/" + str(VisionCommentID), verb = "delete")


def getEveryVisionCorrectiveLens(searchConditions = [], EntityID = 1, returnVisionCorrectiveLensID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every VisionCorrectiveLens in the district.

    This function returns a dataframe of every VisionCorrectiveLens in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/VisionCorrectiveLens/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/VisionCorrectiveLens/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getVisionCorrectiveLens(VisionCorrectiveLensID, EntityID = 1, returnVisionCorrectiveLensID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/VisionCorrectiveLens/" + str(VisionCorrectiveLensID), verb = "get", return_params_list = return_params)

def modifyVisionCorrectiveLens(VisionCorrectiveLensID, EntityID = 1, setVisionCorrectiveLensID = None, setCode = None, setCodeDescription = None, setCreatedTime = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setModifiedTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnVisionCorrectiveLensID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/VisionCorrectiveLens/" + str(VisionCorrectiveLensID), verb = "post", return_params_list = return_params, payload = payload_params)

def createVisionCorrectiveLens(EntityID = 1, setVisionCorrectiveLensID = None, setCode = None, setCodeDescription = None, setCreatedTime = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setModifiedTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnVisionCorrectiveLensID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/VisionCorrectiveLens/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteVisionCorrectiveLens(VisionCorrectiveLensID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/VisionCorrectiveLens/" + str(VisionCorrectiveLensID), verb = "delete")


def getEveryVisionGuardianNotification(searchConditions = [], EntityID = 1, returnVisionGuardianNotificationID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every VisionGuardianNotification in the district.

    This function returns a dataframe of every VisionGuardianNotification in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/VisionGuardianNotification/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/VisionGuardianNotification/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getVisionGuardianNotification(VisionGuardianNotificationID, EntityID = 1, returnVisionGuardianNotificationID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/VisionGuardianNotification/" + str(VisionGuardianNotificationID), verb = "get", return_params_list = return_params)

def modifyVisionGuardianNotification(VisionGuardianNotificationID, EntityID = 1, setVisionGuardianNotificationID = None, setCode = None, setCodeDescription = None, setCreatedTime = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setModifiedTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnVisionGuardianNotificationID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/VisionGuardianNotification/" + str(VisionGuardianNotificationID), verb = "post", return_params_list = return_params, payload = payload_params)

def createVisionGuardianNotification(EntityID = 1, setVisionGuardianNotificationID = None, setCode = None, setCodeDescription = None, setCreatedTime = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setModifiedTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnVisionGuardianNotificationID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/VisionGuardianNotification/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteVisionGuardianNotification(VisionGuardianNotificationID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/VisionGuardianNotification/" + str(VisionGuardianNotificationID), verb = "delete")


def getEveryVisionGuardianResponse(searchConditions = [], EntityID = 1, returnVisionGuardianResponseID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every VisionGuardianResponse in the district.

    This function returns a dataframe of every VisionGuardianResponse in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/VisionGuardianResponse/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/VisionGuardianResponse/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getVisionGuardianResponse(VisionGuardianResponseID, EntityID = 1, returnVisionGuardianResponseID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/VisionGuardianResponse/" + str(VisionGuardianResponseID), verb = "get", return_params_list = return_params)

def modifyVisionGuardianResponse(VisionGuardianResponseID, EntityID = 1, setVisionGuardianResponseID = None, setCode = None, setCodeDescription = None, setCreatedTime = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setModifiedTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnVisionGuardianResponseID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/VisionGuardianResponse/" + str(VisionGuardianResponseID), verb = "post", return_params_list = return_params, payload = payload_params)

def createVisionGuardianResponse(EntityID = 1, setVisionGuardianResponseID = None, setCode = None, setCodeDescription = None, setCreatedTime = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setModifiedTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnVisionGuardianResponseID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/VisionGuardianResponse/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteVisionGuardianResponse(VisionGuardianResponseID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/VisionGuardianResponse/" + str(VisionGuardianResponseID), verb = "delete")


def getEveryVisionObservation(searchConditions = [], EntityID = 1, returnVisionObservationID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every VisionObservation in the district.

    This function returns a dataframe of every VisionObservation in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/VisionObservation/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/VisionObservation/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getVisionObservation(VisionObservationID, EntityID = 1, returnVisionObservationID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/VisionObservation/" + str(VisionObservationID), verb = "get", return_params_list = return_params)

def modifyVisionObservation(VisionObservationID, EntityID = 1, setVisionObservationID = None, setCode = None, setCodeDescription = None, setCreatedTime = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setModifiedTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnVisionObservationID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/VisionObservation/" + str(VisionObservationID), verb = "post", return_params_list = return_params, payload = payload_params)

def createVisionObservation(EntityID = 1, setVisionObservationID = None, setCode = None, setCodeDescription = None, setCreatedTime = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setModifiedTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnVisionObservationID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/VisionObservation/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteVisionObservation(VisionObservationID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/VisionObservation/" + str(VisionObservationID), verb = "delete")


def getEveryVisionReferralReason(searchConditions = [], EntityID = 1, returnVisionReferralReasonID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every VisionReferralReason in the district.

    This function returns a dataframe of every VisionReferralReason in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/VisionReferralReason/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/VisionReferralReason/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getVisionReferralReason(VisionReferralReasonID, EntityID = 1, returnVisionReferralReasonID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/VisionReferralReason/" + str(VisionReferralReasonID), verb = "get", return_params_list = return_params)

def modifyVisionReferralReason(VisionReferralReasonID, EntityID = 1, setVisionReferralReasonID = None, setCode = None, setCodeDescription = None, setCreatedTime = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setModifiedTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnVisionReferralReasonID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/VisionReferralReason/" + str(VisionReferralReasonID), verb = "post", return_params_list = return_params, payload = payload_params)

def createVisionReferralReason(EntityID = 1, setVisionReferralReasonID = None, setCode = None, setCodeDescription = None, setCreatedTime = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setModifiedTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnVisionReferralReasonID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/VisionReferralReason/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteVisionReferralReason(VisionReferralReasonID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/VisionReferralReason/" + str(VisionReferralReasonID), verb = "delete")


def getEveryVisionReferralResult(searchConditions = [], EntityID = 1, returnVisionReferralResultID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every VisionReferralResult in the district.

    This function returns a dataframe of every VisionReferralResult in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/VisionReferralResult/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/VisionReferralResult/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getVisionReferralResult(VisionReferralResultID, EntityID = 1, returnVisionReferralResultID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/VisionReferralResult/" + str(VisionReferralResultID), verb = "get", return_params_list = return_params)

def modifyVisionReferralResult(VisionReferralResultID, EntityID = 1, setVisionReferralResultID = None, setCode = None, setCodeDescription = None, setCreatedTime = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setModifiedTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnVisionReferralResultID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/VisionReferralResult/" + str(VisionReferralResultID), verb = "post", return_params_list = return_params, payload = payload_params)

def createVisionReferralResult(EntityID = 1, setVisionReferralResultID = None, setCode = None, setCodeDescription = None, setCreatedTime = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setModifiedTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnVisionReferralResultID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/VisionReferralResult/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteVisionReferralResult(VisionReferralResultID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/VisionReferralResult/" + str(VisionReferralResultID), verb = "delete")


def getEveryVisionScreening(searchConditions = [], EntityID = 1, returnVisionScreeningID = False, returnColorBlindnessTestResult = False, returnColorBlindnessTestResultCode = False, returnCreatedTime = False, returnDistrictID = False, returnEntityIDEnrolledIn = False, returnFarVisionCorrectedLeftEye = False, returnFarVisionCorrectedRightEye = False, returnFarVisionScreeningDistance = False, returnFarVisionScreeningResult = False, returnFarVisionScreeningResultCode = False, returnFarVisionUncorrectedLeftEye = False, returnFarVisionUncorrectedRightEye = False, returnFittingDate = False, returnHealthProfessionalIDExaminedBy = False, returnIsVoid = False, returnModifiedTime = False, returnMuscleBalanceTestResult = False, returnMuscleBalanceTestResultCode = False, returnNameID = False, returnNameOfficeVisitID = False, returnNearVisionCorrectedLeftEye = False, returnNearVisionCorrectedRightEye = False, returnNearVisionScreeningDistance = False, returnNearVisionScreeningResult = False, returnNearVisionScreeningResultCode = False, returnNearVisionUncorrectedLeftEye = False, returnNearVisionUncorrectedRightEye = False, returnOverallScreeningResult = False, returnOverallScreeningResultCode = False, returnReScreen = False, returnSchoolYearID = False, returnScreeningDate = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnUserIDVoidedBy = False, returnVisionCorrectedPriorToExam = False, returnVisionCorrectiveLensID = False, returnVoidedTime = False, returnVoidNote = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every VisionScreening in the district.

    This function returns a dataframe of every VisionScreening in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/VisionScreening/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/VisionScreening/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getVisionScreening(VisionScreeningID, EntityID = 1, returnVisionScreeningID = False, returnColorBlindnessTestResult = False, returnColorBlindnessTestResultCode = False, returnCreatedTime = False, returnDistrictID = False, returnEntityIDEnrolledIn = False, returnFarVisionCorrectedLeftEye = False, returnFarVisionCorrectedRightEye = False, returnFarVisionScreeningDistance = False, returnFarVisionScreeningResult = False, returnFarVisionScreeningResultCode = False, returnFarVisionUncorrectedLeftEye = False, returnFarVisionUncorrectedRightEye = False, returnFittingDate = False, returnHealthProfessionalIDExaminedBy = False, returnIsVoid = False, returnModifiedTime = False, returnMuscleBalanceTestResult = False, returnMuscleBalanceTestResultCode = False, returnNameID = False, returnNameOfficeVisitID = False, returnNearVisionCorrectedLeftEye = False, returnNearVisionCorrectedRightEye = False, returnNearVisionScreeningDistance = False, returnNearVisionScreeningResult = False, returnNearVisionScreeningResultCode = False, returnNearVisionUncorrectedLeftEye = False, returnNearVisionUncorrectedRightEye = False, returnOverallScreeningResult = False, returnOverallScreeningResultCode = False, returnReScreen = False, returnSchoolYearID = False, returnScreeningDate = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnUserIDVoidedBy = False, returnVisionCorrectedPriorToExam = False, returnVisionCorrectiveLensID = False, returnVoidedTime = False, returnVoidNote = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/VisionScreening/" + str(VisionScreeningID), verb = "get", return_params_list = return_params)

def modifyVisionScreening(VisionScreeningID, EntityID = 1, setVisionScreeningID = None, setColorBlindnessTestResult = None, setColorBlindnessTestResultCode = None, setCreatedTime = None, setDistrictID = None, setEntityIDEnrolledIn = None, setFarVisionCorrectedLeftEye = None, setFarVisionCorrectedRightEye = None, setFarVisionScreeningDistance = None, setFarVisionScreeningResult = None, setFarVisionScreeningResultCode = None, setFarVisionUncorrectedLeftEye = None, setFarVisionUncorrectedRightEye = None, setFittingDate = None, setHealthProfessionalIDExaminedBy = None, setIsVoid = None, setModifiedTime = None, setMuscleBalanceTestResult = None, setMuscleBalanceTestResultCode = None, setNameID = None, setNameOfficeVisitID = None, setNearVisionCorrectedLeftEye = None, setNearVisionCorrectedRightEye = None, setNearVisionScreeningDistance = None, setNearVisionScreeningResult = None, setNearVisionScreeningResultCode = None, setNearVisionUncorrectedLeftEye = None, setNearVisionUncorrectedRightEye = None, setOverallScreeningResult = None, setOverallScreeningResultCode = None, setReScreen = None, setSchoolYearID = None, setScreeningDate = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, setUserIDVoidedBy = None, setVisionCorrectedPriorToExam = None, setVisionCorrectiveLensID = None, setVoidedTime = None, setVoidNote = None, returnVisionScreeningID = False, returnColorBlindnessTestResult = False, returnColorBlindnessTestResultCode = False, returnCreatedTime = False, returnDistrictID = False, returnEntityIDEnrolledIn = False, returnFarVisionCorrectedLeftEye = False, returnFarVisionCorrectedRightEye = False, returnFarVisionScreeningDistance = False, returnFarVisionScreeningResult = False, returnFarVisionScreeningResultCode = False, returnFarVisionUncorrectedLeftEye = False, returnFarVisionUncorrectedRightEye = False, returnFittingDate = False, returnHealthProfessionalIDExaminedBy = False, returnIsVoid = False, returnModifiedTime = False, returnMuscleBalanceTestResult = False, returnMuscleBalanceTestResultCode = False, returnNameID = False, returnNameOfficeVisitID = False, returnNearVisionCorrectedLeftEye = False, returnNearVisionCorrectedRightEye = False, returnNearVisionScreeningDistance = False, returnNearVisionScreeningResult = False, returnNearVisionScreeningResultCode = False, returnNearVisionUncorrectedLeftEye = False, returnNearVisionUncorrectedRightEye = False, returnOverallScreeningResult = False, returnOverallScreeningResultCode = False, returnReScreen = False, returnSchoolYearID = False, returnScreeningDate = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnUserIDVoidedBy = False, returnVisionCorrectedPriorToExam = False, returnVisionCorrectiveLensID = False, returnVoidedTime = False, returnVoidNote = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/VisionScreening/" + str(VisionScreeningID), verb = "post", return_params_list = return_params, payload = payload_params)

def createVisionScreening(EntityID = 1, setVisionScreeningID = None, setColorBlindnessTestResult = None, setColorBlindnessTestResultCode = None, setCreatedTime = None, setDistrictID = None, setEntityIDEnrolledIn = None, setFarVisionCorrectedLeftEye = None, setFarVisionCorrectedRightEye = None, setFarVisionScreeningDistance = None, setFarVisionScreeningResult = None, setFarVisionScreeningResultCode = None, setFarVisionUncorrectedLeftEye = None, setFarVisionUncorrectedRightEye = None, setFittingDate = None, setHealthProfessionalIDExaminedBy = None, setIsVoid = None, setModifiedTime = None, setMuscleBalanceTestResult = None, setMuscleBalanceTestResultCode = None, setNameID = None, setNameOfficeVisitID = None, setNearVisionCorrectedLeftEye = None, setNearVisionCorrectedRightEye = None, setNearVisionScreeningDistance = None, setNearVisionScreeningResult = None, setNearVisionScreeningResultCode = None, setNearVisionUncorrectedLeftEye = None, setNearVisionUncorrectedRightEye = None, setOverallScreeningResult = None, setOverallScreeningResultCode = None, setReScreen = None, setSchoolYearID = None, setScreeningDate = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, setUserIDVoidedBy = None, setVisionCorrectedPriorToExam = None, setVisionCorrectiveLensID = None, setVoidedTime = None, setVoidNote = None, returnVisionScreeningID = False, returnColorBlindnessTestResult = False, returnColorBlindnessTestResultCode = False, returnCreatedTime = False, returnDistrictID = False, returnEntityIDEnrolledIn = False, returnFarVisionCorrectedLeftEye = False, returnFarVisionCorrectedRightEye = False, returnFarVisionScreeningDistance = False, returnFarVisionScreeningResult = False, returnFarVisionScreeningResultCode = False, returnFarVisionUncorrectedLeftEye = False, returnFarVisionUncorrectedRightEye = False, returnFittingDate = False, returnHealthProfessionalIDExaminedBy = False, returnIsVoid = False, returnModifiedTime = False, returnMuscleBalanceTestResult = False, returnMuscleBalanceTestResultCode = False, returnNameID = False, returnNameOfficeVisitID = False, returnNearVisionCorrectedLeftEye = False, returnNearVisionCorrectedRightEye = False, returnNearVisionScreeningDistance = False, returnNearVisionScreeningResult = False, returnNearVisionScreeningResultCode = False, returnNearVisionUncorrectedLeftEye = False, returnNearVisionUncorrectedRightEye = False, returnOverallScreeningResult = False, returnOverallScreeningResultCode = False, returnReScreen = False, returnSchoolYearID = False, returnScreeningDate = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnUserIDVoidedBy = False, returnVisionCorrectedPriorToExam = False, returnVisionCorrectiveLensID = False, returnVoidedTime = False, returnVoidNote = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/VisionScreening/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteVisionScreening(VisionScreeningID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/VisionScreening/" + str(VisionScreeningID), verb = "delete")


def getEveryVisionScreeningComment(searchConditions = [], EntityID = 1, returnVisionScreeningCommentID = False, returnCreatedTime = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnVisionCommentID = False, returnVisionScreeningID = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every VisionScreeningComment in the district.

    This function returns a dataframe of every VisionScreeningComment in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/VisionScreeningComment/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/VisionScreeningComment/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getVisionScreeningComment(VisionScreeningCommentID, EntityID = 1, returnVisionScreeningCommentID = False, returnCreatedTime = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnVisionCommentID = False, returnVisionScreeningID = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/VisionScreeningComment/" + str(VisionScreeningCommentID), verb = "get", return_params_list = return_params)

def modifyVisionScreeningComment(VisionScreeningCommentID, EntityID = 1, setVisionScreeningCommentID = None, setCreatedTime = None, setModifiedTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, setVisionCommentID = None, setVisionScreeningID = None, returnVisionScreeningCommentID = False, returnCreatedTime = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnVisionCommentID = False, returnVisionScreeningID = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/VisionScreeningComment/" + str(VisionScreeningCommentID), verb = "post", return_params_list = return_params, payload = payload_params)

def createVisionScreeningComment(EntityID = 1, setVisionScreeningCommentID = None, setCreatedTime = None, setModifiedTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, setVisionCommentID = None, setVisionScreeningID = None, returnVisionScreeningCommentID = False, returnCreatedTime = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnVisionCommentID = False, returnVisionScreeningID = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/VisionScreeningComment/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteVisionScreeningComment(VisionScreeningCommentID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/VisionScreeningComment/" + str(VisionScreeningCommentID), verb = "delete")


def getEveryVisionScreeningNote(searchConditions = [], EntityID = 1, returnVisionScreeningNoteID = False, returnCreatedTime = False, returnModifiedTime = False, returnNote = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnVisionScreeningID = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every VisionScreeningNote in the district.

    This function returns a dataframe of every VisionScreeningNote in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/VisionScreeningNote/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/VisionScreeningNote/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getVisionScreeningNote(VisionScreeningNoteID, EntityID = 1, returnVisionScreeningNoteID = False, returnCreatedTime = False, returnModifiedTime = False, returnNote = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnVisionScreeningID = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/VisionScreeningNote/" + str(VisionScreeningNoteID), verb = "get", return_params_list = return_params)

def modifyVisionScreeningNote(VisionScreeningNoteID, EntityID = 1, setVisionScreeningNoteID = None, setCreatedTime = None, setModifiedTime = None, setNote = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, setVisionScreeningID = None, returnVisionScreeningNoteID = False, returnCreatedTime = False, returnModifiedTime = False, returnNote = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnVisionScreeningID = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/VisionScreeningNote/" + str(VisionScreeningNoteID), verb = "post", return_params_list = return_params, payload = payload_params)

def createVisionScreeningNote(EntityID = 1, setVisionScreeningNoteID = None, setCreatedTime = None, setModifiedTime = None, setNote = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, setVisionScreeningID = None, returnVisionScreeningNoteID = False, returnCreatedTime = False, returnModifiedTime = False, returnNote = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnVisionScreeningID = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/VisionScreeningNote/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteVisionScreeningNote(VisionScreeningNoteID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/VisionScreeningNote/" + str(VisionScreeningNoteID), verb = "delete")


def getEveryVisionScreeningObservation(searchConditions = [], EntityID = 1, returnVisionScreeningObservationID = False, returnCreatedTime = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnVisionObservationID = False, returnVisionScreeningID = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every VisionScreeningObservation in the district.

    This function returns a dataframe of every VisionScreeningObservation in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/VisionScreeningObservation/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/VisionScreeningObservation/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getVisionScreeningObservation(VisionScreeningObservationID, EntityID = 1, returnVisionScreeningObservationID = False, returnCreatedTime = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnVisionObservationID = False, returnVisionScreeningID = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/VisionScreeningObservation/" + str(VisionScreeningObservationID), verb = "get", return_params_list = return_params)

def modifyVisionScreeningObservation(VisionScreeningObservationID, EntityID = 1, setVisionScreeningObservationID = None, setCreatedTime = None, setModifiedTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, setVisionObservationID = None, setVisionScreeningID = None, returnVisionScreeningObservationID = False, returnCreatedTime = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnVisionObservationID = False, returnVisionScreeningID = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/VisionScreeningObservation/" + str(VisionScreeningObservationID), verb = "post", return_params_list = return_params, payload = payload_params)

def createVisionScreeningObservation(EntityID = 1, setVisionScreeningObservationID = None, setCreatedTime = None, setModifiedTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, setVisionObservationID = None, setVisionScreeningID = None, returnVisionScreeningObservationID = False, returnCreatedTime = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnVisionObservationID = False, returnVisionScreeningID = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/VisionScreeningObservation/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteVisionScreeningObservation(VisionScreeningObservationID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/VisionScreeningObservation/" + str(VisionScreeningObservationID), verb = "delete")


def getEveryVisionScreeningReferral(searchConditions = [], EntityID = 1, returnVisionScreeningReferralID = False, returnCompletionDate = False, returnCreatedTime = False, returnHealthProfessionalIDReferredBy = False, returnHealthProfessionalIDReferredTo = False, returnIsVoid = False, returnModifiedTime = False, returnReferralCompleted = False, returnReferralDate = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnUserIDVoidedBy = False, returnVisionGuardianNotificationID = False, returnVisionGuardianResponseID = False, returnVisionReferralReasonID = False, returnVisionReferralResultID = False, returnVisionScreeningID = False, returnVoidedTime = False, returnVoidNote = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every VisionScreeningReferral in the district.

    This function returns a dataframe of every VisionScreeningReferral in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/VisionScreeningReferral/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/VisionScreeningReferral/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getVisionScreeningReferral(VisionScreeningReferralID, EntityID = 1, returnVisionScreeningReferralID = False, returnCompletionDate = False, returnCreatedTime = False, returnHealthProfessionalIDReferredBy = False, returnHealthProfessionalIDReferredTo = False, returnIsVoid = False, returnModifiedTime = False, returnReferralCompleted = False, returnReferralDate = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnUserIDVoidedBy = False, returnVisionGuardianNotificationID = False, returnVisionGuardianResponseID = False, returnVisionReferralReasonID = False, returnVisionReferralResultID = False, returnVisionScreeningID = False, returnVoidedTime = False, returnVoidNote = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/VisionScreeningReferral/" + str(VisionScreeningReferralID), verb = "get", return_params_list = return_params)

def modifyVisionScreeningReferral(VisionScreeningReferralID, EntityID = 1, setVisionScreeningReferralID = None, setCompletionDate = None, setCreatedTime = None, setHealthProfessionalIDReferredBy = None, setHealthProfessionalIDReferredTo = None, setIsVoid = None, setModifiedTime = None, setReferralCompleted = None, setReferralDate = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, setUserIDVoidedBy = None, setVisionGuardianNotificationID = None, setVisionGuardianResponseID = None, setVisionReferralReasonID = None, setVisionReferralResultID = None, setVisionScreeningID = None, setVoidedTime = None, setVoidNote = None, returnVisionScreeningReferralID = False, returnCompletionDate = False, returnCreatedTime = False, returnHealthProfessionalIDReferredBy = False, returnHealthProfessionalIDReferredTo = False, returnIsVoid = False, returnModifiedTime = False, returnReferralCompleted = False, returnReferralDate = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnUserIDVoidedBy = False, returnVisionGuardianNotificationID = False, returnVisionGuardianResponseID = False, returnVisionReferralReasonID = False, returnVisionReferralResultID = False, returnVisionScreeningID = False, returnVoidedTime = False, returnVoidNote = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/VisionScreeningReferral/" + str(VisionScreeningReferralID), verb = "post", return_params_list = return_params, payload = payload_params)

def createVisionScreeningReferral(EntityID = 1, setVisionScreeningReferralID = None, setCompletionDate = None, setCreatedTime = None, setHealthProfessionalIDReferredBy = None, setHealthProfessionalIDReferredTo = None, setIsVoid = None, setModifiedTime = None, setReferralCompleted = None, setReferralDate = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, setUserIDVoidedBy = None, setVisionGuardianNotificationID = None, setVisionGuardianResponseID = None, setVisionReferralReasonID = None, setVisionReferralResultID = None, setVisionScreeningID = None, setVoidedTime = None, setVoidNote = None, returnVisionScreeningReferralID = False, returnCompletionDate = False, returnCreatedTime = False, returnHealthProfessionalIDReferredBy = False, returnHealthProfessionalIDReferredTo = False, returnIsVoid = False, returnModifiedTime = False, returnReferralCompleted = False, returnReferralDate = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnUserIDVoidedBy = False, returnVisionGuardianNotificationID = False, returnVisionGuardianResponseID = False, returnVisionReferralReasonID = False, returnVisionReferralResultID = False, returnVisionScreeningID = False, returnVoidedTime = False, returnVoidNote = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/VisionScreeningReferral/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteVisionScreeningReferral(VisionScreeningReferralID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/VisionScreeningReferral/" + str(VisionScreeningReferralID), verb = "delete")


def getEveryVisionScreeningSecuredNote(searchConditions = [], EntityID = 1, returnVisionScreeningSecuredNoteID = False, returnCreatedTime = False, returnModifiedTime = False, returnNote = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnVisionScreeningID = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every VisionScreeningSecuredNote in the district.

    This function returns a dataframe of every VisionScreeningSecuredNote in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/VisionScreeningSecuredNote/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/VisionScreeningSecuredNote/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getVisionScreeningSecuredNote(VisionScreeningSecuredNoteID, EntityID = 1, returnVisionScreeningSecuredNoteID = False, returnCreatedTime = False, returnModifiedTime = False, returnNote = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnVisionScreeningID = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/VisionScreeningSecuredNote/" + str(VisionScreeningSecuredNoteID), verb = "get", return_params_list = return_params)

def modifyVisionScreeningSecuredNote(VisionScreeningSecuredNoteID, EntityID = 1, setVisionScreeningSecuredNoteID = None, setCreatedTime = None, setModifiedTime = None, setNote = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, setVisionScreeningID = None, returnVisionScreeningSecuredNoteID = False, returnCreatedTime = False, returnModifiedTime = False, returnNote = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnVisionScreeningID = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/VisionScreeningSecuredNote/" + str(VisionScreeningSecuredNoteID), verb = "post", return_params_list = return_params, payload = payload_params)

def createVisionScreeningSecuredNote(EntityID = 1, setVisionScreeningSecuredNoteID = None, setCreatedTime = None, setModifiedTime = None, setNote = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, setVisionScreeningID = None, returnVisionScreeningSecuredNoteID = False, returnCreatedTime = False, returnModifiedTime = False, returnNote = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnVisionScreeningID = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/VisionScreeningSecuredNote/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteVisionScreeningSecuredNote(VisionScreeningSecuredNoteID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/VisionScreeningSecuredNote/" + str(VisionScreeningSecuredNoteID), verb = "delete")


def getEveryVitalSign(searchConditions = [], EntityID = 1, returnVitalSignID = False, returnBloodPressureDiastolic = False, returnBloodPressureSystolic = False, returnCreatedTime = False, returnModifiedTime = False, returnNameOfficeVisitID = False, returnPhysicalScreeningID = False, returnPulseRate = False, returnRespiration = False, returnSaturationOfPeripheralOxygen = False, returnTemperature = False, returnTimeTaken = False, returnTimeTakenDate = False, returnTimeTakenTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every VitalSign in the district.

    This function returns a dataframe of every VitalSign in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/VitalSign/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/VitalSign/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getVitalSign(VitalSignID, EntityID = 1, returnVitalSignID = False, returnBloodPressureDiastolic = False, returnBloodPressureSystolic = False, returnCreatedTime = False, returnModifiedTime = False, returnNameOfficeVisitID = False, returnPhysicalScreeningID = False, returnPulseRate = False, returnRespiration = False, returnSaturationOfPeripheralOxygen = False, returnTemperature = False, returnTimeTaken = False, returnTimeTakenDate = False, returnTimeTakenTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/VitalSign/" + str(VitalSignID), verb = "get", return_params_list = return_params)

def modifyVitalSign(VitalSignID, EntityID = 1, setVitalSignID = None, setBloodPressureDiastolic = None, setBloodPressureSystolic = None, setCreatedTime = None, setModifiedTime = None, setNameOfficeVisitID = None, setPhysicalScreeningID = None, setPulseRate = None, setRespiration = None, setSaturationOfPeripheralOxygen = None, setTemperature = None, setTimeTaken = None, setTimeTakenDate = None, setTimeTakenTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnVitalSignID = False, returnBloodPressureDiastolic = False, returnBloodPressureSystolic = False, returnCreatedTime = False, returnModifiedTime = False, returnNameOfficeVisitID = False, returnPhysicalScreeningID = False, returnPulseRate = False, returnRespiration = False, returnSaturationOfPeripheralOxygen = False, returnTemperature = False, returnTimeTaken = False, returnTimeTakenDate = False, returnTimeTakenTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/VitalSign/" + str(VitalSignID), verb = "post", return_params_list = return_params, payload = payload_params)

def createVitalSign(EntityID = 1, setVitalSignID = None, setBloodPressureDiastolic = None, setBloodPressureSystolic = None, setCreatedTime = None, setModifiedTime = None, setNameOfficeVisitID = None, setPhysicalScreeningID = None, setPulseRate = None, setRespiration = None, setSaturationOfPeripheralOxygen = None, setTemperature = None, setTimeTaken = None, setTimeTakenDate = None, setTimeTakenTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnVitalSignID = False, returnBloodPressureDiastolic = False, returnBloodPressureSystolic = False, returnCreatedTime = False, returnModifiedTime = False, returnNameOfficeVisitID = False, returnPhysicalScreeningID = False, returnPulseRate = False, returnRespiration = False, returnSaturationOfPeripheralOxygen = False, returnTemperature = False, returnTimeTaken = False, returnTimeTakenDate = False, returnTimeTakenTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/VitalSign/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteVitalSign(VitalSignID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/VitalSign/" + str(VitalSignID), verb = "delete")


def getEveryWaiver(searchConditions = [], EntityID = 1, returnWaiverID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnExpirationType = False, returnExpirationTypeCode = False, returnExpireUnit = False, returnExpireUnitCode = False, returnExpireValue = False, returnIsActive = False, returnModifiedTime = False, returnRestrictVaccinations = False, returnUseInStateReporting = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnWaiverType = False, returnWaiverTypeCode = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every Waiver in the district.

    This function returns a dataframe of every Waiver in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/Waiver/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/Waiver/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getWaiver(WaiverID, EntityID = 1, returnWaiverID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnExpirationType = False, returnExpirationTypeCode = False, returnExpireUnit = False, returnExpireUnitCode = False, returnExpireValue = False, returnIsActive = False, returnModifiedTime = False, returnRestrictVaccinations = False, returnUseInStateReporting = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnWaiverType = False, returnWaiverTypeCode = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/Waiver/" + str(WaiverID), verb = "get", return_params_list = return_params)

def modifyWaiver(WaiverID, EntityID = 1, setWaiverID = None, setCode = None, setCodeDescription = None, setCreatedTime = None, setDescription = None, setExpirationType = None, setExpirationTypeCode = None, setExpireUnit = None, setExpireUnitCode = None, setExpireValue = None, setIsActive = None, setModifiedTime = None, setRestrictVaccinations = None, setUseInStateReporting = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, setWaiverType = None, setWaiverTypeCode = None, returnWaiverID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnExpirationType = False, returnExpirationTypeCode = False, returnExpireUnit = False, returnExpireUnitCode = False, returnExpireValue = False, returnIsActive = False, returnModifiedTime = False, returnRestrictVaccinations = False, returnUseInStateReporting = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnWaiverType = False, returnWaiverTypeCode = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/Waiver/" + str(WaiverID), verb = "post", return_params_list = return_params, payload = payload_params)

def createWaiver(EntityID = 1, setWaiverID = None, setCode = None, setCodeDescription = None, setCreatedTime = None, setDescription = None, setExpirationType = None, setExpirationTypeCode = None, setExpireUnit = None, setExpireUnitCode = None, setExpireValue = None, setIsActive = None, setModifiedTime = None, setRestrictVaccinations = None, setUseInStateReporting = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, setWaiverType = None, setWaiverTypeCode = None, returnWaiverID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnExpirationType = False, returnExpirationTypeCode = False, returnExpireUnit = False, returnExpireUnitCode = False, returnExpireValue = False, returnIsActive = False, returnModifiedTime = False, returnRestrictVaccinations = False, returnUseInStateReporting = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnWaiverType = False, returnWaiverTypeCode = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/Waiver/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteWaiver(WaiverID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/Waiver/" + str(WaiverID), verb = "delete")