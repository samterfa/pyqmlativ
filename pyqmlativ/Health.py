# This module contains Health functions.

from .Utilities import make_request

import pandas as pd

import json

import re

def getEveryAdministerNameMedication(EntityID = 1, page = 1, pageSize = 100, returnAdministerNameMedicationID = True, returnAdministerDate = False, returnAdministerDateOnly = False, returnAdministrationTime = False, returnCreatedTime = False, returnDosesAdministered = False, returnIsVoid = False, returnLocationID = False, returnModifiedTime = False, returnNameMedicationID = False, returnNameMedicationScheduleID = False, returnNameOfficeVisitID = False, returnNote = False, returnNotPerformedReasonID = False, returnStaffIDAdministeredBy = False, returnTotalDosesToday = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnUserIDVoidedBy = False, returnVoidedTime = False, returnVoidNote = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[3,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/AdministerNameMedication/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params_list)

def getAdministerNameMedication(AdministerNameMedicationID, EntityID = 1, returnAdministerNameMedicationID = True, returnAdministerDate = False, returnAdministerDateOnly = False, returnAdministrationTime = False, returnCreatedTime = False, returnDosesAdministered = False, returnIsVoid = False, returnLocationID = False, returnModifiedTime = False, returnNameMedicationID = False, returnNameMedicationScheduleID = False, returnNameOfficeVisitID = False, returnNote = False, returnNotPerformedReasonID = False, returnStaffIDAdministeredBy = False, returnTotalDosesToday = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnUserIDVoidedBy = False, returnVoidedTime = False, returnVoidNote = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[2,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/AdministerNameMedication/" + str(AdministerNameMedicationID), verb = "get", return_params_list = return_params_list)

def modifyAdministerNameMedication(AdministerNameMedicationID, EntityID = 1, setAdministrationTime = None, setDosesAdministered = None, setIsVoid = None, setLocationID = None, setNameMedicationID = None, setNameMedicationScheduleID = None, setNameOfficeVisitID = None, setNote = None, setNotPerformedReasonID = None, setStaffIDAdministeredBy = None, setUserIDVoidedBy = None, setVoidedTime = None, setVoidNote = None, setRelationships = None, returnAdministerNameMedicationID = True, returnAdministerDate = False, returnAdministerDateOnly = False, returnAdministrationTime = False, returnCreatedTime = False, returnDosesAdministered = False, returnIsVoid = False, returnLocationID = False, returnModifiedTime = False, returnNameMedicationID = False, returnNameMedicationScheduleID = False, returnNameOfficeVisitID = False, returnNote = False, returnNotPerformedReasonID = False, returnStaffIDAdministeredBy = False, returnTotalDosesToday = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnUserIDVoidedBy = False, returnVoidedTime = False, returnVoidNote = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(), :]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/AdministerNameMedication/" + str(AdministerNameMedicationID), verb = "post", return_params_list = return_params_list, payload = payload_params)

def createAdministerNameMedication(EntityID = 1, setAdministrationTime = None, setDosesAdministered = None, setIsVoid = None, setLocationID = None, setNameMedicationID = None, setNameMedicationScheduleID = None, setNameOfficeVisitID = None, setNote = None, setNotPerformedReasonID = None, setStaffIDAdministeredBy = None, setUserIDVoidedBy = None, setVoidedTime = None, setVoidNote = None, setRelationships = None, returnAdministerNameMedicationID = True, returnAdministerDate = False, returnAdministerDateOnly = False, returnAdministrationTime = False, returnCreatedTime = False, returnDosesAdministered = False, returnIsVoid = False, returnLocationID = False, returnModifiedTime = False, returnNameMedicationID = False, returnNameMedicationScheduleID = False, returnNameOfficeVisitID = False, returnNote = False, returnNotPerformedReasonID = False, returnStaffIDAdministeredBy = False, returnTotalDosesToday = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnUserIDVoidedBy = False, returnVoidedTime = False, returnVoidNote = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params.loc[lambda x: ((x.value & (x.index.to_series().str.contains("return"))) | (~(x.value.isnull()) & (x.index.to_series().str.contains("set")))) & (x.index.to_series() != "EntityID"),:].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(),:]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/AdministerNameMedication/", verb = "put", return_params_list = return_params_list, payload = payload_params)

def deleteAdministerNameMedication(AdministerNameMedicationID, EntityID = 1):

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Attendance/AttendancePeriod/" + str(AttendancePeriodID), verb = "delete")

def getEveryBodyMassIndexPercentile(EntityID = 1, page = 1, pageSize = 100, returnBodyMassIndexPercentileID = True, returnAgeInMonths = False, returnCoefficientOfVariation = False, returnCreatedTime = False, returnEightyFifthPercentile = False, returnFifthPercentile = False, returnFiftiethPercentile = False, returnGender = False, returnGenderCode = False, returnMedian = False, returnModifiedTime = False, returnNinetyFifthPercentile = False, returnNinetySeventhPercentile = False, returnPower = False, returnSeventyFifthPercentile = False, returnSkywardHash = False, returnSkywardID = False, returnTenthPercentile = False, returnThirdPercentile = False, returnTwentyFifthPercentile = False, returnType = False, returnTypeCode = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[3,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/BodyMassIndexPercentile/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params_list)

def getBodyMassIndexPercentile(BodyMassIndexPercentileID, EntityID = 1, returnBodyMassIndexPercentileID = True, returnAgeInMonths = False, returnCoefficientOfVariation = False, returnCreatedTime = False, returnEightyFifthPercentile = False, returnFifthPercentile = False, returnFiftiethPercentile = False, returnGender = False, returnGenderCode = False, returnMedian = False, returnModifiedTime = False, returnNinetyFifthPercentile = False, returnNinetySeventhPercentile = False, returnPower = False, returnSeventyFifthPercentile = False, returnSkywardHash = False, returnSkywardID = False, returnTenthPercentile = False, returnThirdPercentile = False, returnTwentyFifthPercentile = False, returnType = False, returnTypeCode = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[2,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/BodyMassIndexPercentile/" + str(BodyMassIndexPercentileID), verb = "get", return_params_list = return_params_list)

def modifyBodyMassIndexPercentile(BodyMassIndexPercentileID, EntityID = 1, setAgeInMonths = None, setCoefficientOfVariation = None, setEightyFifthPercentile = None, setFifthPercentile = None, setFiftiethPercentile = None, setGender = None, setGenderCode = None, setMedian = None, setNinetyFifthPercentile = None, setNinetySeventhPercentile = None, setPower = None, setSeventyFifthPercentile = None, setSkywardHash = None, setSkywardID = None, setTenthPercentile = None, setThirdPercentile = None, setTwentyFifthPercentile = None, setType = None, setTypeCode = None, setRelationships = None, returnBodyMassIndexPercentileID = True, returnAgeInMonths = False, returnCoefficientOfVariation = False, returnCreatedTime = False, returnEightyFifthPercentile = False, returnFifthPercentile = False, returnFiftiethPercentile = False, returnGender = False, returnGenderCode = False, returnMedian = False, returnModifiedTime = False, returnNinetyFifthPercentile = False, returnNinetySeventhPercentile = False, returnPower = False, returnSeventyFifthPercentile = False, returnSkywardHash = False, returnSkywardID = False, returnTenthPercentile = False, returnThirdPercentile = False, returnTwentyFifthPercentile = False, returnType = False, returnTypeCode = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(), :]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/BodyMassIndexPercentile/" + str(BodyMassIndexPercentileID), verb = "post", return_params_list = return_params_list, payload = payload_params)

def createBodyMassIndexPercentile(EntityID = 1, setAgeInMonths = None, setCoefficientOfVariation = None, setEightyFifthPercentile = None, setFifthPercentile = None, setFiftiethPercentile = None, setGender = None, setGenderCode = None, setMedian = None, setNinetyFifthPercentile = None, setNinetySeventhPercentile = None, setPower = None, setSeventyFifthPercentile = None, setSkywardHash = None, setSkywardID = None, setTenthPercentile = None, setThirdPercentile = None, setTwentyFifthPercentile = None, setType = None, setTypeCode = None, setRelationships = None, returnBodyMassIndexPercentileID = True, returnAgeInMonths = False, returnCoefficientOfVariation = False, returnCreatedTime = False, returnEightyFifthPercentile = False, returnFifthPercentile = False, returnFiftiethPercentile = False, returnGender = False, returnGenderCode = False, returnMedian = False, returnModifiedTime = False, returnNinetyFifthPercentile = False, returnNinetySeventhPercentile = False, returnPower = False, returnSeventyFifthPercentile = False, returnSkywardHash = False, returnSkywardID = False, returnTenthPercentile = False, returnThirdPercentile = False, returnTwentyFifthPercentile = False, returnType = False, returnTypeCode = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params.loc[lambda x: ((x.value & (x.index.to_series().str.contains("return"))) | (~(x.value.isnull()) & (x.index.to_series().str.contains("set")))) & (x.index.to_series() != "EntityID"),:].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(),:]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/BodyMassIndexPercentile/", verb = "put", return_params_list = return_params_list, payload = payload_params)

def deleteBodyMassIndexPercentile(BodyMassIndexPercentileID, EntityID = 1):

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Attendance/AttendancePeriod/" + str(AttendancePeriodID), verb = "delete")

def getEveryBodyPart(EntityID = 1, page = 1, pageSize = 100, returnBodyPartID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[3,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/BodyPart/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params_list)

def getBodyPart(BodyPartID, EntityID = 1, returnBodyPartID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[2,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/BodyPart/" + str(BodyPartID), verb = "get", return_params_list = return_params_list)

def modifyBodyPart(BodyPartID, EntityID = 1, setCode = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setRelationships = None, returnBodyPartID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(), :]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/BodyPart/" + str(BodyPartID), verb = "post", return_params_list = return_params_list, payload = payload_params)

def createBodyPart(EntityID = 1, setCode = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setRelationships = None, returnBodyPartID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params.loc[lambda x: ((x.value & (x.index.to_series().str.contains("return"))) | (~(x.value.isnull()) & (x.index.to_series().str.contains("set")))) & (x.index.to_series() != "EntityID"),:].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(),:]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/BodyPart/", verb = "put", return_params_list = return_params_list, payload = payload_params)

def deleteBodyPart(BodyPartID, EntityID = 1):

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Attendance/AttendancePeriod/" + str(AttendancePeriodID), verb = "delete")

def getEveryChildhoodIllness(EntityID = 1, page = 1, pageSize = 100, returnChildhoodIllnessID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnSkywardHash = False, returnSkywardID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[3,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ChildhoodIllness/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params_list)

def getChildhoodIllness(ChildhoodIllnessID, EntityID = 1, returnChildhoodIllnessID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnSkywardHash = False, returnSkywardID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[2,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ChildhoodIllness/" + str(ChildhoodIllnessID), verb = "get", return_params_list = return_params_list)

def modifyChildhoodIllness(ChildhoodIllnessID, EntityID = 1, setCode = None, setDescription = None, setDistrictID = None, setIsActive = None, setSkywardHash = None, setSkywardID = None, setRelationships = None, returnChildhoodIllnessID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnSkywardHash = False, returnSkywardID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(), :]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ChildhoodIllness/" + str(ChildhoodIllnessID), verb = "post", return_params_list = return_params_list, payload = payload_params)

def createChildhoodIllness(EntityID = 1, setCode = None, setDescription = None, setDistrictID = None, setIsActive = None, setSkywardHash = None, setSkywardID = None, setRelationships = None, returnChildhoodIllnessID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnSkywardHash = False, returnSkywardID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params.loc[lambda x: ((x.value & (x.index.to_series().str.contains("return"))) | (~(x.value.isnull()) & (x.index.to_series().str.contains("set")))) & (x.index.to_series() != "EntityID"),:].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(),:]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ChildhoodIllness/", verb = "put", return_params_list = return_params_list, payload = payload_params)

def deleteChildhoodIllness(ChildhoodIllnessID, EntityID = 1):

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Attendance/AttendancePeriod/" + str(AttendancePeriodID), verb = "delete")

def getEveryChildhoodIllnessComment(EntityID = 1, page = 1, pageSize = 100, returnChildhoodIllnessCommentID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[3,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ChildhoodIllnessComment/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params_list)

def getChildhoodIllnessComment(ChildhoodIllnessCommentID, EntityID = 1, returnChildhoodIllnessCommentID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[2,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ChildhoodIllnessComment/" + str(ChildhoodIllnessCommentID), verb = "get", return_params_list = return_params_list)

def modifyChildhoodIllnessComment(ChildhoodIllnessCommentID, EntityID = 1, setCode = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setRelationships = None, returnChildhoodIllnessCommentID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(), :]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ChildhoodIllnessComment/" + str(ChildhoodIllnessCommentID), verb = "post", return_params_list = return_params_list, payload = payload_params)

def createChildhoodIllnessComment(EntityID = 1, setCode = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setRelationships = None, returnChildhoodIllnessCommentID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params.loc[lambda x: ((x.value & (x.index.to_series().str.contains("return"))) | (~(x.value.isnull()) & (x.index.to_series().str.contains("set")))) & (x.index.to_series() != "EntityID"),:].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(),:]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ChildhoodIllnessComment/", verb = "put", return_params_list = return_params_list, payload = payload_params)

def deleteChildhoodIllnessComment(ChildhoodIllnessCommentID, EntityID = 1):

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Attendance/AttendancePeriod/" + str(AttendancePeriodID), verb = "delete")

def getEveryChildhoodIllnessGuardianNotification(EntityID = 1, page = 1, pageSize = 100, returnChildhoodIllnessGuardianNotificationID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[3,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ChildhoodIllnessGuardianNotification/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params_list)

def getChildhoodIllnessGuardianNotification(ChildhoodIllnessGuardianNotificationID, EntityID = 1, returnChildhoodIllnessGuardianNotificationID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[2,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ChildhoodIllnessGuardianNotification/" + str(ChildhoodIllnessGuardianNotificationID), verb = "get", return_params_list = return_params_list)

def modifyChildhoodIllnessGuardianNotification(ChildhoodIllnessGuardianNotificationID, EntityID = 1, setCode = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setRelationships = None, returnChildhoodIllnessGuardianNotificationID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(), :]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ChildhoodIllnessGuardianNotification/" + str(ChildhoodIllnessGuardianNotificationID), verb = "post", return_params_list = return_params_list, payload = payload_params)

def createChildhoodIllnessGuardianNotification(EntityID = 1, setCode = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setRelationships = None, returnChildhoodIllnessGuardianNotificationID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params.loc[lambda x: ((x.value & (x.index.to_series().str.contains("return"))) | (~(x.value.isnull()) & (x.index.to_series().str.contains("set")))) & (x.index.to_series() != "EntityID"),:].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(),:]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ChildhoodIllnessGuardianNotification/", verb = "put", return_params_list = return_params_list, payload = payload_params)

def deleteChildhoodIllnessGuardianNotification(ChildhoodIllnessGuardianNotificationID, EntityID = 1):

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Attendance/AttendancePeriod/" + str(AttendancePeriodID), verb = "delete")

def getEveryChildhoodIllnessGuardianResponse(EntityID = 1, page = 1, pageSize = 100, returnChildhoodIllnessGuardianResponseID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[3,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ChildhoodIllnessGuardianResponse/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params_list)

def getChildhoodIllnessGuardianResponse(ChildhoodIllnessGuardianResponseID, EntityID = 1, returnChildhoodIllnessGuardianResponseID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[2,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ChildhoodIllnessGuardianResponse/" + str(ChildhoodIllnessGuardianResponseID), verb = "get", return_params_list = return_params_list)

def modifyChildhoodIllnessGuardianResponse(ChildhoodIllnessGuardianResponseID, EntityID = 1, setCode = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setRelationships = None, returnChildhoodIllnessGuardianResponseID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(), :]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ChildhoodIllnessGuardianResponse/" + str(ChildhoodIllnessGuardianResponseID), verb = "post", return_params_list = return_params_list, payload = payload_params)

def createChildhoodIllnessGuardianResponse(EntityID = 1, setCode = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setRelationships = None, returnChildhoodIllnessGuardianResponseID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params.loc[lambda x: ((x.value & (x.index.to_series().str.contains("return"))) | (~(x.value.isnull()) & (x.index.to_series().str.contains("set")))) & (x.index.to_series() != "EntityID"),:].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(),:]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ChildhoodIllnessGuardianResponse/", verb = "put", return_params_list = return_params_list, payload = payload_params)

def deleteChildhoodIllnessGuardianResponse(ChildhoodIllnessGuardianResponseID, EntityID = 1):

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Attendance/AttendancePeriod/" + str(AttendancePeriodID), verb = "delete")

def getEveryChildhoodIllnessObservation(EntityID = 1, page = 1, pageSize = 100, returnChildhoodIllnessObservationID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[3,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ChildhoodIllnessObservation/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params_list)

def getChildhoodIllnessObservation(ChildhoodIllnessObservationID, EntityID = 1, returnChildhoodIllnessObservationID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[2,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ChildhoodIllnessObservation/" + str(ChildhoodIllnessObservationID), verb = "get", return_params_list = return_params_list)

def modifyChildhoodIllnessObservation(ChildhoodIllnessObservationID, EntityID = 1, setCode = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setRelationships = None, returnChildhoodIllnessObservationID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(), :]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ChildhoodIllnessObservation/" + str(ChildhoodIllnessObservationID), verb = "post", return_params_list = return_params_list, payload = payload_params)

def createChildhoodIllnessObservation(EntityID = 1, setCode = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setRelationships = None, returnChildhoodIllnessObservationID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params.loc[lambda x: ((x.value & (x.index.to_series().str.contains("return"))) | (~(x.value.isnull()) & (x.index.to_series().str.contains("set")))) & (x.index.to_series() != "EntityID"),:].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(),:]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ChildhoodIllnessObservation/", verb = "put", return_params_list = return_params_list, payload = payload_params)

def deleteChildhoodIllnessObservation(ChildhoodIllnessObservationID, EntityID = 1):

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Attendance/AttendancePeriod/" + str(AttendancePeriodID), verb = "delete")

def getEveryChildhoodIllnessReferralReason(EntityID = 1, page = 1, pageSize = 100, returnChildhoodIllnessReferralReasonID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[3,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ChildhoodIllnessReferralReason/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params_list)

def getChildhoodIllnessReferralReason(ChildhoodIllnessReferralReasonID, EntityID = 1, returnChildhoodIllnessReferralReasonID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[2,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ChildhoodIllnessReferralReason/" + str(ChildhoodIllnessReferralReasonID), verb = "get", return_params_list = return_params_list)

def modifyChildhoodIllnessReferralReason(ChildhoodIllnessReferralReasonID, EntityID = 1, setCode = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setRelationships = None, returnChildhoodIllnessReferralReasonID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(), :]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ChildhoodIllnessReferralReason/" + str(ChildhoodIllnessReferralReasonID), verb = "post", return_params_list = return_params_list, payload = payload_params)

def createChildhoodIllnessReferralReason(EntityID = 1, setCode = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setRelationships = None, returnChildhoodIllnessReferralReasonID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params.loc[lambda x: ((x.value & (x.index.to_series().str.contains("return"))) | (~(x.value.isnull()) & (x.index.to_series().str.contains("set")))) & (x.index.to_series() != "EntityID"),:].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(),:]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ChildhoodIllnessReferralReason/", verb = "put", return_params_list = return_params_list, payload = payload_params)

def deleteChildhoodIllnessReferralReason(ChildhoodIllnessReferralReasonID, EntityID = 1):

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Attendance/AttendancePeriod/" + str(AttendancePeriodID), verb = "delete")

def getEveryChildhoodIllnessReferralResult(EntityID = 1, page = 1, pageSize = 100, returnChildhoodIllnessReferralResultID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[3,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ChildhoodIllnessReferralResult/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params_list)

def getChildhoodIllnessReferralResult(ChildhoodIllnessReferralResultID, EntityID = 1, returnChildhoodIllnessReferralResultID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[2,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ChildhoodIllnessReferralResult/" + str(ChildhoodIllnessReferralResultID), verb = "get", return_params_list = return_params_list)

def modifyChildhoodIllnessReferralResult(ChildhoodIllnessReferralResultID, EntityID = 1, setCode = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setRelationships = None, returnChildhoodIllnessReferralResultID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(), :]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ChildhoodIllnessReferralResult/" + str(ChildhoodIllnessReferralResultID), verb = "post", return_params_list = return_params_list, payload = payload_params)

def createChildhoodIllnessReferralResult(EntityID = 1, setCode = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setRelationships = None, returnChildhoodIllnessReferralResultID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params.loc[lambda x: ((x.value & (x.index.to_series().str.contains("return"))) | (~(x.value.isnull()) & (x.index.to_series().str.contains("set")))) & (x.index.to_series() != "EntityID"),:].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(),:]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ChildhoodIllnessReferralResult/", verb = "put", return_params_list = return_params_list, payload = payload_params)

def deleteChildhoodIllnessReferralResult(ChildhoodIllnessReferralResultID, EntityID = 1):

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Attendance/AttendancePeriod/" + str(AttendancePeriodID), verb = "delete")

def getEveryComplianceSchedule(EntityID = 1, page = 1, pageSize = 100, returnComplianceScheduleID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnIsDistrictDefined = False, returnModifiedTime = False, returnSkywardHash = False, returnSkywardID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[3,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ComplianceSchedule/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params_list)

def getComplianceSchedule(ComplianceScheduleID, EntityID = 1, returnComplianceScheduleID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnIsDistrictDefined = False, returnModifiedTime = False, returnSkywardHash = False, returnSkywardID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[2,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ComplianceSchedule/" + str(ComplianceScheduleID), verb = "get", return_params_list = return_params_list)

def modifyComplianceSchedule(ComplianceScheduleID, EntityID = 1, setCode = None, setDescription = None, setSkywardHash = None, setSkywardID = None, setRelationships = None, returnComplianceScheduleID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnIsDistrictDefined = False, returnModifiedTime = False, returnSkywardHash = False, returnSkywardID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(), :]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ComplianceSchedule/" + str(ComplianceScheduleID), verb = "post", return_params_list = return_params_list, payload = payload_params)

def createComplianceSchedule(EntityID = 1, setCode = None, setDescription = None, setSkywardHash = None, setSkywardID = None, setRelationships = None, returnComplianceScheduleID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnIsDistrictDefined = False, returnModifiedTime = False, returnSkywardHash = False, returnSkywardID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params.loc[lambda x: ((x.value & (x.index.to_series().str.contains("return"))) | (~(x.value.isnull()) & (x.index.to_series().str.contains("set")))) & (x.index.to_series() != "EntityID"),:].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(),:]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ComplianceSchedule/", verb = "put", return_params_list = return_params_list, payload = payload_params)

def deleteComplianceSchedule(ComplianceScheduleID, EntityID = 1):

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Attendance/AttendancePeriod/" + str(AttendancePeriodID), verb = "delete")

def getEveryComplianceScheduleDetail(EntityID = 1, page = 1, pageSize = 100, returnComplianceScheduleDetailID = True, returnAgeGradeType = False, returnAgeGradeTypeCode = False, returnAgeGradeValue = False, returnAgeUnit = False, returnAgeUnitCode = False, returnComplianceScheduleDetailIDClonedFrom = False, returnCreatedTime = False, returnDoseCount = False, returnIsDistrictDefined = False, returnModifiedTime = False, returnSkywardHash = False, returnSkywardID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnVaccinationYearComplianceScheduleID = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[3,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ComplianceScheduleDetail/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params_list)

def getComplianceScheduleDetail(ComplianceScheduleDetailID, EntityID = 1, returnComplianceScheduleDetailID = True, returnAgeGradeType = False, returnAgeGradeTypeCode = False, returnAgeGradeValue = False, returnAgeUnit = False, returnAgeUnitCode = False, returnComplianceScheduleDetailIDClonedFrom = False, returnCreatedTime = False, returnDoseCount = False, returnIsDistrictDefined = False, returnModifiedTime = False, returnSkywardHash = False, returnSkywardID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnVaccinationYearComplianceScheduleID = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[2,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ComplianceScheduleDetail/" + str(ComplianceScheduleDetailID), verb = "get", return_params_list = return_params_list)

def modifyComplianceScheduleDetail(ComplianceScheduleDetailID, EntityID = 1, setAgeGradeType = None, setAgeGradeTypeCode = None, setAgeGradeValue = None, setAgeUnit = None, setAgeUnitCode = None, setComplianceScheduleDetailIDClonedFrom = None, setDoseCount = None, setSkywardHash = None, setSkywardID = None, setVaccinationYearComplianceScheduleID = None, setRelationships = None, returnComplianceScheduleDetailID = True, returnAgeGradeType = False, returnAgeGradeTypeCode = False, returnAgeGradeValue = False, returnAgeUnit = False, returnAgeUnitCode = False, returnComplianceScheduleDetailIDClonedFrom = False, returnCreatedTime = False, returnDoseCount = False, returnIsDistrictDefined = False, returnModifiedTime = False, returnSkywardHash = False, returnSkywardID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnVaccinationYearComplianceScheduleID = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(), :]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ComplianceScheduleDetail/" + str(ComplianceScheduleDetailID), verb = "post", return_params_list = return_params_list, payload = payload_params)

def createComplianceScheduleDetail(EntityID = 1, setAgeGradeType = None, setAgeGradeTypeCode = None, setAgeGradeValue = None, setAgeUnit = None, setAgeUnitCode = None, setComplianceScheduleDetailIDClonedFrom = None, setDoseCount = None, setSkywardHash = None, setSkywardID = None, setVaccinationYearComplianceScheduleID = None, setRelationships = None, returnComplianceScheduleDetailID = True, returnAgeGradeType = False, returnAgeGradeTypeCode = False, returnAgeGradeValue = False, returnAgeUnit = False, returnAgeUnitCode = False, returnComplianceScheduleDetailIDClonedFrom = False, returnCreatedTime = False, returnDoseCount = False, returnIsDistrictDefined = False, returnModifiedTime = False, returnSkywardHash = False, returnSkywardID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnVaccinationYearComplianceScheduleID = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params.loc[lambda x: ((x.value & (x.index.to_series().str.contains("return"))) | (~(x.value.isnull()) & (x.index.to_series().str.contains("set")))) & (x.index.to_series() != "EntityID"),:].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(),:]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ComplianceScheduleDetail/", verb = "put", return_params_list = return_params_list, payload = payload_params)

def deleteComplianceScheduleDetail(ComplianceScheduleDetailID, EntityID = 1):

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Attendance/AttendancePeriod/" + str(AttendancePeriodID), verb = "delete")

def getEveryComplianceScheduleDetailBooster(EntityID = 1, page = 1, pageSize = 100, returnComplianceScheduleDetailBoosterID = True, returnComplianceScheduleDetailBoosterIDClonedFrom = False, returnComplianceScheduleDetailID = False, returnCreatedTime = False, returnIntervalTime = False, returnIntervalTimeUnit = False, returnIntervalTimeUnitCode = False, returnIsDistrictDefined = False, returnModifiedTime = False, returnSkywardHash = False, returnSkywardID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnVaccineID = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[3,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ComplianceScheduleDetailBooster/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params_list)

def getComplianceScheduleDetailBooster(ComplianceScheduleDetailBoosterID, EntityID = 1, returnComplianceScheduleDetailBoosterID = True, returnComplianceScheduleDetailBoosterIDClonedFrom = False, returnComplianceScheduleDetailID = False, returnCreatedTime = False, returnIntervalTime = False, returnIntervalTimeUnit = False, returnIntervalTimeUnitCode = False, returnIsDistrictDefined = False, returnModifiedTime = False, returnSkywardHash = False, returnSkywardID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnVaccineID = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[2,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ComplianceScheduleDetailBooster/" + str(ComplianceScheduleDetailBoosterID), verb = "get", return_params_list = return_params_list)

def modifyComplianceScheduleDetailBooster(ComplianceScheduleDetailBoosterID, EntityID = 1, setComplianceScheduleDetailBoosterIDClonedFrom = None, setComplianceScheduleDetailID = None, setIntervalTime = None, setIntervalTimeUnit = None, setIntervalTimeUnitCode = None, setSkywardHash = None, setSkywardID = None, setVaccineID = None, setRelationships = None, returnComplianceScheduleDetailBoosterID = True, returnComplianceScheduleDetailBoosterIDClonedFrom = False, returnComplianceScheduleDetailID = False, returnCreatedTime = False, returnIntervalTime = False, returnIntervalTimeUnit = False, returnIntervalTimeUnitCode = False, returnIsDistrictDefined = False, returnModifiedTime = False, returnSkywardHash = False, returnSkywardID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnVaccineID = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(), :]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ComplianceScheduleDetailBooster/" + str(ComplianceScheduleDetailBoosterID), verb = "post", return_params_list = return_params_list, payload = payload_params)

def createComplianceScheduleDetailBooster(EntityID = 1, setComplianceScheduleDetailBoosterIDClonedFrom = None, setComplianceScheduleDetailID = None, setIntervalTime = None, setIntervalTimeUnit = None, setIntervalTimeUnitCode = None, setSkywardHash = None, setSkywardID = None, setVaccineID = None, setRelationships = None, returnComplianceScheduleDetailBoosterID = True, returnComplianceScheduleDetailBoosterIDClonedFrom = False, returnComplianceScheduleDetailID = False, returnCreatedTime = False, returnIntervalTime = False, returnIntervalTimeUnit = False, returnIntervalTimeUnitCode = False, returnIsDistrictDefined = False, returnModifiedTime = False, returnSkywardHash = False, returnSkywardID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnVaccineID = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params.loc[lambda x: ((x.value & (x.index.to_series().str.contains("return"))) | (~(x.value.isnull()) & (x.index.to_series().str.contains("set")))) & (x.index.to_series() != "EntityID"),:].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(),:]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ComplianceScheduleDetailBooster/", verb = "put", return_params_list = return_params_list, payload = payload_params)

def deleteComplianceScheduleDetailBooster(ComplianceScheduleDetailBoosterID, EntityID = 1):

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Attendance/AttendancePeriod/" + str(AttendancePeriodID), verb = "delete")

def getEveryComplianceScheduleRule(EntityID = 1, page = 1, pageSize = 100, returnComplianceScheduleRuleID = True, returnCode = False, returnCodeDescription = False, returnComplianceScheduleID = False, returnCreatedTime = False, returnDescription = False, returnGracePeriodDays = False, returnModifiedTime = False, returnRule = False, returnRuleDescription = False, returnSkywardHash = False, returnSkywardID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[3,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ComplianceScheduleRule/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params_list)

def getComplianceScheduleRule(ComplianceScheduleRuleID, EntityID = 1, returnComplianceScheduleRuleID = True, returnCode = False, returnCodeDescription = False, returnComplianceScheduleID = False, returnCreatedTime = False, returnDescription = False, returnGracePeriodDays = False, returnModifiedTime = False, returnRule = False, returnRuleDescription = False, returnSkywardHash = False, returnSkywardID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[2,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ComplianceScheduleRule/" + str(ComplianceScheduleRuleID), verb = "get", return_params_list = return_params_list)

def modifyComplianceScheduleRule(ComplianceScheduleRuleID, EntityID = 1, setCode = None, setComplianceScheduleID = None, setDescription = None, setGracePeriodDays = None, setRule = None, setSkywardHash = None, setSkywardID = None, setRelationships = None, returnComplianceScheduleRuleID = True, returnCode = False, returnCodeDescription = False, returnComplianceScheduleID = False, returnCreatedTime = False, returnDescription = False, returnGracePeriodDays = False, returnModifiedTime = False, returnRule = False, returnRuleDescription = False, returnSkywardHash = False, returnSkywardID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(), :]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ComplianceScheduleRule/" + str(ComplianceScheduleRuleID), verb = "post", return_params_list = return_params_list, payload = payload_params)

def createComplianceScheduleRule(EntityID = 1, setCode = None, setComplianceScheduleID = None, setDescription = None, setGracePeriodDays = None, setRule = None, setSkywardHash = None, setSkywardID = None, setRelationships = None, returnComplianceScheduleRuleID = True, returnCode = False, returnCodeDescription = False, returnComplianceScheduleID = False, returnCreatedTime = False, returnDescription = False, returnGracePeriodDays = False, returnModifiedTime = False, returnRule = False, returnRuleDescription = False, returnSkywardHash = False, returnSkywardID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params.loc[lambda x: ((x.value & (x.index.to_series().str.contains("return"))) | (~(x.value.isnull()) & (x.index.to_series().str.contains("set")))) & (x.index.to_series() != "EntityID"),:].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(),:]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ComplianceScheduleRule/", verb = "put", return_params_list = return_params_list, payload = payload_params)

def deleteComplianceScheduleRule(ComplianceScheduleRuleID, EntityID = 1):

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Attendance/AttendancePeriod/" + str(AttendancePeriodID), verb = "delete")

def getEveryConfigDistrictGroup(EntityID = 1, page = 1, pageSize = 100, returnConfigDistrictGroupID = True, returnCreatedTime = False, returnDistrictGroupKey = False, returnDistrictID = False, returnModifiedTime = False, returnUseNationalChartForBodyMassIndexPercentile = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[3,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ConfigDistrictGroup/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params_list)

def getConfigDistrictGroup(ConfigDistrictGroupID, EntityID = 1, returnConfigDistrictGroupID = True, returnCreatedTime = False, returnDistrictGroupKey = False, returnDistrictID = False, returnModifiedTime = False, returnUseNationalChartForBodyMassIndexPercentile = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[2,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ConfigDistrictGroup/" + str(ConfigDistrictGroupID), verb = "get", return_params_list = return_params_list)

def modifyConfigDistrictGroup(ConfigDistrictGroupID, EntityID = 1, setDistrictGroupKey = None, setDistrictID = None, setUseNationalChartForBodyMassIndexPercentile = None, setRelationships = None, returnConfigDistrictGroupID = True, returnCreatedTime = False, returnDistrictGroupKey = False, returnDistrictID = False, returnModifiedTime = False, returnUseNationalChartForBodyMassIndexPercentile = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(), :]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ConfigDistrictGroup/" + str(ConfigDistrictGroupID), verb = "post", return_params_list = return_params_list, payload = payload_params)

def createConfigDistrictGroup(EntityID = 1, setDistrictGroupKey = None, setDistrictID = None, setUseNationalChartForBodyMassIndexPercentile = None, setRelationships = None, returnConfigDistrictGroupID = True, returnCreatedTime = False, returnDistrictGroupKey = False, returnDistrictID = False, returnModifiedTime = False, returnUseNationalChartForBodyMassIndexPercentile = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params.loc[lambda x: ((x.value & (x.index.to_series().str.contains("return"))) | (~(x.value.isnull()) & (x.index.to_series().str.contains("set")))) & (x.index.to_series() != "EntityID"),:].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(),:]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ConfigDistrictGroup/", verb = "put", return_params_list = return_params_list, payload = payload_params)

def deleteConfigDistrictGroup(ConfigDistrictGroupID, EntityID = 1):

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Attendance/AttendancePeriod/" + str(AttendancePeriodID), verb = "delete")

def getEveryConfigDistrictYear(EntityID = 1, page = 1, pageSize = 100, returnConfigDistrictYearID = True, returnAgeEffectiveDate = False, returnComplianceYearStart = False, returnComplianceYearStartCode = False, returnCreatedTime = False, returnDisplayLotNumber = False, returnDistrictID = False, returnModifiedTime = False, returnProvisionalCalculationType = False, returnProvisionalCalculationTypeCode = False, returnProvisionalDays = False, returnSchoolYearID = False, returnShowVaccinationComplianceConditionalIndicator = False, returnUseComplianceDate = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnVaccinationComplianceConditionalIndicator = False, returnVaccinationComplianceIsProcessing = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[3,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ConfigDistrictYear/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params_list)

def getConfigDistrictYear(ConfigDistrictYearID, EntityID = 1, returnConfigDistrictYearID = True, returnAgeEffectiveDate = False, returnComplianceYearStart = False, returnComplianceYearStartCode = False, returnCreatedTime = False, returnDisplayLotNumber = False, returnDistrictID = False, returnModifiedTime = False, returnProvisionalCalculationType = False, returnProvisionalCalculationTypeCode = False, returnProvisionalDays = False, returnSchoolYearID = False, returnShowVaccinationComplianceConditionalIndicator = False, returnUseComplianceDate = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnVaccinationComplianceConditionalIndicator = False, returnVaccinationComplianceIsProcessing = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[2,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ConfigDistrictYear/" + str(ConfigDistrictYearID), verb = "get", return_params_list = return_params_list)

def modifyConfigDistrictYear(ConfigDistrictYearID, EntityID = 1, setAgeEffectiveDate = None, setComplianceYearStart = None, setComplianceYearStartCode = None, setDisplayLotNumber = None, setDistrictID = None, setProvisionalCalculationType = None, setProvisionalCalculationTypeCode = None, setProvisionalDays = None, setSchoolYearID = None, setShowVaccinationComplianceConditionalIndicator = None, setUseComplianceDate = None, setVaccinationComplianceConditionalIndicator = None, setVaccinationComplianceIsProcessing = None, setRelationships = None, returnConfigDistrictYearID = True, returnAgeEffectiveDate = False, returnComplianceYearStart = False, returnComplianceYearStartCode = False, returnCreatedTime = False, returnDisplayLotNumber = False, returnDistrictID = False, returnModifiedTime = False, returnProvisionalCalculationType = False, returnProvisionalCalculationTypeCode = False, returnProvisionalDays = False, returnSchoolYearID = False, returnShowVaccinationComplianceConditionalIndicator = False, returnUseComplianceDate = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnVaccinationComplianceConditionalIndicator = False, returnVaccinationComplianceIsProcessing = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(), :]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ConfigDistrictYear/" + str(ConfigDistrictYearID), verb = "post", return_params_list = return_params_list, payload = payload_params)

def createConfigDistrictYear(EntityID = 1, setAgeEffectiveDate = None, setComplianceYearStart = None, setComplianceYearStartCode = None, setDisplayLotNumber = None, setDistrictID = None, setProvisionalCalculationType = None, setProvisionalCalculationTypeCode = None, setProvisionalDays = None, setSchoolYearID = None, setShowVaccinationComplianceConditionalIndicator = None, setUseComplianceDate = None, setVaccinationComplianceConditionalIndicator = None, setVaccinationComplianceIsProcessing = None, setRelationships = None, returnConfigDistrictYearID = True, returnAgeEffectiveDate = False, returnComplianceYearStart = False, returnComplianceYearStartCode = False, returnCreatedTime = False, returnDisplayLotNumber = False, returnDistrictID = False, returnModifiedTime = False, returnProvisionalCalculationType = False, returnProvisionalCalculationTypeCode = False, returnProvisionalDays = False, returnSchoolYearID = False, returnShowVaccinationComplianceConditionalIndicator = False, returnUseComplianceDate = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnVaccinationComplianceConditionalIndicator = False, returnVaccinationComplianceIsProcessing = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params.loc[lambda x: ((x.value & (x.index.to_series().str.contains("return"))) | (~(x.value.isnull()) & (x.index.to_series().str.contains("set")))) & (x.index.to_series() != "EntityID"),:].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(),:]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ConfigDistrictYear/", verb = "put", return_params_list = return_params_list, payload = payload_params)

def deleteConfigDistrictYear(ConfigDistrictYearID, EntityID = 1):

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Attendance/AttendancePeriod/" + str(AttendancePeriodID), verb = "delete")

def getEveryConfigEntity(EntityID = 1, page = 1, pageSize = 100, returnConfigEntityID = True, returnCreatedTime = False, returnEntityID = False, returnLocationIDMedicationQuickEntryDefault = False, returnModifiedTime = False, returnStaffIDMedicationQuickEntryDefault = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[3,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ConfigEntity/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params_list)

def getConfigEntity(ConfigEntityID, EntityID = 1, returnConfigEntityID = True, returnCreatedTime = False, returnEntityID = False, returnLocationIDMedicationQuickEntryDefault = False, returnModifiedTime = False, returnStaffIDMedicationQuickEntryDefault = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[2,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ConfigEntity/" + str(ConfigEntityID), verb = "get", return_params_list = return_params_list)

def modifyConfigEntity(ConfigEntityID, EntityID = 1, setEntityID = None, setLocationIDMedicationQuickEntryDefault = None, setStaffIDMedicationQuickEntryDefault = None, setRelationships = None, returnConfigEntityID = True, returnCreatedTime = False, returnEntityID = False, returnLocationIDMedicationQuickEntryDefault = False, returnModifiedTime = False, returnStaffIDMedicationQuickEntryDefault = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(), :]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ConfigEntity/" + str(ConfigEntityID), verb = "post", return_params_list = return_params_list, payload = payload_params)

def createConfigEntity(EntityID = 1, setEntityID = None, setLocationIDMedicationQuickEntryDefault = None, setStaffIDMedicationQuickEntryDefault = None, setRelationships = None, returnConfigEntityID = True, returnCreatedTime = False, returnEntityID = False, returnLocationIDMedicationQuickEntryDefault = False, returnModifiedTime = False, returnStaffIDMedicationQuickEntryDefault = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params.loc[lambda x: ((x.value & (x.index.to_series().str.contains("return"))) | (~(x.value.isnull()) & (x.index.to_series().str.contains("set")))) & (x.index.to_series() != "EntityID"),:].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(),:]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ConfigEntity/", verb = "put", return_params_list = return_params_list, payload = payload_params)

def deleteConfigEntity(ConfigEntityID, EntityID = 1):

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Attendance/AttendancePeriod/" + str(AttendancePeriodID), verb = "delete")

def getEveryDentalComment(EntityID = 1, page = 1, pageSize = 100, returnDentalCommentID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[3,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DentalComment/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params_list)

def getDentalComment(DentalCommentID, EntityID = 1, returnDentalCommentID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[2,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DentalComment/" + str(DentalCommentID), verb = "get", return_params_list = return_params_list)

def modifyDentalComment(DentalCommentID, EntityID = 1, setCode = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setRelationships = None, returnDentalCommentID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(), :]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DentalComment/" + str(DentalCommentID), verb = "post", return_params_list = return_params_list, payload = payload_params)

def createDentalComment(EntityID = 1, setCode = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setRelationships = None, returnDentalCommentID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params.loc[lambda x: ((x.value & (x.index.to_series().str.contains("return"))) | (~(x.value.isnull()) & (x.index.to_series().str.contains("set")))) & (x.index.to_series() != "EntityID"),:].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(),:]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DentalComment/", verb = "put", return_params_list = return_params_list, payload = payload_params)

def deleteDentalComment(DentalCommentID, EntityID = 1):

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Attendance/AttendancePeriod/" + str(AttendancePeriodID), verb = "delete")

def getEveryDentalGuardianNotification(EntityID = 1, page = 1, pageSize = 100, returnDentalGuardianNotificationID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[3,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DentalGuardianNotification/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params_list)

def getDentalGuardianNotification(DentalGuardianNotificationID, EntityID = 1, returnDentalGuardianNotificationID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[2,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DentalGuardianNotification/" + str(DentalGuardianNotificationID), verb = "get", return_params_list = return_params_list)

def modifyDentalGuardianNotification(DentalGuardianNotificationID, EntityID = 1, setCode = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setRelationships = None, returnDentalGuardianNotificationID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(), :]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DentalGuardianNotification/" + str(DentalGuardianNotificationID), verb = "post", return_params_list = return_params_list, payload = payload_params)

def createDentalGuardianNotification(EntityID = 1, setCode = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setRelationships = None, returnDentalGuardianNotificationID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params.loc[lambda x: ((x.value & (x.index.to_series().str.contains("return"))) | (~(x.value.isnull()) & (x.index.to_series().str.contains("set")))) & (x.index.to_series() != "EntityID"),:].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(),:]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DentalGuardianNotification/", verb = "put", return_params_list = return_params_list, payload = payload_params)

def deleteDentalGuardianNotification(DentalGuardianNotificationID, EntityID = 1):

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Attendance/AttendancePeriod/" + str(AttendancePeriodID), verb = "delete")

def getEveryDentalGuardianResponse(EntityID = 1, page = 1, pageSize = 100, returnDentalGuardianResponseID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[3,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DentalGuardianResponse/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params_list)

def getDentalGuardianResponse(DentalGuardianResponseID, EntityID = 1, returnDentalGuardianResponseID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[2,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DentalGuardianResponse/" + str(DentalGuardianResponseID), verb = "get", return_params_list = return_params_list)

def modifyDentalGuardianResponse(DentalGuardianResponseID, EntityID = 1, setCode = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setRelationships = None, returnDentalGuardianResponseID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(), :]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DentalGuardianResponse/" + str(DentalGuardianResponseID), verb = "post", return_params_list = return_params_list, payload = payload_params)

def createDentalGuardianResponse(EntityID = 1, setCode = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setRelationships = None, returnDentalGuardianResponseID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params.loc[lambda x: ((x.value & (x.index.to_series().str.contains("return"))) | (~(x.value.isnull()) & (x.index.to_series().str.contains("set")))) & (x.index.to_series() != "EntityID"),:].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(),:]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DentalGuardianResponse/", verb = "put", return_params_list = return_params_list, payload = payload_params)

def deleteDentalGuardianResponse(DentalGuardianResponseID, EntityID = 1):

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Attendance/AttendancePeriod/" + str(AttendancePeriodID), verb = "delete")

def getEveryDentalReferralReason(EntityID = 1, page = 1, pageSize = 100, returnDentalReferralReasonID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[3,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DentalReferralReason/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params_list)

def getDentalReferralReason(DentalReferralReasonID, EntityID = 1, returnDentalReferralReasonID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[2,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DentalReferralReason/" + str(DentalReferralReasonID), verb = "get", return_params_list = return_params_list)

def modifyDentalReferralReason(DentalReferralReasonID, EntityID = 1, setCode = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setRelationships = None, returnDentalReferralReasonID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(), :]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DentalReferralReason/" + str(DentalReferralReasonID), verb = "post", return_params_list = return_params_list, payload = payload_params)

def createDentalReferralReason(EntityID = 1, setCode = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setRelationships = None, returnDentalReferralReasonID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params.loc[lambda x: ((x.value & (x.index.to_series().str.contains("return"))) | (~(x.value.isnull()) & (x.index.to_series().str.contains("set")))) & (x.index.to_series() != "EntityID"),:].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(),:]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DentalReferralReason/", verb = "put", return_params_list = return_params_list, payload = payload_params)

def deleteDentalReferralReason(DentalReferralReasonID, EntityID = 1):

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Attendance/AttendancePeriod/" + str(AttendancePeriodID), verb = "delete")

def getEveryDentalReferralResult(EntityID = 1, page = 1, pageSize = 100, returnDentalReferralResultID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[3,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DentalReferralResult/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params_list)

def getDentalReferralResult(DentalReferralResultID, EntityID = 1, returnDentalReferralResultID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[2,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DentalReferralResult/" + str(DentalReferralResultID), verb = "get", return_params_list = return_params_list)

def modifyDentalReferralResult(DentalReferralResultID, EntityID = 1, setCode = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setRelationships = None, returnDentalReferralResultID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(), :]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DentalReferralResult/" + str(DentalReferralResultID), verb = "post", return_params_list = return_params_list, payload = payload_params)

def createDentalReferralResult(EntityID = 1, setCode = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setRelationships = None, returnDentalReferralResultID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params.loc[lambda x: ((x.value & (x.index.to_series().str.contains("return"))) | (~(x.value.isnull()) & (x.index.to_series().str.contains("set")))) & (x.index.to_series() != "EntityID"),:].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(),:]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DentalReferralResult/", verb = "put", return_params_list = return_params_list, payload = payload_params)

def deleteDentalReferralResult(DentalReferralResultID, EntityID = 1):

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Attendance/AttendancePeriod/" + str(AttendancePeriodID), verb = "delete")

def getEveryDentalScreening(EntityID = 1, page = 1, pageSize = 100, returnDentalScreeningID = True, returnCreatedTime = False, returnDentalScreeningResultID = False, returnDentalTreatmentID = False, returnDistrictID = False, returnHealthProfessionalIDExaminedBy = False, returnIsVoid = False, returnModifiedTime = False, returnNameID = False, returnSchoolYearID = False, returnScreeningDate = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnUserIDVoidedBy = False, returnVoidedTime = False, returnVoidNote = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[3,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DentalScreening/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params_list)

def getDentalScreening(DentalScreeningID, EntityID = 1, returnDentalScreeningID = True, returnCreatedTime = False, returnDentalScreeningResultID = False, returnDentalTreatmentID = False, returnDistrictID = False, returnHealthProfessionalIDExaminedBy = False, returnIsVoid = False, returnModifiedTime = False, returnNameID = False, returnSchoolYearID = False, returnScreeningDate = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnUserIDVoidedBy = False, returnVoidedTime = False, returnVoidNote = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[2,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DentalScreening/" + str(DentalScreeningID), verb = "get", return_params_list = return_params_list)

def modifyDentalScreening(DentalScreeningID, EntityID = 1, setDentalScreeningResultID = None, setDentalTreatmentID = None, setDistrictID = None, setHealthProfessionalIDExaminedBy = None, setIsVoid = None, setNameID = None, setSchoolYearID = None, setScreeningDate = None, setUserIDVoidedBy = None, setVoidedTime = None, setVoidNote = None, setRelationships = None, returnDentalScreeningID = True, returnCreatedTime = False, returnDentalScreeningResultID = False, returnDentalTreatmentID = False, returnDistrictID = False, returnHealthProfessionalIDExaminedBy = False, returnIsVoid = False, returnModifiedTime = False, returnNameID = False, returnSchoolYearID = False, returnScreeningDate = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnUserIDVoidedBy = False, returnVoidedTime = False, returnVoidNote = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(), :]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DentalScreening/" + str(DentalScreeningID), verb = "post", return_params_list = return_params_list, payload = payload_params)

def createDentalScreening(EntityID = 1, setDentalScreeningResultID = None, setDentalTreatmentID = None, setDistrictID = None, setHealthProfessionalIDExaminedBy = None, setIsVoid = None, setNameID = None, setSchoolYearID = None, setScreeningDate = None, setUserIDVoidedBy = None, setVoidedTime = None, setVoidNote = None, setRelationships = None, returnDentalScreeningID = True, returnCreatedTime = False, returnDentalScreeningResultID = False, returnDentalTreatmentID = False, returnDistrictID = False, returnHealthProfessionalIDExaminedBy = False, returnIsVoid = False, returnModifiedTime = False, returnNameID = False, returnSchoolYearID = False, returnScreeningDate = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnUserIDVoidedBy = False, returnVoidedTime = False, returnVoidNote = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params.loc[lambda x: ((x.value & (x.index.to_series().str.contains("return"))) | (~(x.value.isnull()) & (x.index.to_series().str.contains("set")))) & (x.index.to_series() != "EntityID"),:].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(),:]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DentalScreening/", verb = "put", return_params_list = return_params_list, payload = payload_params)

def deleteDentalScreening(DentalScreeningID, EntityID = 1):

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Attendance/AttendancePeriod/" + str(AttendancePeriodID), verb = "delete")

def getEveryDentalScreeningComment(EntityID = 1, page = 1, pageSize = 100, returnDentalScreeningCommentID = True, returnCreatedTime = False, returnDentalCommentID = False, returnDentalScreeningID = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[3,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DentalScreeningComment/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params_list)

def getDentalScreeningComment(DentalScreeningCommentID, EntityID = 1, returnDentalScreeningCommentID = True, returnCreatedTime = False, returnDentalCommentID = False, returnDentalScreeningID = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[2,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DentalScreeningComment/" + str(DentalScreeningCommentID), verb = "get", return_params_list = return_params_list)

def modifyDentalScreeningComment(DentalScreeningCommentID, EntityID = 1, setDentalCommentID = None, setDentalScreeningID = None, setRelationships = None, returnDentalScreeningCommentID = True, returnCreatedTime = False, returnDentalCommentID = False, returnDentalScreeningID = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(), :]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DentalScreeningComment/" + str(DentalScreeningCommentID), verb = "post", return_params_list = return_params_list, payload = payload_params)

def createDentalScreeningComment(EntityID = 1, setDentalCommentID = None, setDentalScreeningID = None, setRelationships = None, returnDentalScreeningCommentID = True, returnCreatedTime = False, returnDentalCommentID = False, returnDentalScreeningID = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params.loc[lambda x: ((x.value & (x.index.to_series().str.contains("return"))) | (~(x.value.isnull()) & (x.index.to_series().str.contains("set")))) & (x.index.to_series() != "EntityID"),:].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(),:]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DentalScreeningComment/", verb = "put", return_params_list = return_params_list, payload = payload_params)

def deleteDentalScreeningComment(DentalScreeningCommentID, EntityID = 1):

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Attendance/AttendancePeriod/" + str(AttendancePeriodID), verb = "delete")

def getEveryDentalScreeningNote(EntityID = 1, page = 1, pageSize = 100, returnDentalScreeningNoteID = True, returnCreatedTime = False, returnDentalScreeningID = False, returnModifiedTime = False, returnNote = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[3,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DentalScreeningNote/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params_list)

def getDentalScreeningNote(DentalScreeningNoteID, EntityID = 1, returnDentalScreeningNoteID = True, returnCreatedTime = False, returnDentalScreeningID = False, returnModifiedTime = False, returnNote = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[2,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DentalScreeningNote/" + str(DentalScreeningNoteID), verb = "get", return_params_list = return_params_list)

def modifyDentalScreeningNote(DentalScreeningNoteID, EntityID = 1, setDentalScreeningID = None, setNote = None, setRelationships = None, returnDentalScreeningNoteID = True, returnCreatedTime = False, returnDentalScreeningID = False, returnModifiedTime = False, returnNote = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(), :]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DentalScreeningNote/" + str(DentalScreeningNoteID), verb = "post", return_params_list = return_params_list, payload = payload_params)

def createDentalScreeningNote(EntityID = 1, setDentalScreeningID = None, setNote = None, setRelationships = None, returnDentalScreeningNoteID = True, returnCreatedTime = False, returnDentalScreeningID = False, returnModifiedTime = False, returnNote = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params.loc[lambda x: ((x.value & (x.index.to_series().str.contains("return"))) | (~(x.value.isnull()) & (x.index.to_series().str.contains("set")))) & (x.index.to_series() != "EntityID"),:].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(),:]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DentalScreeningNote/", verb = "put", return_params_list = return_params_list, payload = payload_params)

def deleteDentalScreeningNote(DentalScreeningNoteID, EntityID = 1):

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Attendance/AttendancePeriod/" + str(AttendancePeriodID), verb = "delete")

def getEveryDentalScreeningReferral(EntityID = 1, page = 1, pageSize = 100, returnDentalScreeningReferralID = True, returnCompletionDate = False, returnCreatedTime = False, returnDentalGuardianNotificationID = False, returnDentalGuardianResponseID = False, returnDentalReferralReasonID = False, returnDentalReferralResultID = False, returnDentalScreeningID = False, returnHealthProfessionalIDReferredBy = False, returnHealthProfessionalIDReferredTo = False, returnModifiedTime = False, returnReferralCompleted = False, returnReferralDate = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[3,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DentalScreeningReferral/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params_list)

def getDentalScreeningReferral(DentalScreeningReferralID, EntityID = 1, returnDentalScreeningReferralID = True, returnCompletionDate = False, returnCreatedTime = False, returnDentalGuardianNotificationID = False, returnDentalGuardianResponseID = False, returnDentalReferralReasonID = False, returnDentalReferralResultID = False, returnDentalScreeningID = False, returnHealthProfessionalIDReferredBy = False, returnHealthProfessionalIDReferredTo = False, returnModifiedTime = False, returnReferralCompleted = False, returnReferralDate = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[2,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DentalScreeningReferral/" + str(DentalScreeningReferralID), verb = "get", return_params_list = return_params_list)

def modifyDentalScreeningReferral(DentalScreeningReferralID, EntityID = 1, setCompletionDate = None, setDentalGuardianNotificationID = None, setDentalGuardianResponseID = None, setDentalReferralReasonID = None, setDentalReferralResultID = None, setDentalScreeningID = None, setHealthProfessionalIDReferredBy = None, setHealthProfessionalIDReferredTo = None, setReferralCompleted = None, setReferralDate = None, setRelationships = None, returnDentalScreeningReferralID = True, returnCompletionDate = False, returnCreatedTime = False, returnDentalGuardianNotificationID = False, returnDentalGuardianResponseID = False, returnDentalReferralReasonID = False, returnDentalReferralResultID = False, returnDentalScreeningID = False, returnHealthProfessionalIDReferredBy = False, returnHealthProfessionalIDReferredTo = False, returnModifiedTime = False, returnReferralCompleted = False, returnReferralDate = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(), :]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DentalScreeningReferral/" + str(DentalScreeningReferralID), verb = "post", return_params_list = return_params_list, payload = payload_params)

def createDentalScreeningReferral(EntityID = 1, setCompletionDate = None, setDentalGuardianNotificationID = None, setDentalGuardianResponseID = None, setDentalReferralReasonID = None, setDentalReferralResultID = None, setDentalScreeningID = None, setHealthProfessionalIDReferredBy = None, setHealthProfessionalIDReferredTo = None, setReferralCompleted = None, setReferralDate = None, setRelationships = None, returnDentalScreeningReferralID = True, returnCompletionDate = False, returnCreatedTime = False, returnDentalGuardianNotificationID = False, returnDentalGuardianResponseID = False, returnDentalReferralReasonID = False, returnDentalReferralResultID = False, returnDentalScreeningID = False, returnHealthProfessionalIDReferredBy = False, returnHealthProfessionalIDReferredTo = False, returnModifiedTime = False, returnReferralCompleted = False, returnReferralDate = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params.loc[lambda x: ((x.value & (x.index.to_series().str.contains("return"))) | (~(x.value.isnull()) & (x.index.to_series().str.contains("set")))) & (x.index.to_series() != "EntityID"),:].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(),:]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DentalScreeningReferral/", verb = "put", return_params_list = return_params_list, payload = payload_params)

def deleteDentalScreeningReferral(DentalScreeningReferralID, EntityID = 1):

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Attendance/AttendancePeriod/" + str(AttendancePeriodID), verb = "delete")

def getEveryDentalScreeningResult(EntityID = 1, page = 1, pageSize = 100, returnDentalScreeningResultID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[3,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DentalScreeningResult/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params_list)

def getDentalScreeningResult(DentalScreeningResultID, EntityID = 1, returnDentalScreeningResultID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[2,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DentalScreeningResult/" + str(DentalScreeningResultID), verb = "get", return_params_list = return_params_list)

def modifyDentalScreeningResult(DentalScreeningResultID, EntityID = 1, setCode = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setRelationships = None, returnDentalScreeningResultID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(), :]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DentalScreeningResult/" + str(DentalScreeningResultID), verb = "post", return_params_list = return_params_list, payload = payload_params)

def createDentalScreeningResult(EntityID = 1, setCode = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setRelationships = None, returnDentalScreeningResultID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params.loc[lambda x: ((x.value & (x.index.to_series().str.contains("return"))) | (~(x.value.isnull()) & (x.index.to_series().str.contains("set")))) & (x.index.to_series() != "EntityID"),:].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(),:]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DentalScreeningResult/", verb = "put", return_params_list = return_params_list, payload = payload_params)

def deleteDentalScreeningResult(DentalScreeningResultID, EntityID = 1):

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Attendance/AttendancePeriod/" + str(AttendancePeriodID), verb = "delete")

def getEveryDentalScreeningSecuredNote(EntityID = 1, page = 1, pageSize = 100, returnDentalScreeningSecuredNoteID = True, returnCreatedTime = False, returnDentalScreeningID = False, returnModifiedTime = False, returnNote = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[3,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DentalScreeningSecuredNote/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params_list)

def getDentalScreeningSecuredNote(DentalScreeningSecuredNoteID, EntityID = 1, returnDentalScreeningSecuredNoteID = True, returnCreatedTime = False, returnDentalScreeningID = False, returnModifiedTime = False, returnNote = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[2,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DentalScreeningSecuredNote/" + str(DentalScreeningSecuredNoteID), verb = "get", return_params_list = return_params_list)

def modifyDentalScreeningSecuredNote(DentalScreeningSecuredNoteID, EntityID = 1, setDentalScreeningID = None, setNote = None, setRelationships = None, returnDentalScreeningSecuredNoteID = True, returnCreatedTime = False, returnDentalScreeningID = False, returnModifiedTime = False, returnNote = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(), :]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DentalScreeningSecuredNote/" + str(DentalScreeningSecuredNoteID), verb = "post", return_params_list = return_params_list, payload = payload_params)

def createDentalScreeningSecuredNote(EntityID = 1, setDentalScreeningID = None, setNote = None, setRelationships = None, returnDentalScreeningSecuredNoteID = True, returnCreatedTime = False, returnDentalScreeningID = False, returnModifiedTime = False, returnNote = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params.loc[lambda x: ((x.value & (x.index.to_series().str.contains("return"))) | (~(x.value.isnull()) & (x.index.to_series().str.contains("set")))) & (x.index.to_series() != "EntityID"),:].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(),:]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DentalScreeningSecuredNote/", verb = "put", return_params_list = return_params_list, payload = payload_params)

def deleteDentalScreeningSecuredNote(DentalScreeningSecuredNoteID, EntityID = 1):

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Attendance/AttendancePeriod/" + str(AttendancePeriodID), verb = "delete")

def getEveryDentalTreatment(EntityID = 1, page = 1, pageSize = 100, returnDentalTreatmentID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[3,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DentalTreatment/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params_list)

def getDentalTreatment(DentalTreatmentID, EntityID = 1, returnDentalTreatmentID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[2,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DentalTreatment/" + str(DentalTreatmentID), verb = "get", return_params_list = return_params_list)

def modifyDentalTreatment(DentalTreatmentID, EntityID = 1, setCode = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setRelationships = None, returnDentalTreatmentID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(), :]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DentalTreatment/" + str(DentalTreatmentID), verb = "post", return_params_list = return_params_list, payload = payload_params)

def createDentalTreatment(EntityID = 1, setCode = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setRelationships = None, returnDentalTreatmentID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params.loc[lambda x: ((x.value & (x.index.to_series().str.contains("return"))) | (~(x.value.isnull()) & (x.index.to_series().str.contains("set")))) & (x.index.to_series() != "EntityID"),:].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(),:]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DentalTreatment/", verb = "put", return_params_list = return_params_list, payload = payload_params)

def deleteDentalTreatment(DentalTreatmentID, EntityID = 1):

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Attendance/AttendancePeriod/" + str(AttendancePeriodID), verb = "delete")

def getEveryDiabetesCareLog(EntityID = 1, page = 1, pageSize = 100, returnDiabetesCareLogID = True, returnBloodGlucose = False, returnBloodGlucoseInsulin = False, returnBloodGlucoseNotChecked = False, returnBodyPartID = False, returnCarbIntake = False, returnCreatedTime = False, returnDiabetesKetoneResultID = False, returnDistrictID = False, returnFoodInsulin = False, returnInsulinDeliveryType = False, returnInsulinDeliveryTypeCode = False, returnInsulinDose = False, returnInsulinOnBoard = False, returnIsVoid = False, returnMedicationDosageUnitID = False, returnModifiedTime = False, returnNameID = False, returnNameOfficeVisitID = False, returnNotificationMethodID = False, returnParentNotified = False, returnRecheckBloodGlucose = False, returnRecheckTime = False, returnSchoolYearID = False, returnScreeningTime = False, returnScreeningTimeDate = False, returnScreeningTimeTime = False, returnTreatmentDescriptionsListDisplay = False, returnTreatments = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnUserIDVoidedBy = False, returnVoidedTime = False, returnVoidNote = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[3,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DiabetesCareLog/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params_list)

def getDiabetesCareLog(DiabetesCareLogID, EntityID = 1, returnDiabetesCareLogID = True, returnBloodGlucose = False, returnBloodGlucoseInsulin = False, returnBloodGlucoseNotChecked = False, returnBodyPartID = False, returnCarbIntake = False, returnCreatedTime = False, returnDiabetesKetoneResultID = False, returnDistrictID = False, returnFoodInsulin = False, returnInsulinDeliveryType = False, returnInsulinDeliveryTypeCode = False, returnInsulinDose = False, returnInsulinOnBoard = False, returnIsVoid = False, returnMedicationDosageUnitID = False, returnModifiedTime = False, returnNameID = False, returnNameOfficeVisitID = False, returnNotificationMethodID = False, returnParentNotified = False, returnRecheckBloodGlucose = False, returnRecheckTime = False, returnSchoolYearID = False, returnScreeningTime = False, returnScreeningTimeDate = False, returnScreeningTimeTime = False, returnTreatmentDescriptionsListDisplay = False, returnTreatments = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnUserIDVoidedBy = False, returnVoidedTime = False, returnVoidNote = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[2,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DiabetesCareLog/" + str(DiabetesCareLogID), verb = "get", return_params_list = return_params_list)

def modifyDiabetesCareLog(DiabetesCareLogID, EntityID = 1, setBloodGlucose = None, setBloodGlucoseInsulin = None, setBloodGlucoseNotChecked = None, setBodyPartID = None, setCarbIntake = None, setDiabetesKetoneResultID = None, setDistrictID = None, setFoodInsulin = None, setInsulinDeliveryType = None, setInsulinDeliveryTypeCode = None, setInsulinDose = None, setInsulinOnBoard = None, setIsVoid = None, setMedicationDosageUnitID = None, setNameID = None, setNameOfficeVisitID = None, setNotificationMethodID = None, setParentNotified = None, setRecheckBloodGlucose = None, setRecheckTime = None, setSchoolYearID = None, setScreeningTime = None, setScreeningTimeDate = None, setScreeningTimeTime = None, setUserIDVoidedBy = None, setVoidedTime = None, setVoidNote = None, setRelationships = None, returnDiabetesCareLogID = True, returnBloodGlucose = False, returnBloodGlucoseInsulin = False, returnBloodGlucoseNotChecked = False, returnBodyPartID = False, returnCarbIntake = False, returnCreatedTime = False, returnDiabetesKetoneResultID = False, returnDistrictID = False, returnFoodInsulin = False, returnInsulinDeliveryType = False, returnInsulinDeliveryTypeCode = False, returnInsulinDose = False, returnInsulinOnBoard = False, returnIsVoid = False, returnMedicationDosageUnitID = False, returnModifiedTime = False, returnNameID = False, returnNameOfficeVisitID = False, returnNotificationMethodID = False, returnParentNotified = False, returnRecheckBloodGlucose = False, returnRecheckTime = False, returnSchoolYearID = False, returnScreeningTime = False, returnScreeningTimeDate = False, returnScreeningTimeTime = False, returnTreatmentDescriptionsListDisplay = False, returnTreatments = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnUserIDVoidedBy = False, returnVoidedTime = False, returnVoidNote = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(), :]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DiabetesCareLog/" + str(DiabetesCareLogID), verb = "post", return_params_list = return_params_list, payload = payload_params)

def createDiabetesCareLog(EntityID = 1, setBloodGlucose = None, setBloodGlucoseInsulin = None, setBloodGlucoseNotChecked = None, setBodyPartID = None, setCarbIntake = None, setDiabetesKetoneResultID = None, setDistrictID = None, setFoodInsulin = None, setInsulinDeliveryType = None, setInsulinDeliveryTypeCode = None, setInsulinDose = None, setInsulinOnBoard = None, setIsVoid = None, setMedicationDosageUnitID = None, setNameID = None, setNameOfficeVisitID = None, setNotificationMethodID = None, setParentNotified = None, setRecheckBloodGlucose = None, setRecheckTime = None, setSchoolYearID = None, setScreeningTime = None, setScreeningTimeDate = None, setScreeningTimeTime = None, setUserIDVoidedBy = None, setVoidedTime = None, setVoidNote = None, setRelationships = None, returnDiabetesCareLogID = True, returnBloodGlucose = False, returnBloodGlucoseInsulin = False, returnBloodGlucoseNotChecked = False, returnBodyPartID = False, returnCarbIntake = False, returnCreatedTime = False, returnDiabetesKetoneResultID = False, returnDistrictID = False, returnFoodInsulin = False, returnInsulinDeliveryType = False, returnInsulinDeliveryTypeCode = False, returnInsulinDose = False, returnInsulinOnBoard = False, returnIsVoid = False, returnMedicationDosageUnitID = False, returnModifiedTime = False, returnNameID = False, returnNameOfficeVisitID = False, returnNotificationMethodID = False, returnParentNotified = False, returnRecheckBloodGlucose = False, returnRecheckTime = False, returnSchoolYearID = False, returnScreeningTime = False, returnScreeningTimeDate = False, returnScreeningTimeTime = False, returnTreatmentDescriptionsListDisplay = False, returnTreatments = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnUserIDVoidedBy = False, returnVoidedTime = False, returnVoidNote = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params.loc[lambda x: ((x.value & (x.index.to_series().str.contains("return"))) | (~(x.value.isnull()) & (x.index.to_series().str.contains("set")))) & (x.index.to_series() != "EntityID"),:].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(),:]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DiabetesCareLog/", verb = "put", return_params_list = return_params_list, payload = payload_params)

def deleteDiabetesCareLog(DiabetesCareLogID, EntityID = 1):

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Attendance/AttendancePeriod/" + str(AttendancePeriodID), verb = "delete")

def getEveryDiabetesCareLogNote(EntityID = 1, page = 1, pageSize = 100, returnDiabetesCareLogNoteID = True, returnCreatedTime = False, returnDiabetesCareLogID = False, returnModifiedTime = False, returnNote = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[3,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DiabetesCareLogNote/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params_list)

def getDiabetesCareLogNote(DiabetesCareLogNoteID, EntityID = 1, returnDiabetesCareLogNoteID = True, returnCreatedTime = False, returnDiabetesCareLogID = False, returnModifiedTime = False, returnNote = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[2,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DiabetesCareLogNote/" + str(DiabetesCareLogNoteID), verb = "get", return_params_list = return_params_list)

def modifyDiabetesCareLogNote(DiabetesCareLogNoteID, EntityID = 1, setDiabetesCareLogID = None, setNote = None, setRelationships = None, returnDiabetesCareLogNoteID = True, returnCreatedTime = False, returnDiabetesCareLogID = False, returnModifiedTime = False, returnNote = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(), :]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DiabetesCareLogNote/" + str(DiabetesCareLogNoteID), verb = "post", return_params_list = return_params_list, payload = payload_params)

def createDiabetesCareLogNote(EntityID = 1, setDiabetesCareLogID = None, setNote = None, setRelationships = None, returnDiabetesCareLogNoteID = True, returnCreatedTime = False, returnDiabetesCareLogID = False, returnModifiedTime = False, returnNote = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params.loc[lambda x: ((x.value & (x.index.to_series().str.contains("return"))) | (~(x.value.isnull()) & (x.index.to_series().str.contains("set")))) & (x.index.to_series() != "EntityID"),:].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(),:]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DiabetesCareLogNote/", verb = "put", return_params_list = return_params_list, payload = payload_params)

def deleteDiabetesCareLogNote(DiabetesCareLogNoteID, EntityID = 1):

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Attendance/AttendancePeriod/" + str(AttendancePeriodID), verb = "delete")

def getEveryDiabetesCareLogReferral(EntityID = 1, page = 1, pageSize = 100, returnDiabetesCareLogReferralID = True, returnCompletionDate = False, returnCreatedTime = False, returnDiabetesCareLogID = False, returnDiabetesGuardianNotificationID = False, returnDiabetesGuardianResponseID = False, returnDiabetesReferralReasonID = False, returnDiabetesReferralResultID = False, returnHealthProfessionalIDReferredBy = False, returnHealthProfessionalIDReferredTo = False, returnModifiedTime = False, returnReferralCompleted = False, returnReferralDate = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[3,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DiabetesCareLogReferral/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params_list)

def getDiabetesCareLogReferral(DiabetesCareLogReferralID, EntityID = 1, returnDiabetesCareLogReferralID = True, returnCompletionDate = False, returnCreatedTime = False, returnDiabetesCareLogID = False, returnDiabetesGuardianNotificationID = False, returnDiabetesGuardianResponseID = False, returnDiabetesReferralReasonID = False, returnDiabetesReferralResultID = False, returnHealthProfessionalIDReferredBy = False, returnHealthProfessionalIDReferredTo = False, returnModifiedTime = False, returnReferralCompleted = False, returnReferralDate = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[2,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DiabetesCareLogReferral/" + str(DiabetesCareLogReferralID), verb = "get", return_params_list = return_params_list)

def modifyDiabetesCareLogReferral(DiabetesCareLogReferralID, EntityID = 1, setCompletionDate = None, setDiabetesCareLogID = None, setDiabetesGuardianNotificationID = None, setDiabetesGuardianResponseID = None, setDiabetesReferralReasonID = None, setDiabetesReferralResultID = None, setHealthProfessionalIDReferredBy = None, setHealthProfessionalIDReferredTo = None, setReferralCompleted = None, setReferralDate = None, setRelationships = None, returnDiabetesCareLogReferralID = True, returnCompletionDate = False, returnCreatedTime = False, returnDiabetesCareLogID = False, returnDiabetesGuardianNotificationID = False, returnDiabetesGuardianResponseID = False, returnDiabetesReferralReasonID = False, returnDiabetesReferralResultID = False, returnHealthProfessionalIDReferredBy = False, returnHealthProfessionalIDReferredTo = False, returnModifiedTime = False, returnReferralCompleted = False, returnReferralDate = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(), :]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DiabetesCareLogReferral/" + str(DiabetesCareLogReferralID), verb = "post", return_params_list = return_params_list, payload = payload_params)

def createDiabetesCareLogReferral(EntityID = 1, setCompletionDate = None, setDiabetesCareLogID = None, setDiabetesGuardianNotificationID = None, setDiabetesGuardianResponseID = None, setDiabetesReferralReasonID = None, setDiabetesReferralResultID = None, setHealthProfessionalIDReferredBy = None, setHealthProfessionalIDReferredTo = None, setReferralCompleted = None, setReferralDate = None, setRelationships = None, returnDiabetesCareLogReferralID = True, returnCompletionDate = False, returnCreatedTime = False, returnDiabetesCareLogID = False, returnDiabetesGuardianNotificationID = False, returnDiabetesGuardianResponseID = False, returnDiabetesReferralReasonID = False, returnDiabetesReferralResultID = False, returnHealthProfessionalIDReferredBy = False, returnHealthProfessionalIDReferredTo = False, returnModifiedTime = False, returnReferralCompleted = False, returnReferralDate = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params.loc[lambda x: ((x.value & (x.index.to_series().str.contains("return"))) | (~(x.value.isnull()) & (x.index.to_series().str.contains("set")))) & (x.index.to_series() != "EntityID"),:].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(),:]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DiabetesCareLogReferral/", verb = "put", return_params_list = return_params_list, payload = payload_params)

def deleteDiabetesCareLogReferral(DiabetesCareLogReferralID, EntityID = 1):

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Attendance/AttendancePeriod/" + str(AttendancePeriodID), verb = "delete")

def getEveryDiabetesCareLogSecuredNote(EntityID = 1, page = 1, pageSize = 100, returnDiabetesCareLogSecuredNoteID = True, returnCreatedTime = False, returnDiabetesCareLogID = False, returnModifiedTime = False, returnNote = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[3,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DiabetesCareLogSecuredNote/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params_list)

def getDiabetesCareLogSecuredNote(DiabetesCareLogSecuredNoteID, EntityID = 1, returnDiabetesCareLogSecuredNoteID = True, returnCreatedTime = False, returnDiabetesCareLogID = False, returnModifiedTime = False, returnNote = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[2,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DiabetesCareLogSecuredNote/" + str(DiabetesCareLogSecuredNoteID), verb = "get", return_params_list = return_params_list)

def modifyDiabetesCareLogSecuredNote(DiabetesCareLogSecuredNoteID, EntityID = 1, setDiabetesCareLogID = None, setNote = None, setRelationships = None, returnDiabetesCareLogSecuredNoteID = True, returnCreatedTime = False, returnDiabetesCareLogID = False, returnModifiedTime = False, returnNote = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(), :]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DiabetesCareLogSecuredNote/" + str(DiabetesCareLogSecuredNoteID), verb = "post", return_params_list = return_params_list, payload = payload_params)

def createDiabetesCareLogSecuredNote(EntityID = 1, setDiabetesCareLogID = None, setNote = None, setRelationships = None, returnDiabetesCareLogSecuredNoteID = True, returnCreatedTime = False, returnDiabetesCareLogID = False, returnModifiedTime = False, returnNote = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params.loc[lambda x: ((x.value & (x.index.to_series().str.contains("return"))) | (~(x.value.isnull()) & (x.index.to_series().str.contains("set")))) & (x.index.to_series() != "EntityID"),:].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(),:]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DiabetesCareLogSecuredNote/", verb = "put", return_params_list = return_params_list, payload = payload_params)

def deleteDiabetesCareLogSecuredNote(DiabetesCareLogSecuredNoteID, EntityID = 1):

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Attendance/AttendancePeriod/" + str(AttendancePeriodID), verb = "delete")

def getEveryDiabetesCareLogTreatment(EntityID = 1, page = 1, pageSize = 100, returnDiabetesCareLogTreatmentID = True, returnCreatedTime = False, returnDiabetesCareLogID = False, returnDiabetesTreatmentID = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[3,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DiabetesCareLogTreatment/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params_list)

def getDiabetesCareLogTreatment(DiabetesCareLogTreatmentID, EntityID = 1, returnDiabetesCareLogTreatmentID = True, returnCreatedTime = False, returnDiabetesCareLogID = False, returnDiabetesTreatmentID = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[2,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DiabetesCareLogTreatment/" + str(DiabetesCareLogTreatmentID), verb = "get", return_params_list = return_params_list)

def modifyDiabetesCareLogTreatment(DiabetesCareLogTreatmentID, EntityID = 1, setDiabetesCareLogID = None, setDiabetesTreatmentID = None, setRelationships = None, returnDiabetesCareLogTreatmentID = True, returnCreatedTime = False, returnDiabetesCareLogID = False, returnDiabetesTreatmentID = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(), :]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DiabetesCareLogTreatment/" + str(DiabetesCareLogTreatmentID), verb = "post", return_params_list = return_params_list, payload = payload_params)

def createDiabetesCareLogTreatment(EntityID = 1, setDiabetesCareLogID = None, setDiabetesTreatmentID = None, setRelationships = None, returnDiabetesCareLogTreatmentID = True, returnCreatedTime = False, returnDiabetesCareLogID = False, returnDiabetesTreatmentID = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params.loc[lambda x: ((x.value & (x.index.to_series().str.contains("return"))) | (~(x.value.isnull()) & (x.index.to_series().str.contains("set")))) & (x.index.to_series() != "EntityID"),:].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(),:]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DiabetesCareLogTreatment/", verb = "put", return_params_list = return_params_list, payload = payload_params)

def deleteDiabetesCareLogTreatment(DiabetesCareLogTreatmentID, EntityID = 1):

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Attendance/AttendancePeriod/" + str(AttendancePeriodID), verb = "delete")

def getEveryDiabetesGuardianNotification(EntityID = 1, page = 1, pageSize = 100, returnDiabetesGuardianNotificationID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[3,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DiabetesGuardianNotification/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params_list)

def getDiabetesGuardianNotification(DiabetesGuardianNotificationID, EntityID = 1, returnDiabetesGuardianNotificationID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[2,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DiabetesGuardianNotification/" + str(DiabetesGuardianNotificationID), verb = "get", return_params_list = return_params_list)

def modifyDiabetesGuardianNotification(DiabetesGuardianNotificationID, EntityID = 1, setCode = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setRelationships = None, returnDiabetesGuardianNotificationID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(), :]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DiabetesGuardianNotification/" + str(DiabetesGuardianNotificationID), verb = "post", return_params_list = return_params_list, payload = payload_params)

def createDiabetesGuardianNotification(EntityID = 1, setCode = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setRelationships = None, returnDiabetesGuardianNotificationID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params.loc[lambda x: ((x.value & (x.index.to_series().str.contains("return"))) | (~(x.value.isnull()) & (x.index.to_series().str.contains("set")))) & (x.index.to_series() != "EntityID"),:].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(),:]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DiabetesGuardianNotification/", verb = "put", return_params_list = return_params_list, payload = payload_params)

def deleteDiabetesGuardianNotification(DiabetesGuardianNotificationID, EntityID = 1):

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Attendance/AttendancePeriod/" + str(AttendancePeriodID), verb = "delete")

def getEveryDiabetesGuardianResponse(EntityID = 1, page = 1, pageSize = 100, returnDiabetesGuardianResponseID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[3,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DiabetesGuardianResponse/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params_list)

def getDiabetesGuardianResponse(DiabetesGuardianResponseID, EntityID = 1, returnDiabetesGuardianResponseID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[2,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DiabetesGuardianResponse/" + str(DiabetesGuardianResponseID), verb = "get", return_params_list = return_params_list)

def modifyDiabetesGuardianResponse(DiabetesGuardianResponseID, EntityID = 1, setCode = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setRelationships = None, returnDiabetesGuardianResponseID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(), :]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DiabetesGuardianResponse/" + str(DiabetesGuardianResponseID), verb = "post", return_params_list = return_params_list, payload = payload_params)

def createDiabetesGuardianResponse(EntityID = 1, setCode = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setRelationships = None, returnDiabetesGuardianResponseID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params.loc[lambda x: ((x.value & (x.index.to_series().str.contains("return"))) | (~(x.value.isnull()) & (x.index.to_series().str.contains("set")))) & (x.index.to_series() != "EntityID"),:].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(),:]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DiabetesGuardianResponse/", verb = "put", return_params_list = return_params_list, payload = payload_params)

def deleteDiabetesGuardianResponse(DiabetesGuardianResponseID, EntityID = 1):

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Attendance/AttendancePeriod/" + str(AttendancePeriodID), verb = "delete")

def getEveryDiabetesKetoneResult(EntityID = 1, page = 1, pageSize = 100, returnDiabetesKetoneResultID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[3,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DiabetesKetoneResult/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params_list)

def getDiabetesKetoneResult(DiabetesKetoneResultID, EntityID = 1, returnDiabetesKetoneResultID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[2,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DiabetesKetoneResult/" + str(DiabetesKetoneResultID), verb = "get", return_params_list = return_params_list)

def modifyDiabetesKetoneResult(DiabetesKetoneResultID, EntityID = 1, setCode = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setRelationships = None, returnDiabetesKetoneResultID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(), :]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DiabetesKetoneResult/" + str(DiabetesKetoneResultID), verb = "post", return_params_list = return_params_list, payload = payload_params)

def createDiabetesKetoneResult(EntityID = 1, setCode = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setRelationships = None, returnDiabetesKetoneResultID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params.loc[lambda x: ((x.value & (x.index.to_series().str.contains("return"))) | (~(x.value.isnull()) & (x.index.to_series().str.contains("set")))) & (x.index.to_series() != "EntityID"),:].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(),:]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DiabetesKetoneResult/", verb = "put", return_params_list = return_params_list, payload = payload_params)

def deleteDiabetesKetoneResult(DiabetesKetoneResultID, EntityID = 1):

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Attendance/AttendancePeriod/" + str(AttendancePeriodID), verb = "delete")

def getEveryDiabetesReferralReason(EntityID = 1, page = 1, pageSize = 100, returnDiabetesReferralReasonID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[3,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DiabetesReferralReason/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params_list)

def getDiabetesReferralReason(DiabetesReferralReasonID, EntityID = 1, returnDiabetesReferralReasonID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[2,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DiabetesReferralReason/" + str(DiabetesReferralReasonID), verb = "get", return_params_list = return_params_list)

def modifyDiabetesReferralReason(DiabetesReferralReasonID, EntityID = 1, setCode = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setRelationships = None, returnDiabetesReferralReasonID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(), :]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DiabetesReferralReason/" + str(DiabetesReferralReasonID), verb = "post", return_params_list = return_params_list, payload = payload_params)

def createDiabetesReferralReason(EntityID = 1, setCode = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setRelationships = None, returnDiabetesReferralReasonID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params.loc[lambda x: ((x.value & (x.index.to_series().str.contains("return"))) | (~(x.value.isnull()) & (x.index.to_series().str.contains("set")))) & (x.index.to_series() != "EntityID"),:].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(),:]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DiabetesReferralReason/", verb = "put", return_params_list = return_params_list, payload = payload_params)

def deleteDiabetesReferralReason(DiabetesReferralReasonID, EntityID = 1):

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Attendance/AttendancePeriod/" + str(AttendancePeriodID), verb = "delete")

def getEveryDiabetesReferralResult(EntityID = 1, page = 1, pageSize = 100, returnDiabetesReferralResultID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[3,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DiabetesReferralResult/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params_list)

def getDiabetesReferralResult(DiabetesReferralResultID, EntityID = 1, returnDiabetesReferralResultID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[2,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DiabetesReferralResult/" + str(DiabetesReferralResultID), verb = "get", return_params_list = return_params_list)

def modifyDiabetesReferralResult(DiabetesReferralResultID, EntityID = 1, setCode = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setRelationships = None, returnDiabetesReferralResultID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(), :]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DiabetesReferralResult/" + str(DiabetesReferralResultID), verb = "post", return_params_list = return_params_list, payload = payload_params)

def createDiabetesReferralResult(EntityID = 1, setCode = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setRelationships = None, returnDiabetesReferralResultID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params.loc[lambda x: ((x.value & (x.index.to_series().str.contains("return"))) | (~(x.value.isnull()) & (x.index.to_series().str.contains("set")))) & (x.index.to_series() != "EntityID"),:].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(),:]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DiabetesReferralResult/", verb = "put", return_params_list = return_params_list, payload = payload_params)

def deleteDiabetesReferralResult(DiabetesReferralResultID, EntityID = 1):

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Attendance/AttendancePeriod/" + str(AttendancePeriodID), verb = "delete")

def getEveryDiabetesTreatment(EntityID = 1, page = 1, pageSize = 100, returnDiabetesTreatmentID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[3,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DiabetesTreatment/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params_list)

def getDiabetesTreatment(DiabetesTreatmentID, EntityID = 1, returnDiabetesTreatmentID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[2,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DiabetesTreatment/" + str(DiabetesTreatmentID), verb = "get", return_params_list = return_params_list)

def modifyDiabetesTreatment(DiabetesTreatmentID, EntityID = 1, setCode = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setRelationships = None, returnDiabetesTreatmentID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(), :]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DiabetesTreatment/" + str(DiabetesTreatmentID), verb = "post", return_params_list = return_params_list, payload = payload_params)

def createDiabetesTreatment(EntityID = 1, setCode = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setRelationships = None, returnDiabetesTreatmentID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params.loc[lambda x: ((x.value & (x.index.to_series().str.contains("return"))) | (~(x.value.isnull()) & (x.index.to_series().str.contains("set")))) & (x.index.to_series() != "EntityID"),:].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(),:]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DiabetesTreatment/", verb = "put", return_params_list = return_params_list, payload = payload_params)

def deleteDiabetesTreatment(DiabetesTreatmentID, EntityID = 1):

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Attendance/AttendancePeriod/" + str(AttendancePeriodID), verb = "delete")

def getEveryDoseInterval(EntityID = 1, page = 1, pageSize = 100, returnDoseIntervalID = True, returnAgeHighMonths = False, returnAgeLowMonths = False, returnComplianceScheduleDetailID = False, returnCreatedTime = False, returnDoseHigh = False, returnDoseIntervalIDClonedFrom = False, returnDoseLow = False, returnGracePeriodDays = False, returnIntervalType = False, returnIntervalTypeCode = False, returnIntervalValue = False, returnIsConditionalInterval = False, returnIsDistrictDefined = False, returnIsRequired = False, returnModifiedTime = False, returnSkywardHash = False, returnSkywardID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnVaccineDateHigh = False, returnVaccineDateLow = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[3,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DoseInterval/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params_list)

def getDoseInterval(DoseIntervalID, EntityID = 1, returnDoseIntervalID = True, returnAgeHighMonths = False, returnAgeLowMonths = False, returnComplianceScheduleDetailID = False, returnCreatedTime = False, returnDoseHigh = False, returnDoseIntervalIDClonedFrom = False, returnDoseLow = False, returnGracePeriodDays = False, returnIntervalType = False, returnIntervalTypeCode = False, returnIntervalValue = False, returnIsConditionalInterval = False, returnIsDistrictDefined = False, returnIsRequired = False, returnModifiedTime = False, returnSkywardHash = False, returnSkywardID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnVaccineDateHigh = False, returnVaccineDateLow = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[2,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DoseInterval/" + str(DoseIntervalID), verb = "get", return_params_list = return_params_list)

def modifyDoseInterval(DoseIntervalID, EntityID = 1, setAgeHighMonths = None, setAgeLowMonths = None, setComplianceScheduleDetailID = None, setDoseHigh = None, setDoseIntervalIDClonedFrom = None, setDoseLow = None, setGracePeriodDays = None, setIntervalType = None, setIntervalTypeCode = None, setIntervalValue = None, setIsRequired = None, setSkywardHash = None, setSkywardID = None, setVaccineDateHigh = None, setVaccineDateLow = None, setRelationships = None, returnDoseIntervalID = True, returnAgeHighMonths = False, returnAgeLowMonths = False, returnComplianceScheduleDetailID = False, returnCreatedTime = False, returnDoseHigh = False, returnDoseIntervalIDClonedFrom = False, returnDoseLow = False, returnGracePeriodDays = False, returnIntervalType = False, returnIntervalTypeCode = False, returnIntervalValue = False, returnIsConditionalInterval = False, returnIsDistrictDefined = False, returnIsRequired = False, returnModifiedTime = False, returnSkywardHash = False, returnSkywardID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnVaccineDateHigh = False, returnVaccineDateLow = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(), :]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DoseInterval/" + str(DoseIntervalID), verb = "post", return_params_list = return_params_list, payload = payload_params)

def createDoseInterval(EntityID = 1, setAgeHighMonths = None, setAgeLowMonths = None, setComplianceScheduleDetailID = None, setDoseHigh = None, setDoseIntervalIDClonedFrom = None, setDoseLow = None, setGracePeriodDays = None, setIntervalType = None, setIntervalTypeCode = None, setIntervalValue = None, setIsRequired = None, setSkywardHash = None, setSkywardID = None, setVaccineDateHigh = None, setVaccineDateLow = None, setRelationships = None, returnDoseIntervalID = True, returnAgeHighMonths = False, returnAgeLowMonths = False, returnComplianceScheduleDetailID = False, returnCreatedTime = False, returnDoseHigh = False, returnDoseIntervalIDClonedFrom = False, returnDoseLow = False, returnGracePeriodDays = False, returnIntervalType = False, returnIntervalTypeCode = False, returnIntervalValue = False, returnIsConditionalInterval = False, returnIsDistrictDefined = False, returnIsRequired = False, returnModifiedTime = False, returnSkywardHash = False, returnSkywardID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnVaccineDateHigh = False, returnVaccineDateLow = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params.loc[lambda x: ((x.value & (x.index.to_series().str.contains("return"))) | (~(x.value.isnull()) & (x.index.to_series().str.contains("set")))) & (x.index.to_series() != "EntityID"),:].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(),:]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DoseInterval/", verb = "put", return_params_list = return_params_list, payload = payload_params)

def deleteDoseInterval(DoseIntervalID, EntityID = 1):

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Attendance/AttendancePeriod/" + str(AttendancePeriodID), verb = "delete")

def getEveryDoseMinimumAge(EntityID = 1, page = 1, pageSize = 100, returnDoseMinimumAgeID = True, returnAge = False, returnAgeUnitType = False, returnAgeUnitTypeCode = False, returnComplianceScheduleDetailID = False, returnCreatedTime = False, returnDoseMinimumAgeIDClonedFrom = False, returnDoseNumber = False, returnGracePeriodType = False, returnGracePeriodTypeCode = False, returnGraceValue = False, returnIsDistrictDefined = False, returnIsRequired = False, returnModifiedTime = False, returnSkywardHash = False, returnSkywardID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnVaccineDateHigh = False, returnVaccineDateLow = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[3,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DoseMinimumAge/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params_list)

def getDoseMinimumAge(DoseMinimumAgeID, EntityID = 1, returnDoseMinimumAgeID = True, returnAge = False, returnAgeUnitType = False, returnAgeUnitTypeCode = False, returnComplianceScheduleDetailID = False, returnCreatedTime = False, returnDoseMinimumAgeIDClonedFrom = False, returnDoseNumber = False, returnGracePeriodType = False, returnGracePeriodTypeCode = False, returnGraceValue = False, returnIsDistrictDefined = False, returnIsRequired = False, returnModifiedTime = False, returnSkywardHash = False, returnSkywardID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnVaccineDateHigh = False, returnVaccineDateLow = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[2,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DoseMinimumAge/" + str(DoseMinimumAgeID), verb = "get", return_params_list = return_params_list)

def modifyDoseMinimumAge(DoseMinimumAgeID, EntityID = 1, setAge = None, setAgeUnitType = None, setAgeUnitTypeCode = None, setComplianceScheduleDetailID = None, setDoseMinimumAgeIDClonedFrom = None, setDoseNumber = None, setGracePeriodType = None, setGracePeriodTypeCode = None, setGraceValue = None, setIsRequired = None, setSkywardHash = None, setSkywardID = None, setVaccineDateHigh = None, setVaccineDateLow = None, setRelationships = None, returnDoseMinimumAgeID = True, returnAge = False, returnAgeUnitType = False, returnAgeUnitTypeCode = False, returnComplianceScheduleDetailID = False, returnCreatedTime = False, returnDoseMinimumAgeIDClonedFrom = False, returnDoseNumber = False, returnGracePeriodType = False, returnGracePeriodTypeCode = False, returnGraceValue = False, returnIsDistrictDefined = False, returnIsRequired = False, returnModifiedTime = False, returnSkywardHash = False, returnSkywardID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnVaccineDateHigh = False, returnVaccineDateLow = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(), :]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DoseMinimumAge/" + str(DoseMinimumAgeID), verb = "post", return_params_list = return_params_list, payload = payload_params)

def createDoseMinimumAge(EntityID = 1, setAge = None, setAgeUnitType = None, setAgeUnitTypeCode = None, setComplianceScheduleDetailID = None, setDoseMinimumAgeIDClonedFrom = None, setDoseNumber = None, setGracePeriodType = None, setGracePeriodTypeCode = None, setGraceValue = None, setIsRequired = None, setSkywardHash = None, setSkywardID = None, setVaccineDateHigh = None, setVaccineDateLow = None, setRelationships = None, returnDoseMinimumAgeID = True, returnAge = False, returnAgeUnitType = False, returnAgeUnitTypeCode = False, returnComplianceScheduleDetailID = False, returnCreatedTime = False, returnDoseMinimumAgeIDClonedFrom = False, returnDoseNumber = False, returnGracePeriodType = False, returnGracePeriodTypeCode = False, returnGraceValue = False, returnIsDistrictDefined = False, returnIsRequired = False, returnModifiedTime = False, returnSkywardHash = False, returnSkywardID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnVaccineDateHigh = False, returnVaccineDateLow = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params.loc[lambda x: ((x.value & (x.index.to_series().str.contains("return"))) | (~(x.value.isnull()) & (x.index.to_series().str.contains("set")))) & (x.index.to_series() != "EntityID"),:].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(),:]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/DoseMinimumAge/", verb = "put", return_params_list = return_params_list, payload = payload_params)

def deleteDoseMinimumAge(DoseMinimumAgeID, EntityID = 1):

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Attendance/AttendancePeriod/" + str(AttendancePeriodID), verb = "delete")

def getEveryHealthAttachment(EntityID = 1, page = 1, pageSize = 100, returnHealthAttachmentID = True, returnAttachmentCount = False, returnAttachmentIndicatorColumn = False, returnCreatedTime = False, returnDescription = False, returnIsVoid = False, returnModifiedTime = False, returnNameID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnUserIDVoidedBy = False, returnVoidedTime = False, returnVoidNote = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[3,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HealthAttachment/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params_list)

def getHealthAttachment(HealthAttachmentID, EntityID = 1, returnHealthAttachmentID = True, returnAttachmentCount = False, returnAttachmentIndicatorColumn = False, returnCreatedTime = False, returnDescription = False, returnIsVoid = False, returnModifiedTime = False, returnNameID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnUserIDVoidedBy = False, returnVoidedTime = False, returnVoidNote = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[2,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HealthAttachment/" + str(HealthAttachmentID), verb = "get", return_params_list = return_params_list)

def modifyHealthAttachment(HealthAttachmentID, EntityID = 1, setDescription = None, setIsVoid = None, setNameID = None, setUserIDVoidedBy = None, setVoidedTime = None, setVoidNote = None, setRelationships = None, returnHealthAttachmentID = True, returnAttachmentCount = False, returnAttachmentIndicatorColumn = False, returnCreatedTime = False, returnDescription = False, returnIsVoid = False, returnModifiedTime = False, returnNameID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnUserIDVoidedBy = False, returnVoidedTime = False, returnVoidNote = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(), :]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HealthAttachment/" + str(HealthAttachmentID), verb = "post", return_params_list = return_params_list, payload = payload_params)

def createHealthAttachment(EntityID = 1, setDescription = None, setIsVoid = None, setNameID = None, setUserIDVoidedBy = None, setVoidedTime = None, setVoidNote = None, setRelationships = None, returnHealthAttachmentID = True, returnAttachmentCount = False, returnAttachmentIndicatorColumn = False, returnCreatedTime = False, returnDescription = False, returnIsVoid = False, returnModifiedTime = False, returnNameID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnUserIDVoidedBy = False, returnVoidedTime = False, returnVoidNote = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params.loc[lambda x: ((x.value & (x.index.to_series().str.contains("return"))) | (~(x.value.isnull()) & (x.index.to_series().str.contains("set")))) & (x.index.to_series() != "EntityID"),:].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(),:]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HealthAttachment/", verb = "put", return_params_list = return_params_list, payload = payload_params)

def deleteHealthAttachment(HealthAttachmentID, EntityID = 1):

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Attendance/AttendancePeriod/" + str(AttendancePeriodID), verb = "delete")

def getEveryHealthCondition(EntityID = 1, page = 1, pageSize = 100, returnHealthConditionID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnIsSecuredIndicator = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnVaccinationGroupContraindication = False, returnVaccinationGroupContraindicationCode = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[3,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HealthCondition/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params_list)

def getHealthCondition(HealthConditionID, EntityID = 1, returnHealthConditionID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnIsSecuredIndicator = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnVaccinationGroupContraindication = False, returnVaccinationGroupContraindicationCode = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[2,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HealthCondition/" + str(HealthConditionID), verb = "get", return_params_list = return_params_list)

def modifyHealthCondition(HealthConditionID, EntityID = 1, setCode = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setIsSecuredIndicator = None, setVaccinationGroupContraindication = None, setVaccinationGroupContraindicationCode = None, setRelationships = None, returnHealthConditionID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnIsSecuredIndicator = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnVaccinationGroupContraindication = False, returnVaccinationGroupContraindicationCode = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(), :]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HealthCondition/" + str(HealthConditionID), verb = "post", return_params_list = return_params_list, payload = payload_params)

def createHealthCondition(EntityID = 1, setCode = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setIsSecuredIndicator = None, setVaccinationGroupContraindication = None, setVaccinationGroupContraindicationCode = None, setRelationships = None, returnHealthConditionID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnIsSecuredIndicator = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnVaccinationGroupContraindication = False, returnVaccinationGroupContraindicationCode = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params.loc[lambda x: ((x.value & (x.index.to_series().str.contains("return"))) | (~(x.value.isnull()) & (x.index.to_series().str.contains("set")))) & (x.index.to_series() != "EntityID"),:].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(),:]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HealthCondition/", verb = "put", return_params_list = return_params_list, payload = payload_params)

def deleteHealthCondition(HealthConditionID, EntityID = 1):

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Attendance/AttendancePeriod/" + str(AttendancePeriodID), verb = "delete")

def getEveryHealthConditionComment(EntityID = 1, page = 1, pageSize = 100, returnHealthConditionCommentID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[3,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HealthConditionComment/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params_list)

def getHealthConditionComment(HealthConditionCommentID, EntityID = 1, returnHealthConditionCommentID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[2,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HealthConditionComment/" + str(HealthConditionCommentID), verb = "get", return_params_list = return_params_list)

def modifyHealthConditionComment(HealthConditionCommentID, EntityID = 1, setCode = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setRelationships = None, returnHealthConditionCommentID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(), :]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HealthConditionComment/" + str(HealthConditionCommentID), verb = "post", return_params_list = return_params_list, payload = payload_params)

def createHealthConditionComment(EntityID = 1, setCode = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setRelationships = None, returnHealthConditionCommentID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params.loc[lambda x: ((x.value & (x.index.to_series().str.contains("return"))) | (~(x.value.isnull()) & (x.index.to_series().str.contains("set")))) & (x.index.to_series() != "EntityID"),:].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(),:]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HealthConditionComment/", verb = "put", return_params_list = return_params_list, payload = payload_params)

def deleteHealthConditionComment(HealthConditionCommentID, EntityID = 1):

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Attendance/AttendancePeriod/" + str(AttendancePeriodID), verb = "delete")

def getEveryHealthConditionTreatment(EntityID = 1, page = 1, pageSize = 100, returnHealthConditionTreatmentID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[3,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HealthConditionTreatment/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params_list)

def getHealthConditionTreatment(HealthConditionTreatmentID, EntityID = 1, returnHealthConditionTreatmentID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[2,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HealthConditionTreatment/" + str(HealthConditionTreatmentID), verb = "get", return_params_list = return_params_list)

def modifyHealthConditionTreatment(HealthConditionTreatmentID, EntityID = 1, setCode = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setRelationships = None, returnHealthConditionTreatmentID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(), :]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HealthConditionTreatment/" + str(HealthConditionTreatmentID), verb = "post", return_params_list = return_params_list, payload = payload_params)

def createHealthConditionTreatment(EntityID = 1, setCode = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setRelationships = None, returnHealthConditionTreatmentID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params.loc[lambda x: ((x.value & (x.index.to_series().str.contains("return"))) | (~(x.value.isnull()) & (x.index.to_series().str.contains("set")))) & (x.index.to_series() != "EntityID"),:].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(),:]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HealthConditionTreatment/", verb = "put", return_params_list = return_params_list, payload = payload_params)

def deleteHealthConditionTreatment(HealthConditionTreatmentID, EntityID = 1):

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Attendance/AttendancePeriod/" + str(AttendancePeriodID), verb = "delete")

def getEveryHealthProfessional(EntityID = 1, page = 1, pageSize = 100, returnHealthProfessionalID = True, returnCreatedTime = False, returnDistrictGroupKey = False, returnDistrictID = False, returnHealthProfessionalTypeID = False, returnIsActive = False, returnIsDentist = False, returnIsPrimaryPhysician = False, returnModifiedTime = False, returnNameEmailIDDisplayEmail = False, returnNameID = False, returnNamePhoneIDDisplayPhone = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[3,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HealthProfessional/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params_list)

def getHealthProfessional(HealthProfessionalID, EntityID = 1, returnHealthProfessionalID = True, returnCreatedTime = False, returnDistrictGroupKey = False, returnDistrictID = False, returnHealthProfessionalTypeID = False, returnIsActive = False, returnIsDentist = False, returnIsPrimaryPhysician = False, returnModifiedTime = False, returnNameEmailIDDisplayEmail = False, returnNameID = False, returnNamePhoneIDDisplayPhone = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[2,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HealthProfessional/" + str(HealthProfessionalID), verb = "get", return_params_list = return_params_list)

def modifyHealthProfessional(HealthProfessionalID, EntityID = 1, setDistrictGroupKey = None, setDistrictID = None, setHealthProfessionalTypeID = None, setIsActive = None, setIsDentist = None, setIsPrimaryPhysician = None, setNameEmailIDDisplayEmail = None, setNameID = None, setNamePhoneIDDisplayPhone = None, setRelationships = None, returnHealthProfessionalID = True, returnCreatedTime = False, returnDistrictGroupKey = False, returnDistrictID = False, returnHealthProfessionalTypeID = False, returnIsActive = False, returnIsDentist = False, returnIsPrimaryPhysician = False, returnModifiedTime = False, returnNameEmailIDDisplayEmail = False, returnNameID = False, returnNamePhoneIDDisplayPhone = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(), :]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HealthProfessional/" + str(HealthProfessionalID), verb = "post", return_params_list = return_params_list, payload = payload_params)

def createHealthProfessional(EntityID = 1, setDistrictGroupKey = None, setDistrictID = None, setHealthProfessionalTypeID = None, setIsActive = None, setIsDentist = None, setIsPrimaryPhysician = None, setNameEmailIDDisplayEmail = None, setNameID = None, setNamePhoneIDDisplayPhone = None, setRelationships = None, returnHealthProfessionalID = True, returnCreatedTime = False, returnDistrictGroupKey = False, returnDistrictID = False, returnHealthProfessionalTypeID = False, returnIsActive = False, returnIsDentist = False, returnIsPrimaryPhysician = False, returnModifiedTime = False, returnNameEmailIDDisplayEmail = False, returnNameID = False, returnNamePhoneIDDisplayPhone = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params.loc[lambda x: ((x.value & (x.index.to_series().str.contains("return"))) | (~(x.value.isnull()) & (x.index.to_series().str.contains("set")))) & (x.index.to_series() != "EntityID"),:].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(),:]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HealthProfessional/", verb = "put", return_params_list = return_params_list, payload = payload_params)

def deleteHealthProfessional(HealthProfessionalID, EntityID = 1):

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Attendance/AttendancePeriod/" + str(AttendancePeriodID), verb = "delete")

def getEveryHealthProfessionalType(EntityID = 1, page = 1, pageSize = 100, returnHealthProfessionalTypeID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[3,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HealthProfessionalType/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params_list)

def getHealthProfessionalType(HealthProfessionalTypeID, EntityID = 1, returnHealthProfessionalTypeID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[2,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HealthProfessionalType/" + str(HealthProfessionalTypeID), verb = "get", return_params_list = return_params_list)

def modifyHealthProfessionalType(HealthProfessionalTypeID, EntityID = 1, setCode = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setRelationships = None, returnHealthProfessionalTypeID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(), :]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HealthProfessionalType/" + str(HealthProfessionalTypeID), verb = "post", return_params_list = return_params_list, payload = payload_params)

def createHealthProfessionalType(EntityID = 1, setCode = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setRelationships = None, returnHealthProfessionalTypeID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params.loc[lambda x: ((x.value & (x.index.to_series().str.contains("return"))) | (~(x.value.isnull()) & (x.index.to_series().str.contains("set")))) & (x.index.to_series() != "EntityID"),:].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(),:]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HealthProfessionalType/", verb = "put", return_params_list = return_params_list, payload = payload_params)

def deleteHealthProfessionalType(HealthProfessionalTypeID, EntityID = 1):

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Attendance/AttendancePeriod/" + str(AttendancePeriodID), verb = "delete")

def getEveryHearingComment(EntityID = 1, page = 1, pageSize = 100, returnHearingCommentID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[3,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HearingComment/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params_list)

def getHearingComment(HearingCommentID, EntityID = 1, returnHearingCommentID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[2,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HearingComment/" + str(HearingCommentID), verb = "get", return_params_list = return_params_list)

def modifyHearingComment(HearingCommentID, EntityID = 1, setCode = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setRelationships = None, returnHearingCommentID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(), :]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HearingComment/" + str(HearingCommentID), verb = "post", return_params_list = return_params_list, payload = payload_params)

def createHearingComment(EntityID = 1, setCode = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setRelationships = None, returnHearingCommentID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params.loc[lambda x: ((x.value & (x.index.to_series().str.contains("return"))) | (~(x.value.isnull()) & (x.index.to_series().str.contains("set")))) & (x.index.to_series() != "EntityID"),:].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(),:]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HearingComment/", verb = "put", return_params_list = return_params_list, payload = payload_params)

def deleteHearingComment(HearingCommentID, EntityID = 1):

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Attendance/AttendancePeriod/" + str(AttendancePeriodID), verb = "delete")

def getEveryHearingDecibelLevel(EntityID = 1, page = 1, pageSize = 100, returnHearingDecibelLevelID = True, returnCode = False, returnCreatedTime = False, returnDecibelLevel = False, returnDescription = False, returnDistrictID = False, returnHearingDecibelLevelDefaultID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[3,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HearingDecibelLevel/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params_list)

def getHearingDecibelLevel(HearingDecibelLevelID, EntityID = 1, returnHearingDecibelLevelID = True, returnCode = False, returnCreatedTime = False, returnDecibelLevel = False, returnDescription = False, returnDistrictID = False, returnHearingDecibelLevelDefaultID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[2,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HearingDecibelLevel/" + str(HearingDecibelLevelID), verb = "get", return_params_list = return_params_list)

def modifyHearingDecibelLevel(HearingDecibelLevelID, EntityID = 1, setCode = None, setDecibelLevel = None, setDescription = None, setDistrictID = None, setHearingDecibelLevelDefaultID = None, setIsActive = None, setRelationships = None, returnHearingDecibelLevelID = True, returnCode = False, returnCreatedTime = False, returnDecibelLevel = False, returnDescription = False, returnDistrictID = False, returnHearingDecibelLevelDefaultID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(), :]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HearingDecibelLevel/" + str(HearingDecibelLevelID), verb = "post", return_params_list = return_params_list, payload = payload_params)

def createHearingDecibelLevel(EntityID = 1, setCode = None, setDecibelLevel = None, setDescription = None, setDistrictID = None, setHearingDecibelLevelDefaultID = None, setIsActive = None, setRelationships = None, returnHearingDecibelLevelID = True, returnCode = False, returnCreatedTime = False, returnDecibelLevel = False, returnDescription = False, returnDistrictID = False, returnHearingDecibelLevelDefaultID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params.loc[lambda x: ((x.value & (x.index.to_series().str.contains("return"))) | (~(x.value.isnull()) & (x.index.to_series().str.contains("set")))) & (x.index.to_series() != "EntityID"),:].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(),:]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HearingDecibelLevel/", verb = "put", return_params_list = return_params_list, payload = payload_params)

def deleteHearingDecibelLevel(HearingDecibelLevelID, EntityID = 1):

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Attendance/AttendancePeriod/" + str(AttendancePeriodID), verb = "delete")

def getEveryHearingDecibelLevelDefault(EntityID = 1, page = 1, pageSize = 100, returnHearingDecibelLevelDefaultID = True, returnCode = False, returnCreatedTime = False, returnDecibelLevel = False, returnDescription = False, returnModifiedTime = False, returnSkywardHash = False, returnSkywardID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[3,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HearingDecibelLevelDefault/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params_list)

def getHearingDecibelLevelDefault(HearingDecibelLevelDefaultID, EntityID = 1, returnHearingDecibelLevelDefaultID = True, returnCode = False, returnCreatedTime = False, returnDecibelLevel = False, returnDescription = False, returnModifiedTime = False, returnSkywardHash = False, returnSkywardID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[2,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HearingDecibelLevelDefault/" + str(HearingDecibelLevelDefaultID), verb = "get", return_params_list = return_params_list)

def modifyHearingDecibelLevelDefault(HearingDecibelLevelDefaultID, EntityID = 1, setCode = None, setDecibelLevel = None, setDescription = None, setSkywardHash = None, setSkywardID = None, setRelationships = None, returnHearingDecibelLevelDefaultID = True, returnCode = False, returnCreatedTime = False, returnDecibelLevel = False, returnDescription = False, returnModifiedTime = False, returnSkywardHash = False, returnSkywardID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(), :]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HearingDecibelLevelDefault/" + str(HearingDecibelLevelDefaultID), verb = "post", return_params_list = return_params_list, payload = payload_params)

def createHearingDecibelLevelDefault(EntityID = 1, setCode = None, setDecibelLevel = None, setDescription = None, setSkywardHash = None, setSkywardID = None, setRelationships = None, returnHearingDecibelLevelDefaultID = True, returnCode = False, returnCreatedTime = False, returnDecibelLevel = False, returnDescription = False, returnModifiedTime = False, returnSkywardHash = False, returnSkywardID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params.loc[lambda x: ((x.value & (x.index.to_series().str.contains("return"))) | (~(x.value.isnull()) & (x.index.to_series().str.contains("set")))) & (x.index.to_series() != "EntityID"),:].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(),:]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HearingDecibelLevelDefault/", verb = "put", return_params_list = return_params_list, payload = payload_params)

def deleteHearingDecibelLevelDefault(HearingDecibelLevelDefaultID, EntityID = 1):

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Attendance/AttendancePeriod/" + str(AttendancePeriodID), verb = "delete")

def getEveryHearingGuardianNotification(EntityID = 1, page = 1, pageSize = 100, returnHearingGuardianNotificationID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[3,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HearingGuardianNotification/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params_list)

def getHearingGuardianNotification(HearingGuardianNotificationID, EntityID = 1, returnHearingGuardianNotificationID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[2,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HearingGuardianNotification/" + str(HearingGuardianNotificationID), verb = "get", return_params_list = return_params_list)

def modifyHearingGuardianNotification(HearingGuardianNotificationID, EntityID = 1, setCode = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setRelationships = None, returnHearingGuardianNotificationID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(), :]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HearingGuardianNotification/" + str(HearingGuardianNotificationID), verb = "post", return_params_list = return_params_list, payload = payload_params)

def createHearingGuardianNotification(EntityID = 1, setCode = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setRelationships = None, returnHearingGuardianNotificationID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params.loc[lambda x: ((x.value & (x.index.to_series().str.contains("return"))) | (~(x.value.isnull()) & (x.index.to_series().str.contains("set")))) & (x.index.to_series() != "EntityID"),:].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(),:]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HearingGuardianNotification/", verb = "put", return_params_list = return_params_list, payload = payload_params)

def deleteHearingGuardianNotification(HearingGuardianNotificationID, EntityID = 1):

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Attendance/AttendancePeriod/" + str(AttendancePeriodID), verb = "delete")

def getEveryHearingGuardianResponse(EntityID = 1, page = 1, pageSize = 100, returnHearingGuardianResponseID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[3,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HearingGuardianResponse/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params_list)

def getHearingGuardianResponse(HearingGuardianResponseID, EntityID = 1, returnHearingGuardianResponseID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[2,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HearingGuardianResponse/" + str(HearingGuardianResponseID), verb = "get", return_params_list = return_params_list)

def modifyHearingGuardianResponse(HearingGuardianResponseID, EntityID = 1, setCode = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setRelationships = None, returnHearingGuardianResponseID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(), :]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HearingGuardianResponse/" + str(HearingGuardianResponseID), verb = "post", return_params_list = return_params_list, payload = payload_params)

def createHearingGuardianResponse(EntityID = 1, setCode = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setRelationships = None, returnHearingGuardianResponseID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params.loc[lambda x: ((x.value & (x.index.to_series().str.contains("return"))) | (~(x.value.isnull()) & (x.index.to_series().str.contains("set")))) & (x.index.to_series() != "EntityID"),:].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(),:]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HearingGuardianResponse/", verb = "put", return_params_list = return_params_list, payload = payload_params)

def deleteHearingGuardianResponse(HearingGuardianResponseID, EntityID = 1):

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Attendance/AttendancePeriod/" + str(AttendancePeriodID), verb = "delete")

def getEveryHearingHertzLevel(EntityID = 1, page = 1, pageSize = 100, returnHearingHertzLevelID = True, returnCode = False, returnCreatedTime = False, returnDescription = False, returnDistrictID = False, returnHearingHertzLevelDefaultID = False, returnHertzLevel = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[3,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HearingHertzLevel/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params_list)

def getHearingHertzLevel(HearingHertzLevelID, EntityID = 1, returnHearingHertzLevelID = True, returnCode = False, returnCreatedTime = False, returnDescription = False, returnDistrictID = False, returnHearingHertzLevelDefaultID = False, returnHertzLevel = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[2,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HearingHertzLevel/" + str(HearingHertzLevelID), verb = "get", return_params_list = return_params_list)

def modifyHearingHertzLevel(HearingHertzLevelID, EntityID = 1, setCode = None, setDescription = None, setDistrictID = None, setHearingHertzLevelDefaultID = None, setHertzLevel = None, setIsActive = None, setRelationships = None, returnHearingHertzLevelID = True, returnCode = False, returnCreatedTime = False, returnDescription = False, returnDistrictID = False, returnHearingHertzLevelDefaultID = False, returnHertzLevel = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(), :]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HearingHertzLevel/" + str(HearingHertzLevelID), verb = "post", return_params_list = return_params_list, payload = payload_params)

def createHearingHertzLevel(EntityID = 1, setCode = None, setDescription = None, setDistrictID = None, setHearingHertzLevelDefaultID = None, setHertzLevel = None, setIsActive = None, setRelationships = None, returnHearingHertzLevelID = True, returnCode = False, returnCreatedTime = False, returnDescription = False, returnDistrictID = False, returnHearingHertzLevelDefaultID = False, returnHertzLevel = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params.loc[lambda x: ((x.value & (x.index.to_series().str.contains("return"))) | (~(x.value.isnull()) & (x.index.to_series().str.contains("set")))) & (x.index.to_series() != "EntityID"),:].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(),:]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HearingHertzLevel/", verb = "put", return_params_list = return_params_list, payload = payload_params)

def deleteHearingHertzLevel(HearingHertzLevelID, EntityID = 1):

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Attendance/AttendancePeriod/" + str(AttendancePeriodID), verb = "delete")

def getEveryHearingHertzLevelDefault(EntityID = 1, page = 1, pageSize = 100, returnHearingHertzLevelDefaultID = True, returnCode = False, returnCreatedTime = False, returnDescription = False, returnHertzLevel = False, returnModifiedTime = False, returnSkywardHash = False, returnSkywardID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[3,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HearingHertzLevelDefault/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params_list)

def getHearingHertzLevelDefault(HearingHertzLevelDefaultID, EntityID = 1, returnHearingHertzLevelDefaultID = True, returnCode = False, returnCreatedTime = False, returnDescription = False, returnHertzLevel = False, returnModifiedTime = False, returnSkywardHash = False, returnSkywardID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[2,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HearingHertzLevelDefault/" + str(HearingHertzLevelDefaultID), verb = "get", return_params_list = return_params_list)

def modifyHearingHertzLevelDefault(HearingHertzLevelDefaultID, EntityID = 1, setCode = None, setDescription = None, setHertzLevel = None, setSkywardHash = None, setSkywardID = None, setRelationships = None, returnHearingHertzLevelDefaultID = True, returnCode = False, returnCreatedTime = False, returnDescription = False, returnHertzLevel = False, returnModifiedTime = False, returnSkywardHash = False, returnSkywardID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(), :]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HearingHertzLevelDefault/" + str(HearingHertzLevelDefaultID), verb = "post", return_params_list = return_params_list, payload = payload_params)

def createHearingHertzLevelDefault(EntityID = 1, setCode = None, setDescription = None, setHertzLevel = None, setSkywardHash = None, setSkywardID = None, setRelationships = None, returnHearingHertzLevelDefaultID = True, returnCode = False, returnCreatedTime = False, returnDescription = False, returnHertzLevel = False, returnModifiedTime = False, returnSkywardHash = False, returnSkywardID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params.loc[lambda x: ((x.value & (x.index.to_series().str.contains("return"))) | (~(x.value.isnull()) & (x.index.to_series().str.contains("set")))) & (x.index.to_series() != "EntityID"),:].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(),:]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HearingHertzLevelDefault/", verb = "put", return_params_list = return_params_list, payload = payload_params)

def deleteHearingHertzLevelDefault(HearingHertzLevelDefaultID, EntityID = 1):

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Attendance/AttendancePeriod/" + str(AttendancePeriodID), verb = "delete")

def getEveryHearingObservation(EntityID = 1, page = 1, pageSize = 100, returnHearingObservationID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[3,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HearingObservation/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params_list)

def getHearingObservation(HearingObservationID, EntityID = 1, returnHearingObservationID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[2,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HearingObservation/" + str(HearingObservationID), verb = "get", return_params_list = return_params_list)

def modifyHearingObservation(HearingObservationID, EntityID = 1, setCode = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setRelationships = None, returnHearingObservationID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(), :]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HearingObservation/" + str(HearingObservationID), verb = "post", return_params_list = return_params_list, payload = payload_params)

def createHearingObservation(EntityID = 1, setCode = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setRelationships = None, returnHearingObservationID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params.loc[lambda x: ((x.value & (x.index.to_series().str.contains("return"))) | (~(x.value.isnull()) & (x.index.to_series().str.contains("set")))) & (x.index.to_series() != "EntityID"),:].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(),:]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HearingObservation/", verb = "put", return_params_list = return_params_list, payload = payload_params)

def deleteHearingObservation(HearingObservationID, EntityID = 1):

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Attendance/AttendancePeriod/" + str(AttendancePeriodID), verb = "delete")

def getEveryHearingReferralReason(EntityID = 1, page = 1, pageSize = 100, returnHearingReferralReasonID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[3,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HearingReferralReason/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params_list)

def getHearingReferralReason(HearingReferralReasonID, EntityID = 1, returnHearingReferralReasonID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[2,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HearingReferralReason/" + str(HearingReferralReasonID), verb = "get", return_params_list = return_params_list)

def modifyHearingReferralReason(HearingReferralReasonID, EntityID = 1, setCode = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setRelationships = None, returnHearingReferralReasonID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(), :]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HearingReferralReason/" + str(HearingReferralReasonID), verb = "post", return_params_list = return_params_list, payload = payload_params)

def createHearingReferralReason(EntityID = 1, setCode = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setRelationships = None, returnHearingReferralReasonID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params.loc[lambda x: ((x.value & (x.index.to_series().str.contains("return"))) | (~(x.value.isnull()) & (x.index.to_series().str.contains("set")))) & (x.index.to_series() != "EntityID"),:].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(),:]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HearingReferralReason/", verb = "put", return_params_list = return_params_list, payload = payload_params)

def deleteHearingReferralReason(HearingReferralReasonID, EntityID = 1):

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Attendance/AttendancePeriod/" + str(AttendancePeriodID), verb = "delete")

def getEveryHearingReferralResult(EntityID = 1, page = 1, pageSize = 100, returnHearingReferralResultID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[3,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HearingReferralResult/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params_list)

def getHearingReferralResult(HearingReferralResultID, EntityID = 1, returnHearingReferralResultID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[2,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HearingReferralResult/" + str(HearingReferralResultID), verb = "get", return_params_list = return_params_list)

def modifyHearingReferralResult(HearingReferralResultID, EntityID = 1, setCode = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setRelationships = None, returnHearingReferralResultID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(), :]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HearingReferralResult/" + str(HearingReferralResultID), verb = "post", return_params_list = return_params_list, payload = payload_params)

def createHearingReferralResult(EntityID = 1, setCode = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setRelationships = None, returnHearingReferralResultID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params.loc[lambda x: ((x.value & (x.index.to_series().str.contains("return"))) | (~(x.value.isnull()) & (x.index.to_series().str.contains("set")))) & (x.index.to_series() != "EntityID"),:].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(),:]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HearingReferralResult/", verb = "put", return_params_list = return_params_list, payload = payload_params)

def deleteHearingReferralResult(HearingReferralResultID, EntityID = 1):

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Attendance/AttendancePeriod/" + str(AttendancePeriodID), verb = "delete")

def getEveryHearingScreening(EntityID = 1, page = 1, pageSize = 100, returnHearingScreeningID = True, returnCombinedResult = False, returnCombinedResultCode = False, returnCreatedTime = False, returnDistrictID = False, returnGroupPercentLossLeftEar = False, returnGroupPercentLossRightEar = False, returnHealthProfessionalIDExaminedBy = False, returnIndividualPercentLossLeftEar = False, returnIndividualPercentLossRightEar = False, returnIsKnownCase = False, returnIsVoid = False, returnModifiedTime = False, returnNameID = False, returnNameOfficeVisitID = False, returnObservationDescriptionsListDisplay = False, returnReScreen = False, returnResultLeftEar = False, returnResultLeftEarCode = False, returnResultMiddleEar = False, returnResultMiddleEarCode = False, returnResultRightEar = False, returnResultRightEarCode = False, returnSchoolYearID = False, returnScreeningDate = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnUserIDVoidedBy = False, returnVoidedTime = False, returnVoidNote = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[3,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HearingScreening/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params_list)

def getHearingScreening(HearingScreeningID, EntityID = 1, returnHearingScreeningID = True, returnCombinedResult = False, returnCombinedResultCode = False, returnCreatedTime = False, returnDistrictID = False, returnGroupPercentLossLeftEar = False, returnGroupPercentLossRightEar = False, returnHealthProfessionalIDExaminedBy = False, returnIndividualPercentLossLeftEar = False, returnIndividualPercentLossRightEar = False, returnIsKnownCase = False, returnIsVoid = False, returnModifiedTime = False, returnNameID = False, returnNameOfficeVisitID = False, returnObservationDescriptionsListDisplay = False, returnReScreen = False, returnResultLeftEar = False, returnResultLeftEarCode = False, returnResultMiddleEar = False, returnResultMiddleEarCode = False, returnResultRightEar = False, returnResultRightEarCode = False, returnSchoolYearID = False, returnScreeningDate = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnUserIDVoidedBy = False, returnVoidedTime = False, returnVoidNote = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[2,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HearingScreening/" + str(HearingScreeningID), verb = "get", return_params_list = return_params_list)

def modifyHearingScreening(HearingScreeningID, EntityID = 1, setCombinedResult = None, setCombinedResultCode = None, setDistrictID = None, setGroupPercentLossLeftEar = None, setGroupPercentLossRightEar = None, setHealthProfessionalIDExaminedBy = None, setIndividualPercentLossLeftEar = None, setIndividualPercentLossRightEar = None, setIsKnownCase = None, setIsVoid = None, setNameID = None, setNameOfficeVisitID = None, setReScreen = None, setResultLeftEar = None, setResultLeftEarCode = None, setResultMiddleEar = None, setResultMiddleEarCode = None, setResultRightEar = None, setResultRightEarCode = None, setSchoolYearID = None, setScreeningDate = None, setUserIDVoidedBy = None, setVoidedTime = None, setVoidNote = None, setRelationships = None, returnHearingScreeningID = True, returnCombinedResult = False, returnCombinedResultCode = False, returnCreatedTime = False, returnDistrictID = False, returnGroupPercentLossLeftEar = False, returnGroupPercentLossRightEar = False, returnHealthProfessionalIDExaminedBy = False, returnIndividualPercentLossLeftEar = False, returnIndividualPercentLossRightEar = False, returnIsKnownCase = False, returnIsVoid = False, returnModifiedTime = False, returnNameID = False, returnNameOfficeVisitID = False, returnObservationDescriptionsListDisplay = False, returnReScreen = False, returnResultLeftEar = False, returnResultLeftEarCode = False, returnResultMiddleEar = False, returnResultMiddleEarCode = False, returnResultRightEar = False, returnResultRightEarCode = False, returnSchoolYearID = False, returnScreeningDate = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnUserIDVoidedBy = False, returnVoidedTime = False, returnVoidNote = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(), :]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HearingScreening/" + str(HearingScreeningID), verb = "post", return_params_list = return_params_list, payload = payload_params)

def createHearingScreening(EntityID = 1, setCombinedResult = None, setCombinedResultCode = None, setDistrictID = None, setGroupPercentLossLeftEar = None, setGroupPercentLossRightEar = None, setHealthProfessionalIDExaminedBy = None, setIndividualPercentLossLeftEar = None, setIndividualPercentLossRightEar = None, setIsKnownCase = None, setIsVoid = None, setNameID = None, setNameOfficeVisitID = None, setReScreen = None, setResultLeftEar = None, setResultLeftEarCode = None, setResultMiddleEar = None, setResultMiddleEarCode = None, setResultRightEar = None, setResultRightEarCode = None, setSchoolYearID = None, setScreeningDate = None, setUserIDVoidedBy = None, setVoidedTime = None, setVoidNote = None, setRelationships = None, returnHearingScreeningID = True, returnCombinedResult = False, returnCombinedResultCode = False, returnCreatedTime = False, returnDistrictID = False, returnGroupPercentLossLeftEar = False, returnGroupPercentLossRightEar = False, returnHealthProfessionalIDExaminedBy = False, returnIndividualPercentLossLeftEar = False, returnIndividualPercentLossRightEar = False, returnIsKnownCase = False, returnIsVoid = False, returnModifiedTime = False, returnNameID = False, returnNameOfficeVisitID = False, returnObservationDescriptionsListDisplay = False, returnReScreen = False, returnResultLeftEar = False, returnResultLeftEarCode = False, returnResultMiddleEar = False, returnResultMiddleEarCode = False, returnResultRightEar = False, returnResultRightEarCode = False, returnSchoolYearID = False, returnScreeningDate = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnUserIDVoidedBy = False, returnVoidedTime = False, returnVoidNote = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params.loc[lambda x: ((x.value & (x.index.to_series().str.contains("return"))) | (~(x.value.isnull()) & (x.index.to_series().str.contains("set")))) & (x.index.to_series() != "EntityID"),:].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(),:]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HearingScreening/", verb = "put", return_params_list = return_params_list, payload = payload_params)

def deleteHearingScreening(HearingScreeningID, EntityID = 1):

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Attendance/AttendancePeriod/" + str(AttendancePeriodID), verb = "delete")

def getEveryHearingScreeningComment(EntityID = 1, page = 1, pageSize = 100, returnHearingScreeningCommentID = True, returnCreatedTime = False, returnHearingCommentID = False, returnHearingScreeningID = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[3,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HearingScreeningComment/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params_list)

def getHearingScreeningComment(HearingScreeningCommentID, EntityID = 1, returnHearingScreeningCommentID = True, returnCreatedTime = False, returnHearingCommentID = False, returnHearingScreeningID = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[2,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HearingScreeningComment/" + str(HearingScreeningCommentID), verb = "get", return_params_list = return_params_list)

def modifyHearingScreeningComment(HearingScreeningCommentID, EntityID = 1, setHearingCommentID = None, setHearingScreeningID = None, setRelationships = None, returnHearingScreeningCommentID = True, returnCreatedTime = False, returnHearingCommentID = False, returnHearingScreeningID = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(), :]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HearingScreeningComment/" + str(HearingScreeningCommentID), verb = "post", return_params_list = return_params_list, payload = payload_params)

def createHearingScreeningComment(EntityID = 1, setHearingCommentID = None, setHearingScreeningID = None, setRelationships = None, returnHearingScreeningCommentID = True, returnCreatedTime = False, returnHearingCommentID = False, returnHearingScreeningID = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params.loc[lambda x: ((x.value & (x.index.to_series().str.contains("return"))) | (~(x.value.isnull()) & (x.index.to_series().str.contains("set")))) & (x.index.to_series() != "EntityID"),:].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(),:]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HearingScreeningComment/", verb = "put", return_params_list = return_params_list, payload = payload_params)

def deleteHearingScreeningComment(HearingScreeningCommentID, EntityID = 1):

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Attendance/AttendancePeriod/" + str(AttendancePeriodID), verb = "delete")

def getEveryHearingScreeningNote(EntityID = 1, page = 1, pageSize = 100, returnHearingScreeningNoteID = True, returnCreatedTime = False, returnHearingScreeningID = False, returnModifiedTime = False, returnNote = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[3,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HearingScreeningNote/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params_list)

def getHearingScreeningNote(HearingScreeningNoteID, EntityID = 1, returnHearingScreeningNoteID = True, returnCreatedTime = False, returnHearingScreeningID = False, returnModifiedTime = False, returnNote = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[2,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HearingScreeningNote/" + str(HearingScreeningNoteID), verb = "get", return_params_list = return_params_list)

def modifyHearingScreeningNote(HearingScreeningNoteID, EntityID = 1, setHearingScreeningID = None, setNote = None, setRelationships = None, returnHearingScreeningNoteID = True, returnCreatedTime = False, returnHearingScreeningID = False, returnModifiedTime = False, returnNote = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(), :]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HearingScreeningNote/" + str(HearingScreeningNoteID), verb = "post", return_params_list = return_params_list, payload = payload_params)

def createHearingScreeningNote(EntityID = 1, setHearingScreeningID = None, setNote = None, setRelationships = None, returnHearingScreeningNoteID = True, returnCreatedTime = False, returnHearingScreeningID = False, returnModifiedTime = False, returnNote = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params.loc[lambda x: ((x.value & (x.index.to_series().str.contains("return"))) | (~(x.value.isnull()) & (x.index.to_series().str.contains("set")))) & (x.index.to_series() != "EntityID"),:].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(),:]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HearingScreeningNote/", verb = "put", return_params_list = return_params_list, payload = payload_params)

def deleteHearingScreeningNote(HearingScreeningNoteID, EntityID = 1):

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Attendance/AttendancePeriod/" + str(AttendancePeriodID), verb = "delete")

def getEveryHearingScreeningObservation(EntityID = 1, page = 1, pageSize = 100, returnHearingScreeningObservationID = True, returnCreatedTime = False, returnHearingObservationID = False, returnHearingScreeningID = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[3,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HearingScreeningObservation/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params_list)

def getHearingScreeningObservation(HearingScreeningObservationID, EntityID = 1, returnHearingScreeningObservationID = True, returnCreatedTime = False, returnHearingObservationID = False, returnHearingScreeningID = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[2,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HearingScreeningObservation/" + str(HearingScreeningObservationID), verb = "get", return_params_list = return_params_list)

def modifyHearingScreeningObservation(HearingScreeningObservationID, EntityID = 1, setHearingObservationID = None, setHearingScreeningID = None, setRelationships = None, returnHearingScreeningObservationID = True, returnCreatedTime = False, returnHearingObservationID = False, returnHearingScreeningID = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(), :]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HearingScreeningObservation/" + str(HearingScreeningObservationID), verb = "post", return_params_list = return_params_list, payload = payload_params)

def createHearingScreeningObservation(EntityID = 1, setHearingObservationID = None, setHearingScreeningID = None, setRelationships = None, returnHearingScreeningObservationID = True, returnCreatedTime = False, returnHearingObservationID = False, returnHearingScreeningID = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params.loc[lambda x: ((x.value & (x.index.to_series().str.contains("return"))) | (~(x.value.isnull()) & (x.index.to_series().str.contains("set")))) & (x.index.to_series() != "EntityID"),:].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(),:]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HearingScreeningObservation/", verb = "put", return_params_list = return_params_list, payload = payload_params)

def deleteHearingScreeningObservation(HearingScreeningObservationID, EntityID = 1):

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Attendance/AttendancePeriod/" + str(AttendancePeriodID), verb = "delete")

def getEveryHearingScreeningReferral(EntityID = 1, page = 1, pageSize = 100, returnHearingScreeningReferralID = True, returnCompletionDate = False, returnCreatedTime = False, returnHealthProfessionalIDReferredBy = False, returnHealthProfessionalIDReferredTo = False, returnHearingGuardianNotificationID = False, returnHearingGuardianResponseID = False, returnHearingReferralReasonID = False, returnHearingReferralResultID = False, returnHearingScreeningID = False, returnModifiedTime = False, returnReferralCompleted = False, returnReferralDate = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[3,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HearingScreeningReferral/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params_list)

def getHearingScreeningReferral(HearingScreeningReferralID, EntityID = 1, returnHearingScreeningReferralID = True, returnCompletionDate = False, returnCreatedTime = False, returnHealthProfessionalIDReferredBy = False, returnHealthProfessionalIDReferredTo = False, returnHearingGuardianNotificationID = False, returnHearingGuardianResponseID = False, returnHearingReferralReasonID = False, returnHearingReferralResultID = False, returnHearingScreeningID = False, returnModifiedTime = False, returnReferralCompleted = False, returnReferralDate = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[2,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HearingScreeningReferral/" + str(HearingScreeningReferralID), verb = "get", return_params_list = return_params_list)

def modifyHearingScreeningReferral(HearingScreeningReferralID, EntityID = 1, setCompletionDate = None, setHealthProfessionalIDReferredBy = None, setHealthProfessionalIDReferredTo = None, setHearingGuardianNotificationID = None, setHearingGuardianResponseID = None, setHearingReferralReasonID = None, setHearingReferralResultID = None, setHearingScreeningID = None, setReferralCompleted = None, setReferralDate = None, setRelationships = None, returnHearingScreeningReferralID = True, returnCompletionDate = False, returnCreatedTime = False, returnHealthProfessionalIDReferredBy = False, returnHealthProfessionalIDReferredTo = False, returnHearingGuardianNotificationID = False, returnHearingGuardianResponseID = False, returnHearingReferralReasonID = False, returnHearingReferralResultID = False, returnHearingScreeningID = False, returnModifiedTime = False, returnReferralCompleted = False, returnReferralDate = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(), :]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HearingScreeningReferral/" + str(HearingScreeningReferralID), verb = "post", return_params_list = return_params_list, payload = payload_params)

def createHearingScreeningReferral(EntityID = 1, setCompletionDate = None, setHealthProfessionalIDReferredBy = None, setHealthProfessionalIDReferredTo = None, setHearingGuardianNotificationID = None, setHearingGuardianResponseID = None, setHearingReferralReasonID = None, setHearingReferralResultID = None, setHearingScreeningID = None, setReferralCompleted = None, setReferralDate = None, setRelationships = None, returnHearingScreeningReferralID = True, returnCompletionDate = False, returnCreatedTime = False, returnHealthProfessionalIDReferredBy = False, returnHealthProfessionalIDReferredTo = False, returnHearingGuardianNotificationID = False, returnHearingGuardianResponseID = False, returnHearingReferralReasonID = False, returnHearingReferralResultID = False, returnHearingScreeningID = False, returnModifiedTime = False, returnReferralCompleted = False, returnReferralDate = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params.loc[lambda x: ((x.value & (x.index.to_series().str.contains("return"))) | (~(x.value.isnull()) & (x.index.to_series().str.contains("set")))) & (x.index.to_series() != "EntityID"),:].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(),:]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HearingScreeningReferral/", verb = "put", return_params_list = return_params_list, payload = payload_params)

def deleteHearingScreeningReferral(HearingScreeningReferralID, EntityID = 1):

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Attendance/AttendancePeriod/" + str(AttendancePeriodID), verb = "delete")

def getEveryHearingScreeningSecuredNote(EntityID = 1, page = 1, pageSize = 100, returnHearingScreeningSecuredNoteID = True, returnCreatedTime = False, returnHearingScreeningID = False, returnModifiedTime = False, returnNote = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[3,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HearingScreeningSecuredNote/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params_list)

def getHearingScreeningSecuredNote(HearingScreeningSecuredNoteID, EntityID = 1, returnHearingScreeningSecuredNoteID = True, returnCreatedTime = False, returnHearingScreeningID = False, returnModifiedTime = False, returnNote = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[2,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HearingScreeningSecuredNote/" + str(HearingScreeningSecuredNoteID), verb = "get", return_params_list = return_params_list)

def modifyHearingScreeningSecuredNote(HearingScreeningSecuredNoteID, EntityID = 1, setHearingScreeningID = None, setNote = None, setRelationships = None, returnHearingScreeningSecuredNoteID = True, returnCreatedTime = False, returnHearingScreeningID = False, returnModifiedTime = False, returnNote = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(), :]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HearingScreeningSecuredNote/" + str(HearingScreeningSecuredNoteID), verb = "post", return_params_list = return_params_list, payload = payload_params)

def createHearingScreeningSecuredNote(EntityID = 1, setHearingScreeningID = None, setNote = None, setRelationships = None, returnHearingScreeningSecuredNoteID = True, returnCreatedTime = False, returnHearingScreeningID = False, returnModifiedTime = False, returnNote = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params.loc[lambda x: ((x.value & (x.index.to_series().str.contains("return"))) | (~(x.value.isnull()) & (x.index.to_series().str.contains("set")))) & (x.index.to_series() != "EntityID"),:].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(),:]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HearingScreeningSecuredNote/", verb = "put", return_params_list = return_params_list, payload = payload_params)

def deleteHearingScreeningSecuredNote(HearingScreeningSecuredNoteID, EntityID = 1):

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Attendance/AttendancePeriod/" + str(AttendancePeriodID), verb = "delete")

def getEveryHearingScreeningThreshold(EntityID = 1, page = 1, pageSize = 100, returnHearingScreeningThresholdID = True, returnCreatedTime = False, returnHearingDecibelLevelIDLeftEar = False, returnHearingDecibelLevelIDRightEar = False, returnHearingHertzLevelID = False, returnHearingScreeningID = False, returnLeftEarPassed = False, returnModifiedTime = False, returnRightEarPassed = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[3,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HearingScreeningThreshold/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params_list)

def getHearingScreeningThreshold(HearingScreeningThresholdID, EntityID = 1, returnHearingScreeningThresholdID = True, returnCreatedTime = False, returnHearingDecibelLevelIDLeftEar = False, returnHearingDecibelLevelIDRightEar = False, returnHearingHertzLevelID = False, returnHearingScreeningID = False, returnLeftEarPassed = False, returnModifiedTime = False, returnRightEarPassed = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[2,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HearingScreeningThreshold/" + str(HearingScreeningThresholdID), verb = "get", return_params_list = return_params_list)

def modifyHearingScreeningThreshold(HearingScreeningThresholdID, EntityID = 1, setHearingDecibelLevelIDLeftEar = None, setHearingDecibelLevelIDRightEar = None, setHearingHertzLevelID = None, setHearingScreeningID = None, setLeftEarPassed = None, setRightEarPassed = None, setRelationships = None, returnHearingScreeningThresholdID = True, returnCreatedTime = False, returnHearingDecibelLevelIDLeftEar = False, returnHearingDecibelLevelIDRightEar = False, returnHearingHertzLevelID = False, returnHearingScreeningID = False, returnLeftEarPassed = False, returnModifiedTime = False, returnRightEarPassed = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(), :]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HearingScreeningThreshold/" + str(HearingScreeningThresholdID), verb = "post", return_params_list = return_params_list, payload = payload_params)

def createHearingScreeningThreshold(EntityID = 1, setHearingDecibelLevelIDLeftEar = None, setHearingDecibelLevelIDRightEar = None, setHearingHertzLevelID = None, setHearingScreeningID = None, setLeftEarPassed = None, setRightEarPassed = None, setRelationships = None, returnHearingScreeningThresholdID = True, returnCreatedTime = False, returnHearingDecibelLevelIDLeftEar = False, returnHearingDecibelLevelIDRightEar = False, returnHearingHertzLevelID = False, returnHearingScreeningID = False, returnLeftEarPassed = False, returnModifiedTime = False, returnRightEarPassed = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params.loc[lambda x: ((x.value & (x.index.to_series().str.contains("return"))) | (~(x.value.isnull()) & (x.index.to_series().str.contains("set")))) & (x.index.to_series() != "EntityID"),:].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(),:]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/HearingScreeningThreshold/", verb = "put", return_params_list = return_params_list, payload = payload_params)

def deleteHearingScreeningThreshold(HearingScreeningThresholdID, EntityID = 1):

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Attendance/AttendancePeriod/" + str(AttendancePeriodID), verb = "delete")

def getEveryInjury(EntityID = 1, page = 1, pageSize = 100, returnInjuryID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[3,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/Injury/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params_list)

def getInjury(InjuryID, EntityID = 1, returnInjuryID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[2,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/Injury/" + str(InjuryID), verb = "get", return_params_list = return_params_list)

def modifyInjury(InjuryID, EntityID = 1, setCode = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setRelationships = None, returnInjuryID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(), :]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/Injury/" + str(InjuryID), verb = "post", return_params_list = return_params_list, payload = payload_params)

def createInjury(EntityID = 1, setCode = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setRelationships = None, returnInjuryID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params.loc[lambda x: ((x.value & (x.index.to_series().str.contains("return"))) | (~(x.value.isnull()) & (x.index.to_series().str.contains("set")))) & (x.index.to_series() != "EntityID"),:].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(),:]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/Injury/", verb = "put", return_params_list = return_params_list, payload = payload_params)

def deleteInjury(InjuryID, EntityID = 1):

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Attendance/AttendancePeriod/" + str(AttendancePeriodID), verb = "delete")

def getEveryInjuryOccurrence(EntityID = 1, page = 1, pageSize = 100, returnInjuryOccurrenceID = True, returnBodyParts = False, returnCreatedTime = False, returnDaysMissed = False, returnDistrictID = False, returnHealthProfessionalID = False, returnInjuryDateTime = False, returnInjuryDateTimeDate = False, returnInjuryDateTimeTime = False, returnIsImmediateCareRequired = False, returnIsVoid = False, returnLocationID = False, returnModifiedTime = False, returnNameID = False, returnNameIDReportedBy = False, returnNameIDRespondedBy = False, returnReportFileDate = False, returnSchoolID = False, returnSchoolYearID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnUserIDVoidedBy = False, returnVoidedTime = False, returnVoidNote = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[3,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/InjuryOccurrence/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params_list)

def getInjuryOccurrence(InjuryOccurrenceID, EntityID = 1, returnInjuryOccurrenceID = True, returnBodyParts = False, returnCreatedTime = False, returnDaysMissed = False, returnDistrictID = False, returnHealthProfessionalID = False, returnInjuryDateTime = False, returnInjuryDateTimeDate = False, returnInjuryDateTimeTime = False, returnIsImmediateCareRequired = False, returnIsVoid = False, returnLocationID = False, returnModifiedTime = False, returnNameID = False, returnNameIDReportedBy = False, returnNameIDRespondedBy = False, returnReportFileDate = False, returnSchoolID = False, returnSchoolYearID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnUserIDVoidedBy = False, returnVoidedTime = False, returnVoidNote = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[2,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/InjuryOccurrence/" + str(InjuryOccurrenceID), verb = "get", return_params_list = return_params_list)

def modifyInjuryOccurrence(InjuryOccurrenceID, EntityID = 1, setDaysMissed = None, setDistrictID = None, setHealthProfessionalID = None, setInjuryDateTime = None, setInjuryDateTimeDate = None, setInjuryDateTimeTime = None, setIsImmediateCareRequired = None, setIsVoid = None, setLocationID = None, setNameID = None, setNameIDReportedBy = None, setNameIDRespondedBy = None, setReportFileDate = None, setSchoolID = None, setSchoolYearID = None, setUserIDVoidedBy = None, setVoidedTime = None, setVoidNote = None, setRelationships = None, returnInjuryOccurrenceID = True, returnBodyParts = False, returnCreatedTime = False, returnDaysMissed = False, returnDistrictID = False, returnHealthProfessionalID = False, returnInjuryDateTime = False, returnInjuryDateTimeDate = False, returnInjuryDateTimeTime = False, returnIsImmediateCareRequired = False, returnIsVoid = False, returnLocationID = False, returnModifiedTime = False, returnNameID = False, returnNameIDReportedBy = False, returnNameIDRespondedBy = False, returnReportFileDate = False, returnSchoolID = False, returnSchoolYearID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnUserIDVoidedBy = False, returnVoidedTime = False, returnVoidNote = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(), :]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/InjuryOccurrence/" + str(InjuryOccurrenceID), verb = "post", return_params_list = return_params_list, payload = payload_params)

def createInjuryOccurrence(EntityID = 1, setDaysMissed = None, setDistrictID = None, setHealthProfessionalID = None, setInjuryDateTime = None, setInjuryDateTimeDate = None, setInjuryDateTimeTime = None, setIsImmediateCareRequired = None, setIsVoid = None, setLocationID = None, setNameID = None, setNameIDReportedBy = None, setNameIDRespondedBy = None, setReportFileDate = None, setSchoolID = None, setSchoolYearID = None, setUserIDVoidedBy = None, setVoidedTime = None, setVoidNote = None, setRelationships = None, returnInjuryOccurrenceID = True, returnBodyParts = False, returnCreatedTime = False, returnDaysMissed = False, returnDistrictID = False, returnHealthProfessionalID = False, returnInjuryDateTime = False, returnInjuryDateTimeDate = False, returnInjuryDateTimeTime = False, returnIsImmediateCareRequired = False, returnIsVoid = False, returnLocationID = False, returnModifiedTime = False, returnNameID = False, returnNameIDReportedBy = False, returnNameIDRespondedBy = False, returnReportFileDate = False, returnSchoolID = False, returnSchoolYearID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnUserIDVoidedBy = False, returnVoidedTime = False, returnVoidNote = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params.loc[lambda x: ((x.value & (x.index.to_series().str.contains("return"))) | (~(x.value.isnull()) & (x.index.to_series().str.contains("set")))) & (x.index.to_series() != "EntityID"),:].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(),:]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/InjuryOccurrence/", verb = "put", return_params_list = return_params_list, payload = payload_params)

def deleteInjuryOccurrence(InjuryOccurrenceID, EntityID = 1):

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Attendance/AttendancePeriod/" + str(AttendancePeriodID), verb = "delete")

def getEveryInjuryOccurrenceBodyPart(EntityID = 1, page = 1, pageSize = 100, returnInjuryOccurrenceBodyPartID = True, returnBodyPartID = False, returnCreatedTime = False, returnInjuryOccurrenceID = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[3,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/InjuryOccurrenceBodyPart/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params_list)

def getInjuryOccurrenceBodyPart(InjuryOccurrenceBodyPartID, EntityID = 1, returnInjuryOccurrenceBodyPartID = True, returnBodyPartID = False, returnCreatedTime = False, returnInjuryOccurrenceID = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[2,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/InjuryOccurrenceBodyPart/" + str(InjuryOccurrenceBodyPartID), verb = "get", return_params_list = return_params_list)

def modifyInjuryOccurrenceBodyPart(InjuryOccurrenceBodyPartID, EntityID = 1, setBodyPartID = None, setInjuryOccurrenceID = None, setRelationships = None, returnInjuryOccurrenceBodyPartID = True, returnBodyPartID = False, returnCreatedTime = False, returnInjuryOccurrenceID = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(), :]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/InjuryOccurrenceBodyPart/" + str(InjuryOccurrenceBodyPartID), verb = "post", return_params_list = return_params_list, payload = payload_params)

def createInjuryOccurrenceBodyPart(EntityID = 1, setBodyPartID = None, setInjuryOccurrenceID = None, setRelationships = None, returnInjuryOccurrenceBodyPartID = True, returnBodyPartID = False, returnCreatedTime = False, returnInjuryOccurrenceID = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params.loc[lambda x: ((x.value & (x.index.to_series().str.contains("return"))) | (~(x.value.isnull()) & (x.index.to_series().str.contains("set")))) & (x.index.to_series() != "EntityID"),:].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(),:]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/InjuryOccurrenceBodyPart/", verb = "put", return_params_list = return_params_list, payload = payload_params)

def deleteInjuryOccurrenceBodyPart(InjuryOccurrenceBodyPartID, EntityID = 1):

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Attendance/AttendancePeriod/" + str(AttendancePeriodID), verb = "delete")

def getEveryInjuryOccurrenceBodyPartInjury(EntityID = 1, page = 1, pageSize = 100, returnInjuryOccurrenceBodyPartInjuryID = True, returnCreatedTime = False, returnInjuryID = False, returnInjuryOccurrenceBodyPartID = False, returnModifiedTime = False, returnTreatments = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[3,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/InjuryOccurrenceBodyPartInjury/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params_list)

def getInjuryOccurrenceBodyPartInjury(InjuryOccurrenceBodyPartInjuryID, EntityID = 1, returnInjuryOccurrenceBodyPartInjuryID = True, returnCreatedTime = False, returnInjuryID = False, returnInjuryOccurrenceBodyPartID = False, returnModifiedTime = False, returnTreatments = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[2,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/InjuryOccurrenceBodyPartInjury/" + str(InjuryOccurrenceBodyPartInjuryID), verb = "get", return_params_list = return_params_list)

def modifyInjuryOccurrenceBodyPartInjury(InjuryOccurrenceBodyPartInjuryID, EntityID = 1, setInjuryID = None, setInjuryOccurrenceBodyPartID = None, setRelationships = None, returnInjuryOccurrenceBodyPartInjuryID = True, returnCreatedTime = False, returnInjuryID = False, returnInjuryOccurrenceBodyPartID = False, returnModifiedTime = False, returnTreatments = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(), :]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/InjuryOccurrenceBodyPartInjury/" + str(InjuryOccurrenceBodyPartInjuryID), verb = "post", return_params_list = return_params_list, payload = payload_params)

def createInjuryOccurrenceBodyPartInjury(EntityID = 1, setInjuryID = None, setInjuryOccurrenceBodyPartID = None, setRelationships = None, returnInjuryOccurrenceBodyPartInjuryID = True, returnCreatedTime = False, returnInjuryID = False, returnInjuryOccurrenceBodyPartID = False, returnModifiedTime = False, returnTreatments = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params.loc[lambda x: ((x.value & (x.index.to_series().str.contains("return"))) | (~(x.value.isnull()) & (x.index.to_series().str.contains("set")))) & (x.index.to_series() != "EntityID"),:].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(),:]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/InjuryOccurrenceBodyPartInjury/", verb = "put", return_params_list = return_params_list, payload = payload_params)

def deleteInjuryOccurrenceBodyPartInjury(InjuryOccurrenceBodyPartInjuryID, EntityID = 1):

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Attendance/AttendancePeriod/" + str(AttendancePeriodID), verb = "delete")

def getEveryInjuryOccurrenceBodyPartInjuryTreatment(EntityID = 1, page = 1, pageSize = 100, returnInjuryOccurrenceBodyPartInjuryTreatmentID = True, returnCreatedTime = False, returnInjuryOccurrenceBodyPartInjuryID = False, returnModifiedTime = False, returnOfficeVisitTreatmentID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[3,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/InjuryOccurrenceBodyPartInjuryTreatment/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params_list)

def getInjuryOccurrenceBodyPartInjuryTreatment(InjuryOccurrenceBodyPartInjuryTreatmentID, EntityID = 1, returnInjuryOccurrenceBodyPartInjuryTreatmentID = True, returnCreatedTime = False, returnInjuryOccurrenceBodyPartInjuryID = False, returnModifiedTime = False, returnOfficeVisitTreatmentID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[2,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/InjuryOccurrenceBodyPartInjuryTreatment/" + str(InjuryOccurrenceBodyPartInjuryTreatmentID), verb = "get", return_params_list = return_params_list)

def modifyInjuryOccurrenceBodyPartInjuryTreatment(InjuryOccurrenceBodyPartInjuryTreatmentID, EntityID = 1, setInjuryOccurrenceBodyPartInjuryID = None, setOfficeVisitTreatmentID = None, setRelationships = None, returnInjuryOccurrenceBodyPartInjuryTreatmentID = True, returnCreatedTime = False, returnInjuryOccurrenceBodyPartInjuryID = False, returnModifiedTime = False, returnOfficeVisitTreatmentID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(), :]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/InjuryOccurrenceBodyPartInjuryTreatment/" + str(InjuryOccurrenceBodyPartInjuryTreatmentID), verb = "post", return_params_list = return_params_list, payload = payload_params)

def createInjuryOccurrenceBodyPartInjuryTreatment(EntityID = 1, setInjuryOccurrenceBodyPartInjuryID = None, setOfficeVisitTreatmentID = None, setRelationships = None, returnInjuryOccurrenceBodyPartInjuryTreatmentID = True, returnCreatedTime = False, returnInjuryOccurrenceBodyPartInjuryID = False, returnModifiedTime = False, returnOfficeVisitTreatmentID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params.loc[lambda x: ((x.value & (x.index.to_series().str.contains("return"))) | (~(x.value.isnull()) & (x.index.to_series().str.contains("set")))) & (x.index.to_series() != "EntityID"),:].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(),:]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/InjuryOccurrenceBodyPartInjuryTreatment/", verb = "put", return_params_list = return_params_list, payload = payload_params)

def deleteInjuryOccurrenceBodyPartInjuryTreatment(InjuryOccurrenceBodyPartInjuryTreatmentID, EntityID = 1):

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Attendance/AttendancePeriod/" + str(AttendancePeriodID), verb = "delete")

def getEveryInjuryOccurrenceComment(EntityID = 1, page = 1, pageSize = 100, returnInjuryOccurrenceCommentID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[3,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/InjuryOccurrenceComment/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params_list)

def getInjuryOccurrenceComment(InjuryOccurrenceCommentID, EntityID = 1, returnInjuryOccurrenceCommentID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[2,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/InjuryOccurrenceComment/" + str(InjuryOccurrenceCommentID), verb = "get", return_params_list = return_params_list)

def modifyInjuryOccurrenceComment(InjuryOccurrenceCommentID, EntityID = 1, setCode = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setRelationships = None, returnInjuryOccurrenceCommentID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(), :]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/InjuryOccurrenceComment/" + str(InjuryOccurrenceCommentID), verb = "post", return_params_list = return_params_list, payload = payload_params)

def createInjuryOccurrenceComment(EntityID = 1, setCode = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setRelationships = None, returnInjuryOccurrenceCommentID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params.loc[lambda x: ((x.value & (x.index.to_series().str.contains("return"))) | (~(x.value.isnull()) & (x.index.to_series().str.contains("set")))) & (x.index.to_series() != "EntityID"),:].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(),:]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/InjuryOccurrenceComment/", verb = "put", return_params_list = return_params_list, payload = payload_params)

def deleteInjuryOccurrenceComment(InjuryOccurrenceCommentID, EntityID = 1):

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Attendance/AttendancePeriod/" + str(AttendancePeriodID), verb = "delete")

def getEveryInjuryOccurrenceGuardianNotification(EntityID = 1, page = 1, pageSize = 100, returnInjuryOccurrenceGuardianNotificationID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[3,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/InjuryOccurrenceGuardianNotification/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params_list)

def getInjuryOccurrenceGuardianNotification(InjuryOccurrenceGuardianNotificationID, EntityID = 1, returnInjuryOccurrenceGuardianNotificationID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[2,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/InjuryOccurrenceGuardianNotification/" + str(InjuryOccurrenceGuardianNotificationID), verb = "get", return_params_list = return_params_list)

def modifyInjuryOccurrenceGuardianNotification(InjuryOccurrenceGuardianNotificationID, EntityID = 1, setCode = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setRelationships = None, returnInjuryOccurrenceGuardianNotificationID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(), :]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/InjuryOccurrenceGuardianNotification/" + str(InjuryOccurrenceGuardianNotificationID), verb = "post", return_params_list = return_params_list, payload = payload_params)

def createInjuryOccurrenceGuardianNotification(EntityID = 1, setCode = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setRelationships = None, returnInjuryOccurrenceGuardianNotificationID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params.loc[lambda x: ((x.value & (x.index.to_series().str.contains("return"))) | (~(x.value.isnull()) & (x.index.to_series().str.contains("set")))) & (x.index.to_series() != "EntityID"),:].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(),:]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/InjuryOccurrenceGuardianNotification/", verb = "put", return_params_list = return_params_list, payload = payload_params)

def deleteInjuryOccurrenceGuardianNotification(InjuryOccurrenceGuardianNotificationID, EntityID = 1):

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Attendance/AttendancePeriod/" + str(AttendancePeriodID), verb = "delete")

def getEveryInjuryOccurrenceGuardianResponse(EntityID = 1, page = 1, pageSize = 100, returnInjuryOccurrenceGuardianResponseID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[3,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/InjuryOccurrenceGuardianResponse/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params_list)

def getInjuryOccurrenceGuardianResponse(InjuryOccurrenceGuardianResponseID, EntityID = 1, returnInjuryOccurrenceGuardianResponseID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[2,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/InjuryOccurrenceGuardianResponse/" + str(InjuryOccurrenceGuardianResponseID), verb = "get", return_params_list = return_params_list)

def modifyInjuryOccurrenceGuardianResponse(InjuryOccurrenceGuardianResponseID, EntityID = 1, setCode = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setRelationships = None, returnInjuryOccurrenceGuardianResponseID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(), :]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/InjuryOccurrenceGuardianResponse/" + str(InjuryOccurrenceGuardianResponseID), verb = "post", return_params_list = return_params_list, payload = payload_params)

def createInjuryOccurrenceGuardianResponse(EntityID = 1, setCode = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setRelationships = None, returnInjuryOccurrenceGuardianResponseID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params.loc[lambda x: ((x.value & (x.index.to_series().str.contains("return"))) | (~(x.value.isnull()) & (x.index.to_series().str.contains("set")))) & (x.index.to_series() != "EntityID"),:].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(),:]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/InjuryOccurrenceGuardianResponse/", verb = "put", return_params_list = return_params_list, payload = payload_params)

def deleteInjuryOccurrenceGuardianResponse(InjuryOccurrenceGuardianResponseID, EntityID = 1):

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Attendance/AttendancePeriod/" + str(AttendancePeriodID), verb = "delete")

def getEveryInjuryOccurrenceInjuryOccurrenceComment(EntityID = 1, page = 1, pageSize = 100, returnInjuryOccurrenceInjuryOccurrenceCommentID = True, returnCreatedTime = False, returnInjuryOccurrenceCommentID = False, returnInjuryOccurrenceID = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[3,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/InjuryOccurrenceInjuryOccurrenceComment/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params_list)

def getInjuryOccurrenceInjuryOccurrenceComment(InjuryOccurrenceInjuryOccurrenceCommentID, EntityID = 1, returnInjuryOccurrenceInjuryOccurrenceCommentID = True, returnCreatedTime = False, returnInjuryOccurrenceCommentID = False, returnInjuryOccurrenceID = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[2,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/InjuryOccurrenceInjuryOccurrenceComment/" + str(InjuryOccurrenceInjuryOccurrenceCommentID), verb = "get", return_params_list = return_params_list)

def modifyInjuryOccurrenceInjuryOccurrenceComment(InjuryOccurrenceInjuryOccurrenceCommentID, EntityID = 1, setInjuryOccurrenceCommentID = None, setInjuryOccurrenceID = None, setRelationships = None, returnInjuryOccurrenceInjuryOccurrenceCommentID = True, returnCreatedTime = False, returnInjuryOccurrenceCommentID = False, returnInjuryOccurrenceID = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(), :]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/InjuryOccurrenceInjuryOccurrenceComment/" + str(InjuryOccurrenceInjuryOccurrenceCommentID), verb = "post", return_params_list = return_params_list, payload = payload_params)

def createInjuryOccurrenceInjuryOccurrenceComment(EntityID = 1, setInjuryOccurrenceCommentID = None, setInjuryOccurrenceID = None, setRelationships = None, returnInjuryOccurrenceInjuryOccurrenceCommentID = True, returnCreatedTime = False, returnInjuryOccurrenceCommentID = False, returnInjuryOccurrenceID = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params.loc[lambda x: ((x.value & (x.index.to_series().str.contains("return"))) | (~(x.value.isnull()) & (x.index.to_series().str.contains("set")))) & (x.index.to_series() != "EntityID"),:].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(),:]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/InjuryOccurrenceInjuryOccurrenceComment/", verb = "put", return_params_list = return_params_list, payload = payload_params)

def deleteInjuryOccurrenceInjuryOccurrenceComment(InjuryOccurrenceInjuryOccurrenceCommentID, EntityID = 1):

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Attendance/AttendancePeriod/" + str(AttendancePeriodID), verb = "delete")

def getEveryInjuryOccurrenceNote(EntityID = 1, page = 1, pageSize = 100, returnInjuryOccurrenceNoteID = True, returnCreatedTime = False, returnInjuryOccurrenceID = False, returnModifiedTime = False, returnNote = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[3,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/InjuryOccurrenceNote/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params_list)

def getInjuryOccurrenceNote(InjuryOccurrenceNoteID, EntityID = 1, returnInjuryOccurrenceNoteID = True, returnCreatedTime = False, returnInjuryOccurrenceID = False, returnModifiedTime = False, returnNote = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[2,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/InjuryOccurrenceNote/" + str(InjuryOccurrenceNoteID), verb = "get", return_params_list = return_params_list)

def modifyInjuryOccurrenceNote(InjuryOccurrenceNoteID, EntityID = 1, setInjuryOccurrenceID = None, setNote = None, setRelationships = None, returnInjuryOccurrenceNoteID = True, returnCreatedTime = False, returnInjuryOccurrenceID = False, returnModifiedTime = False, returnNote = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(), :]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/InjuryOccurrenceNote/" + str(InjuryOccurrenceNoteID), verb = "post", return_params_list = return_params_list, payload = payload_params)

def createInjuryOccurrenceNote(EntityID = 1, setInjuryOccurrenceID = None, setNote = None, setRelationships = None, returnInjuryOccurrenceNoteID = True, returnCreatedTime = False, returnInjuryOccurrenceID = False, returnModifiedTime = False, returnNote = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params.loc[lambda x: ((x.value & (x.index.to_series().str.contains("return"))) | (~(x.value.isnull()) & (x.index.to_series().str.contains("set")))) & (x.index.to_series() != "EntityID"),:].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(),:]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/InjuryOccurrenceNote/", verb = "put", return_params_list = return_params_list, payload = payload_params)

def deleteInjuryOccurrenceNote(InjuryOccurrenceNoteID, EntityID = 1):

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Attendance/AttendancePeriod/" + str(AttendancePeriodID), verb = "delete")

def getEveryInjuryOccurrenceReferral(EntityID = 1, page = 1, pageSize = 100, returnInjuryOccurrenceReferralID = True, returnCompletionDate = False, returnCreatedTime = False, returnHealthProfessionalIDReferredBy = False, returnHealthProfessionalIDReferredTo = False, returnInjuryOccurrenceGuardianNotificationID = False, returnInjuryOccurrenceGuardianResponseID = False, returnInjuryOccurrenceID = False, returnInjuryOccurrenceReferralReasonID = False, returnInjuryOccurrenceReferralResultID = False, returnModifiedTime = False, returnReferralCompleted = False, returnReferralDate = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[3,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/InjuryOccurrenceReferral/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params_list)

def getInjuryOccurrenceReferral(InjuryOccurrenceReferralID, EntityID = 1, returnInjuryOccurrenceReferralID = True, returnCompletionDate = False, returnCreatedTime = False, returnHealthProfessionalIDReferredBy = False, returnHealthProfessionalIDReferredTo = False, returnInjuryOccurrenceGuardianNotificationID = False, returnInjuryOccurrenceGuardianResponseID = False, returnInjuryOccurrenceID = False, returnInjuryOccurrenceReferralReasonID = False, returnInjuryOccurrenceReferralResultID = False, returnModifiedTime = False, returnReferralCompleted = False, returnReferralDate = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[2,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/InjuryOccurrenceReferral/" + str(InjuryOccurrenceReferralID), verb = "get", return_params_list = return_params_list)

def modifyInjuryOccurrenceReferral(InjuryOccurrenceReferralID, EntityID = 1, setCompletionDate = None, setHealthProfessionalIDReferredBy = None, setHealthProfessionalIDReferredTo = None, setInjuryOccurrenceGuardianNotificationID = None, setInjuryOccurrenceGuardianResponseID = None, setInjuryOccurrenceID = None, setInjuryOccurrenceReferralReasonID = None, setInjuryOccurrenceReferralResultID = None, setReferralCompleted = None, setReferralDate = None, setRelationships = None, returnInjuryOccurrenceReferralID = True, returnCompletionDate = False, returnCreatedTime = False, returnHealthProfessionalIDReferredBy = False, returnHealthProfessionalIDReferredTo = False, returnInjuryOccurrenceGuardianNotificationID = False, returnInjuryOccurrenceGuardianResponseID = False, returnInjuryOccurrenceID = False, returnInjuryOccurrenceReferralReasonID = False, returnInjuryOccurrenceReferralResultID = False, returnModifiedTime = False, returnReferralCompleted = False, returnReferralDate = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(), :]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/InjuryOccurrenceReferral/" + str(InjuryOccurrenceReferralID), verb = "post", return_params_list = return_params_list, payload = payload_params)

def createInjuryOccurrenceReferral(EntityID = 1, setCompletionDate = None, setHealthProfessionalIDReferredBy = None, setHealthProfessionalIDReferredTo = None, setInjuryOccurrenceGuardianNotificationID = None, setInjuryOccurrenceGuardianResponseID = None, setInjuryOccurrenceID = None, setInjuryOccurrenceReferralReasonID = None, setInjuryOccurrenceReferralResultID = None, setReferralCompleted = None, setReferralDate = None, setRelationships = None, returnInjuryOccurrenceReferralID = True, returnCompletionDate = False, returnCreatedTime = False, returnHealthProfessionalIDReferredBy = False, returnHealthProfessionalIDReferredTo = False, returnInjuryOccurrenceGuardianNotificationID = False, returnInjuryOccurrenceGuardianResponseID = False, returnInjuryOccurrenceID = False, returnInjuryOccurrenceReferralReasonID = False, returnInjuryOccurrenceReferralResultID = False, returnModifiedTime = False, returnReferralCompleted = False, returnReferralDate = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params.loc[lambda x: ((x.value & (x.index.to_series().str.contains("return"))) | (~(x.value.isnull()) & (x.index.to_series().str.contains("set")))) & (x.index.to_series() != "EntityID"),:].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(),:]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/InjuryOccurrenceReferral/", verb = "put", return_params_list = return_params_list, payload = payload_params)

def deleteInjuryOccurrenceReferral(InjuryOccurrenceReferralID, EntityID = 1):

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Attendance/AttendancePeriod/" + str(AttendancePeriodID), verb = "delete")

def getEveryInjuryOccurrenceReferralReason(EntityID = 1, page = 1, pageSize = 100, returnInjuryOccurrenceReferralReasonID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[3,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/InjuryOccurrenceReferralReason/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params_list)

def getInjuryOccurrenceReferralReason(InjuryOccurrenceReferralReasonID, EntityID = 1, returnInjuryOccurrenceReferralReasonID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[2,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/InjuryOccurrenceReferralReason/" + str(InjuryOccurrenceReferralReasonID), verb = "get", return_params_list = return_params_list)

def modifyInjuryOccurrenceReferralReason(InjuryOccurrenceReferralReasonID, EntityID = 1, setCode = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setRelationships = None, returnInjuryOccurrenceReferralReasonID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(), :]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/InjuryOccurrenceReferralReason/" + str(InjuryOccurrenceReferralReasonID), verb = "post", return_params_list = return_params_list, payload = payload_params)

def createInjuryOccurrenceReferralReason(EntityID = 1, setCode = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setRelationships = None, returnInjuryOccurrenceReferralReasonID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params.loc[lambda x: ((x.value & (x.index.to_series().str.contains("return"))) | (~(x.value.isnull()) & (x.index.to_series().str.contains("set")))) & (x.index.to_series() != "EntityID"),:].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(),:]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/InjuryOccurrenceReferralReason/", verb = "put", return_params_list = return_params_list, payload = payload_params)

def deleteInjuryOccurrenceReferralReason(InjuryOccurrenceReferralReasonID, EntityID = 1):

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Attendance/AttendancePeriod/" + str(AttendancePeriodID), verb = "delete")

def getEveryInjuryOccurrenceReferralResult(EntityID = 1, page = 1, pageSize = 100, returnInjuryOccurrenceReferralResultID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[3,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/InjuryOccurrenceReferralResult/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params_list)

def getInjuryOccurrenceReferralResult(InjuryOccurrenceReferralResultID, EntityID = 1, returnInjuryOccurrenceReferralResultID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[2,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/InjuryOccurrenceReferralResult/" + str(InjuryOccurrenceReferralResultID), verb = "get", return_params_list = return_params_list)

def modifyInjuryOccurrenceReferralResult(InjuryOccurrenceReferralResultID, EntityID = 1, setCode = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setRelationships = None, returnInjuryOccurrenceReferralResultID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(), :]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/InjuryOccurrenceReferralResult/" + str(InjuryOccurrenceReferralResultID), verb = "post", return_params_list = return_params_list, payload = payload_params)

def createInjuryOccurrenceReferralResult(EntityID = 1, setCode = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setRelationships = None, returnInjuryOccurrenceReferralResultID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params.loc[lambda x: ((x.value & (x.index.to_series().str.contains("return"))) | (~(x.value.isnull()) & (x.index.to_series().str.contains("set")))) & (x.index.to_series() != "EntityID"),:].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(),:]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/InjuryOccurrenceReferralResult/", verb = "put", return_params_list = return_params_list, payload = payload_params)

def deleteInjuryOccurrenceReferralResult(InjuryOccurrenceReferralResultID, EntityID = 1):

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Attendance/AttendancePeriod/" + str(AttendancePeriodID), verb = "delete")

def getEveryInjuryOccurrenceSecuredNote(EntityID = 1, page = 1, pageSize = 100, returnInjuryOccurrenceSecuredNoteID = True, returnCreatedTime = False, returnInjuryOccurrenceID = False, returnModifiedTime = False, returnNote = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[3,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/InjuryOccurrenceSecuredNote/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params_list)

def getInjuryOccurrenceSecuredNote(InjuryOccurrenceSecuredNoteID, EntityID = 1, returnInjuryOccurrenceSecuredNoteID = True, returnCreatedTime = False, returnInjuryOccurrenceID = False, returnModifiedTime = False, returnNote = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[2,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/InjuryOccurrenceSecuredNote/" + str(InjuryOccurrenceSecuredNoteID), verb = "get", return_params_list = return_params_list)

def modifyInjuryOccurrenceSecuredNote(InjuryOccurrenceSecuredNoteID, EntityID = 1, setInjuryOccurrenceID = None, setNote = None, setRelationships = None, returnInjuryOccurrenceSecuredNoteID = True, returnCreatedTime = False, returnInjuryOccurrenceID = False, returnModifiedTime = False, returnNote = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(), :]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/InjuryOccurrenceSecuredNote/" + str(InjuryOccurrenceSecuredNoteID), verb = "post", return_params_list = return_params_list, payload = payload_params)

def createInjuryOccurrenceSecuredNote(EntityID = 1, setInjuryOccurrenceID = None, setNote = None, setRelationships = None, returnInjuryOccurrenceSecuredNoteID = True, returnCreatedTime = False, returnInjuryOccurrenceID = False, returnModifiedTime = False, returnNote = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params.loc[lambda x: ((x.value & (x.index.to_series().str.contains("return"))) | (~(x.value.isnull()) & (x.index.to_series().str.contains("set")))) & (x.index.to_series() != "EntityID"),:].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(),:]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/InjuryOccurrenceSecuredNote/", verb = "put", return_params_list = return_params_list, payload = payload_params)

def deleteInjuryOccurrenceSecuredNote(InjuryOccurrenceSecuredNoteID, EntityID = 1):

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Attendance/AttendancePeriod/" + str(AttendancePeriodID), verb = "delete")

def getEveryLocation(EntityID = 1, page = 1, pageSize = 100, returnLocationID = True, returnCode = False, returnCreatedTime = False, returnDescription = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[3,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/Location/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params_list)

def getLocation(LocationID, EntityID = 1, returnLocationID = True, returnCode = False, returnCreatedTime = False, returnDescription = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[2,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/Location/" + str(LocationID), verb = "get", return_params_list = return_params_list)

def modifyLocation(LocationID, EntityID = 1, setCode = None, setDescription = None, setRelationships = None, returnLocationID = True, returnCode = False, returnCreatedTime = False, returnDescription = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(), :]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/Location/" + str(LocationID), verb = "post", return_params_list = return_params_list, payload = payload_params)

def createLocation(EntityID = 1, setCode = None, setDescription = None, setRelationships = None, returnLocationID = True, returnCode = False, returnCreatedTime = False, returnDescription = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params.loc[lambda x: ((x.value & (x.index.to_series().str.contains("return"))) | (~(x.value.isnull()) & (x.index.to_series().str.contains("set")))) & (x.index.to_series() != "EntityID"),:].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(),:]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/Location/", verb = "put", return_params_list = return_params_list, payload = payload_params)

def deleteLocation(LocationID, EntityID = 1):

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Attendance/AttendancePeriod/" + str(AttendancePeriodID), verb = "delete")

def getEveryMedication(EntityID = 1, page = 1, pageSize = 100, returnMedicationID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[3,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/Medication/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params_list)

def getMedication(MedicationID, EntityID = 1, returnMedicationID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[2,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/Medication/" + str(MedicationID), verb = "get", return_params_list = return_params_list)

def modifyMedication(MedicationID, EntityID = 1, setCode = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setRelationships = None, returnMedicationID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(), :]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/Medication/" + str(MedicationID), verb = "post", return_params_list = return_params_list, payload = payload_params)

def createMedication(EntityID = 1, setCode = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setRelationships = None, returnMedicationID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params.loc[lambda x: ((x.value & (x.index.to_series().str.contains("return"))) | (~(x.value.isnull()) & (x.index.to_series().str.contains("set")))) & (x.index.to_series() != "EntityID"),:].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(),:]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/Medication/", verb = "put", return_params_list = return_params_list, payload = payload_params)

def deleteMedication(MedicationID, EntityID = 1):

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Attendance/AttendancePeriod/" + str(AttendancePeriodID), verb = "delete")

def getEveryMedicationClassification(EntityID = 1, page = 1, pageSize = 100, returnMedicationClassificationID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[3,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/MedicationClassification/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params_list)

def getMedicationClassification(MedicationClassificationID, EntityID = 1, returnMedicationClassificationID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[2,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/MedicationClassification/" + str(MedicationClassificationID), verb = "get", return_params_list = return_params_list)

def modifyMedicationClassification(MedicationClassificationID, EntityID = 1, setCode = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setRelationships = None, returnMedicationClassificationID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(), :]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/MedicationClassification/" + str(MedicationClassificationID), verb = "post", return_params_list = return_params_list, payload = payload_params)

def createMedicationClassification(EntityID = 1, setCode = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setRelationships = None, returnMedicationClassificationID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params.loc[lambda x: ((x.value & (x.index.to_series().str.contains("return"))) | (~(x.value.isnull()) & (x.index.to_series().str.contains("set")))) & (x.index.to_series() != "EntityID"),:].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(),:]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/MedicationClassification/", verb = "put", return_params_list = return_params_list, payload = payload_params)

def deleteMedicationClassification(MedicationClassificationID, EntityID = 1):

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Attendance/AttendancePeriod/" + str(AttendancePeriodID), verb = "delete")

def getEveryMedicationClassificationMedication(EntityID = 1, page = 1, pageSize = 100, returnMedicationClassificationMedicationID = True, returnCreatedTime = False, returnMedicationClassificationID = False, returnMedicationID = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[3,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/MedicationClassificationMedication/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params_list)

def getMedicationClassificationMedication(MedicationClassificationMedicationID, EntityID = 1, returnMedicationClassificationMedicationID = True, returnCreatedTime = False, returnMedicationClassificationID = False, returnMedicationID = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[2,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/MedicationClassificationMedication/" + str(MedicationClassificationMedicationID), verb = "get", return_params_list = return_params_list)

def modifyMedicationClassificationMedication(MedicationClassificationMedicationID, EntityID = 1, setMedicationClassificationID = None, setMedicationID = None, setRelationships = None, returnMedicationClassificationMedicationID = True, returnCreatedTime = False, returnMedicationClassificationID = False, returnMedicationID = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(), :]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/MedicationClassificationMedication/" + str(MedicationClassificationMedicationID), verb = "post", return_params_list = return_params_list, payload = payload_params)

def createMedicationClassificationMedication(EntityID = 1, setMedicationClassificationID = None, setMedicationID = None, setRelationships = None, returnMedicationClassificationMedicationID = True, returnCreatedTime = False, returnMedicationClassificationID = False, returnMedicationID = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params.loc[lambda x: ((x.value & (x.index.to_series().str.contains("return"))) | (~(x.value.isnull()) & (x.index.to_series().str.contains("set")))) & (x.index.to_series() != "EntityID"),:].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(),:]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/MedicationClassificationMedication/", verb = "put", return_params_list = return_params_list, payload = payload_params)

def deleteMedicationClassificationMedication(MedicationClassificationMedicationID, EntityID = 1):

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Attendance/AttendancePeriod/" + str(AttendancePeriodID), verb = "delete")

def getEveryMedicationComment(EntityID = 1, page = 1, pageSize = 100, returnMedicationCommentID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[3,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/MedicationComment/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params_list)

def getMedicationComment(MedicationCommentID, EntityID = 1, returnMedicationCommentID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[2,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/MedicationComment/" + str(MedicationCommentID), verb = "get", return_params_list = return_params_list)

def modifyMedicationComment(MedicationCommentID, EntityID = 1, setCode = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setRelationships = None, returnMedicationCommentID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(), :]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/MedicationComment/" + str(MedicationCommentID), verb = "post", return_params_list = return_params_list, payload = payload_params)

def createMedicationComment(EntityID = 1, setCode = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setRelationships = None, returnMedicationCommentID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params.loc[lambda x: ((x.value & (x.index.to_series().str.contains("return"))) | (~(x.value.isnull()) & (x.index.to_series().str.contains("set")))) & (x.index.to_series() != "EntityID"),:].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(),:]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/MedicationComment/", verb = "put", return_params_list = return_params_list, payload = payload_params)

def deleteMedicationComment(MedicationCommentID, EntityID = 1):

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Attendance/AttendancePeriod/" + str(AttendancePeriodID), verb = "delete")

def getEveryMedicationDosageUnit(EntityID = 1, page = 1, pageSize = 100, returnMedicationDosageUnitID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnIsActive = False, returnModifiedTime = False, returnSkywardHash = False, returnSkywardID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[3,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/MedicationDosageUnit/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params_list)

def getMedicationDosageUnit(MedicationDosageUnitID, EntityID = 1, returnMedicationDosageUnitID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnIsActive = False, returnModifiedTime = False, returnSkywardHash = False, returnSkywardID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[2,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/MedicationDosageUnit/" + str(MedicationDosageUnitID), verb = "get", return_params_list = return_params_list)

def modifyMedicationDosageUnit(MedicationDosageUnitID, EntityID = 1, setCode = None, setDescription = None, setIsActive = None, setSkywardHash = None, setSkywardID = None, setRelationships = None, returnMedicationDosageUnitID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnIsActive = False, returnModifiedTime = False, returnSkywardHash = False, returnSkywardID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(), :]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/MedicationDosageUnit/" + str(MedicationDosageUnitID), verb = "post", return_params_list = return_params_list, payload = payload_params)

def createMedicationDosageUnit(EntityID = 1, setCode = None, setDescription = None, setIsActive = None, setSkywardHash = None, setSkywardID = None, setRelationships = None, returnMedicationDosageUnitID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnIsActive = False, returnModifiedTime = False, returnSkywardHash = False, returnSkywardID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params.loc[lambda x: ((x.value & (x.index.to_series().str.contains("return"))) | (~(x.value.isnull()) & (x.index.to_series().str.contains("set")))) & (x.index.to_series() != "EntityID"),:].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(),:]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/MedicationDosageUnit/", verb = "put", return_params_list = return_params_list, payload = payload_params)

def deleteMedicationDosageUnit(MedicationDosageUnitID, EntityID = 1):

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Attendance/AttendancePeriod/" + str(AttendancePeriodID), verb = "delete")

def getEveryMedicationRoute(EntityID = 1, page = 1, pageSize = 100, returnMedicationRouteID = True, returnCreatedTime = False, returnDescription = False, returnFDACode = False, returnIsActive = False, returnModifiedTime = False, returnName = False, returnNCIConceptCode = False, returnSkywardHash = False, returnSkywardID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[3,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/MedicationRoute/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params_list)

def getMedicationRoute(MedicationRouteID, EntityID = 1, returnMedicationRouteID = True, returnCreatedTime = False, returnDescription = False, returnFDACode = False, returnIsActive = False, returnModifiedTime = False, returnName = False, returnNCIConceptCode = False, returnSkywardHash = False, returnSkywardID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[2,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/MedicationRoute/" + str(MedicationRouteID), verb = "get", return_params_list = return_params_list)

def modifyMedicationRoute(MedicationRouteID, EntityID = 1, setDescription = None, setFDACode = None, setIsActive = None, setName = None, setNCIConceptCode = None, setSkywardHash = None, setSkywardID = None, setRelationships = None, returnMedicationRouteID = True, returnCreatedTime = False, returnDescription = False, returnFDACode = False, returnIsActive = False, returnModifiedTime = False, returnName = False, returnNCIConceptCode = False, returnSkywardHash = False, returnSkywardID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(), :]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/MedicationRoute/" + str(MedicationRouteID), verb = "post", return_params_list = return_params_list, payload = payload_params)

def createMedicationRoute(EntityID = 1, setDescription = None, setFDACode = None, setIsActive = None, setName = None, setNCIConceptCode = None, setSkywardHash = None, setSkywardID = None, setRelationships = None, returnMedicationRouteID = True, returnCreatedTime = False, returnDescription = False, returnFDACode = False, returnIsActive = False, returnModifiedTime = False, returnName = False, returnNCIConceptCode = False, returnSkywardHash = False, returnSkywardID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params.loc[lambda x: ((x.value & (x.index.to_series().str.contains("return"))) | (~(x.value.isnull()) & (x.index.to_series().str.contains("set")))) & (x.index.to_series() != "EntityID"),:].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(),:]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/MedicationRoute/", verb = "put", return_params_list = return_params_list, payload = payload_params)

def deleteMedicationRoute(MedicationRouteID, EntityID = 1):

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Attendance/AttendancePeriod/" + str(AttendancePeriodID), verb = "delete")

def getEveryNameMedication(EntityID = 1, page = 1, pageSize = 100, returnNameMedicationID = True, returnAdministrationInstruction = False, returnAttachmentCount = False, returnAttachmentIndicatorColumn = False, returnCreatedTime = False, returnDistributionType = False, returnDistributionTypeCode = False, returnEndDate = False, returnEndStatus = False, returnEndStatusCode = False, returnHealthProfessionalIDPrescribedBy = False, returnIsVoid = False, returnMaxDosesPerDay = False, returnMedicationDosageUnitID = False, returnMedicationID = False, returnMedicationRouteID = False, returnModifiedTime = False, returnNameID = False, returnOriginalEndDate = False, returnReceivedDoctorForm = False, returnReceivedParentReleaseForm = False, returnReceivedVerbalParentPermission = False, returnStartDate = False, returnUnitsPerDoseHigh = False, returnUnitsPerDoseLow = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnUserIDVoidedBy = False, returnVoidedTime = False, returnVoidNote = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[3,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/NameMedication/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params_list)

def getNameMedication(NameMedicationID, EntityID = 1, returnNameMedicationID = True, returnAdministrationInstruction = False, returnAttachmentCount = False, returnAttachmentIndicatorColumn = False, returnCreatedTime = False, returnDistributionType = False, returnDistributionTypeCode = False, returnEndDate = False, returnEndStatus = False, returnEndStatusCode = False, returnHealthProfessionalIDPrescribedBy = False, returnIsVoid = False, returnMaxDosesPerDay = False, returnMedicationDosageUnitID = False, returnMedicationID = False, returnMedicationRouteID = False, returnModifiedTime = False, returnNameID = False, returnOriginalEndDate = False, returnReceivedDoctorForm = False, returnReceivedParentReleaseForm = False, returnReceivedVerbalParentPermission = False, returnStartDate = False, returnUnitsPerDoseHigh = False, returnUnitsPerDoseLow = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnUserIDVoidedBy = False, returnVoidedTime = False, returnVoidNote = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[2,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/NameMedication/" + str(NameMedicationID), verb = "get", return_params_list = return_params_list)

def modifyNameMedication(NameMedicationID, EntityID = 1, setAdministrationInstruction = None, setDistributionType = None, setDistributionTypeCode = None, setEndDate = None, setEndStatus = None, setEndStatusCode = None, setHealthProfessionalIDPrescribedBy = None, setIsVoid = None, setMaxDosesPerDay = None, setMedicationDosageUnitID = None, setMedicationID = None, setMedicationRouteID = None, setNameID = None, setOriginalEndDate = None, setReceivedDoctorForm = None, setReceivedParentReleaseForm = None, setReceivedVerbalParentPermission = None, setStartDate = None, setUnitsPerDoseHigh = None, setUnitsPerDoseLow = None, setUserIDVoidedBy = None, setVoidedTime = None, setVoidNote = None, setRelationships = None, returnNameMedicationID = True, returnAdministrationInstruction = False, returnAttachmentCount = False, returnAttachmentIndicatorColumn = False, returnCreatedTime = False, returnDistributionType = False, returnDistributionTypeCode = False, returnEndDate = False, returnEndStatus = False, returnEndStatusCode = False, returnHealthProfessionalIDPrescribedBy = False, returnIsVoid = False, returnMaxDosesPerDay = False, returnMedicationDosageUnitID = False, returnMedicationID = False, returnMedicationRouteID = False, returnModifiedTime = False, returnNameID = False, returnOriginalEndDate = False, returnReceivedDoctorForm = False, returnReceivedParentReleaseForm = False, returnReceivedVerbalParentPermission = False, returnStartDate = False, returnUnitsPerDoseHigh = False, returnUnitsPerDoseLow = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnUserIDVoidedBy = False, returnVoidedTime = False, returnVoidNote = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(), :]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/NameMedication/" + str(NameMedicationID), verb = "post", return_params_list = return_params_list, payload = payload_params)

def createNameMedication(EntityID = 1, setAdministrationInstruction = None, setDistributionType = None, setDistributionTypeCode = None, setEndDate = None, setEndStatus = None, setEndStatusCode = None, setHealthProfessionalIDPrescribedBy = None, setIsVoid = None, setMaxDosesPerDay = None, setMedicationDosageUnitID = None, setMedicationID = None, setMedicationRouteID = None, setNameID = None, setOriginalEndDate = None, setReceivedDoctorForm = None, setReceivedParentReleaseForm = None, setReceivedVerbalParentPermission = None, setStartDate = None, setUnitsPerDoseHigh = None, setUnitsPerDoseLow = None, setUserIDVoidedBy = None, setVoidedTime = None, setVoidNote = None, setRelationships = None, returnNameMedicationID = True, returnAdministrationInstruction = False, returnAttachmentCount = False, returnAttachmentIndicatorColumn = False, returnCreatedTime = False, returnDistributionType = False, returnDistributionTypeCode = False, returnEndDate = False, returnEndStatus = False, returnEndStatusCode = False, returnHealthProfessionalIDPrescribedBy = False, returnIsVoid = False, returnMaxDosesPerDay = False, returnMedicationDosageUnitID = False, returnMedicationID = False, returnMedicationRouteID = False, returnModifiedTime = False, returnNameID = False, returnOriginalEndDate = False, returnReceivedDoctorForm = False, returnReceivedParentReleaseForm = False, returnReceivedVerbalParentPermission = False, returnStartDate = False, returnUnitsPerDoseHigh = False, returnUnitsPerDoseLow = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnUserIDVoidedBy = False, returnVoidedTime = False, returnVoidNote = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params.loc[lambda x: ((x.value & (x.index.to_series().str.contains("return"))) | (~(x.value.isnull()) & (x.index.to_series().str.contains("set")))) & (x.index.to_series() != "EntityID"),:].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(),:]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/NameMedication/", verb = "put", return_params_list = return_params_list, payload = payload_params)

def deleteNameMedication(NameMedicationID, EntityID = 1):

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Attendance/AttendancePeriod/" + str(AttendancePeriodID), verb = "delete")

def getEveryNameMedicationComment(EntityID = 1, page = 1, pageSize = 100, returnNameMedicationCommentID = True, returnCreatedTime = False, returnMedicationCommentID = False, returnModifiedTime = False, returnNameMedicationID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[3,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/NameMedicationComment/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params_list)

def getNameMedicationComment(NameMedicationCommentID, EntityID = 1, returnNameMedicationCommentID = True, returnCreatedTime = False, returnMedicationCommentID = False, returnModifiedTime = False, returnNameMedicationID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[2,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/NameMedicationComment/" + str(NameMedicationCommentID), verb = "get", return_params_list = return_params_list)

def modifyNameMedicationComment(NameMedicationCommentID, EntityID = 1, setMedicationCommentID = None, setNameMedicationID = None, setRelationships = None, returnNameMedicationCommentID = True, returnCreatedTime = False, returnMedicationCommentID = False, returnModifiedTime = False, returnNameMedicationID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(), :]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/NameMedicationComment/" + str(NameMedicationCommentID), verb = "post", return_params_list = return_params_list, payload = payload_params)

def createNameMedicationComment(EntityID = 1, setMedicationCommentID = None, setNameMedicationID = None, setRelationships = None, returnNameMedicationCommentID = True, returnCreatedTime = False, returnMedicationCommentID = False, returnModifiedTime = False, returnNameMedicationID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params.loc[lambda x: ((x.value & (x.index.to_series().str.contains("return"))) | (~(x.value.isnull()) & (x.index.to_series().str.contains("set")))) & (x.index.to_series() != "EntityID"),:].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(),:]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/NameMedicationComment/", verb = "put", return_params_list = return_params_list, payload = payload_params)

def deleteNameMedicationComment(NameMedicationCommentID, EntityID = 1):

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Attendance/AttendancePeriod/" + str(AttendancePeriodID), verb = "delete")

def getEveryNameMedicationNote(EntityID = 1, page = 1, pageSize = 100, returnNameMedicationNoteID = True, returnCreatedTime = False, returnModifiedTime = False, returnNameMedicationID = False, returnNote = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[3,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/NameMedicationNote/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params_list)

def getNameMedicationNote(NameMedicationNoteID, EntityID = 1, returnNameMedicationNoteID = True, returnCreatedTime = False, returnModifiedTime = False, returnNameMedicationID = False, returnNote = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[2,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/NameMedicationNote/" + str(NameMedicationNoteID), verb = "get", return_params_list = return_params_list)

def modifyNameMedicationNote(NameMedicationNoteID, EntityID = 1, setNameMedicationID = None, setNote = None, setRelationships = None, returnNameMedicationNoteID = True, returnCreatedTime = False, returnModifiedTime = False, returnNameMedicationID = False, returnNote = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(), :]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/NameMedicationNote/" + str(NameMedicationNoteID), verb = "post", return_params_list = return_params_list, payload = payload_params)

def createNameMedicationNote(EntityID = 1, setNameMedicationID = None, setNote = None, setRelationships = None, returnNameMedicationNoteID = True, returnCreatedTime = False, returnModifiedTime = False, returnNameMedicationID = False, returnNote = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params.loc[lambda x: ((x.value & (x.index.to_series().str.contains("return"))) | (~(x.value.isnull()) & (x.index.to_series().str.contains("set")))) & (x.index.to_series() != "EntityID"),:].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(),:]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/NameMedicationNote/", verb = "put", return_params_list = return_params_list, payload = payload_params)

def deleteNameMedicationNote(NameMedicationNoteID, EntityID = 1):

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Attendance/AttendancePeriod/" + str(AttendancePeriodID), verb = "delete")

def getEveryNameMedicationPrescription(EntityID = 1, page = 1, pageSize = 100, returnNameMedicationPrescriptionID = True, returnCreatedTime = False, returnExpirationDate = False, returnIsVoid = False, returnModifiedTime = False, returnNameIDPharmacy = False, returnNameMedicationID = False, returnPrescriptionNumber = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnUserIDVoidedBy = False, returnVoidedTime = False, returnVoidNote = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[3,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/NameMedicationPrescription/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params_list)

def getNameMedicationPrescription(NameMedicationPrescriptionID, EntityID = 1, returnNameMedicationPrescriptionID = True, returnCreatedTime = False, returnExpirationDate = False, returnIsVoid = False, returnModifiedTime = False, returnNameIDPharmacy = False, returnNameMedicationID = False, returnPrescriptionNumber = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnUserIDVoidedBy = False, returnVoidedTime = False, returnVoidNote = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[2,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/NameMedicationPrescription/" + str(NameMedicationPrescriptionID), verb = "get", return_params_list = return_params_list)

def modifyNameMedicationPrescription(NameMedicationPrescriptionID, EntityID = 1, setExpirationDate = None, setIsVoid = None, setNameIDPharmacy = None, setNameMedicationID = None, setPrescriptionNumber = None, setUserIDVoidedBy = None, setVoidedTime = None, setVoidNote = None, setRelationships = None, returnNameMedicationPrescriptionID = True, returnCreatedTime = False, returnExpirationDate = False, returnIsVoid = False, returnModifiedTime = False, returnNameIDPharmacy = False, returnNameMedicationID = False, returnPrescriptionNumber = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnUserIDVoidedBy = False, returnVoidedTime = False, returnVoidNote = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(), :]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/NameMedicationPrescription/" + str(NameMedicationPrescriptionID), verb = "post", return_params_list = return_params_list, payload = payload_params)

def createNameMedicationPrescription(EntityID = 1, setExpirationDate = None, setIsVoid = None, setNameIDPharmacy = None, setNameMedicationID = None, setPrescriptionNumber = None, setUserIDVoidedBy = None, setVoidedTime = None, setVoidNote = None, setRelationships = None, returnNameMedicationPrescriptionID = True, returnCreatedTime = False, returnExpirationDate = False, returnIsVoid = False, returnModifiedTime = False, returnNameIDPharmacy = False, returnNameMedicationID = False, returnPrescriptionNumber = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnUserIDVoidedBy = False, returnVoidedTime = False, returnVoidNote = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params.loc[lambda x: ((x.value & (x.index.to_series().str.contains("return"))) | (~(x.value.isnull()) & (x.index.to_series().str.contains("set")))) & (x.index.to_series() != "EntityID"),:].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(),:]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/NameMedicationPrescription/", verb = "put", return_params_list = return_params_list, payload = payload_params)

def deleteNameMedicationPrescription(NameMedicationPrescriptionID, EntityID = 1):

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Attendance/AttendancePeriod/" + str(AttendancePeriodID), verb = "delete")

def getEveryNameMedicationSchedule(EntityID = 1, page = 1, pageSize = 100, returnNameMedicationScheduleID = True, returnCreatedTime = False, returnEndDate = False, returnFriday = False, returnIsAdministrableAsOfSpecifiedDate = False, returnIsAdministrableAsOfToday = False, returnIsVoid = False, returnModifiedTime = False, returnMonday = False, returnNameMedicationID = False, returnSaturday = False, returnScheduledAdministrationTime = False, returnScheduledAdministrationTimeTime = False, returnStartDate = False, returnSunday = False, returnThursday = False, returnTuesday = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnUserIDVoidedBy = False, returnVoidedTime = False, returnVoidNote = False, returnWednesday = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[3,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/NameMedicationSchedule/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params_list)

def getNameMedicationSchedule(NameMedicationScheduleID, EntityID = 1, returnNameMedicationScheduleID = True, returnCreatedTime = False, returnEndDate = False, returnFriday = False, returnIsAdministrableAsOfSpecifiedDate = False, returnIsAdministrableAsOfToday = False, returnIsVoid = False, returnModifiedTime = False, returnMonday = False, returnNameMedicationID = False, returnSaturday = False, returnScheduledAdministrationTime = False, returnScheduledAdministrationTimeTime = False, returnStartDate = False, returnSunday = False, returnThursday = False, returnTuesday = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnUserIDVoidedBy = False, returnVoidedTime = False, returnVoidNote = False, returnWednesday = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[2,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/NameMedicationSchedule/" + str(NameMedicationScheduleID), verb = "get", return_params_list = return_params_list)

def modifyNameMedicationSchedule(NameMedicationScheduleID, EntityID = 1, setEndDate = None, setFriday = None, setIsVoid = None, setMonday = None, setNameMedicationID = None, setSaturday = None, setScheduledAdministrationTime = None, setStartDate = None, setSunday = None, setThursday = None, setTuesday = None, setUserIDVoidedBy = None, setVoidedTime = None, setVoidNote = None, setWednesday = None, setRelationships = None, returnNameMedicationScheduleID = True, returnCreatedTime = False, returnEndDate = False, returnFriday = False, returnIsAdministrableAsOfSpecifiedDate = False, returnIsAdministrableAsOfToday = False, returnIsVoid = False, returnModifiedTime = False, returnMonday = False, returnNameMedicationID = False, returnSaturday = False, returnScheduledAdministrationTime = False, returnScheduledAdministrationTimeTime = False, returnStartDate = False, returnSunday = False, returnThursday = False, returnTuesday = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnUserIDVoidedBy = False, returnVoidedTime = False, returnVoidNote = False, returnWednesday = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(), :]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/NameMedicationSchedule/" + str(NameMedicationScheduleID), verb = "post", return_params_list = return_params_list, payload = payload_params)

def createNameMedicationSchedule(EntityID = 1, setEndDate = None, setFriday = None, setIsVoid = None, setMonday = None, setNameMedicationID = None, setSaturday = None, setScheduledAdministrationTime = None, setStartDate = None, setSunday = None, setThursday = None, setTuesday = None, setUserIDVoidedBy = None, setVoidedTime = None, setVoidNote = None, setWednesday = None, setRelationships = None, returnNameMedicationScheduleID = True, returnCreatedTime = False, returnEndDate = False, returnFriday = False, returnIsAdministrableAsOfSpecifiedDate = False, returnIsAdministrableAsOfToday = False, returnIsVoid = False, returnModifiedTime = False, returnMonday = False, returnNameMedicationID = False, returnSaturday = False, returnScheduledAdministrationTime = False, returnScheduledAdministrationTimeTime = False, returnStartDate = False, returnSunday = False, returnThursday = False, returnTuesday = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnUserIDVoidedBy = False, returnVoidedTime = False, returnVoidNote = False, returnWednesday = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params.loc[lambda x: ((x.value & (x.index.to_series().str.contains("return"))) | (~(x.value.isnull()) & (x.index.to_series().str.contains("set")))) & (x.index.to_series() != "EntityID"),:].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(),:]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/NameMedicationSchedule/", verb = "put", return_params_list = return_params_list, payload = payload_params)

def deleteNameMedicationSchedule(NameMedicationScheduleID, EntityID = 1):

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Attendance/AttendancePeriod/" + str(AttendancePeriodID), verb = "delete")

def getEveryNameMedicationSecuredNote(EntityID = 1, page = 1, pageSize = 100, returnNameMedicationSecuredNoteID = True, returnCreatedTime = False, returnModifiedTime = False, returnNameMedicationID = False, returnNote = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[3,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/NameMedicationSecuredNote/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params_list)

def getNameMedicationSecuredNote(NameMedicationSecuredNoteID, EntityID = 1, returnNameMedicationSecuredNoteID = True, returnCreatedTime = False, returnModifiedTime = False, returnNameMedicationID = False, returnNote = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[2,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/NameMedicationSecuredNote/" + str(NameMedicationSecuredNoteID), verb = "get", return_params_list = return_params_list)

def modifyNameMedicationSecuredNote(NameMedicationSecuredNoteID, EntityID = 1, setNameMedicationID = None, setNote = None, setRelationships = None, returnNameMedicationSecuredNoteID = True, returnCreatedTime = False, returnModifiedTime = False, returnNameMedicationID = False, returnNote = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(), :]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/NameMedicationSecuredNote/" + str(NameMedicationSecuredNoteID), verb = "post", return_params_list = return_params_list, payload = payload_params)

def createNameMedicationSecuredNote(EntityID = 1, setNameMedicationID = None, setNote = None, setRelationships = None, returnNameMedicationSecuredNoteID = True, returnCreatedTime = False, returnModifiedTime = False, returnNameMedicationID = False, returnNote = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params.loc[lambda x: ((x.value & (x.index.to_series().str.contains("return"))) | (~(x.value.isnull()) & (x.index.to_series().str.contains("set")))) & (x.index.to_series() != "EntityID"),:].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(),:]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/NameMedicationSecuredNote/", verb = "put", return_params_list = return_params_list, payload = payload_params)

def deleteNameMedicationSecuredNote(NameMedicationSecuredNoteID, EntityID = 1):

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Attendance/AttendancePeriod/" + str(AttendancePeriodID), verb = "delete")

def getEveryNameOfficeVisit(EntityID = 1, page = 1, pageSize = 100, returnNameOfficeVisitID = True, returnCreatedTime = False, returnDisplayStatus = False, returnDocumentationIsComplete = False, returnEntityID = False, returnHasBeenReleased = False, returnHealthProfessionalIDExaminedBy = False, returnIsNameOfficeVisitToday = False, returnIsVoid = False, returnModifiedTime = False, returnNameID = False, returnNameOfficeVisitDispositionsListDisplay = False, returnNameOfficeVisitReasonsListDisplay = False, returnNameOfficeVisitTreatmentsListDisplay = False, returnOfficeVisitCommentID = False, returnSchoolID = False, returnSchoolYearID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnUserIDVoidedBy = False, returnVoidedTime = False, returnVoidNote = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[3,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/NameOfficeVisit/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params_list)

def getNameOfficeVisit(NameOfficeVisitID, EntityID = 1, returnNameOfficeVisitID = True, returnCreatedTime = False, returnDisplayStatus = False, returnDocumentationIsComplete = False, returnEntityID = False, returnHasBeenReleased = False, returnHealthProfessionalIDExaminedBy = False, returnIsNameOfficeVisitToday = False, returnIsVoid = False, returnModifiedTime = False, returnNameID = False, returnNameOfficeVisitDispositionsListDisplay = False, returnNameOfficeVisitReasonsListDisplay = False, returnNameOfficeVisitTreatmentsListDisplay = False, returnOfficeVisitCommentID = False, returnSchoolID = False, returnSchoolYearID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnUserIDVoidedBy = False, returnVoidedTime = False, returnVoidNote = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[2,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/NameOfficeVisit/" + str(NameOfficeVisitID), verb = "get", return_params_list = return_params_list)

def modifyNameOfficeVisit(NameOfficeVisitID, EntityID = 1, setDocumentationIsComplete = None, setEntityID = None, setHasBeenReleased = None, setHealthProfessionalIDExaminedBy = None, setIsNameOfficeVisitToday = None, setIsVoid = None, setNameID = None, setOfficeVisitCommentID = None, setSchoolID = None, setSchoolYearID = None, setUserIDVoidedBy = None, setVoidedTime = None, setVoidNote = None, setRelationships = None, returnNameOfficeVisitID = True, returnCreatedTime = False, returnDisplayStatus = False, returnDocumentationIsComplete = False, returnEntityID = False, returnHasBeenReleased = False, returnHealthProfessionalIDExaminedBy = False, returnIsNameOfficeVisitToday = False, returnIsVoid = False, returnModifiedTime = False, returnNameID = False, returnNameOfficeVisitDispositionsListDisplay = False, returnNameOfficeVisitReasonsListDisplay = False, returnNameOfficeVisitTreatmentsListDisplay = False, returnOfficeVisitCommentID = False, returnSchoolID = False, returnSchoolYearID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnUserIDVoidedBy = False, returnVoidedTime = False, returnVoidNote = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(), :]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/NameOfficeVisit/" + str(NameOfficeVisitID), verb = "post", return_params_list = return_params_list, payload = payload_params)

def createNameOfficeVisit(EntityID = 1, setDocumentationIsComplete = None, setEntityID = None, setHasBeenReleased = None, setHealthProfessionalIDExaminedBy = None, setIsNameOfficeVisitToday = None, setIsVoid = None, setNameID = None, setOfficeVisitCommentID = None, setSchoolID = None, setSchoolYearID = None, setUserIDVoidedBy = None, setVoidedTime = None, setVoidNote = None, setRelationships = None, returnNameOfficeVisitID = True, returnCreatedTime = False, returnDisplayStatus = False, returnDocumentationIsComplete = False, returnEntityID = False, returnHasBeenReleased = False, returnHealthProfessionalIDExaminedBy = False, returnIsNameOfficeVisitToday = False, returnIsVoid = False, returnModifiedTime = False, returnNameID = False, returnNameOfficeVisitDispositionsListDisplay = False, returnNameOfficeVisitReasonsListDisplay = False, returnNameOfficeVisitTreatmentsListDisplay = False, returnOfficeVisitCommentID = False, returnSchoolID = False, returnSchoolYearID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnUserIDVoidedBy = False, returnVoidedTime = False, returnVoidNote = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params.loc[lambda x: ((x.value & (x.index.to_series().str.contains("return"))) | (~(x.value.isnull()) & (x.index.to_series().str.contains("set")))) & (x.index.to_series() != "EntityID"),:].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(),:]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/NameOfficeVisit/", verb = "put", return_params_list = return_params_list, payload = payload_params)

def deleteNameOfficeVisit(NameOfficeVisitID, EntityID = 1):

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Attendance/AttendancePeriod/" + str(AttendancePeriodID), verb = "delete")

def getEveryNameOfficeVisitDisposition(EntityID = 1, page = 1, pageSize = 100, returnNameOfficeVisitDispositionID = True, returnCreatedTime = False, returnModifiedTime = False, returnNameOfficeVisitID = False, returnOfficeVisitDispositionID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[3,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/NameOfficeVisitDisposition/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params_list)

def getNameOfficeVisitDisposition(NameOfficeVisitDispositionID, EntityID = 1, returnNameOfficeVisitDispositionID = True, returnCreatedTime = False, returnModifiedTime = False, returnNameOfficeVisitID = False, returnOfficeVisitDispositionID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[2,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/NameOfficeVisitDisposition/" + str(NameOfficeVisitDispositionID), verb = "get", return_params_list = return_params_list)

def modifyNameOfficeVisitDisposition(NameOfficeVisitDispositionID, EntityID = 1, setNameOfficeVisitID = None, setOfficeVisitDispositionID = None, setRelationships = None, returnNameOfficeVisitDispositionID = True, returnCreatedTime = False, returnModifiedTime = False, returnNameOfficeVisitID = False, returnOfficeVisitDispositionID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(), :]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/NameOfficeVisitDisposition/" + str(NameOfficeVisitDispositionID), verb = "post", return_params_list = return_params_list, payload = payload_params)

def createNameOfficeVisitDisposition(EntityID = 1, setNameOfficeVisitID = None, setOfficeVisitDispositionID = None, setRelationships = None, returnNameOfficeVisitDispositionID = True, returnCreatedTime = False, returnModifiedTime = False, returnNameOfficeVisitID = False, returnOfficeVisitDispositionID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params.loc[lambda x: ((x.value & (x.index.to_series().str.contains("return"))) | (~(x.value.isnull()) & (x.index.to_series().str.contains("set")))) & (x.index.to_series() != "EntityID"),:].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(),:]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/NameOfficeVisitDisposition/", verb = "put", return_params_list = return_params_list, payload = payload_params)

def deleteNameOfficeVisitDisposition(NameOfficeVisitDispositionID, EntityID = 1):

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Attendance/AttendancePeriod/" + str(AttendancePeriodID), verb = "delete")

def getEveryNameOfficeVisitNote(EntityID = 1, page = 1, pageSize = 100, returnNameOfficeVisitNoteID = True, returnCreatedTime = False, returnModifiedTime = False, returnNameOfficeVisitID = False, returnNote = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[3,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/NameOfficeVisitNote/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params_list)

def getNameOfficeVisitNote(NameOfficeVisitNoteID, EntityID = 1, returnNameOfficeVisitNoteID = True, returnCreatedTime = False, returnModifiedTime = False, returnNameOfficeVisitID = False, returnNote = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[2,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/NameOfficeVisitNote/" + str(NameOfficeVisitNoteID), verb = "get", return_params_list = return_params_list)

def modifyNameOfficeVisitNote(NameOfficeVisitNoteID, EntityID = 1, setNameOfficeVisitID = None, setNote = None, setRelationships = None, returnNameOfficeVisitNoteID = True, returnCreatedTime = False, returnModifiedTime = False, returnNameOfficeVisitID = False, returnNote = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(), :]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/NameOfficeVisitNote/" + str(NameOfficeVisitNoteID), verb = "post", return_params_list = return_params_list, payload = payload_params)

def createNameOfficeVisitNote(EntityID = 1, setNameOfficeVisitID = None, setNote = None, setRelationships = None, returnNameOfficeVisitNoteID = True, returnCreatedTime = False, returnModifiedTime = False, returnNameOfficeVisitID = False, returnNote = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params.loc[lambda x: ((x.value & (x.index.to_series().str.contains("return"))) | (~(x.value.isnull()) & (x.index.to_series().str.contains("set")))) & (x.index.to_series() != "EntityID"),:].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(),:]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/NameOfficeVisitNote/", verb = "put", return_params_list = return_params_list, payload = payload_params)

def deleteNameOfficeVisitNote(NameOfficeVisitNoteID, EntityID = 1):

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Attendance/AttendancePeriod/" + str(AttendancePeriodID), verb = "delete")

def getEveryNameOfficeVisitNotification(EntityID = 1, page = 1, pageSize = 100, returnNameOfficeVisitNotificationID = True, returnCreatedTime = False, returnModifiedTime = False, returnNameID = False, returnNameOfficeVisitID = False, returnNote = False, returnNotificationMethodID = False, returnNotificationTime = False, returnNotificationTimeDate = False, returnNotificationTimeTime = False, returnOfficeVisitGuardianResponseID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[3,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/NameOfficeVisitNotification/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params_list)

def getNameOfficeVisitNotification(NameOfficeVisitNotificationID, EntityID = 1, returnNameOfficeVisitNotificationID = True, returnCreatedTime = False, returnModifiedTime = False, returnNameID = False, returnNameOfficeVisitID = False, returnNote = False, returnNotificationMethodID = False, returnNotificationTime = False, returnNotificationTimeDate = False, returnNotificationTimeTime = False, returnOfficeVisitGuardianResponseID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[2,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/NameOfficeVisitNotification/" + str(NameOfficeVisitNotificationID), verb = "get", return_params_list = return_params_list)

def modifyNameOfficeVisitNotification(NameOfficeVisitNotificationID, EntityID = 1, setNameID = None, setNameOfficeVisitID = None, setNote = None, setNotificationMethodID = None, setNotificationTime = None, setNotificationTimeDate = None, setNotificationTimeTime = None, setOfficeVisitGuardianResponseID = None, setRelationships = None, returnNameOfficeVisitNotificationID = True, returnCreatedTime = False, returnModifiedTime = False, returnNameID = False, returnNameOfficeVisitID = False, returnNote = False, returnNotificationMethodID = False, returnNotificationTime = False, returnNotificationTimeDate = False, returnNotificationTimeTime = False, returnOfficeVisitGuardianResponseID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(), :]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/NameOfficeVisitNotification/" + str(NameOfficeVisitNotificationID), verb = "post", return_params_list = return_params_list, payload = payload_params)

def createNameOfficeVisitNotification(EntityID = 1, setNameID = None, setNameOfficeVisitID = None, setNote = None, setNotificationMethodID = None, setNotificationTime = None, setNotificationTimeDate = None, setNotificationTimeTime = None, setOfficeVisitGuardianResponseID = None, setRelationships = None, returnNameOfficeVisitNotificationID = True, returnCreatedTime = False, returnModifiedTime = False, returnNameID = False, returnNameOfficeVisitID = False, returnNote = False, returnNotificationMethodID = False, returnNotificationTime = False, returnNotificationTimeDate = False, returnNotificationTimeTime = False, returnOfficeVisitGuardianResponseID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params.loc[lambda x: ((x.value & (x.index.to_series().str.contains("return"))) | (~(x.value.isnull()) & (x.index.to_series().str.contains("set")))) & (x.index.to_series() != "EntityID"),:].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(),:]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/NameOfficeVisitNotification/", verb = "put", return_params_list = return_params_list, payload = payload_params)

def deleteNameOfficeVisitNotification(NameOfficeVisitNotificationID, EntityID = 1):

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Attendance/AttendancePeriod/" + str(AttendancePeriodID), verb = "delete")

def getEveryNameOfficeVisitReason(EntityID = 1, page = 1, pageSize = 100, returnNameOfficeVisitReasonID = True, returnCreatedTime = False, returnModifiedTime = False, returnNameOfficeVisitID = False, returnOfficeVisitReasonID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[3,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/NameOfficeVisitReason/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params_list)

def getNameOfficeVisitReason(NameOfficeVisitReasonID, EntityID = 1, returnNameOfficeVisitReasonID = True, returnCreatedTime = False, returnModifiedTime = False, returnNameOfficeVisitID = False, returnOfficeVisitReasonID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[2,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/NameOfficeVisitReason/" + str(NameOfficeVisitReasonID), verb = "get", return_params_list = return_params_list)

def modifyNameOfficeVisitReason(NameOfficeVisitReasonID, EntityID = 1, setNameOfficeVisitID = None, setOfficeVisitReasonID = None, setRelationships = None, returnNameOfficeVisitReasonID = True, returnCreatedTime = False, returnModifiedTime = False, returnNameOfficeVisitID = False, returnOfficeVisitReasonID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(), :]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/NameOfficeVisitReason/" + str(NameOfficeVisitReasonID), verb = "post", return_params_list = return_params_list, payload = payload_params)

def createNameOfficeVisitReason(EntityID = 1, setNameOfficeVisitID = None, setOfficeVisitReasonID = None, setRelationships = None, returnNameOfficeVisitReasonID = True, returnCreatedTime = False, returnModifiedTime = False, returnNameOfficeVisitID = False, returnOfficeVisitReasonID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params.loc[lambda x: ((x.value & (x.index.to_series().str.contains("return"))) | (~(x.value.isnull()) & (x.index.to_series().str.contains("set")))) & (x.index.to_series() != "EntityID"),:].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(),:]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/NameOfficeVisitReason/", verb = "put", return_params_list = return_params_list, payload = payload_params)

def deleteNameOfficeVisitReason(NameOfficeVisitReasonID, EntityID = 1):

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Attendance/AttendancePeriod/" + str(AttendancePeriodID), verb = "delete")

def getEveryNameOfficeVisitReferral(EntityID = 1, page = 1, pageSize = 100, returnNameOfficeVisitReferralID = True, returnCompletionDate = False, returnCreatedTime = False, returnHealthProfessionalIDReferredBy = False, returnHealthProfessionalIDReferredTo = False, returnModifiedTime = False, returnNameOfficeVisitID = False, returnOfficeVisitGuardianResponseID = False, returnOfficeVisitReferralReasonID = False, returnOfficeVisitReferralResultID = False, returnReferralCompleted = False, returnReferralDate = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[3,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/NameOfficeVisitReferral/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params_list)

def getNameOfficeVisitReferral(NameOfficeVisitReferralID, EntityID = 1, returnNameOfficeVisitReferralID = True, returnCompletionDate = False, returnCreatedTime = False, returnHealthProfessionalIDReferredBy = False, returnHealthProfessionalIDReferredTo = False, returnModifiedTime = False, returnNameOfficeVisitID = False, returnOfficeVisitGuardianResponseID = False, returnOfficeVisitReferralReasonID = False, returnOfficeVisitReferralResultID = False, returnReferralCompleted = False, returnReferralDate = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[2,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/NameOfficeVisitReferral/" + str(NameOfficeVisitReferralID), verb = "get", return_params_list = return_params_list)

def modifyNameOfficeVisitReferral(NameOfficeVisitReferralID, EntityID = 1, setCompletionDate = None, setHealthProfessionalIDReferredBy = None, setHealthProfessionalIDReferredTo = None, setNameOfficeVisitID = None, setOfficeVisitGuardianResponseID = None, setOfficeVisitReferralReasonID = None, setOfficeVisitReferralResultID = None, setReferralCompleted = None, setReferralDate = None, setRelationships = None, returnNameOfficeVisitReferralID = True, returnCompletionDate = False, returnCreatedTime = False, returnHealthProfessionalIDReferredBy = False, returnHealthProfessionalIDReferredTo = False, returnModifiedTime = False, returnNameOfficeVisitID = False, returnOfficeVisitGuardianResponseID = False, returnOfficeVisitReferralReasonID = False, returnOfficeVisitReferralResultID = False, returnReferralCompleted = False, returnReferralDate = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(), :]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/NameOfficeVisitReferral/" + str(NameOfficeVisitReferralID), verb = "post", return_params_list = return_params_list, payload = payload_params)

def createNameOfficeVisitReferral(EntityID = 1, setCompletionDate = None, setHealthProfessionalIDReferredBy = None, setHealthProfessionalIDReferredTo = None, setNameOfficeVisitID = None, setOfficeVisitGuardianResponseID = None, setOfficeVisitReferralReasonID = None, setOfficeVisitReferralResultID = None, setReferralCompleted = None, setReferralDate = None, setRelationships = None, returnNameOfficeVisitReferralID = True, returnCompletionDate = False, returnCreatedTime = False, returnHealthProfessionalIDReferredBy = False, returnHealthProfessionalIDReferredTo = False, returnModifiedTime = False, returnNameOfficeVisitID = False, returnOfficeVisitGuardianResponseID = False, returnOfficeVisitReferralReasonID = False, returnOfficeVisitReferralResultID = False, returnReferralCompleted = False, returnReferralDate = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params.loc[lambda x: ((x.value & (x.index.to_series().str.contains("return"))) | (~(x.value.isnull()) & (x.index.to_series().str.contains("set")))) & (x.index.to_series() != "EntityID"),:].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(),:]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/NameOfficeVisitReferral/", verb = "put", return_params_list = return_params_list, payload = payload_params)

def deleteNameOfficeVisitReferral(NameOfficeVisitReferralID, EntityID = 1):

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Attendance/AttendancePeriod/" + str(AttendancePeriodID), verb = "delete")

def getEveryNameOfficeVisitSecuredNote(EntityID = 1, page = 1, pageSize = 100, returnNameOfficeVisitSecuredNoteID = True, returnCreatedTime = False, returnModifiedTime = False, returnNameOfficeVisitID = False, returnNote = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[3,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/NameOfficeVisitSecuredNote/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params_list)

def getNameOfficeVisitSecuredNote(NameOfficeVisitSecuredNoteID, EntityID = 1, returnNameOfficeVisitSecuredNoteID = True, returnCreatedTime = False, returnModifiedTime = False, returnNameOfficeVisitID = False, returnNote = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[2,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/NameOfficeVisitSecuredNote/" + str(NameOfficeVisitSecuredNoteID), verb = "get", return_params_list = return_params_list)

def modifyNameOfficeVisitSecuredNote(NameOfficeVisitSecuredNoteID, EntityID = 1, setNameOfficeVisitID = None, setNote = None, setRelationships = None, returnNameOfficeVisitSecuredNoteID = True, returnCreatedTime = False, returnModifiedTime = False, returnNameOfficeVisitID = False, returnNote = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(), :]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/NameOfficeVisitSecuredNote/" + str(NameOfficeVisitSecuredNoteID), verb = "post", return_params_list = return_params_list, payload = payload_params)

def createNameOfficeVisitSecuredNote(EntityID = 1, setNameOfficeVisitID = None, setNote = None, setRelationships = None, returnNameOfficeVisitSecuredNoteID = True, returnCreatedTime = False, returnModifiedTime = False, returnNameOfficeVisitID = False, returnNote = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params.loc[lambda x: ((x.value & (x.index.to_series().str.contains("return"))) | (~(x.value.isnull()) & (x.index.to_series().str.contains("set")))) & (x.index.to_series() != "EntityID"),:].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(),:]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/NameOfficeVisitSecuredNote/", verb = "put", return_params_list = return_params_list, payload = payload_params)

def deleteNameOfficeVisitSecuredNote(NameOfficeVisitSecuredNoteID, EntityID = 1):

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Attendance/AttendancePeriod/" + str(AttendancePeriodID), verb = "delete")

def getEveryNameOfficeVisitTimeTransaction(EntityID = 1, page = 1, pageSize = 100, returnNameOfficeVisitTimeTransactionID = True, returnCreatedTime = False, returnDisplayDuration = False, returnDisplayOrder = False, returnDuration = False, returnEndTime = False, returnEndTimeDate = False, returnEndTimeTime = False, returnModifiedTime = False, returnNameOfficeVisitID = False, returnNote = False, returnStartTime = False, returnStartTimeDate = False, returnStartTimeTime = False, returnStatus = False, returnStatusCode = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[3,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/NameOfficeVisitTimeTransaction/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params_list)

def getNameOfficeVisitTimeTransaction(NameOfficeVisitTimeTransactionID, EntityID = 1, returnNameOfficeVisitTimeTransactionID = True, returnCreatedTime = False, returnDisplayDuration = False, returnDisplayOrder = False, returnDuration = False, returnEndTime = False, returnEndTimeDate = False, returnEndTimeTime = False, returnModifiedTime = False, returnNameOfficeVisitID = False, returnNote = False, returnStartTime = False, returnStartTimeDate = False, returnStartTimeTime = False, returnStatus = False, returnStatusCode = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[2,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/NameOfficeVisitTimeTransaction/" + str(NameOfficeVisitTimeTransactionID), verb = "get", return_params_list = return_params_list)

def modifyNameOfficeVisitTimeTransaction(NameOfficeVisitTimeTransactionID, EntityID = 1, setDisplayOrder = None, setEndTime = None, setEndTimeDate = None, setEndTimeTime = None, setNameOfficeVisitID = None, setNote = None, setStartTime = None, setStartTimeDate = None, setStartTimeTime = None, setStatus = None, setStatusCode = None, setRelationships = None, returnNameOfficeVisitTimeTransactionID = True, returnCreatedTime = False, returnDisplayDuration = False, returnDisplayOrder = False, returnDuration = False, returnEndTime = False, returnEndTimeDate = False, returnEndTimeTime = False, returnModifiedTime = False, returnNameOfficeVisitID = False, returnNote = False, returnStartTime = False, returnStartTimeDate = False, returnStartTimeTime = False, returnStatus = False, returnStatusCode = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(), :]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/NameOfficeVisitTimeTransaction/" + str(NameOfficeVisitTimeTransactionID), verb = "post", return_params_list = return_params_list, payload = payload_params)

def createNameOfficeVisitTimeTransaction(EntityID = 1, setDisplayOrder = None, setEndTime = None, setEndTimeDate = None, setEndTimeTime = None, setNameOfficeVisitID = None, setNote = None, setStartTime = None, setStartTimeDate = None, setStartTimeTime = None, setStatus = None, setStatusCode = None, setRelationships = None, returnNameOfficeVisitTimeTransactionID = True, returnCreatedTime = False, returnDisplayDuration = False, returnDisplayOrder = False, returnDuration = False, returnEndTime = False, returnEndTimeDate = False, returnEndTimeTime = False, returnModifiedTime = False, returnNameOfficeVisitID = False, returnNote = False, returnStartTime = False, returnStartTimeDate = False, returnStartTimeTime = False, returnStatus = False, returnStatusCode = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params.loc[lambda x: ((x.value & (x.index.to_series().str.contains("return"))) | (~(x.value.isnull()) & (x.index.to_series().str.contains("set")))) & (x.index.to_series() != "EntityID"),:].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(),:]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/NameOfficeVisitTimeTransaction/", verb = "put", return_params_list = return_params_list, payload = payload_params)

def deleteNameOfficeVisitTimeTransaction(NameOfficeVisitTimeTransactionID, EntityID = 1):

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Attendance/AttendancePeriod/" + str(AttendancePeriodID), verb = "delete")

def getEveryNameOfficeVisitTreatment(EntityID = 1, page = 1, pageSize = 100, returnNameOfficeVisitTreatmentID = True, returnCreatedTime = False, returnModifiedTime = False, returnNameOfficeVisitID = False, returnOfficeVisitTreatmentID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[3,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/NameOfficeVisitTreatment/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params_list)

def getNameOfficeVisitTreatment(NameOfficeVisitTreatmentID, EntityID = 1, returnNameOfficeVisitTreatmentID = True, returnCreatedTime = False, returnModifiedTime = False, returnNameOfficeVisitID = False, returnOfficeVisitTreatmentID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[2,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/NameOfficeVisitTreatment/" + str(NameOfficeVisitTreatmentID), verb = "get", return_params_list = return_params_list)

def modifyNameOfficeVisitTreatment(NameOfficeVisitTreatmentID, EntityID = 1, setNameOfficeVisitID = None, setOfficeVisitTreatmentID = None, setRelationships = None, returnNameOfficeVisitTreatmentID = True, returnCreatedTime = False, returnModifiedTime = False, returnNameOfficeVisitID = False, returnOfficeVisitTreatmentID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(), :]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/NameOfficeVisitTreatment/" + str(NameOfficeVisitTreatmentID), verb = "post", return_params_list = return_params_list, payload = payload_params)

def createNameOfficeVisitTreatment(EntityID = 1, setNameOfficeVisitID = None, setOfficeVisitTreatmentID = None, setRelationships = None, returnNameOfficeVisitTreatmentID = True, returnCreatedTime = False, returnModifiedTime = False, returnNameOfficeVisitID = False, returnOfficeVisitTreatmentID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params.loc[lambda x: ((x.value & (x.index.to_series().str.contains("return"))) | (~(x.value.isnull()) & (x.index.to_series().str.contains("set")))) & (x.index.to_series() != "EntityID"),:].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(),:]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/NameOfficeVisitTreatment/", verb = "put", return_params_list = return_params_list, payload = payload_params)

def deleteNameOfficeVisitTreatment(NameOfficeVisitTreatmentID, EntityID = 1):

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Attendance/AttendancePeriod/" + str(AttendancePeriodID), verb = "delete")

def getEveryNameProcedure(EntityID = 1, page = 1, pageSize = 100, returnNameProcedureID = True, returnAttachmentCount = False, returnAttachmentIndicatorColumn = False, returnCanCreateOccurrenceAsOfDate = False, returnCreatedTime = False, returnDistributionType = False, returnDistributionTypeCode = False, returnEndDate = False, returnGreatestProcedureOccurrenceDate = False, returnIsActiveAsOfDate = False, returnIsVoid = False, returnModifiedTime = False, returnNameID = False, returnProcedureID = False, returnProcedureInstruction = False, returnReceivedParentReleaseForm = False, returnReceivedPhysicianDocumentation = False, returnStartDate = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnUserIDVoidedBy = False, returnVoidedTime = False, returnVoidNote = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[3,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/NameProcedure/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params_list)

def getNameProcedure(NameProcedureID, EntityID = 1, returnNameProcedureID = True, returnAttachmentCount = False, returnAttachmentIndicatorColumn = False, returnCanCreateOccurrenceAsOfDate = False, returnCreatedTime = False, returnDistributionType = False, returnDistributionTypeCode = False, returnEndDate = False, returnGreatestProcedureOccurrenceDate = False, returnIsActiveAsOfDate = False, returnIsVoid = False, returnModifiedTime = False, returnNameID = False, returnProcedureID = False, returnProcedureInstruction = False, returnReceivedParentReleaseForm = False, returnReceivedPhysicianDocumentation = False, returnStartDate = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnUserIDVoidedBy = False, returnVoidedTime = False, returnVoidNote = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[2,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/NameProcedure/" + str(NameProcedureID), verb = "get", return_params_list = return_params_list)

def modifyNameProcedure(NameProcedureID, EntityID = 1, setDistributionType = None, setDistributionTypeCode = None, setEndDate = None, setIsVoid = None, setNameID = None, setProcedureID = None, setProcedureInstruction = None, setReceivedParentReleaseForm = None, setReceivedPhysicianDocumentation = None, setStartDate = None, setUserIDVoidedBy = None, setVoidedTime = None, setVoidNote = None, setRelationships = None, returnNameProcedureID = True, returnAttachmentCount = False, returnAttachmentIndicatorColumn = False, returnCanCreateOccurrenceAsOfDate = False, returnCreatedTime = False, returnDistributionType = False, returnDistributionTypeCode = False, returnEndDate = False, returnGreatestProcedureOccurrenceDate = False, returnIsActiveAsOfDate = False, returnIsVoid = False, returnModifiedTime = False, returnNameID = False, returnProcedureID = False, returnProcedureInstruction = False, returnReceivedParentReleaseForm = False, returnReceivedPhysicianDocumentation = False, returnStartDate = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnUserIDVoidedBy = False, returnVoidedTime = False, returnVoidNote = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(), :]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/NameProcedure/" + str(NameProcedureID), verb = "post", return_params_list = return_params_list, payload = payload_params)

def createNameProcedure(EntityID = 1, setDistributionType = None, setDistributionTypeCode = None, setEndDate = None, setIsVoid = None, setNameID = None, setProcedureID = None, setProcedureInstruction = None, setReceivedParentReleaseForm = None, setReceivedPhysicianDocumentation = None, setStartDate = None, setUserIDVoidedBy = None, setVoidedTime = None, setVoidNote = None, setRelationships = None, returnNameProcedureID = True, returnAttachmentCount = False, returnAttachmentIndicatorColumn = False, returnCanCreateOccurrenceAsOfDate = False, returnCreatedTime = False, returnDistributionType = False, returnDistributionTypeCode = False, returnEndDate = False, returnGreatestProcedureOccurrenceDate = False, returnIsActiveAsOfDate = False, returnIsVoid = False, returnModifiedTime = False, returnNameID = False, returnProcedureID = False, returnProcedureInstruction = False, returnReceivedParentReleaseForm = False, returnReceivedPhysicianDocumentation = False, returnStartDate = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnUserIDVoidedBy = False, returnVoidedTime = False, returnVoidNote = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params.loc[lambda x: ((x.value & (x.index.to_series().str.contains("return"))) | (~(x.value.isnull()) & (x.index.to_series().str.contains("set")))) & (x.index.to_series() != "EntityID"),:].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(),:]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/NameProcedure/", verb = "put", return_params_list = return_params_list, payload = payload_params)

def deleteNameProcedure(NameProcedureID, EntityID = 1):

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Attendance/AttendancePeriod/" + str(AttendancePeriodID), verb = "delete")

def getEveryNameProcedureNote(EntityID = 1, page = 1, pageSize = 100, returnNameProcedureNoteID = True, returnCreatedTime = False, returnModifiedTime = False, returnNameProcedureID = False, returnNote = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[3,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/NameProcedureNote/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params_list)

def getNameProcedureNote(NameProcedureNoteID, EntityID = 1, returnNameProcedureNoteID = True, returnCreatedTime = False, returnModifiedTime = False, returnNameProcedureID = False, returnNote = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[2,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/NameProcedureNote/" + str(NameProcedureNoteID), verb = "get", return_params_list = return_params_list)

def modifyNameProcedureNote(NameProcedureNoteID, EntityID = 1, setNameProcedureID = None, setNote = None, setRelationships = None, returnNameProcedureNoteID = True, returnCreatedTime = False, returnModifiedTime = False, returnNameProcedureID = False, returnNote = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(), :]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/NameProcedureNote/" + str(NameProcedureNoteID), verb = "post", return_params_list = return_params_list, payload = payload_params)

def createNameProcedureNote(EntityID = 1, setNameProcedureID = None, setNote = None, setRelationships = None, returnNameProcedureNoteID = True, returnCreatedTime = False, returnModifiedTime = False, returnNameProcedureID = False, returnNote = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params.loc[lambda x: ((x.value & (x.index.to_series().str.contains("return"))) | (~(x.value.isnull()) & (x.index.to_series().str.contains("set")))) & (x.index.to_series() != "EntityID"),:].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(),:]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/NameProcedureNote/", verb = "put", return_params_list = return_params_list, payload = payload_params)

def deleteNameProcedureNote(NameProcedureNoteID, EntityID = 1):

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Attendance/AttendancePeriod/" + str(AttendancePeriodID), verb = "delete")

def getEveryNameProcedureOccurrence(EntityID = 1, page = 1, pageSize = 100, returnNameProcedureOccurrenceID = True, returnCreatedTime = False, returnEndTime = False, returnEntityID = False, returnFromOfficeVisit = False, returnHealthProfessionalIDPerformedBy = False, returnIsVoid = False, returnModifiedTime = False, returnNameOfficeVisitID = False, returnNameProcedureID = False, returnNote = False, returnNotPerformedReasonID = False, returnOccurrenceDate = False, returnOccurrenceType = False, returnOccurrenceTypeCode = False, returnProcedureInstructionDisplay = False, returnStartTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnUserIDVoidedBy = False, returnVoidedTime = False, returnVoidNote = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[3,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/NameProcedureOccurrence/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params_list)

def getNameProcedureOccurrence(NameProcedureOccurrenceID, EntityID = 1, returnNameProcedureOccurrenceID = True, returnCreatedTime = False, returnEndTime = False, returnEntityID = False, returnFromOfficeVisit = False, returnHealthProfessionalIDPerformedBy = False, returnIsVoid = False, returnModifiedTime = False, returnNameOfficeVisitID = False, returnNameProcedureID = False, returnNote = False, returnNotPerformedReasonID = False, returnOccurrenceDate = False, returnOccurrenceType = False, returnOccurrenceTypeCode = False, returnProcedureInstructionDisplay = False, returnStartTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnUserIDVoidedBy = False, returnVoidedTime = False, returnVoidNote = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[2,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/NameProcedureOccurrence/" + str(NameProcedureOccurrenceID), verb = "get", return_params_list = return_params_list)

def modifyNameProcedureOccurrence(NameProcedureOccurrenceID, EntityID = 1, setEndTime = None, setEntityID = None, setHealthProfessionalIDPerformedBy = None, setIsVoid = None, setNameOfficeVisitID = None, setNameProcedureID = None, setNote = None, setNotPerformedReasonID = None, setOccurrenceDate = None, setOccurrenceType = None, setOccurrenceTypeCode = None, setStartTime = None, setUserIDVoidedBy = None, setVoidedTime = None, setVoidNote = None, setRelationships = None, returnNameProcedureOccurrenceID = True, returnCreatedTime = False, returnEndTime = False, returnEntityID = False, returnFromOfficeVisit = False, returnHealthProfessionalIDPerformedBy = False, returnIsVoid = False, returnModifiedTime = False, returnNameOfficeVisitID = False, returnNameProcedureID = False, returnNote = False, returnNotPerformedReasonID = False, returnOccurrenceDate = False, returnOccurrenceType = False, returnOccurrenceTypeCode = False, returnProcedureInstructionDisplay = False, returnStartTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnUserIDVoidedBy = False, returnVoidedTime = False, returnVoidNote = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(), :]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/NameProcedureOccurrence/" + str(NameProcedureOccurrenceID), verb = "post", return_params_list = return_params_list, payload = payload_params)

def createNameProcedureOccurrence(EntityID = 1, setEndTime = None, setEntityID = None, setHealthProfessionalIDPerformedBy = None, setIsVoid = None, setNameOfficeVisitID = None, setNameProcedureID = None, setNote = None, setNotPerformedReasonID = None, setOccurrenceDate = None, setOccurrenceType = None, setOccurrenceTypeCode = None, setStartTime = None, setUserIDVoidedBy = None, setVoidedTime = None, setVoidNote = None, setRelationships = None, returnNameProcedureOccurrenceID = True, returnCreatedTime = False, returnEndTime = False, returnEntityID = False, returnFromOfficeVisit = False, returnHealthProfessionalIDPerformedBy = False, returnIsVoid = False, returnModifiedTime = False, returnNameOfficeVisitID = False, returnNameProcedureID = False, returnNote = False, returnNotPerformedReasonID = False, returnOccurrenceDate = False, returnOccurrenceType = False, returnOccurrenceTypeCode = False, returnProcedureInstructionDisplay = False, returnStartTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnUserIDVoidedBy = False, returnVoidedTime = False, returnVoidNote = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params.loc[lambda x: ((x.value & (x.index.to_series().str.contains("return"))) | (~(x.value.isnull()) & (x.index.to_series().str.contains("set")))) & (x.index.to_series() != "EntityID"),:].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(),:]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/NameProcedureOccurrence/", verb = "put", return_params_list = return_params_list, payload = payload_params)

def deleteNameProcedureOccurrence(NameProcedureOccurrenceID, EntityID = 1):

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Attendance/AttendancePeriod/" + str(AttendancePeriodID), verb = "delete")

def getEveryNameProcedureSecuredNote(EntityID = 1, page = 1, pageSize = 100, returnNameProcedureSecuredNoteID = True, returnCreatedTime = False, returnModifiedTime = False, returnNameProcedureID = False, returnNote = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[3,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/NameProcedureSecuredNote/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params_list)

def getNameProcedureSecuredNote(NameProcedureSecuredNoteID, EntityID = 1, returnNameProcedureSecuredNoteID = True, returnCreatedTime = False, returnModifiedTime = False, returnNameProcedureID = False, returnNote = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[2,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/NameProcedureSecuredNote/" + str(NameProcedureSecuredNoteID), verb = "get", return_params_list = return_params_list)

def modifyNameProcedureSecuredNote(NameProcedureSecuredNoteID, EntityID = 1, setNameProcedureID = None, setNote = None, setRelationships = None, returnNameProcedureSecuredNoteID = True, returnCreatedTime = False, returnModifiedTime = False, returnNameProcedureID = False, returnNote = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(), :]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/NameProcedureSecuredNote/" + str(NameProcedureSecuredNoteID), verb = "post", return_params_list = return_params_list, payload = payload_params)

def createNameProcedureSecuredNote(EntityID = 1, setNameProcedureID = None, setNote = None, setRelationships = None, returnNameProcedureSecuredNoteID = True, returnCreatedTime = False, returnModifiedTime = False, returnNameProcedureID = False, returnNote = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params.loc[lambda x: ((x.value & (x.index.to_series().str.contains("return"))) | (~(x.value.isnull()) & (x.index.to_series().str.contains("set")))) & (x.index.to_series() != "EntityID"),:].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(),:]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/NameProcedureSecuredNote/", verb = "put", return_params_list = return_params_list, payload = payload_params)

def deleteNameProcedureSecuredNote(NameProcedureSecuredNoteID, EntityID = 1):

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Attendance/AttendancePeriod/" + str(AttendancePeriodID), verb = "delete")

def getEveryNotificationMethod(EntityID = 1, page = 1, pageSize = 100, returnNotificationMethodID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[3,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/NotificationMethod/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params_list)

def getNotificationMethod(NotificationMethodID, EntityID = 1, returnNotificationMethodID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[2,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/NotificationMethod/" + str(NotificationMethodID), verb = "get", return_params_list = return_params_list)

def modifyNotificationMethod(NotificationMethodID, EntityID = 1, setCode = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setRelationships = None, returnNotificationMethodID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(), :]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/NotificationMethod/" + str(NotificationMethodID), verb = "post", return_params_list = return_params_list, payload = payload_params)

def createNotificationMethod(EntityID = 1, setCode = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setRelationships = None, returnNotificationMethodID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params.loc[lambda x: ((x.value & (x.index.to_series().str.contains("return"))) | (~(x.value.isnull()) & (x.index.to_series().str.contains("set")))) & (x.index.to_series() != "EntityID"),:].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(),:]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/NotificationMethod/", verb = "put", return_params_list = return_params_list, payload = payload_params)

def deleteNotificationMethod(NotificationMethodID, EntityID = 1):

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Attendance/AttendancePeriod/" + str(AttendancePeriodID), verb = "delete")

def getEveryNotPerformedReason(EntityID = 1, page = 1, pageSize = 100, returnNotPerformedReasonID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[3,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/NotPerformedReason/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params_list)

def getNotPerformedReason(NotPerformedReasonID, EntityID = 1, returnNotPerformedReasonID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[2,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/NotPerformedReason/" + str(NotPerformedReasonID), verb = "get", return_params_list = return_params_list)

def modifyNotPerformedReason(NotPerformedReasonID, EntityID = 1, setCode = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setRelationships = None, returnNotPerformedReasonID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(), :]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/NotPerformedReason/" + str(NotPerformedReasonID), verb = "post", return_params_list = return_params_list, payload = payload_params)

def createNotPerformedReason(EntityID = 1, setCode = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setRelationships = None, returnNotPerformedReasonID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params.loc[lambda x: ((x.value & (x.index.to_series().str.contains("return"))) | (~(x.value.isnull()) & (x.index.to_series().str.contains("set")))) & (x.index.to_series() != "EntityID"),:].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(),:]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/NotPerformedReason/", verb = "put", return_params_list = return_params_list, payload = payload_params)

def deleteNotPerformedReason(NotPerformedReasonID, EntityID = 1):

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Attendance/AttendancePeriod/" + str(AttendancePeriodID), verb = "delete")

def getEveryOfficeVisitComment(EntityID = 1, page = 1, pageSize = 100, returnOfficeVisitCommentID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[3,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/OfficeVisitComment/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params_list)

def getOfficeVisitComment(OfficeVisitCommentID, EntityID = 1, returnOfficeVisitCommentID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[2,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/OfficeVisitComment/" + str(OfficeVisitCommentID), verb = "get", return_params_list = return_params_list)

def modifyOfficeVisitComment(OfficeVisitCommentID, EntityID = 1, setCode = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setRelationships = None, returnOfficeVisitCommentID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(), :]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/OfficeVisitComment/" + str(OfficeVisitCommentID), verb = "post", return_params_list = return_params_list, payload = payload_params)

def createOfficeVisitComment(EntityID = 1, setCode = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setRelationships = None, returnOfficeVisitCommentID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params.loc[lambda x: ((x.value & (x.index.to_series().str.contains("return"))) | (~(x.value.isnull()) & (x.index.to_series().str.contains("set")))) & (x.index.to_series() != "EntityID"),:].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(),:]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/OfficeVisitComment/", verb = "put", return_params_list = return_params_list, payload = payload_params)

def deleteOfficeVisitComment(OfficeVisitCommentID, EntityID = 1):

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Attendance/AttendancePeriod/" + str(AttendancePeriodID), verb = "delete")

def getEveryOfficeVisitDisposition(EntityID = 1, page = 1, pageSize = 100, returnOfficeVisitDispositionID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[3,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/OfficeVisitDisposition/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params_list)

def getOfficeVisitDisposition(OfficeVisitDispositionID, EntityID = 1, returnOfficeVisitDispositionID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[2,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/OfficeVisitDisposition/" + str(OfficeVisitDispositionID), verb = "get", return_params_list = return_params_list)

def modifyOfficeVisitDisposition(OfficeVisitDispositionID, EntityID = 1, setCode = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setRelationships = None, returnOfficeVisitDispositionID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(), :]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/OfficeVisitDisposition/" + str(OfficeVisitDispositionID), verb = "post", return_params_list = return_params_list, payload = payload_params)

def createOfficeVisitDisposition(EntityID = 1, setCode = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setRelationships = None, returnOfficeVisitDispositionID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params.loc[lambda x: ((x.value & (x.index.to_series().str.contains("return"))) | (~(x.value.isnull()) & (x.index.to_series().str.contains("set")))) & (x.index.to_series() != "EntityID"),:].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(),:]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/OfficeVisitDisposition/", verb = "put", return_params_list = return_params_list, payload = payload_params)

def deleteOfficeVisitDisposition(OfficeVisitDispositionID, EntityID = 1):

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Attendance/AttendancePeriod/" + str(AttendancePeriodID), verb = "delete")

def getEveryOfficeVisitGuardianResponse(EntityID = 1, page = 1, pageSize = 100, returnOfficeVisitGuardianResponseID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[3,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/OfficeVisitGuardianResponse/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params_list)

def getOfficeVisitGuardianResponse(OfficeVisitGuardianResponseID, EntityID = 1, returnOfficeVisitGuardianResponseID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[2,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/OfficeVisitGuardianResponse/" + str(OfficeVisitGuardianResponseID), verb = "get", return_params_list = return_params_list)

def modifyOfficeVisitGuardianResponse(OfficeVisitGuardianResponseID, EntityID = 1, setCode = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setRelationships = None, returnOfficeVisitGuardianResponseID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(), :]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/OfficeVisitGuardianResponse/" + str(OfficeVisitGuardianResponseID), verb = "post", return_params_list = return_params_list, payload = payload_params)

def createOfficeVisitGuardianResponse(EntityID = 1, setCode = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setRelationships = None, returnOfficeVisitGuardianResponseID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params.loc[lambda x: ((x.value & (x.index.to_series().str.contains("return"))) | (~(x.value.isnull()) & (x.index.to_series().str.contains("set")))) & (x.index.to_series() != "EntityID"),:].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(),:]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/OfficeVisitGuardianResponse/", verb = "put", return_params_list = return_params_list, payload = payload_params)

def deleteOfficeVisitGuardianResponse(OfficeVisitGuardianResponseID, EntityID = 1):

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Attendance/AttendancePeriod/" + str(AttendancePeriodID), verb = "delete")

def getEveryOfficeVisitReason(EntityID = 1, page = 1, pageSize = 100, returnOfficeVisitReasonID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[3,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/OfficeVisitReason/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params_list)

def getOfficeVisitReason(OfficeVisitReasonID, EntityID = 1, returnOfficeVisitReasonID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[2,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/OfficeVisitReason/" + str(OfficeVisitReasonID), verb = "get", return_params_list = return_params_list)

def modifyOfficeVisitReason(OfficeVisitReasonID, EntityID = 1, setCode = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setRelationships = None, returnOfficeVisitReasonID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(), :]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/OfficeVisitReason/" + str(OfficeVisitReasonID), verb = "post", return_params_list = return_params_list, payload = payload_params)

def createOfficeVisitReason(EntityID = 1, setCode = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setRelationships = None, returnOfficeVisitReasonID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params.loc[lambda x: ((x.value & (x.index.to_series().str.contains("return"))) | (~(x.value.isnull()) & (x.index.to_series().str.contains("set")))) & (x.index.to_series() != "EntityID"),:].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(),:]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/OfficeVisitReason/", verb = "put", return_params_list = return_params_list, payload = payload_params)

def deleteOfficeVisitReason(OfficeVisitReasonID, EntityID = 1):

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Attendance/AttendancePeriod/" + str(AttendancePeriodID), verb = "delete")

def getEveryOfficeVisitReferralReason(EntityID = 1, page = 1, pageSize = 100, returnOfficeVisitReferralReasonID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[3,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/OfficeVisitReferralReason/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params_list)

def getOfficeVisitReferralReason(OfficeVisitReferralReasonID, EntityID = 1, returnOfficeVisitReferralReasonID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[2,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/OfficeVisitReferralReason/" + str(OfficeVisitReferralReasonID), verb = "get", return_params_list = return_params_list)

def modifyOfficeVisitReferralReason(OfficeVisitReferralReasonID, EntityID = 1, setCode = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setRelationships = None, returnOfficeVisitReferralReasonID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(), :]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/OfficeVisitReferralReason/" + str(OfficeVisitReferralReasonID), verb = "post", return_params_list = return_params_list, payload = payload_params)

def createOfficeVisitReferralReason(EntityID = 1, setCode = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setRelationships = None, returnOfficeVisitReferralReasonID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params.loc[lambda x: ((x.value & (x.index.to_series().str.contains("return"))) | (~(x.value.isnull()) & (x.index.to_series().str.contains("set")))) & (x.index.to_series() != "EntityID"),:].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(),:]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/OfficeVisitReferralReason/", verb = "put", return_params_list = return_params_list, payload = payload_params)

def deleteOfficeVisitReferralReason(OfficeVisitReferralReasonID, EntityID = 1):

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Attendance/AttendancePeriod/" + str(AttendancePeriodID), verb = "delete")

def getEveryOfficeVisitReferralResult(EntityID = 1, page = 1, pageSize = 100, returnOfficeVisitReferralResultID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[3,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/OfficeVisitReferralResult/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params_list)

def getOfficeVisitReferralResult(OfficeVisitReferralResultID, EntityID = 1, returnOfficeVisitReferralResultID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[2,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/OfficeVisitReferralResult/" + str(OfficeVisitReferralResultID), verb = "get", return_params_list = return_params_list)

def modifyOfficeVisitReferralResult(OfficeVisitReferralResultID, EntityID = 1, setCode = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setRelationships = None, returnOfficeVisitReferralResultID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(), :]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/OfficeVisitReferralResult/" + str(OfficeVisitReferralResultID), verb = "post", return_params_list = return_params_list, payload = payload_params)

def createOfficeVisitReferralResult(EntityID = 1, setCode = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setRelationships = None, returnOfficeVisitReferralResultID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params.loc[lambda x: ((x.value & (x.index.to_series().str.contains("return"))) | (~(x.value.isnull()) & (x.index.to_series().str.contains("set")))) & (x.index.to_series() != "EntityID"),:].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(),:]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/OfficeVisitReferralResult/", verb = "put", return_params_list = return_params_list, payload = payload_params)

def deleteOfficeVisitReferralResult(OfficeVisitReferralResultID, EntityID = 1):

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Attendance/AttendancePeriod/" + str(AttendancePeriodID), verb = "delete")

def getEveryOfficeVisitTreatment(EntityID = 1, page = 1, pageSize = 100, returnOfficeVisitTreatmentID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[3,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/OfficeVisitTreatment/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params_list)

def getOfficeVisitTreatment(OfficeVisitTreatmentID, EntityID = 1, returnOfficeVisitTreatmentID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[2,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/OfficeVisitTreatment/" + str(OfficeVisitTreatmentID), verb = "get", return_params_list = return_params_list)

def modifyOfficeVisitTreatment(OfficeVisitTreatmentID, EntityID = 1, setCode = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setRelationships = None, returnOfficeVisitTreatmentID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(), :]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/OfficeVisitTreatment/" + str(OfficeVisitTreatmentID), verb = "post", return_params_list = return_params_list, payload = payload_params)

def createOfficeVisitTreatment(EntityID = 1, setCode = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setRelationships = None, returnOfficeVisitTreatmentID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params.loc[lambda x: ((x.value & (x.index.to_series().str.contains("return"))) | (~(x.value.isnull()) & (x.index.to_series().str.contains("set")))) & (x.index.to_series() != "EntityID"),:].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(),:]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/OfficeVisitTreatment/", verb = "put", return_params_list = return_params_list, payload = payload_params)

def deleteOfficeVisitTreatment(OfficeVisitTreatmentID, EntityID = 1):

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Attendance/AttendancePeriod/" + str(AttendancePeriodID), verb = "delete")

def getEveryPhysicalComment(EntityID = 1, page = 1, pageSize = 100, returnPhysicalCommentID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[3,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/PhysicalComment/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params_list)

def getPhysicalComment(PhysicalCommentID, EntityID = 1, returnPhysicalCommentID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[2,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/PhysicalComment/" + str(PhysicalCommentID), verb = "get", return_params_list = return_params_list)

def modifyPhysicalComment(PhysicalCommentID, EntityID = 1, setCode = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setRelationships = None, returnPhysicalCommentID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(), :]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/PhysicalComment/" + str(PhysicalCommentID), verb = "post", return_params_list = return_params_list, payload = payload_params)

def createPhysicalComment(EntityID = 1, setCode = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setRelationships = None, returnPhysicalCommentID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params.loc[lambda x: ((x.value & (x.index.to_series().str.contains("return"))) | (~(x.value.isnull()) & (x.index.to_series().str.contains("set")))) & (x.index.to_series() != "EntityID"),:].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(),:]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/PhysicalComment/", verb = "put", return_params_list = return_params_list, payload = payload_params)

def deletePhysicalComment(PhysicalCommentID, EntityID = 1):

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Attendance/AttendancePeriod/" + str(AttendancePeriodID), verb = "delete")

def getEveryPhysicalGuardianNotification(EntityID = 1, page = 1, pageSize = 100, returnPhysicalGuardianNotificationID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[3,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/PhysicalGuardianNotification/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params_list)

def getPhysicalGuardianNotification(PhysicalGuardianNotificationID, EntityID = 1, returnPhysicalGuardianNotificationID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[2,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/PhysicalGuardianNotification/" + str(PhysicalGuardianNotificationID), verb = "get", return_params_list = return_params_list)

def modifyPhysicalGuardianNotification(PhysicalGuardianNotificationID, EntityID = 1, setCode = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setRelationships = None, returnPhysicalGuardianNotificationID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(), :]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/PhysicalGuardianNotification/" + str(PhysicalGuardianNotificationID), verb = "post", return_params_list = return_params_list, payload = payload_params)

def createPhysicalGuardianNotification(EntityID = 1, setCode = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setRelationships = None, returnPhysicalGuardianNotificationID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params.loc[lambda x: ((x.value & (x.index.to_series().str.contains("return"))) | (~(x.value.isnull()) & (x.index.to_series().str.contains("set")))) & (x.index.to_series() != "EntityID"),:].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(),:]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/PhysicalGuardianNotification/", verb = "put", return_params_list = return_params_list, payload = payload_params)

def deletePhysicalGuardianNotification(PhysicalGuardianNotificationID, EntityID = 1):

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Attendance/AttendancePeriod/" + str(AttendancePeriodID), verb = "delete")

def getEveryPhysicalGuardianResponse(EntityID = 1, page = 1, pageSize = 100, returnPhysicalGuardianResponseID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[3,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/PhysicalGuardianResponse/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params_list)

def getPhysicalGuardianResponse(PhysicalGuardianResponseID, EntityID = 1, returnPhysicalGuardianResponseID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[2,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/PhysicalGuardianResponse/" + str(PhysicalGuardianResponseID), verb = "get", return_params_list = return_params_list)

def modifyPhysicalGuardianResponse(PhysicalGuardianResponseID, EntityID = 1, setCode = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setRelationships = None, returnPhysicalGuardianResponseID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(), :]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/PhysicalGuardianResponse/" + str(PhysicalGuardianResponseID), verb = "post", return_params_list = return_params_list, payload = payload_params)

def createPhysicalGuardianResponse(EntityID = 1, setCode = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setRelationships = None, returnPhysicalGuardianResponseID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params.loc[lambda x: ((x.value & (x.index.to_series().str.contains("return"))) | (~(x.value.isnull()) & (x.index.to_series().str.contains("set")))) & (x.index.to_series() != "EntityID"),:].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(),:]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/PhysicalGuardianResponse/", verb = "put", return_params_list = return_params_list, payload = payload_params)

def deletePhysicalGuardianResponse(PhysicalGuardianResponseID, EntityID = 1):

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Attendance/AttendancePeriod/" + str(AttendancePeriodID), verb = "delete")

def getEveryPhysicalObservation(EntityID = 1, page = 1, pageSize = 100, returnPhysicalObservationID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[3,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/PhysicalObservation/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params_list)

def getPhysicalObservation(PhysicalObservationID, EntityID = 1, returnPhysicalObservationID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[2,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/PhysicalObservation/" + str(PhysicalObservationID), verb = "get", return_params_list = return_params_list)

def modifyPhysicalObservation(PhysicalObservationID, EntityID = 1, setCode = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setRelationships = None, returnPhysicalObservationID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(), :]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/PhysicalObservation/" + str(PhysicalObservationID), verb = "post", return_params_list = return_params_list, payload = payload_params)

def createPhysicalObservation(EntityID = 1, setCode = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setRelationships = None, returnPhysicalObservationID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params.loc[lambda x: ((x.value & (x.index.to_series().str.contains("return"))) | (~(x.value.isnull()) & (x.index.to_series().str.contains("set")))) & (x.index.to_series() != "EntityID"),:].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(),:]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/PhysicalObservation/", verb = "put", return_params_list = return_params_list, payload = payload_params)

def deletePhysicalObservation(PhysicalObservationID, EntityID = 1):

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Attendance/AttendancePeriod/" + str(AttendancePeriodID), verb = "delete")

def getEveryPhysicalReferralReason(EntityID = 1, page = 1, pageSize = 100, returnPhysicalReferralReasonID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[3,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/PhysicalReferralReason/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params_list)

def getPhysicalReferralReason(PhysicalReferralReasonID, EntityID = 1, returnPhysicalReferralReasonID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[2,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/PhysicalReferralReason/" + str(PhysicalReferralReasonID), verb = "get", return_params_list = return_params_list)

def modifyPhysicalReferralReason(PhysicalReferralReasonID, EntityID = 1, setCode = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setRelationships = None, returnPhysicalReferralReasonID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(), :]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/PhysicalReferralReason/" + str(PhysicalReferralReasonID), verb = "post", return_params_list = return_params_list, payload = payload_params)

def createPhysicalReferralReason(EntityID = 1, setCode = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setRelationships = None, returnPhysicalReferralReasonID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params.loc[lambda x: ((x.value & (x.index.to_series().str.contains("return"))) | (~(x.value.isnull()) & (x.index.to_series().str.contains("set")))) & (x.index.to_series() != "EntityID"),:].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(),:]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/PhysicalReferralReason/", verb = "put", return_params_list = return_params_list, payload = payload_params)

def deletePhysicalReferralReason(PhysicalReferralReasonID, EntityID = 1):

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Attendance/AttendancePeriod/" + str(AttendancePeriodID), verb = "delete")

def getEveryPhysicalReferralResult(EntityID = 1, page = 1, pageSize = 100, returnPhysicalReferralResultID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[3,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/PhysicalReferralResult/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params_list)

def getPhysicalReferralResult(PhysicalReferralResultID, EntityID = 1, returnPhysicalReferralResultID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[2,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/PhysicalReferralResult/" + str(PhysicalReferralResultID), verb = "get", return_params_list = return_params_list)

def modifyPhysicalReferralResult(PhysicalReferralResultID, EntityID = 1, setCode = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setRelationships = None, returnPhysicalReferralResultID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(), :]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/PhysicalReferralResult/" + str(PhysicalReferralResultID), verb = "post", return_params_list = return_params_list, payload = payload_params)

def createPhysicalReferralResult(EntityID = 1, setCode = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setRelationships = None, returnPhysicalReferralResultID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params.loc[lambda x: ((x.value & (x.index.to_series().str.contains("return"))) | (~(x.value.isnull()) & (x.index.to_series().str.contains("set")))) & (x.index.to_series() != "EntityID"),:].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(),:]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/PhysicalReferralResult/", verb = "put", return_params_list = return_params_list, payload = payload_params)

def deletePhysicalReferralResult(PhysicalReferralResultID, EntityID = 1):

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Attendance/AttendancePeriod/" + str(AttendancePeriodID), verb = "delete")

def getEveryPhysicalScreening(EntityID = 1, page = 1, pageSize = 100, returnPhysicalScreeningID = True, returnAtRiskForDiabetes = False, returnAttachmentCount = False, returnAttachmentIndicatorColumn = False, returnBodyMassIndex = False, returnBodyMassIndexPercentile = False, returnCreatedTime = False, returnDiabetesScreened = False, returnDisplayHeight = False, returnDistrictID = False, returnFirstBloodPressureReading = False, returnHealthProfessionalIDExaminedBy = False, returnHeight = False, returnHeightFeet = False, returnHeightInches = False, returnIsVoid = False, returnModifiedTime = False, returnNameID = False, returnNameOfficeVisitID = False, returnSchoolYearID = False, returnScreeningDate = False, returnSecondBloodPressureReading = False, returnSportsPhysical = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnUserIDVoidedBy = False, returnVoidedTime = False, returnVoidNote = False, returnWeight = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[3,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/PhysicalScreening/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params_list)

def getPhysicalScreening(PhysicalScreeningID, EntityID = 1, returnPhysicalScreeningID = True, returnAtRiskForDiabetes = False, returnAttachmentCount = False, returnAttachmentIndicatorColumn = False, returnBodyMassIndex = False, returnBodyMassIndexPercentile = False, returnCreatedTime = False, returnDiabetesScreened = False, returnDisplayHeight = False, returnDistrictID = False, returnFirstBloodPressureReading = False, returnHealthProfessionalIDExaminedBy = False, returnHeight = False, returnHeightFeet = False, returnHeightInches = False, returnIsVoid = False, returnModifiedTime = False, returnNameID = False, returnNameOfficeVisitID = False, returnSchoolYearID = False, returnScreeningDate = False, returnSecondBloodPressureReading = False, returnSportsPhysical = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnUserIDVoidedBy = False, returnVoidedTime = False, returnVoidNote = False, returnWeight = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[2,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/PhysicalScreening/" + str(PhysicalScreeningID), verb = "get", return_params_list = return_params_list)

def modifyPhysicalScreening(PhysicalScreeningID, EntityID = 1, setAtRiskForDiabetes = None, setBodyMassIndex = None, setBodyMassIndexPercentile = None, setDiabetesScreened = None, setDistrictID = None, setHealthProfessionalIDExaminedBy = None, setHeight = None, setIsVoid = None, setNameID = None, setNameOfficeVisitID = None, setSchoolYearID = None, setScreeningDate = None, setSportsPhysical = None, setUserIDVoidedBy = None, setVoidedTime = None, setVoidNote = None, setWeight = None, setRelationships = None, returnPhysicalScreeningID = True, returnAtRiskForDiabetes = False, returnAttachmentCount = False, returnAttachmentIndicatorColumn = False, returnBodyMassIndex = False, returnBodyMassIndexPercentile = False, returnCreatedTime = False, returnDiabetesScreened = False, returnDisplayHeight = False, returnDistrictID = False, returnFirstBloodPressureReading = False, returnHealthProfessionalIDExaminedBy = False, returnHeight = False, returnHeightFeet = False, returnHeightInches = False, returnIsVoid = False, returnModifiedTime = False, returnNameID = False, returnNameOfficeVisitID = False, returnSchoolYearID = False, returnScreeningDate = False, returnSecondBloodPressureReading = False, returnSportsPhysical = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnUserIDVoidedBy = False, returnVoidedTime = False, returnVoidNote = False, returnWeight = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(), :]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/PhysicalScreening/" + str(PhysicalScreeningID), verb = "post", return_params_list = return_params_list, payload = payload_params)

def createPhysicalScreening(EntityID = 1, setAtRiskForDiabetes = None, setBodyMassIndex = None, setBodyMassIndexPercentile = None, setDiabetesScreened = None, setDistrictID = None, setHealthProfessionalIDExaminedBy = None, setHeight = None, setIsVoid = None, setNameID = None, setNameOfficeVisitID = None, setSchoolYearID = None, setScreeningDate = None, setSportsPhysical = None, setUserIDVoidedBy = None, setVoidedTime = None, setVoidNote = None, setWeight = None, setRelationships = None, returnPhysicalScreeningID = True, returnAtRiskForDiabetes = False, returnAttachmentCount = False, returnAttachmentIndicatorColumn = False, returnBodyMassIndex = False, returnBodyMassIndexPercentile = False, returnCreatedTime = False, returnDiabetesScreened = False, returnDisplayHeight = False, returnDistrictID = False, returnFirstBloodPressureReading = False, returnHealthProfessionalIDExaminedBy = False, returnHeight = False, returnHeightFeet = False, returnHeightInches = False, returnIsVoid = False, returnModifiedTime = False, returnNameID = False, returnNameOfficeVisitID = False, returnSchoolYearID = False, returnScreeningDate = False, returnSecondBloodPressureReading = False, returnSportsPhysical = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnUserIDVoidedBy = False, returnVoidedTime = False, returnVoidNote = False, returnWeight = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params.loc[lambda x: ((x.value & (x.index.to_series().str.contains("return"))) | (~(x.value.isnull()) & (x.index.to_series().str.contains("set")))) & (x.index.to_series() != "EntityID"),:].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(),:]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/PhysicalScreening/", verb = "put", return_params_list = return_params_list, payload = payload_params)

def deletePhysicalScreening(PhysicalScreeningID, EntityID = 1):

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Attendance/AttendancePeriod/" + str(AttendancePeriodID), verb = "delete")

def getEveryPhysicalScreeningComment(EntityID = 1, page = 1, pageSize = 100, returnPhysicalScreeningCommentID = True, returnCreatedTime = False, returnModifiedTime = False, returnPhysicalCommentID = False, returnPhysicalScreeningID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[3,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/PhysicalScreeningComment/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params_list)

def getPhysicalScreeningComment(PhysicalScreeningCommentID, EntityID = 1, returnPhysicalScreeningCommentID = True, returnCreatedTime = False, returnModifiedTime = False, returnPhysicalCommentID = False, returnPhysicalScreeningID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[2,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/PhysicalScreeningComment/" + str(PhysicalScreeningCommentID), verb = "get", return_params_list = return_params_list)

def modifyPhysicalScreeningComment(PhysicalScreeningCommentID, EntityID = 1, setPhysicalCommentID = None, setPhysicalScreeningID = None, setRelationships = None, returnPhysicalScreeningCommentID = True, returnCreatedTime = False, returnModifiedTime = False, returnPhysicalCommentID = False, returnPhysicalScreeningID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(), :]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/PhysicalScreeningComment/" + str(PhysicalScreeningCommentID), verb = "post", return_params_list = return_params_list, payload = payload_params)

def createPhysicalScreeningComment(EntityID = 1, setPhysicalCommentID = None, setPhysicalScreeningID = None, setRelationships = None, returnPhysicalScreeningCommentID = True, returnCreatedTime = False, returnModifiedTime = False, returnPhysicalCommentID = False, returnPhysicalScreeningID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params.loc[lambda x: ((x.value & (x.index.to_series().str.contains("return"))) | (~(x.value.isnull()) & (x.index.to_series().str.contains("set")))) & (x.index.to_series() != "EntityID"),:].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(),:]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/PhysicalScreeningComment/", verb = "put", return_params_list = return_params_list, payload = payload_params)

def deletePhysicalScreeningComment(PhysicalScreeningCommentID, EntityID = 1):

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Attendance/AttendancePeriod/" + str(AttendancePeriodID), verb = "delete")

def getEveryPhysicalScreeningNote(EntityID = 1, page = 1, pageSize = 100, returnPhysicalScreeningNoteID = True, returnCreatedTime = False, returnModifiedTime = False, returnNote = False, returnPhysicalScreeningID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[3,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/PhysicalScreeningNote/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params_list)

def getPhysicalScreeningNote(PhysicalScreeningNoteID, EntityID = 1, returnPhysicalScreeningNoteID = True, returnCreatedTime = False, returnModifiedTime = False, returnNote = False, returnPhysicalScreeningID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[2,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/PhysicalScreeningNote/" + str(PhysicalScreeningNoteID), verb = "get", return_params_list = return_params_list)

def modifyPhysicalScreeningNote(PhysicalScreeningNoteID, EntityID = 1, setNote = None, setPhysicalScreeningID = None, setRelationships = None, returnPhysicalScreeningNoteID = True, returnCreatedTime = False, returnModifiedTime = False, returnNote = False, returnPhysicalScreeningID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(), :]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/PhysicalScreeningNote/" + str(PhysicalScreeningNoteID), verb = "post", return_params_list = return_params_list, payload = payload_params)

def createPhysicalScreeningNote(EntityID = 1, setNote = None, setPhysicalScreeningID = None, setRelationships = None, returnPhysicalScreeningNoteID = True, returnCreatedTime = False, returnModifiedTime = False, returnNote = False, returnPhysicalScreeningID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params.loc[lambda x: ((x.value & (x.index.to_series().str.contains("return"))) | (~(x.value.isnull()) & (x.index.to_series().str.contains("set")))) & (x.index.to_series() != "EntityID"),:].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(),:]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/PhysicalScreeningNote/", verb = "put", return_params_list = return_params_list, payload = payload_params)

def deletePhysicalScreeningNote(PhysicalScreeningNoteID, EntityID = 1):

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Attendance/AttendancePeriod/" + str(AttendancePeriodID), verb = "delete")

def getEveryPhysicalScreeningObservation(EntityID = 1, page = 1, pageSize = 100, returnPhysicalScreeningObservationID = True, returnCreatedTime = False, returnModifiedTime = False, returnPhysicalObservationID = False, returnPhysicalScreeningID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[3,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/PhysicalScreeningObservation/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params_list)

def getPhysicalScreeningObservation(PhysicalScreeningObservationID, EntityID = 1, returnPhysicalScreeningObservationID = True, returnCreatedTime = False, returnModifiedTime = False, returnPhysicalObservationID = False, returnPhysicalScreeningID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[2,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/PhysicalScreeningObservation/" + str(PhysicalScreeningObservationID), verb = "get", return_params_list = return_params_list)

def modifyPhysicalScreeningObservation(PhysicalScreeningObservationID, EntityID = 1, setPhysicalObservationID = None, setPhysicalScreeningID = None, setRelationships = None, returnPhysicalScreeningObservationID = True, returnCreatedTime = False, returnModifiedTime = False, returnPhysicalObservationID = False, returnPhysicalScreeningID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(), :]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/PhysicalScreeningObservation/" + str(PhysicalScreeningObservationID), verb = "post", return_params_list = return_params_list, payload = payload_params)

def createPhysicalScreeningObservation(EntityID = 1, setPhysicalObservationID = None, setPhysicalScreeningID = None, setRelationships = None, returnPhysicalScreeningObservationID = True, returnCreatedTime = False, returnModifiedTime = False, returnPhysicalObservationID = False, returnPhysicalScreeningID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params.loc[lambda x: ((x.value & (x.index.to_series().str.contains("return"))) | (~(x.value.isnull()) & (x.index.to_series().str.contains("set")))) & (x.index.to_series() != "EntityID"),:].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(),:]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/PhysicalScreeningObservation/", verb = "put", return_params_list = return_params_list, payload = payload_params)

def deletePhysicalScreeningObservation(PhysicalScreeningObservationID, EntityID = 1):

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Attendance/AttendancePeriod/" + str(AttendancePeriodID), verb = "delete")

def getEveryPhysicalScreeningReferral(EntityID = 1, page = 1, pageSize = 100, returnPhysicalScreeningReferralID = True, returnCompletionDate = False, returnCreatedTime = False, returnHealthProfessionalIDReferredBy = False, returnHealthProfessionalIDReferredTo = False, returnModifiedTime = False, returnPhysicalGuardianNotificationID = False, returnPhysicalGuardianResponseID = False, returnPhysicalReferralReasonID = False, returnPhysicalReferralResultID = False, returnPhysicalScreeningID = False, returnReferralCompleted = False, returnReferralDate = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[3,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/PhysicalScreeningReferral/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params_list)

def getPhysicalScreeningReferral(PhysicalScreeningReferralID, EntityID = 1, returnPhysicalScreeningReferralID = True, returnCompletionDate = False, returnCreatedTime = False, returnHealthProfessionalIDReferredBy = False, returnHealthProfessionalIDReferredTo = False, returnModifiedTime = False, returnPhysicalGuardianNotificationID = False, returnPhysicalGuardianResponseID = False, returnPhysicalReferralReasonID = False, returnPhysicalReferralResultID = False, returnPhysicalScreeningID = False, returnReferralCompleted = False, returnReferralDate = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[2,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/PhysicalScreeningReferral/" + str(PhysicalScreeningReferralID), verb = "get", return_params_list = return_params_list)

def modifyPhysicalScreeningReferral(PhysicalScreeningReferralID, EntityID = 1, setCompletionDate = None, setHealthProfessionalIDReferredBy = None, setHealthProfessionalIDReferredTo = None, setPhysicalGuardianNotificationID = None, setPhysicalGuardianResponseID = None, setPhysicalReferralReasonID = None, setPhysicalReferralResultID = None, setPhysicalScreeningID = None, setReferralCompleted = None, setReferralDate = None, setRelationships = None, returnPhysicalScreeningReferralID = True, returnCompletionDate = False, returnCreatedTime = False, returnHealthProfessionalIDReferredBy = False, returnHealthProfessionalIDReferredTo = False, returnModifiedTime = False, returnPhysicalGuardianNotificationID = False, returnPhysicalGuardianResponseID = False, returnPhysicalReferralReasonID = False, returnPhysicalReferralResultID = False, returnPhysicalScreeningID = False, returnReferralCompleted = False, returnReferralDate = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(), :]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/PhysicalScreeningReferral/" + str(PhysicalScreeningReferralID), verb = "post", return_params_list = return_params_list, payload = payload_params)

def createPhysicalScreeningReferral(EntityID = 1, setCompletionDate = None, setHealthProfessionalIDReferredBy = None, setHealthProfessionalIDReferredTo = None, setPhysicalGuardianNotificationID = None, setPhysicalGuardianResponseID = None, setPhysicalReferralReasonID = None, setPhysicalReferralResultID = None, setPhysicalScreeningID = None, setReferralCompleted = None, setReferralDate = None, setRelationships = None, returnPhysicalScreeningReferralID = True, returnCompletionDate = False, returnCreatedTime = False, returnHealthProfessionalIDReferredBy = False, returnHealthProfessionalIDReferredTo = False, returnModifiedTime = False, returnPhysicalGuardianNotificationID = False, returnPhysicalGuardianResponseID = False, returnPhysicalReferralReasonID = False, returnPhysicalReferralResultID = False, returnPhysicalScreeningID = False, returnReferralCompleted = False, returnReferralDate = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params.loc[lambda x: ((x.value & (x.index.to_series().str.contains("return"))) | (~(x.value.isnull()) & (x.index.to_series().str.contains("set")))) & (x.index.to_series() != "EntityID"),:].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(),:]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/PhysicalScreeningReferral/", verb = "put", return_params_list = return_params_list, payload = payload_params)

def deletePhysicalScreeningReferral(PhysicalScreeningReferralID, EntityID = 1):

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Attendance/AttendancePeriod/" + str(AttendancePeriodID), verb = "delete")

def getEveryPhysicalScreeningSecuredNote(EntityID = 1, page = 1, pageSize = 100, returnPhysicalScreeningSecuredNoteID = True, returnCreatedTime = False, returnModifiedTime = False, returnNote = False, returnPhysicalScreeningID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[3,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/PhysicalScreeningSecuredNote/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params_list)

def getPhysicalScreeningSecuredNote(PhysicalScreeningSecuredNoteID, EntityID = 1, returnPhysicalScreeningSecuredNoteID = True, returnCreatedTime = False, returnModifiedTime = False, returnNote = False, returnPhysicalScreeningID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[2,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/PhysicalScreeningSecuredNote/" + str(PhysicalScreeningSecuredNoteID), verb = "get", return_params_list = return_params_list)

def modifyPhysicalScreeningSecuredNote(PhysicalScreeningSecuredNoteID, EntityID = 1, setNote = None, setPhysicalScreeningID = None, setRelationships = None, returnPhysicalScreeningSecuredNoteID = True, returnCreatedTime = False, returnModifiedTime = False, returnNote = False, returnPhysicalScreeningID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(), :]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/PhysicalScreeningSecuredNote/" + str(PhysicalScreeningSecuredNoteID), verb = "post", return_params_list = return_params_list, payload = payload_params)

def createPhysicalScreeningSecuredNote(EntityID = 1, setNote = None, setPhysicalScreeningID = None, setRelationships = None, returnPhysicalScreeningSecuredNoteID = True, returnCreatedTime = False, returnModifiedTime = False, returnNote = False, returnPhysicalScreeningID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params.loc[lambda x: ((x.value & (x.index.to_series().str.contains("return"))) | (~(x.value.isnull()) & (x.index.to_series().str.contains("set")))) & (x.index.to_series() != "EntityID"),:].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(),:]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/PhysicalScreeningSecuredNote/", verb = "put", return_params_list = return_params_list, payload = payload_params)

def deletePhysicalScreeningSecuredNote(PhysicalScreeningSecuredNoteID, EntityID = 1):

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Attendance/AttendancePeriod/" + str(AttendancePeriodID), verb = "delete")

def getEveryProcedure(EntityID = 1, page = 1, pageSize = 100, returnProcedureID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[3,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/Procedure/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params_list)

def getProcedure(ProcedureID, EntityID = 1, returnProcedureID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[2,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/Procedure/" + str(ProcedureID), verb = "get", return_params_list = return_params_list)

def modifyProcedure(ProcedureID, EntityID = 1, setCode = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setRelationships = None, returnProcedureID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(), :]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/Procedure/" + str(ProcedureID), verb = "post", return_params_list = return_params_list, payload = payload_params)

def createProcedure(EntityID = 1, setCode = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setRelationships = None, returnProcedureID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params.loc[lambda x: ((x.value & (x.index.to_series().str.contains("return"))) | (~(x.value.isnull()) & (x.index.to_series().str.contains("set")))) & (x.index.to_series() != "EntityID"),:].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(),:]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/Procedure/", verb = "put", return_params_list = return_params_list, payload = payload_params)

def deleteProcedure(ProcedureID, EntityID = 1):

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Attendance/AttendancePeriod/" + str(AttendancePeriodID), verb = "delete")

def getEveryScoliosisComment(EntityID = 1, page = 1, pageSize = 100, returnScoliosisCommentID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[3,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ScoliosisComment/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params_list)

def getScoliosisComment(ScoliosisCommentID, EntityID = 1, returnScoliosisCommentID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[2,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ScoliosisComment/" + str(ScoliosisCommentID), verb = "get", return_params_list = return_params_list)

def modifyScoliosisComment(ScoliosisCommentID, EntityID = 1, setCode = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setRelationships = None, returnScoliosisCommentID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(), :]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ScoliosisComment/" + str(ScoliosisCommentID), verb = "post", return_params_list = return_params_list, payload = payload_params)

def createScoliosisComment(EntityID = 1, setCode = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setRelationships = None, returnScoliosisCommentID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params.loc[lambda x: ((x.value & (x.index.to_series().str.contains("return"))) | (~(x.value.isnull()) & (x.index.to_series().str.contains("set")))) & (x.index.to_series() != "EntityID"),:].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(),:]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ScoliosisComment/", verb = "put", return_params_list = return_params_list, payload = payload_params)

def deleteScoliosisComment(ScoliosisCommentID, EntityID = 1):

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Attendance/AttendancePeriod/" + str(AttendancePeriodID), verb = "delete")

def getEveryScoliosisGuardianNotification(EntityID = 1, page = 1, pageSize = 100, returnScoliosisGuardianNotificationID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[3,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ScoliosisGuardianNotification/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params_list)

def getScoliosisGuardianNotification(ScoliosisGuardianNotificationID, EntityID = 1, returnScoliosisGuardianNotificationID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[2,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ScoliosisGuardianNotification/" + str(ScoliosisGuardianNotificationID), verb = "get", return_params_list = return_params_list)

def modifyScoliosisGuardianNotification(ScoliosisGuardianNotificationID, EntityID = 1, setCode = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setRelationships = None, returnScoliosisGuardianNotificationID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(), :]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ScoliosisGuardianNotification/" + str(ScoliosisGuardianNotificationID), verb = "post", return_params_list = return_params_list, payload = payload_params)

def createScoliosisGuardianNotification(EntityID = 1, setCode = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setRelationships = None, returnScoliosisGuardianNotificationID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params.loc[lambda x: ((x.value & (x.index.to_series().str.contains("return"))) | (~(x.value.isnull()) & (x.index.to_series().str.contains("set")))) & (x.index.to_series() != "EntityID"),:].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(),:]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ScoliosisGuardianNotification/", verb = "put", return_params_list = return_params_list, payload = payload_params)

def deleteScoliosisGuardianNotification(ScoliosisGuardianNotificationID, EntityID = 1):

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Attendance/AttendancePeriod/" + str(AttendancePeriodID), verb = "delete")

def getEveryScoliosisGuardianResponse(EntityID = 1, page = 1, pageSize = 100, returnScoliosisGuardianResponseID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[3,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ScoliosisGuardianResponse/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params_list)

def getScoliosisGuardianResponse(ScoliosisGuardianResponseID, EntityID = 1, returnScoliosisGuardianResponseID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[2,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ScoliosisGuardianResponse/" + str(ScoliosisGuardianResponseID), verb = "get", return_params_list = return_params_list)

def modifyScoliosisGuardianResponse(ScoliosisGuardianResponseID, EntityID = 1, setCode = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setRelationships = None, returnScoliosisGuardianResponseID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(), :]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ScoliosisGuardianResponse/" + str(ScoliosisGuardianResponseID), verb = "post", return_params_list = return_params_list, payload = payload_params)

def createScoliosisGuardianResponse(EntityID = 1, setCode = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setRelationships = None, returnScoliosisGuardianResponseID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params.loc[lambda x: ((x.value & (x.index.to_series().str.contains("return"))) | (~(x.value.isnull()) & (x.index.to_series().str.contains("set")))) & (x.index.to_series() != "EntityID"),:].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(),:]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ScoliosisGuardianResponse/", verb = "put", return_params_list = return_params_list, payload = payload_params)

def deleteScoliosisGuardianResponse(ScoliosisGuardianResponseID, EntityID = 1):

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Attendance/AttendancePeriod/" + str(AttendancePeriodID), verb = "delete")

def getEveryScoliosisObservation(EntityID = 1, page = 1, pageSize = 100, returnScoliosisObservationID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[3,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ScoliosisObservation/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params_list)

def getScoliosisObservation(ScoliosisObservationID, EntityID = 1, returnScoliosisObservationID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[2,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ScoliosisObservation/" + str(ScoliosisObservationID), verb = "get", return_params_list = return_params_list)

def modifyScoliosisObservation(ScoliosisObservationID, EntityID = 1, setCode = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setRelationships = None, returnScoliosisObservationID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(), :]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ScoliosisObservation/" + str(ScoliosisObservationID), verb = "post", return_params_list = return_params_list, payload = payload_params)

def createScoliosisObservation(EntityID = 1, setCode = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setRelationships = None, returnScoliosisObservationID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params.loc[lambda x: ((x.value & (x.index.to_series().str.contains("return"))) | (~(x.value.isnull()) & (x.index.to_series().str.contains("set")))) & (x.index.to_series() != "EntityID"),:].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(),:]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ScoliosisObservation/", verb = "put", return_params_list = return_params_list, payload = payload_params)

def deleteScoliosisObservation(ScoliosisObservationID, EntityID = 1):

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Attendance/AttendancePeriod/" + str(AttendancePeriodID), verb = "delete")

def getEveryScoliosisReferralReason(EntityID = 1, page = 1, pageSize = 100, returnScoliosisReferralReasonID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[3,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ScoliosisReferralReason/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params_list)

def getScoliosisReferralReason(ScoliosisReferralReasonID, EntityID = 1, returnScoliosisReferralReasonID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[2,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ScoliosisReferralReason/" + str(ScoliosisReferralReasonID), verb = "get", return_params_list = return_params_list)

def modifyScoliosisReferralReason(ScoliosisReferralReasonID, EntityID = 1, setCode = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setRelationships = None, returnScoliosisReferralReasonID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(), :]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ScoliosisReferralReason/" + str(ScoliosisReferralReasonID), verb = "post", return_params_list = return_params_list, payload = payload_params)

def createScoliosisReferralReason(EntityID = 1, setCode = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setRelationships = None, returnScoliosisReferralReasonID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params.loc[lambda x: ((x.value & (x.index.to_series().str.contains("return"))) | (~(x.value.isnull()) & (x.index.to_series().str.contains("set")))) & (x.index.to_series() != "EntityID"),:].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(),:]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ScoliosisReferralReason/", verb = "put", return_params_list = return_params_list, payload = payload_params)

def deleteScoliosisReferralReason(ScoliosisReferralReasonID, EntityID = 1):

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Attendance/AttendancePeriod/" + str(AttendancePeriodID), verb = "delete")

def getEveryScoliosisReferralResult(EntityID = 1, page = 1, pageSize = 100, returnScoliosisReferralResultID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[3,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ScoliosisReferralResult/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params_list)

def getScoliosisReferralResult(ScoliosisReferralResultID, EntityID = 1, returnScoliosisReferralResultID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[2,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ScoliosisReferralResult/" + str(ScoliosisReferralResultID), verb = "get", return_params_list = return_params_list)

def modifyScoliosisReferralResult(ScoliosisReferralResultID, EntityID = 1, setCode = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setRelationships = None, returnScoliosisReferralResultID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(), :]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ScoliosisReferralResult/" + str(ScoliosisReferralResultID), verb = "post", return_params_list = return_params_list, payload = payload_params)

def createScoliosisReferralResult(EntityID = 1, setCode = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setRelationships = None, returnScoliosisReferralResultID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params.loc[lambda x: ((x.value & (x.index.to_series().str.contains("return"))) | (~(x.value.isnull()) & (x.index.to_series().str.contains("set")))) & (x.index.to_series() != "EntityID"),:].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(),:]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ScoliosisReferralResult/", verb = "put", return_params_list = return_params_list, payload = payload_params)

def deleteScoliosisReferralResult(ScoliosisReferralResultID, EntityID = 1):

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Attendance/AttendancePeriod/" + str(AttendancePeriodID), verb = "delete")

def getEveryScoliosisResult(EntityID = 1, page = 1, pageSize = 100, returnScoliosisResultID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnType = False, returnTypeCode = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[3,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ScoliosisResult/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params_list)

def getScoliosisResult(ScoliosisResultID, EntityID = 1, returnScoliosisResultID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnType = False, returnTypeCode = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[2,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ScoliosisResult/" + str(ScoliosisResultID), verb = "get", return_params_list = return_params_list)

def modifyScoliosisResult(ScoliosisResultID, EntityID = 1, setCode = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setType = None, setTypeCode = None, setRelationships = None, returnScoliosisResultID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnType = False, returnTypeCode = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(), :]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ScoliosisResult/" + str(ScoliosisResultID), verb = "post", return_params_list = return_params_list, payload = payload_params)

def createScoliosisResult(EntityID = 1, setCode = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setType = None, setTypeCode = None, setRelationships = None, returnScoliosisResultID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnType = False, returnTypeCode = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params.loc[lambda x: ((x.value & (x.index.to_series().str.contains("return"))) | (~(x.value.isnull()) & (x.index.to_series().str.contains("set")))) & (x.index.to_series() != "EntityID"),:].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(),:]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ScoliosisResult/", verb = "put", return_params_list = return_params_list, payload = payload_params)

def deleteScoliosisResult(ScoliosisResultID, EntityID = 1):

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Attendance/AttendancePeriod/" + str(AttendancePeriodID), verb = "delete")

def getEveryScoliosisScreening(EntityID = 1, page = 1, pageSize = 100, returnScoliosisScreeningID = True, returnCreatedTime = False, returnDistrictID = False, returnHealthProfessionalIDExaminedBy = False, returnIsVoid = False, returnLatestScoliosisScreeningReferral = False, returnModifiedTime = False, returnNameID = False, returnObservationDescriptionsListDisplay = False, returnRescreen = False, returnSchoolYearID = False, returnScoliosisResultID = False, returnScoliosisTreatmentID = False, returnScreeningDate = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnUserIDVoidedBy = False, returnVoidedTime = False, returnVoidNote = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[3,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ScoliosisScreening/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params_list)

def getScoliosisScreening(ScoliosisScreeningID, EntityID = 1, returnScoliosisScreeningID = True, returnCreatedTime = False, returnDistrictID = False, returnHealthProfessionalIDExaminedBy = False, returnIsVoid = False, returnLatestScoliosisScreeningReferral = False, returnModifiedTime = False, returnNameID = False, returnObservationDescriptionsListDisplay = False, returnRescreen = False, returnSchoolYearID = False, returnScoliosisResultID = False, returnScoliosisTreatmentID = False, returnScreeningDate = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnUserIDVoidedBy = False, returnVoidedTime = False, returnVoidNote = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[2,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ScoliosisScreening/" + str(ScoliosisScreeningID), verb = "get", return_params_list = return_params_list)

def modifyScoliosisScreening(ScoliosisScreeningID, EntityID = 1, setDistrictID = None, setHealthProfessionalIDExaminedBy = None, setIsVoid = None, setNameID = None, setRescreen = None, setSchoolYearID = None, setScoliosisResultID = None, setScoliosisTreatmentID = None, setScreeningDate = None, setUserIDVoidedBy = None, setVoidedTime = None, setVoidNote = None, setRelationships = None, returnScoliosisScreeningID = True, returnCreatedTime = False, returnDistrictID = False, returnHealthProfessionalIDExaminedBy = False, returnIsVoid = False, returnLatestScoliosisScreeningReferral = False, returnModifiedTime = False, returnNameID = False, returnObservationDescriptionsListDisplay = False, returnRescreen = False, returnSchoolYearID = False, returnScoliosisResultID = False, returnScoliosisTreatmentID = False, returnScreeningDate = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnUserIDVoidedBy = False, returnVoidedTime = False, returnVoidNote = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(), :]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ScoliosisScreening/" + str(ScoliosisScreeningID), verb = "post", return_params_list = return_params_list, payload = payload_params)

def createScoliosisScreening(EntityID = 1, setDistrictID = None, setHealthProfessionalIDExaminedBy = None, setIsVoid = None, setNameID = None, setRescreen = None, setSchoolYearID = None, setScoliosisResultID = None, setScoliosisTreatmentID = None, setScreeningDate = None, setUserIDVoidedBy = None, setVoidedTime = None, setVoidNote = None, setRelationships = None, returnScoliosisScreeningID = True, returnCreatedTime = False, returnDistrictID = False, returnHealthProfessionalIDExaminedBy = False, returnIsVoid = False, returnLatestScoliosisScreeningReferral = False, returnModifiedTime = False, returnNameID = False, returnObservationDescriptionsListDisplay = False, returnRescreen = False, returnSchoolYearID = False, returnScoliosisResultID = False, returnScoliosisTreatmentID = False, returnScreeningDate = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnUserIDVoidedBy = False, returnVoidedTime = False, returnVoidNote = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params.loc[lambda x: ((x.value & (x.index.to_series().str.contains("return"))) | (~(x.value.isnull()) & (x.index.to_series().str.contains("set")))) & (x.index.to_series() != "EntityID"),:].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(),:]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ScoliosisScreening/", verb = "put", return_params_list = return_params_list, payload = payload_params)

def deleteScoliosisScreening(ScoliosisScreeningID, EntityID = 1):

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Attendance/AttendancePeriod/" + str(AttendancePeriodID), verb = "delete")

def getEveryScoliosisScreeningComment(EntityID = 1, page = 1, pageSize = 100, returnScoliosisScreeningCommentID = True, returnCreatedTime = False, returnModifiedTime = False, returnScoliosisCommentID = False, returnScoliosisScreeningID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[3,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ScoliosisScreeningComment/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params_list)

def getScoliosisScreeningComment(ScoliosisScreeningCommentID, EntityID = 1, returnScoliosisScreeningCommentID = True, returnCreatedTime = False, returnModifiedTime = False, returnScoliosisCommentID = False, returnScoliosisScreeningID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[2,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ScoliosisScreeningComment/" + str(ScoliosisScreeningCommentID), verb = "get", return_params_list = return_params_list)

def modifyScoliosisScreeningComment(ScoliosisScreeningCommentID, EntityID = 1, setScoliosisCommentID = None, setScoliosisScreeningID = None, setRelationships = None, returnScoliosisScreeningCommentID = True, returnCreatedTime = False, returnModifiedTime = False, returnScoliosisCommentID = False, returnScoliosisScreeningID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(), :]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ScoliosisScreeningComment/" + str(ScoliosisScreeningCommentID), verb = "post", return_params_list = return_params_list, payload = payload_params)

def createScoliosisScreeningComment(EntityID = 1, setScoliosisCommentID = None, setScoliosisScreeningID = None, setRelationships = None, returnScoliosisScreeningCommentID = True, returnCreatedTime = False, returnModifiedTime = False, returnScoliosisCommentID = False, returnScoliosisScreeningID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params.loc[lambda x: ((x.value & (x.index.to_series().str.contains("return"))) | (~(x.value.isnull()) & (x.index.to_series().str.contains("set")))) & (x.index.to_series() != "EntityID"),:].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(),:]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ScoliosisScreeningComment/", verb = "put", return_params_list = return_params_list, payload = payload_params)

def deleteScoliosisScreeningComment(ScoliosisScreeningCommentID, EntityID = 1):

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Attendance/AttendancePeriod/" + str(AttendancePeriodID), verb = "delete")

def getEveryScoliosisScreeningNote(EntityID = 1, page = 1, pageSize = 100, returnScoliosisScreeningNoteID = True, returnCreatedTime = False, returnModifiedTime = False, returnNote = False, returnScoliosisScreeningID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[3,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ScoliosisScreeningNote/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params_list)

def getScoliosisScreeningNote(ScoliosisScreeningNoteID, EntityID = 1, returnScoliosisScreeningNoteID = True, returnCreatedTime = False, returnModifiedTime = False, returnNote = False, returnScoliosisScreeningID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[2,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ScoliosisScreeningNote/" + str(ScoliosisScreeningNoteID), verb = "get", return_params_list = return_params_list)

def modifyScoliosisScreeningNote(ScoliosisScreeningNoteID, EntityID = 1, setNote = None, setScoliosisScreeningID = None, setRelationships = None, returnScoliosisScreeningNoteID = True, returnCreatedTime = False, returnModifiedTime = False, returnNote = False, returnScoliosisScreeningID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(), :]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ScoliosisScreeningNote/" + str(ScoliosisScreeningNoteID), verb = "post", return_params_list = return_params_list, payload = payload_params)

def createScoliosisScreeningNote(EntityID = 1, setNote = None, setScoliosisScreeningID = None, setRelationships = None, returnScoliosisScreeningNoteID = True, returnCreatedTime = False, returnModifiedTime = False, returnNote = False, returnScoliosisScreeningID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params.loc[lambda x: ((x.value & (x.index.to_series().str.contains("return"))) | (~(x.value.isnull()) & (x.index.to_series().str.contains("set")))) & (x.index.to_series() != "EntityID"),:].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(),:]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ScoliosisScreeningNote/", verb = "put", return_params_list = return_params_list, payload = payload_params)

def deleteScoliosisScreeningNote(ScoliosisScreeningNoteID, EntityID = 1):

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Attendance/AttendancePeriod/" + str(AttendancePeriodID), verb = "delete")

def getEveryScoliosisScreeningObservation(EntityID = 1, page = 1, pageSize = 100, returnScoliosisScreeningObservationID = True, returnCreatedTime = False, returnModifiedTime = False, returnScoliosisObservationID = False, returnScoliosisScreeningID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[3,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ScoliosisScreeningObservation/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params_list)

def getScoliosisScreeningObservation(ScoliosisScreeningObservationID, EntityID = 1, returnScoliosisScreeningObservationID = True, returnCreatedTime = False, returnModifiedTime = False, returnScoliosisObservationID = False, returnScoliosisScreeningID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[2,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ScoliosisScreeningObservation/" + str(ScoliosisScreeningObservationID), verb = "get", return_params_list = return_params_list)

def modifyScoliosisScreeningObservation(ScoliosisScreeningObservationID, EntityID = 1, setScoliosisObservationID = None, setScoliosisScreeningID = None, setRelationships = None, returnScoliosisScreeningObservationID = True, returnCreatedTime = False, returnModifiedTime = False, returnScoliosisObservationID = False, returnScoliosisScreeningID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(), :]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ScoliosisScreeningObservation/" + str(ScoliosisScreeningObservationID), verb = "post", return_params_list = return_params_list, payload = payload_params)

def createScoliosisScreeningObservation(EntityID = 1, setScoliosisObservationID = None, setScoliosisScreeningID = None, setRelationships = None, returnScoliosisScreeningObservationID = True, returnCreatedTime = False, returnModifiedTime = False, returnScoliosisObservationID = False, returnScoliosisScreeningID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params.loc[lambda x: ((x.value & (x.index.to_series().str.contains("return"))) | (~(x.value.isnull()) & (x.index.to_series().str.contains("set")))) & (x.index.to_series() != "EntityID"),:].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(),:]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ScoliosisScreeningObservation/", verb = "put", return_params_list = return_params_list, payload = payload_params)

def deleteScoliosisScreeningObservation(ScoliosisScreeningObservationID, EntityID = 1):

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Attendance/AttendancePeriod/" + str(AttendancePeriodID), verb = "delete")

def getEveryScoliosisScreeningReferral(EntityID = 1, page = 1, pageSize = 100, returnScoliosisScreeningReferralID = True, returnCompletionDate = False, returnCreatedTime = False, returnHealthProfessionalIDReferredBy = False, returnHealthProfessionalIDReferredTo = False, returnModifiedTime = False, returnReferralCompleted = False, returnReferralDate = False, returnScoliosisGuardianNotificationID = False, returnScoliosisGuardianResponseID = False, returnScoliosisReferralReasonID = False, returnScoliosisReferralResultID = False, returnScoliosisScreeningID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[3,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ScoliosisScreeningReferral/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params_list)

def getScoliosisScreeningReferral(ScoliosisScreeningReferralID, EntityID = 1, returnScoliosisScreeningReferralID = True, returnCompletionDate = False, returnCreatedTime = False, returnHealthProfessionalIDReferredBy = False, returnHealthProfessionalIDReferredTo = False, returnModifiedTime = False, returnReferralCompleted = False, returnReferralDate = False, returnScoliosisGuardianNotificationID = False, returnScoliosisGuardianResponseID = False, returnScoliosisReferralReasonID = False, returnScoliosisReferralResultID = False, returnScoliosisScreeningID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[2,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ScoliosisScreeningReferral/" + str(ScoliosisScreeningReferralID), verb = "get", return_params_list = return_params_list)

def modifyScoliosisScreeningReferral(ScoliosisScreeningReferralID, EntityID = 1, setCompletionDate = None, setHealthProfessionalIDReferredBy = None, setHealthProfessionalIDReferredTo = None, setReferralCompleted = None, setReferralDate = None, setScoliosisGuardianNotificationID = None, setScoliosisGuardianResponseID = None, setScoliosisReferralReasonID = None, setScoliosisReferralResultID = None, setScoliosisScreeningID = None, setRelationships = None, returnScoliosisScreeningReferralID = True, returnCompletionDate = False, returnCreatedTime = False, returnHealthProfessionalIDReferredBy = False, returnHealthProfessionalIDReferredTo = False, returnModifiedTime = False, returnReferralCompleted = False, returnReferralDate = False, returnScoliosisGuardianNotificationID = False, returnScoliosisGuardianResponseID = False, returnScoliosisReferralReasonID = False, returnScoliosisReferralResultID = False, returnScoliosisScreeningID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(), :]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ScoliosisScreeningReferral/" + str(ScoliosisScreeningReferralID), verb = "post", return_params_list = return_params_list, payload = payload_params)

def createScoliosisScreeningReferral(EntityID = 1, setCompletionDate = None, setHealthProfessionalIDReferredBy = None, setHealthProfessionalIDReferredTo = None, setReferralCompleted = None, setReferralDate = None, setScoliosisGuardianNotificationID = None, setScoliosisGuardianResponseID = None, setScoliosisReferralReasonID = None, setScoliosisReferralResultID = None, setScoliosisScreeningID = None, setRelationships = None, returnScoliosisScreeningReferralID = True, returnCompletionDate = False, returnCreatedTime = False, returnHealthProfessionalIDReferredBy = False, returnHealthProfessionalIDReferredTo = False, returnModifiedTime = False, returnReferralCompleted = False, returnReferralDate = False, returnScoliosisGuardianNotificationID = False, returnScoliosisGuardianResponseID = False, returnScoliosisReferralReasonID = False, returnScoliosisReferralResultID = False, returnScoliosisScreeningID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params.loc[lambda x: ((x.value & (x.index.to_series().str.contains("return"))) | (~(x.value.isnull()) & (x.index.to_series().str.contains("set")))) & (x.index.to_series() != "EntityID"),:].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(),:]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ScoliosisScreeningReferral/", verb = "put", return_params_list = return_params_list, payload = payload_params)

def deleteScoliosisScreeningReferral(ScoliosisScreeningReferralID, EntityID = 1):

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Attendance/AttendancePeriod/" + str(AttendancePeriodID), verb = "delete")

def getEveryScoliosisScreeningSecuredNote(EntityID = 1, page = 1, pageSize = 100, returnScoliosisScreeningSecuredNoteID = True, returnCreatedTime = False, returnModifiedTime = False, returnNote = False, returnScoliosisScreeningID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[3,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ScoliosisScreeningSecuredNote/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params_list)

def getScoliosisScreeningSecuredNote(ScoliosisScreeningSecuredNoteID, EntityID = 1, returnScoliosisScreeningSecuredNoteID = True, returnCreatedTime = False, returnModifiedTime = False, returnNote = False, returnScoliosisScreeningID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[2,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ScoliosisScreeningSecuredNote/" + str(ScoliosisScreeningSecuredNoteID), verb = "get", return_params_list = return_params_list)

def modifyScoliosisScreeningSecuredNote(ScoliosisScreeningSecuredNoteID, EntityID = 1, setNote = None, setScoliosisScreeningID = None, setRelationships = None, returnScoliosisScreeningSecuredNoteID = True, returnCreatedTime = False, returnModifiedTime = False, returnNote = False, returnScoliosisScreeningID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(), :]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ScoliosisScreeningSecuredNote/" + str(ScoliosisScreeningSecuredNoteID), verb = "post", return_params_list = return_params_list, payload = payload_params)

def createScoliosisScreeningSecuredNote(EntityID = 1, setNote = None, setScoliosisScreeningID = None, setRelationships = None, returnScoliosisScreeningSecuredNoteID = True, returnCreatedTime = False, returnModifiedTime = False, returnNote = False, returnScoliosisScreeningID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params.loc[lambda x: ((x.value & (x.index.to_series().str.contains("return"))) | (~(x.value.isnull()) & (x.index.to_series().str.contains("set")))) & (x.index.to_series() != "EntityID"),:].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(),:]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ScoliosisScreeningSecuredNote/", verb = "put", return_params_list = return_params_list, payload = payload_params)

def deleteScoliosisScreeningSecuredNote(ScoliosisScreeningSecuredNoteID, EntityID = 1):

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Attendance/AttendancePeriod/" + str(AttendancePeriodID), verb = "delete")

def getEveryScoliosisTreatment(EntityID = 1, page = 1, pageSize = 100, returnScoliosisTreatmentID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[3,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ScoliosisTreatment/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params_list)

def getScoliosisTreatment(ScoliosisTreatmentID, EntityID = 1, returnScoliosisTreatmentID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[2,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ScoliosisTreatment/" + str(ScoliosisTreatmentID), verb = "get", return_params_list = return_params_list)

def modifyScoliosisTreatment(ScoliosisTreatmentID, EntityID = 1, setCode = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setRelationships = None, returnScoliosisTreatmentID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(), :]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ScoliosisTreatment/" + str(ScoliosisTreatmentID), verb = "post", return_params_list = return_params_list, payload = payload_params)

def createScoliosisTreatment(EntityID = 1, setCode = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setRelationships = None, returnScoliosisTreatmentID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params.loc[lambda x: ((x.value & (x.index.to_series().str.contains("return"))) | (~(x.value.isnull()) & (x.index.to_series().str.contains("set")))) & (x.index.to_series() != "EntityID"),:].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(),:]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/ScoliosisTreatment/", verb = "put", return_params_list = return_params_list, payload = payload_params)

def deleteScoliosisTreatment(ScoliosisTreatmentID, EntityID = 1):

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Attendance/AttendancePeriod/" + str(AttendancePeriodID), verb = "delete")

def getEveryStudentChildhoodIllness(EntityID = 1, page = 1, pageSize = 100, returnStudentChildhoodIllnessID = True, returnAgeDiagnosed = False, returnChildhoodIllnessID = False, returnCreatedTime = False, returnDistrictID = False, returnHealthProfessionalIDExaminedBy = False, returnIsVoid = False, returnModifiedTime = False, returnObservationDescriptionsListDisplay = False, returnSchoolYearID = False, returnScreeningDate = False, returnStudentID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnUserIDVoidedBy = False, returnVoidedTime = False, returnVoidNote = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[3,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/StudentChildhoodIllness/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params_list)

def getStudentChildhoodIllness(StudentChildhoodIllnessID, EntityID = 1, returnStudentChildhoodIllnessID = True, returnAgeDiagnosed = False, returnChildhoodIllnessID = False, returnCreatedTime = False, returnDistrictID = False, returnHealthProfessionalIDExaminedBy = False, returnIsVoid = False, returnModifiedTime = False, returnObservationDescriptionsListDisplay = False, returnSchoolYearID = False, returnScreeningDate = False, returnStudentID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnUserIDVoidedBy = False, returnVoidedTime = False, returnVoidNote = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[2,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/StudentChildhoodIllness/" + str(StudentChildhoodIllnessID), verb = "get", return_params_list = return_params_list)

def modifyStudentChildhoodIllness(StudentChildhoodIllnessID, EntityID = 1, setAgeDiagnosed = None, setChildhoodIllnessID = None, setDistrictID = None, setHealthProfessionalIDExaminedBy = None, setIsVoid = None, setSchoolYearID = None, setScreeningDate = None, setStudentID = None, setUserIDVoidedBy = None, setVoidedTime = None, setVoidNote = None, setRelationships = None, returnStudentChildhoodIllnessID = True, returnAgeDiagnosed = False, returnChildhoodIllnessID = False, returnCreatedTime = False, returnDistrictID = False, returnHealthProfessionalIDExaminedBy = False, returnIsVoid = False, returnModifiedTime = False, returnObservationDescriptionsListDisplay = False, returnSchoolYearID = False, returnScreeningDate = False, returnStudentID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnUserIDVoidedBy = False, returnVoidedTime = False, returnVoidNote = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(), :]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/StudentChildhoodIllness/" + str(StudentChildhoodIllnessID), verb = "post", return_params_list = return_params_list, payload = payload_params)

def createStudentChildhoodIllness(EntityID = 1, setAgeDiagnosed = None, setChildhoodIllnessID = None, setDistrictID = None, setHealthProfessionalIDExaminedBy = None, setIsVoid = None, setSchoolYearID = None, setScreeningDate = None, setStudentID = None, setUserIDVoidedBy = None, setVoidedTime = None, setVoidNote = None, setRelationships = None, returnStudentChildhoodIllnessID = True, returnAgeDiagnosed = False, returnChildhoodIllnessID = False, returnCreatedTime = False, returnDistrictID = False, returnHealthProfessionalIDExaminedBy = False, returnIsVoid = False, returnModifiedTime = False, returnObservationDescriptionsListDisplay = False, returnSchoolYearID = False, returnScreeningDate = False, returnStudentID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnUserIDVoidedBy = False, returnVoidedTime = False, returnVoidNote = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params.loc[lambda x: ((x.value & (x.index.to_series().str.contains("return"))) | (~(x.value.isnull()) & (x.index.to_series().str.contains("set")))) & (x.index.to_series() != "EntityID"),:].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(),:]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/StudentChildhoodIllness/", verb = "put", return_params_list = return_params_list, payload = payload_params)

def deleteStudentChildhoodIllness(StudentChildhoodIllnessID, EntityID = 1):

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Attendance/AttendancePeriod/" + str(AttendancePeriodID), verb = "delete")

def getEveryStudentChildhoodIllnessComment(EntityID = 1, page = 1, pageSize = 100, returnStudentChildhoodIllnessCommentID = True, returnChildhoodIllnessCommentID = False, returnCreatedTime = False, returnModifiedTime = False, returnStudentChildhoodIllnessID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[3,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/StudentChildhoodIllnessComment/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params_list)

def getStudentChildhoodIllnessComment(StudentChildhoodIllnessCommentID, EntityID = 1, returnStudentChildhoodIllnessCommentID = True, returnChildhoodIllnessCommentID = False, returnCreatedTime = False, returnModifiedTime = False, returnStudentChildhoodIllnessID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[2,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/StudentChildhoodIllnessComment/" + str(StudentChildhoodIllnessCommentID), verb = "get", return_params_list = return_params_list)

def modifyStudentChildhoodIllnessComment(StudentChildhoodIllnessCommentID, EntityID = 1, setChildhoodIllnessCommentID = None, setStudentChildhoodIllnessID = None, setRelationships = None, returnStudentChildhoodIllnessCommentID = True, returnChildhoodIllnessCommentID = False, returnCreatedTime = False, returnModifiedTime = False, returnStudentChildhoodIllnessID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(), :]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/StudentChildhoodIllnessComment/" + str(StudentChildhoodIllnessCommentID), verb = "post", return_params_list = return_params_list, payload = payload_params)

def createStudentChildhoodIllnessComment(EntityID = 1, setChildhoodIllnessCommentID = None, setStudentChildhoodIllnessID = None, setRelationships = None, returnStudentChildhoodIllnessCommentID = True, returnChildhoodIllnessCommentID = False, returnCreatedTime = False, returnModifiedTime = False, returnStudentChildhoodIllnessID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params.loc[lambda x: ((x.value & (x.index.to_series().str.contains("return"))) | (~(x.value.isnull()) & (x.index.to_series().str.contains("set")))) & (x.index.to_series() != "EntityID"),:].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(),:]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/StudentChildhoodIllnessComment/", verb = "put", return_params_list = return_params_list, payload = payload_params)

def deleteStudentChildhoodIllnessComment(StudentChildhoodIllnessCommentID, EntityID = 1):

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Attendance/AttendancePeriod/" + str(AttendancePeriodID), verb = "delete")

def getEveryStudentChildhoodIllnessNote(EntityID = 1, page = 1, pageSize = 100, returnStudentChildhoodIllnessNoteID = True, returnCreatedTime = False, returnModifiedTime = False, returnNote = False, returnStudentChildhoodIllnessID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[3,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/StudentChildhoodIllnessNote/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params_list)

def getStudentChildhoodIllnessNote(StudentChildhoodIllnessNoteID, EntityID = 1, returnStudentChildhoodIllnessNoteID = True, returnCreatedTime = False, returnModifiedTime = False, returnNote = False, returnStudentChildhoodIllnessID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[2,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/StudentChildhoodIllnessNote/" + str(StudentChildhoodIllnessNoteID), verb = "get", return_params_list = return_params_list)

def modifyStudentChildhoodIllnessNote(StudentChildhoodIllnessNoteID, EntityID = 1, setNote = None, setStudentChildhoodIllnessID = None, setRelationships = None, returnStudentChildhoodIllnessNoteID = True, returnCreatedTime = False, returnModifiedTime = False, returnNote = False, returnStudentChildhoodIllnessID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(), :]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/StudentChildhoodIllnessNote/" + str(StudentChildhoodIllnessNoteID), verb = "post", return_params_list = return_params_list, payload = payload_params)

def createStudentChildhoodIllnessNote(EntityID = 1, setNote = None, setStudentChildhoodIllnessID = None, setRelationships = None, returnStudentChildhoodIllnessNoteID = True, returnCreatedTime = False, returnModifiedTime = False, returnNote = False, returnStudentChildhoodIllnessID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params.loc[lambda x: ((x.value & (x.index.to_series().str.contains("return"))) | (~(x.value.isnull()) & (x.index.to_series().str.contains("set")))) & (x.index.to_series() != "EntityID"),:].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(),:]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/StudentChildhoodIllnessNote/", verb = "put", return_params_list = return_params_list, payload = payload_params)

def deleteStudentChildhoodIllnessNote(StudentChildhoodIllnessNoteID, EntityID = 1):

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Attendance/AttendancePeriod/" + str(AttendancePeriodID), verb = "delete")

def getEveryStudentChildhoodIllnessObservation(EntityID = 1, page = 1, pageSize = 100, returnStudentChildhoodIllnessObservationID = True, returnChildhoodIllnessObservationID = False, returnCreatedTime = False, returnModifiedTime = False, returnStudentChildhoodIllnessID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[3,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/StudentChildhoodIllnessObservation/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params_list)

def getStudentChildhoodIllnessObservation(StudentChildhoodIllnessObservationID, EntityID = 1, returnStudentChildhoodIllnessObservationID = True, returnChildhoodIllnessObservationID = False, returnCreatedTime = False, returnModifiedTime = False, returnStudentChildhoodIllnessID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[2,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/StudentChildhoodIllnessObservation/" + str(StudentChildhoodIllnessObservationID), verb = "get", return_params_list = return_params_list)

def modifyStudentChildhoodIllnessObservation(StudentChildhoodIllnessObservationID, EntityID = 1, setChildhoodIllnessObservationID = None, setStudentChildhoodIllnessID = None, setRelationships = None, returnStudentChildhoodIllnessObservationID = True, returnChildhoodIllnessObservationID = False, returnCreatedTime = False, returnModifiedTime = False, returnStudentChildhoodIllnessID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(), :]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/StudentChildhoodIllnessObservation/" + str(StudentChildhoodIllnessObservationID), verb = "post", return_params_list = return_params_list, payload = payload_params)

def createStudentChildhoodIllnessObservation(EntityID = 1, setChildhoodIllnessObservationID = None, setStudentChildhoodIllnessID = None, setRelationships = None, returnStudentChildhoodIllnessObservationID = True, returnChildhoodIllnessObservationID = False, returnCreatedTime = False, returnModifiedTime = False, returnStudentChildhoodIllnessID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params.loc[lambda x: ((x.value & (x.index.to_series().str.contains("return"))) | (~(x.value.isnull()) & (x.index.to_series().str.contains("set")))) & (x.index.to_series() != "EntityID"),:].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(),:]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/StudentChildhoodIllnessObservation/", verb = "put", return_params_list = return_params_list, payload = payload_params)

def deleteStudentChildhoodIllnessObservation(StudentChildhoodIllnessObservationID, EntityID = 1):

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Attendance/AttendancePeriod/" + str(AttendancePeriodID), verb = "delete")

def getEveryStudentChildhoodIllnessReferral(EntityID = 1, page = 1, pageSize = 100, returnStudentChildhoodIllnessReferralID = True, returnChildhoodIllnessGuardianNotificationID = False, returnChildhoodIllnessGuardianResponseID = False, returnChildhoodIllnessReferralReasonID = False, returnChildhoodIllnessReferralResultID = False, returnCompletionDate = False, returnCreatedTime = False, returnHealthProfessionalIDReferredBy = False, returnHealthProfessionalIDReferredTo = False, returnModifiedTime = False, returnReferralCompleted = False, returnReferralDate = False, returnStudentChildhoodIllnessID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[3,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/StudentChildhoodIllnessReferral/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params_list)

def getStudentChildhoodIllnessReferral(StudentChildhoodIllnessReferralID, EntityID = 1, returnStudentChildhoodIllnessReferralID = True, returnChildhoodIllnessGuardianNotificationID = False, returnChildhoodIllnessGuardianResponseID = False, returnChildhoodIllnessReferralReasonID = False, returnChildhoodIllnessReferralResultID = False, returnCompletionDate = False, returnCreatedTime = False, returnHealthProfessionalIDReferredBy = False, returnHealthProfessionalIDReferredTo = False, returnModifiedTime = False, returnReferralCompleted = False, returnReferralDate = False, returnStudentChildhoodIllnessID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[2,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/StudentChildhoodIllnessReferral/" + str(StudentChildhoodIllnessReferralID), verb = "get", return_params_list = return_params_list)

def modifyStudentChildhoodIllnessReferral(StudentChildhoodIllnessReferralID, EntityID = 1, setChildhoodIllnessGuardianNotificationID = None, setChildhoodIllnessGuardianResponseID = None, setChildhoodIllnessReferralReasonID = None, setChildhoodIllnessReferralResultID = None, setCompletionDate = None, setHealthProfessionalIDReferredBy = None, setHealthProfessionalIDReferredTo = None, setReferralCompleted = None, setReferralDate = None, setStudentChildhoodIllnessID = None, setRelationships = None, returnStudentChildhoodIllnessReferralID = True, returnChildhoodIllnessGuardianNotificationID = False, returnChildhoodIllnessGuardianResponseID = False, returnChildhoodIllnessReferralReasonID = False, returnChildhoodIllnessReferralResultID = False, returnCompletionDate = False, returnCreatedTime = False, returnHealthProfessionalIDReferredBy = False, returnHealthProfessionalIDReferredTo = False, returnModifiedTime = False, returnReferralCompleted = False, returnReferralDate = False, returnStudentChildhoodIllnessID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(), :]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/StudentChildhoodIllnessReferral/" + str(StudentChildhoodIllnessReferralID), verb = "post", return_params_list = return_params_list, payload = payload_params)

def createStudentChildhoodIllnessReferral(EntityID = 1, setChildhoodIllnessGuardianNotificationID = None, setChildhoodIllnessGuardianResponseID = None, setChildhoodIllnessReferralReasonID = None, setChildhoodIllnessReferralResultID = None, setCompletionDate = None, setHealthProfessionalIDReferredBy = None, setHealthProfessionalIDReferredTo = None, setReferralCompleted = None, setReferralDate = None, setStudentChildhoodIllnessID = None, setRelationships = None, returnStudentChildhoodIllnessReferralID = True, returnChildhoodIllnessGuardianNotificationID = False, returnChildhoodIllnessGuardianResponseID = False, returnChildhoodIllnessReferralReasonID = False, returnChildhoodIllnessReferralResultID = False, returnCompletionDate = False, returnCreatedTime = False, returnHealthProfessionalIDReferredBy = False, returnHealthProfessionalIDReferredTo = False, returnModifiedTime = False, returnReferralCompleted = False, returnReferralDate = False, returnStudentChildhoodIllnessID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params.loc[lambda x: ((x.value & (x.index.to_series().str.contains("return"))) | (~(x.value.isnull()) & (x.index.to_series().str.contains("set")))) & (x.index.to_series() != "EntityID"),:].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(),:]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/StudentChildhoodIllnessReferral/", verb = "put", return_params_list = return_params_list, payload = payload_params)

def deleteStudentChildhoodIllnessReferral(StudentChildhoodIllnessReferralID, EntityID = 1):

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Attendance/AttendancePeriod/" + str(AttendancePeriodID), verb = "delete")

def getEveryStudentChildhoodIllnessSecuredNote(EntityID = 1, page = 1, pageSize = 100, returnStudentChildhoodIllnessSecuredNoteID = True, returnCreatedTime = False, returnModifiedTime = False, returnNote = False, returnStudentChildhoodIllnessID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[3,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/StudentChildhoodIllnessSecuredNote/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params_list)

def getStudentChildhoodIllnessSecuredNote(StudentChildhoodIllnessSecuredNoteID, EntityID = 1, returnStudentChildhoodIllnessSecuredNoteID = True, returnCreatedTime = False, returnModifiedTime = False, returnNote = False, returnStudentChildhoodIllnessID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[2,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/StudentChildhoodIllnessSecuredNote/" + str(StudentChildhoodIllnessSecuredNoteID), verb = "get", return_params_list = return_params_list)

def modifyStudentChildhoodIllnessSecuredNote(StudentChildhoodIllnessSecuredNoteID, EntityID = 1, setNote = None, setStudentChildhoodIllnessID = None, setRelationships = None, returnStudentChildhoodIllnessSecuredNoteID = True, returnCreatedTime = False, returnModifiedTime = False, returnNote = False, returnStudentChildhoodIllnessID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(), :]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/StudentChildhoodIllnessSecuredNote/" + str(StudentChildhoodIllnessSecuredNoteID), verb = "post", return_params_list = return_params_list, payload = payload_params)

def createStudentChildhoodIllnessSecuredNote(EntityID = 1, setNote = None, setStudentChildhoodIllnessID = None, setRelationships = None, returnStudentChildhoodIllnessSecuredNoteID = True, returnCreatedTime = False, returnModifiedTime = False, returnNote = False, returnStudentChildhoodIllnessID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params.loc[lambda x: ((x.value & (x.index.to_series().str.contains("return"))) | (~(x.value.isnull()) & (x.index.to_series().str.contains("set")))) & (x.index.to_series() != "EntityID"),:].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(),:]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/StudentChildhoodIllnessSecuredNote/", verb = "put", return_params_list = return_params_list, payload = payload_params)

def deleteStudentChildhoodIllnessSecuredNote(StudentChildhoodIllnessSecuredNoteID, EntityID = 1):

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Attendance/AttendancePeriod/" + str(AttendancePeriodID), verb = "delete")

def getEveryStudentHealthCondition(EntityID = 1, page = 1, pageSize = 100, returnStudentHealthConditionID = True, returnAttachmentCount = False, returnAttachmentIndicatorColumn = False, returnCreatedTime = False, returnDescription = False, returnEndDate = False, returnHealthConditionID = False, returnHealthConditionTreatmentID = False, returnHealthProfessionalIDExaminedBy = False, returnIsActive = False, returnIsVoid = False, returnModifiedTime = False, returnOriginalEndDate = False, returnStartDate = False, returnStudentID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnUserIDVoidedBy = False, returnVoidedTime = False, returnVoidNote = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[3,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/StudentHealthCondition/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params_list)

def getStudentHealthCondition(StudentHealthConditionID, EntityID = 1, returnStudentHealthConditionID = True, returnAttachmentCount = False, returnAttachmentIndicatorColumn = False, returnCreatedTime = False, returnDescription = False, returnEndDate = False, returnHealthConditionID = False, returnHealthConditionTreatmentID = False, returnHealthProfessionalIDExaminedBy = False, returnIsActive = False, returnIsVoid = False, returnModifiedTime = False, returnOriginalEndDate = False, returnStartDate = False, returnStudentID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnUserIDVoidedBy = False, returnVoidedTime = False, returnVoidNote = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[2,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/StudentHealthCondition/" + str(StudentHealthConditionID), verb = "get", return_params_list = return_params_list)

def modifyStudentHealthCondition(StudentHealthConditionID, EntityID = 1, setDescription = None, setEndDate = None, setHealthConditionID = None, setHealthConditionTreatmentID = None, setHealthProfessionalIDExaminedBy = None, setIsVoid = None, setOriginalEndDate = None, setStartDate = None, setStudentID = None, setUserIDVoidedBy = None, setVoidedTime = None, setVoidNote = None, setRelationships = None, returnStudentHealthConditionID = True, returnAttachmentCount = False, returnAttachmentIndicatorColumn = False, returnCreatedTime = False, returnDescription = False, returnEndDate = False, returnHealthConditionID = False, returnHealthConditionTreatmentID = False, returnHealthProfessionalIDExaminedBy = False, returnIsActive = False, returnIsVoid = False, returnModifiedTime = False, returnOriginalEndDate = False, returnStartDate = False, returnStudentID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnUserIDVoidedBy = False, returnVoidedTime = False, returnVoidNote = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(), :]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/StudentHealthCondition/" + str(StudentHealthConditionID), verb = "post", return_params_list = return_params_list, payload = payload_params)

def createStudentHealthCondition(EntityID = 1, setDescription = None, setEndDate = None, setHealthConditionID = None, setHealthConditionTreatmentID = None, setHealthProfessionalIDExaminedBy = None, setIsVoid = None, setOriginalEndDate = None, setStartDate = None, setStudentID = None, setUserIDVoidedBy = None, setVoidedTime = None, setVoidNote = None, setRelationships = None, returnStudentHealthConditionID = True, returnAttachmentCount = False, returnAttachmentIndicatorColumn = False, returnCreatedTime = False, returnDescription = False, returnEndDate = False, returnHealthConditionID = False, returnHealthConditionTreatmentID = False, returnHealthProfessionalIDExaminedBy = False, returnIsActive = False, returnIsVoid = False, returnModifiedTime = False, returnOriginalEndDate = False, returnStartDate = False, returnStudentID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnUserIDVoidedBy = False, returnVoidedTime = False, returnVoidNote = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params.loc[lambda x: ((x.value & (x.index.to_series().str.contains("return"))) | (~(x.value.isnull()) & (x.index.to_series().str.contains("set")))) & (x.index.to_series() != "EntityID"),:].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(),:]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/StudentHealthCondition/", verb = "put", return_params_list = return_params_list, payload = payload_params)

def deleteStudentHealthCondition(StudentHealthConditionID, EntityID = 1):

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Attendance/AttendancePeriod/" + str(AttendancePeriodID), verb = "delete")

def getEveryStudentHealthConditionComment(EntityID = 1, page = 1, pageSize = 100, returnStudentHealthConditionCommentID = True, returnCreatedTime = False, returnHealthConditionCommentID = False, returnModifiedTime = False, returnStudentHealthConditionID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[3,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/StudentHealthConditionComment/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params_list)

def getStudentHealthConditionComment(StudentHealthConditionCommentID, EntityID = 1, returnStudentHealthConditionCommentID = True, returnCreatedTime = False, returnHealthConditionCommentID = False, returnModifiedTime = False, returnStudentHealthConditionID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[2,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/StudentHealthConditionComment/" + str(StudentHealthConditionCommentID), verb = "get", return_params_list = return_params_list)

def modifyStudentHealthConditionComment(StudentHealthConditionCommentID, EntityID = 1, setHealthConditionCommentID = None, setStudentHealthConditionID = None, setRelationships = None, returnStudentHealthConditionCommentID = True, returnCreatedTime = False, returnHealthConditionCommentID = False, returnModifiedTime = False, returnStudentHealthConditionID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(), :]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/StudentHealthConditionComment/" + str(StudentHealthConditionCommentID), verb = "post", return_params_list = return_params_list, payload = payload_params)

def createStudentHealthConditionComment(EntityID = 1, setHealthConditionCommentID = None, setStudentHealthConditionID = None, setRelationships = None, returnStudentHealthConditionCommentID = True, returnCreatedTime = False, returnHealthConditionCommentID = False, returnModifiedTime = False, returnStudentHealthConditionID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params.loc[lambda x: ((x.value & (x.index.to_series().str.contains("return"))) | (~(x.value.isnull()) & (x.index.to_series().str.contains("set")))) & (x.index.to_series() != "EntityID"),:].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(),:]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/StudentHealthConditionComment/", verb = "put", return_params_list = return_params_list, payload = payload_params)

def deleteStudentHealthConditionComment(StudentHealthConditionCommentID, EntityID = 1):

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Attendance/AttendancePeriod/" + str(AttendancePeriodID), verb = "delete")

def getEveryStudentHealthConditionNote(EntityID = 1, page = 1, pageSize = 100, returnStudentHealthConditionNoteID = True, returnCreatedTime = False, returnIsNoteEnteredByGuardian = False, returnModifiedTime = False, returnNote = False, returnNoteEnteredByType = False, returnNoteEnteredByTypeCode = False, returnNoteEnteredByTypeLabel = False, returnStudentHealthConditionID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[3,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/StudentHealthConditionNote/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params_list)

def getStudentHealthConditionNote(StudentHealthConditionNoteID, EntityID = 1, returnStudentHealthConditionNoteID = True, returnCreatedTime = False, returnIsNoteEnteredByGuardian = False, returnModifiedTime = False, returnNote = False, returnNoteEnteredByType = False, returnNoteEnteredByTypeCode = False, returnNoteEnteredByTypeLabel = False, returnStudentHealthConditionID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[2,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/StudentHealthConditionNote/" + str(StudentHealthConditionNoteID), verb = "get", return_params_list = return_params_list)

def modifyStudentHealthConditionNote(StudentHealthConditionNoteID, EntityID = 1, setNote = None, setNoteEnteredByType = None, setNoteEnteredByTypeCode = None, setStudentHealthConditionID = None, setRelationships = None, returnStudentHealthConditionNoteID = True, returnCreatedTime = False, returnIsNoteEnteredByGuardian = False, returnModifiedTime = False, returnNote = False, returnNoteEnteredByType = False, returnNoteEnteredByTypeCode = False, returnNoteEnteredByTypeLabel = False, returnStudentHealthConditionID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(), :]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/StudentHealthConditionNote/" + str(StudentHealthConditionNoteID), verb = "post", return_params_list = return_params_list, payload = payload_params)

def createStudentHealthConditionNote(EntityID = 1, setNote = None, setNoteEnteredByType = None, setNoteEnteredByTypeCode = None, setStudentHealthConditionID = None, setRelationships = None, returnStudentHealthConditionNoteID = True, returnCreatedTime = False, returnIsNoteEnteredByGuardian = False, returnModifiedTime = False, returnNote = False, returnNoteEnteredByType = False, returnNoteEnteredByTypeCode = False, returnNoteEnteredByTypeLabel = False, returnStudentHealthConditionID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params.loc[lambda x: ((x.value & (x.index.to_series().str.contains("return"))) | (~(x.value.isnull()) & (x.index.to_series().str.contains("set")))) & (x.index.to_series() != "EntityID"),:].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(),:]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/StudentHealthConditionNote/", verb = "put", return_params_list = return_params_list, payload = payload_params)

def deleteStudentHealthConditionNote(StudentHealthConditionNoteID, EntityID = 1):

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Attendance/AttendancePeriod/" + str(AttendancePeriodID), verb = "delete")

def getEveryStudentHealthConditionSecuredNote(EntityID = 1, page = 1, pageSize = 100, returnStudentHealthConditionSecuredNoteID = True, returnCreatedTime = False, returnModifiedTime = False, returnNote = False, returnStudentHealthConditionID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[3,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/StudentHealthConditionSecuredNote/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params_list)

def getStudentHealthConditionSecuredNote(StudentHealthConditionSecuredNoteID, EntityID = 1, returnStudentHealthConditionSecuredNoteID = True, returnCreatedTime = False, returnModifiedTime = False, returnNote = False, returnStudentHealthConditionID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[2,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/StudentHealthConditionSecuredNote/" + str(StudentHealthConditionSecuredNoteID), verb = "get", return_params_list = return_params_list)

def modifyStudentHealthConditionSecuredNote(StudentHealthConditionSecuredNoteID, EntityID = 1, setNote = None, setStudentHealthConditionID = None, setRelationships = None, returnStudentHealthConditionSecuredNoteID = True, returnCreatedTime = False, returnModifiedTime = False, returnNote = False, returnStudentHealthConditionID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(), :]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/StudentHealthConditionSecuredNote/" + str(StudentHealthConditionSecuredNoteID), verb = "post", return_params_list = return_params_list, payload = payload_params)

def createStudentHealthConditionSecuredNote(EntityID = 1, setNote = None, setStudentHealthConditionID = None, setRelationships = None, returnStudentHealthConditionSecuredNoteID = True, returnCreatedTime = False, returnModifiedTime = False, returnNote = False, returnStudentHealthConditionID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params.loc[lambda x: ((x.value & (x.index.to_series().str.contains("return"))) | (~(x.value.isnull()) & (x.index.to_series().str.contains("set")))) & (x.index.to_series() != "EntityID"),:].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(),:]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/StudentHealthConditionSecuredNote/", verb = "put", return_params_list = return_params_list, payload = payload_params)

def deleteStudentHealthConditionSecuredNote(StudentHealthConditionSecuredNoteID, EntityID = 1):

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Attendance/AttendancePeriod/" + str(AttendancePeriodID), verb = "delete")

def getEveryStudentIHP(EntityID = 1, page = 1, pageSize = 100, returnStudentIHPID = True, returnAttachmentComments = False, returnAttachmentCount = False, returnAttachmentIndicatorColumn = False, returnCreatedTime = False, returnEndDate = False, returnFormDescription = False, returnIsActive = False, returnIsVoid = False, returnModifiedTime = False, returnStartDate = False, returnStudentID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnUserIDVoidedBy = False, returnVoidedTime = False, returnVoidNote = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[3,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/StudentIHP/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params_list)

def getStudentIHP(StudentIHPID, EntityID = 1, returnStudentIHPID = True, returnAttachmentComments = False, returnAttachmentCount = False, returnAttachmentIndicatorColumn = False, returnCreatedTime = False, returnEndDate = False, returnFormDescription = False, returnIsActive = False, returnIsVoid = False, returnModifiedTime = False, returnStartDate = False, returnStudentID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnUserIDVoidedBy = False, returnVoidedTime = False, returnVoidNote = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[2,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/StudentIHP/" + str(StudentIHPID), verb = "get", return_params_list = return_params_list)

def modifyStudentIHP(StudentIHPID, EntityID = 1, setEndDate = None, setFormDescription = None, setIsVoid = None, setStartDate = None, setStudentID = None, setUserIDVoidedBy = None, setVoidedTime = None, setVoidNote = None, setRelationships = None, returnStudentIHPID = True, returnAttachmentComments = False, returnAttachmentCount = False, returnAttachmentIndicatorColumn = False, returnCreatedTime = False, returnEndDate = False, returnFormDescription = False, returnIsActive = False, returnIsVoid = False, returnModifiedTime = False, returnStartDate = False, returnStudentID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnUserIDVoidedBy = False, returnVoidedTime = False, returnVoidNote = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(), :]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/StudentIHP/" + str(StudentIHPID), verb = "post", return_params_list = return_params_list, payload = payload_params)

def createStudentIHP(EntityID = 1, setEndDate = None, setFormDescription = None, setIsVoid = None, setStartDate = None, setStudentID = None, setUserIDVoidedBy = None, setVoidedTime = None, setVoidNote = None, setRelationships = None, returnStudentIHPID = True, returnAttachmentComments = False, returnAttachmentCount = False, returnAttachmentIndicatorColumn = False, returnCreatedTime = False, returnEndDate = False, returnFormDescription = False, returnIsActive = False, returnIsVoid = False, returnModifiedTime = False, returnStartDate = False, returnStudentID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnUserIDVoidedBy = False, returnVoidedTime = False, returnVoidNote = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params.loc[lambda x: ((x.value & (x.index.to_series().str.contains("return"))) | (~(x.value.isnull()) & (x.index.to_series().str.contains("set")))) & (x.index.to_series() != "EntityID"),:].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(),:]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/StudentIHP/", verb = "put", return_params_list = return_params_list, payload = payload_params)

def deleteStudentIHP(StudentIHPID, EntityID = 1):

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Attendance/AttendancePeriod/" + str(AttendancePeriodID), verb = "delete")

def getEveryStudentVaccinationWaiver(EntityID = 1, page = 1, pageSize = 100, returnStudentVaccinationWaiverID = True, returnClaimDate = False, returnCreatedTime = False, returnExpirationDate = False, returnModifiedTime = False, returnStudentID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnVaccinationWaiverID = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[3,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/StudentVaccinationWaiver/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params_list)

def getStudentVaccinationWaiver(StudentVaccinationWaiverID, EntityID = 1, returnStudentVaccinationWaiverID = True, returnClaimDate = False, returnCreatedTime = False, returnExpirationDate = False, returnModifiedTime = False, returnStudentID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnVaccinationWaiverID = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[2,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/StudentVaccinationWaiver/" + str(StudentVaccinationWaiverID), verb = "get", return_params_list = return_params_list)

def modifyStudentVaccinationWaiver(StudentVaccinationWaiverID, EntityID = 1, setClaimDate = None, setExpirationDate = None, setStudentID = None, setVaccinationWaiverID = None, setRelationships = None, returnStudentVaccinationWaiverID = True, returnClaimDate = False, returnCreatedTime = False, returnExpirationDate = False, returnModifiedTime = False, returnStudentID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnVaccinationWaiverID = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(), :]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/StudentVaccinationWaiver/" + str(StudentVaccinationWaiverID), verb = "post", return_params_list = return_params_list, payload = payload_params)

def createStudentVaccinationWaiver(EntityID = 1, setClaimDate = None, setExpirationDate = None, setStudentID = None, setVaccinationWaiverID = None, setRelationships = None, returnStudentVaccinationWaiverID = True, returnClaimDate = False, returnCreatedTime = False, returnExpirationDate = False, returnModifiedTime = False, returnStudentID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnVaccinationWaiverID = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params.loc[lambda x: ((x.value & (x.index.to_series().str.contains("return"))) | (~(x.value.isnull()) & (x.index.to_series().str.contains("set")))) & (x.index.to_series() != "EntityID"),:].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(),:]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/StudentVaccinationWaiver/", verb = "put", return_params_list = return_params_list, payload = payload_params)

def deleteStudentVaccinationWaiver(StudentVaccinationWaiverID, EntityID = 1):

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Attendance/AttendancePeriod/" + str(AttendancePeriodID), verb = "delete")

def getEveryStudentVaccinationYear(EntityID = 1, page = 1, pageSize = 100, returnStudentVaccinationYearID = True, returnCalculatedGradeCode = False, returnCalculatedGradeNumeric = False, returnCreatedTime = False, returnEffectiveDate = False, returnModifiedTime = False, returnStudentID = False, returnStudentVaccineCount = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnVaccinationYearID = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[3,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/StudentVaccinationYear/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params_list)

def getStudentVaccinationYear(StudentVaccinationYearID, EntityID = 1, returnStudentVaccinationYearID = True, returnCalculatedGradeCode = False, returnCalculatedGradeNumeric = False, returnCreatedTime = False, returnEffectiveDate = False, returnModifiedTime = False, returnStudentID = False, returnStudentVaccineCount = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnVaccinationYearID = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[2,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/StudentVaccinationYear/" + str(StudentVaccinationYearID), verb = "get", return_params_list = return_params_list)

def modifyStudentVaccinationYear(StudentVaccinationYearID, EntityID = 1, setStudentID = None, setVaccinationYearID = None, setRelationships = None, returnStudentVaccinationYearID = True, returnCalculatedGradeCode = False, returnCalculatedGradeNumeric = False, returnCreatedTime = False, returnEffectiveDate = False, returnModifiedTime = False, returnStudentID = False, returnStudentVaccineCount = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnVaccinationYearID = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(), :]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/StudentVaccinationYear/" + str(StudentVaccinationYearID), verb = "post", return_params_list = return_params_list, payload = payload_params)

def createStudentVaccinationYear(EntityID = 1, setStudentID = None, setVaccinationYearID = None, setRelationships = None, returnStudentVaccinationYearID = True, returnCalculatedGradeCode = False, returnCalculatedGradeNumeric = False, returnCreatedTime = False, returnEffectiveDate = False, returnModifiedTime = False, returnStudentID = False, returnStudentVaccineCount = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnVaccinationYearID = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params.loc[lambda x: ((x.value & (x.index.to_series().str.contains("return"))) | (~(x.value.isnull()) & (x.index.to_series().str.contains("set")))) & (x.index.to_series() != "EntityID"),:].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(),:]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/StudentVaccinationYear/", verb = "put", return_params_list = return_params_list, payload = payload_params)

def deleteStudentVaccinationYear(StudentVaccinationYearID, EntityID = 1):

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Attendance/AttendancePeriod/" + str(AttendancePeriodID), verb = "delete")

def getEveryStudentVaccinationYearStatus(EntityID = 1, page = 1, pageSize = 100, returnStudentVaccinationYearStatusID = True, returnAllDoseDates = False, returnComplianceScheduleDetailID = False, returnCreatedTime = False, returnEndDate = False, returnInvalidDoseDates = False, returnIsConditional = False, returnIsInComplianceByVaccines = False, returnIsOutOfCompliance = False, returnIsOutOfComplianceConditionalDisplay = False, returnIsProvisional = False, returnModifiedTime = False, returnReasonConditional = False, returnReasonOutOfCompliance = False, returnStartDate = False, returnStudentChildhoodIllnessID = False, returnStudentID = False, returnStudentVaccinationWaiverID = False, returnStudentVaccinationYearID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnVaccinationYearComplianceScheduleID = False, returnValidDoseDates = False, returnValidDoses = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[3,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/StudentVaccinationYearStatus/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params_list)

def getStudentVaccinationYearStatus(StudentVaccinationYearStatusID, EntityID = 1, returnStudentVaccinationYearStatusID = True, returnAllDoseDates = False, returnComplianceScheduleDetailID = False, returnCreatedTime = False, returnEndDate = False, returnInvalidDoseDates = False, returnIsConditional = False, returnIsInComplianceByVaccines = False, returnIsOutOfCompliance = False, returnIsOutOfComplianceConditionalDisplay = False, returnIsProvisional = False, returnModifiedTime = False, returnReasonConditional = False, returnReasonOutOfCompliance = False, returnStartDate = False, returnStudentChildhoodIllnessID = False, returnStudentID = False, returnStudentVaccinationWaiverID = False, returnStudentVaccinationYearID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnVaccinationYearComplianceScheduleID = False, returnValidDoseDates = False, returnValidDoses = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[2,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/StudentVaccinationYearStatus/" + str(StudentVaccinationYearStatusID), verb = "get", return_params_list = return_params_list)

def modifyStudentVaccinationYearStatus(StudentVaccinationYearStatusID, EntityID = 1, setAllDoseDates = None, setComplianceScheduleDetailID = None, setEndDate = None, setInvalidDoseDates = None, setIsConditional = None, setIsInComplianceByVaccines = None, setIsOutOfCompliance = None, setIsProvisional = None, setReasonConditional = None, setReasonOutOfCompliance = None, setStartDate = None, setStudentChildhoodIllnessID = None, setStudentID = None, setStudentVaccinationWaiverID = None, setStudentVaccinationYearID = None, setVaccinationYearComplianceScheduleID = None, setValidDoseDates = None, setValidDoses = None, setRelationships = None, returnStudentVaccinationYearStatusID = True, returnAllDoseDates = False, returnComplianceScheduleDetailID = False, returnCreatedTime = False, returnEndDate = False, returnInvalidDoseDates = False, returnIsConditional = False, returnIsInComplianceByVaccines = False, returnIsOutOfCompliance = False, returnIsOutOfComplianceConditionalDisplay = False, returnIsProvisional = False, returnModifiedTime = False, returnReasonConditional = False, returnReasonOutOfCompliance = False, returnStartDate = False, returnStudentChildhoodIllnessID = False, returnStudentID = False, returnStudentVaccinationWaiverID = False, returnStudentVaccinationYearID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnVaccinationYearComplianceScheduleID = False, returnValidDoseDates = False, returnValidDoses = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(), :]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/StudentVaccinationYearStatus/" + str(StudentVaccinationYearStatusID), verb = "post", return_params_list = return_params_list, payload = payload_params)

def createStudentVaccinationYearStatus(EntityID = 1, setAllDoseDates = None, setComplianceScheduleDetailID = None, setEndDate = None, setInvalidDoseDates = None, setIsConditional = None, setIsInComplianceByVaccines = None, setIsOutOfCompliance = None, setIsProvisional = None, setReasonConditional = None, setReasonOutOfCompliance = None, setStartDate = None, setStudentChildhoodIllnessID = None, setStudentID = None, setStudentVaccinationWaiverID = None, setStudentVaccinationYearID = None, setVaccinationYearComplianceScheduleID = None, setValidDoseDates = None, setValidDoses = None, setRelationships = None, returnStudentVaccinationYearStatusID = True, returnAllDoseDates = False, returnComplianceScheduleDetailID = False, returnCreatedTime = False, returnEndDate = False, returnInvalidDoseDates = False, returnIsConditional = False, returnIsInComplianceByVaccines = False, returnIsOutOfCompliance = False, returnIsOutOfComplianceConditionalDisplay = False, returnIsProvisional = False, returnModifiedTime = False, returnReasonConditional = False, returnReasonOutOfCompliance = False, returnStartDate = False, returnStudentChildhoodIllnessID = False, returnStudentID = False, returnStudentVaccinationWaiverID = False, returnStudentVaccinationYearID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnVaccinationYearComplianceScheduleID = False, returnValidDoseDates = False, returnValidDoses = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params.loc[lambda x: ((x.value & (x.index.to_series().str.contains("return"))) | (~(x.value.isnull()) & (x.index.to_series().str.contains("set")))) & (x.index.to_series() != "EntityID"),:].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(),:]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/StudentVaccinationYearStatus/", verb = "put", return_params_list = return_params_list, payload = payload_params)

def deleteStudentVaccinationYearStatus(StudentVaccinationYearStatusID, EntityID = 1):

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Attendance/AttendancePeriod/" + str(AttendancePeriodID), verb = "delete")

def getEveryStudentVaccinationYearStatusStudentVaccine(EntityID = 1, page = 1, pageSize = 100, returnStudentVaccinationYearStatusStudentVaccineID = True, returnCreatedTime = False, returnInvalidDoseReason = False, returnIsValidDose = False, returnModifiedTime = False, returnStudentVaccinationYearStatusID = False, returnStudentVaccineID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[3,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/StudentVaccinationYearStatusStudentVaccine/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params_list)

def getStudentVaccinationYearStatusStudentVaccine(StudentVaccinationYearStatusStudentVaccineID, EntityID = 1, returnStudentVaccinationYearStatusStudentVaccineID = True, returnCreatedTime = False, returnInvalidDoseReason = False, returnIsValidDose = False, returnModifiedTime = False, returnStudentVaccinationYearStatusID = False, returnStudentVaccineID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[2,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/StudentVaccinationYearStatusStudentVaccine/" + str(StudentVaccinationYearStatusStudentVaccineID), verb = "get", return_params_list = return_params_list)

def modifyStudentVaccinationYearStatusStudentVaccine(StudentVaccinationYearStatusStudentVaccineID, EntityID = 1, setInvalidDoseReason = None, setIsValidDose = None, setStudentVaccinationYearStatusID = None, setStudentVaccineID = None, setRelationships = None, returnStudentVaccinationYearStatusStudentVaccineID = True, returnCreatedTime = False, returnInvalidDoseReason = False, returnIsValidDose = False, returnModifiedTime = False, returnStudentVaccinationYearStatusID = False, returnStudentVaccineID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(), :]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/StudentVaccinationYearStatusStudentVaccine/" + str(StudentVaccinationYearStatusStudentVaccineID), verb = "post", return_params_list = return_params_list, payload = payload_params)

def createStudentVaccinationYearStatusStudentVaccine(EntityID = 1, setInvalidDoseReason = None, setIsValidDose = None, setStudentVaccinationYearStatusID = None, setStudentVaccineID = None, setRelationships = None, returnStudentVaccinationYearStatusStudentVaccineID = True, returnCreatedTime = False, returnInvalidDoseReason = False, returnIsValidDose = False, returnModifiedTime = False, returnStudentVaccinationYearStatusID = False, returnStudentVaccineID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params.loc[lambda x: ((x.value & (x.index.to_series().str.contains("return"))) | (~(x.value.isnull()) & (x.index.to_series().str.contains("set")))) & (x.index.to_series() != "EntityID"),:].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(),:]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/StudentVaccinationYearStatusStudentVaccine/", verb = "put", return_params_list = return_params_list, payload = payload_params)

def deleteStudentVaccinationYearStatusStudentVaccine(StudentVaccinationYearStatusStudentVaccineID, EntityID = 1):

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Attendance/AttendancePeriod/" + str(AttendancePeriodID), verb = "delete")

def getEveryStudentVaccine(EntityID = 1, page = 1, pageSize = 100, returnStudentVaccineID = True, returnCreatedTime = False, returnDate = False, returnLotNumber = False, returnModifiedTime = False, returnStudentID = False, returnStudentVaccineDates = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnVaccineID = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[3,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/StudentVaccine/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params_list)

def getStudentVaccine(StudentVaccineID, EntityID = 1, returnStudentVaccineID = True, returnCreatedTime = False, returnDate = False, returnLotNumber = False, returnModifiedTime = False, returnStudentID = False, returnStudentVaccineDates = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnVaccineID = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[2,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/StudentVaccine/" + str(StudentVaccineID), verb = "get", return_params_list = return_params_list)

def modifyStudentVaccine(StudentVaccineID, EntityID = 1, setDate = None, setLotNumber = None, setStudentID = None, setVaccineID = None, setRelationships = None, returnStudentVaccineID = True, returnCreatedTime = False, returnDate = False, returnLotNumber = False, returnModifiedTime = False, returnStudentID = False, returnStudentVaccineDates = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnVaccineID = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(), :]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/StudentVaccine/" + str(StudentVaccineID), verb = "post", return_params_list = return_params_list, payload = payload_params)

def createStudentVaccine(EntityID = 1, setDate = None, setLotNumber = None, setStudentID = None, setVaccineID = None, setRelationships = None, returnStudentVaccineID = True, returnCreatedTime = False, returnDate = False, returnLotNumber = False, returnModifiedTime = False, returnStudentID = False, returnStudentVaccineDates = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnVaccineID = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params.loc[lambda x: ((x.value & (x.index.to_series().str.contains("return"))) | (~(x.value.isnull()) & (x.index.to_series().str.contains("set")))) & (x.index.to_series() != "EntityID"),:].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(),:]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/StudentVaccine/", verb = "put", return_params_list = return_params_list, payload = payload_params)

def deleteStudentVaccine(StudentVaccineID, EntityID = 1):

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Attendance/AttendancePeriod/" + str(AttendancePeriodID), verb = "delete")

def getEveryStudentVaccineMaintenance(EntityID = 1, page = 1, pageSize = 100, returnVaccineID = True, returnDate1 = False, returnDate2 = False, returnDate3 = False, returnDate4 = False, returnDate5 = False, returnDate6 = False, returnDate7 = False, returnHasExistingStudentVaccines = False, returnLotNumber1 = False, returnLotNumber2 = False, returnLotNumber3 = False, returnLotNumber4 = False, returnLotNumber5 = False, returnLotNumber6 = False, returnLotNumber7 = False, returnStudentID = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[3,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/StudentVaccineMaintenance/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params_list)

def getStudentVaccineMaintenance(VaccineID, EntityID = 1, returnVaccineID = True, returnDate1 = False, returnDate2 = False, returnDate3 = False, returnDate4 = False, returnDate5 = False, returnDate6 = False, returnDate7 = False, returnHasExistingStudentVaccines = False, returnLotNumber1 = False, returnLotNumber2 = False, returnLotNumber3 = False, returnLotNumber4 = False, returnLotNumber5 = False, returnLotNumber6 = False, returnLotNumber7 = False, returnStudentID = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[2,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/StudentVaccineMaintenance/" + str(VaccineID), verb = "get", return_params_list = return_params_list)

def modifyStudentVaccineMaintenance(VaccineID, EntityID = 1, setVaccineID = None, setDate1 = None, setDate2 = None, setDate3 = None, setDate4 = None, setDate5 = None, setDate6 = None, setDate7 = None, setLotNumber1 = None, setLotNumber2 = None, setLotNumber3 = None, setLotNumber4 = None, setLotNumber5 = None, setLotNumber6 = None, setLotNumber7 = None, setRelationships = None, returnVaccineID = True, returnDate1 = False, returnDate2 = False, returnDate3 = False, returnDate4 = False, returnDate5 = False, returnDate6 = False, returnDate7 = False, returnHasExistingStudentVaccines = False, returnLotNumber1 = False, returnLotNumber2 = False, returnLotNumber3 = False, returnLotNumber4 = False, returnLotNumber5 = False, returnLotNumber6 = False, returnLotNumber7 = False, returnStudentID = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(), :]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/StudentVaccineMaintenance/" + str(VaccineID), verb = "post", return_params_list = return_params_list, payload = payload_params)

def createStudentVaccineMaintenance(EntityID = 1, setVaccineID = None, setDate1 = None, setDate2 = None, setDate3 = None, setDate4 = None, setDate5 = None, setDate6 = None, setDate7 = None, setLotNumber1 = None, setLotNumber2 = None, setLotNumber3 = None, setLotNumber4 = None, setLotNumber5 = None, setLotNumber6 = None, setLotNumber7 = None, setRelationships = None, returnVaccineID = True, returnDate1 = False, returnDate2 = False, returnDate3 = False, returnDate4 = False, returnDate5 = False, returnDate6 = False, returnDate7 = False, returnHasExistingStudentVaccines = False, returnLotNumber1 = False, returnLotNumber2 = False, returnLotNumber3 = False, returnLotNumber4 = False, returnLotNumber5 = False, returnLotNumber6 = False, returnLotNumber7 = False, returnStudentID = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params.loc[lambda x: ((x.value & (x.index.to_series().str.contains("return"))) | (~(x.value.isnull()) & (x.index.to_series().str.contains("set")))) & (x.index.to_series() != "EntityID"),:].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(),:]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/StudentVaccineMaintenance/", verb = "put", return_params_list = return_params_list, payload = payload_params)

def deleteStudentVaccineMaintenance(VaccineID, EntityID = 1):

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Attendance/AttendancePeriod/" + str(AttendancePeriodID), verb = "delete")

def getEveryTempAdministerNameMedication(EntityID = 1, page = 1, pageSize = 100, returnTempAdministerNameMedicationID = True, returnAdministerNameMedicationID = False, returnAdministrationTime = False, returnCreatedTime = False, returnDosesAdministered = False, returnErrorMessage = False, returnMedicationCode = False, returnModifiedTime = False, returnName = False, returnNewDosesAdministered = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[3,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/TempAdministerNameMedication/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params_list)

def getTempAdministerNameMedication(TempAdministerNameMedicationID, EntityID = 1, returnTempAdministerNameMedicationID = True, returnAdministerNameMedicationID = False, returnAdministrationTime = False, returnCreatedTime = False, returnDosesAdministered = False, returnErrorMessage = False, returnMedicationCode = False, returnModifiedTime = False, returnName = False, returnNewDosesAdministered = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[2,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/TempAdministerNameMedication/" + str(TempAdministerNameMedicationID), verb = "get", return_params_list = return_params_list)

def modifyTempAdministerNameMedication(TempAdministerNameMedicationID, EntityID = 1, setAdministerNameMedicationID = None, setAdministrationTime = None, setDosesAdministered = None, setErrorMessage = None, setMedicationCode = None, setName = None, setNewDosesAdministered = None, setRelationships = None, returnTempAdministerNameMedicationID = True, returnAdministerNameMedicationID = False, returnAdministrationTime = False, returnCreatedTime = False, returnDosesAdministered = False, returnErrorMessage = False, returnMedicationCode = False, returnModifiedTime = False, returnName = False, returnNewDosesAdministered = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(), :]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/TempAdministerNameMedication/" + str(TempAdministerNameMedicationID), verb = "post", return_params_list = return_params_list, payload = payload_params)

def createTempAdministerNameMedication(EntityID = 1, setAdministerNameMedicationID = None, setAdministrationTime = None, setDosesAdministered = None, setErrorMessage = None, setMedicationCode = None, setName = None, setNewDosesAdministered = None, setRelationships = None, returnTempAdministerNameMedicationID = True, returnAdministerNameMedicationID = False, returnAdministrationTime = False, returnCreatedTime = False, returnDosesAdministered = False, returnErrorMessage = False, returnMedicationCode = False, returnModifiedTime = False, returnName = False, returnNewDosesAdministered = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params.loc[lambda x: ((x.value & (x.index.to_series().str.contains("return"))) | (~(x.value.isnull()) & (x.index.to_series().str.contains("set")))) & (x.index.to_series() != "EntityID"),:].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(),:]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/TempAdministerNameMedication/", verb = "put", return_params_list = return_params_list, payload = payload_params)

def deleteTempAdministerNameMedication(TempAdministerNameMedicationID, EntityID = 1):

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Attendance/AttendancePeriod/" + str(AttendancePeriodID), verb = "delete")

def getEveryTempNameMedication(EntityID = 1, page = 1, pageSize = 100, returnTempNameMedicationID = True, returnCode = False, returnCreatedTime = False, returnMaxDosesPerDay = False, returnMedicationCode = False, returnMedicationDosageUnitID = False, returnMedicationRouteID = False, returnModifiedTime = False, returnName = False, returnNameMedicationID = False, returnNewCode = False, returnNewMaxDosesPerDay = False, returnNewMedicationDosageUnitID = False, returnNewMedicationRouteID = False, returnNewRouteName = False, returnNewUnitsPerDoseHigh = False, returnNewUnitsPerDoseLow = False, returnRouteName = False, returnUnitsPerDoseHigh = False, returnUnitsPerDoseLow = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[3,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/TempNameMedication/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params_list)

def getTempNameMedication(TempNameMedicationID, EntityID = 1, returnTempNameMedicationID = True, returnCode = False, returnCreatedTime = False, returnMaxDosesPerDay = False, returnMedicationCode = False, returnMedicationDosageUnitID = False, returnMedicationRouteID = False, returnModifiedTime = False, returnName = False, returnNameMedicationID = False, returnNewCode = False, returnNewMaxDosesPerDay = False, returnNewMedicationDosageUnitID = False, returnNewMedicationRouteID = False, returnNewRouteName = False, returnNewUnitsPerDoseHigh = False, returnNewUnitsPerDoseLow = False, returnRouteName = False, returnUnitsPerDoseHigh = False, returnUnitsPerDoseLow = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[2,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/TempNameMedication/" + str(TempNameMedicationID), verb = "get", return_params_list = return_params_list)

def modifyTempNameMedication(TempNameMedicationID, EntityID = 1, setCode = None, setMaxDosesPerDay = None, setMedicationCode = None, setMedicationDosageUnitID = None, setMedicationRouteID = None, setName = None, setNameMedicationID = None, setNewCode = None, setNewMaxDosesPerDay = None, setNewMedicationDosageUnitID = None, setNewMedicationRouteID = None, setNewRouteName = None, setNewUnitsPerDoseHigh = None, setNewUnitsPerDoseLow = None, setRouteName = None, setUnitsPerDoseHigh = None, setUnitsPerDoseLow = None, setRelationships = None, returnTempNameMedicationID = True, returnCode = False, returnCreatedTime = False, returnMaxDosesPerDay = False, returnMedicationCode = False, returnMedicationDosageUnitID = False, returnMedicationRouteID = False, returnModifiedTime = False, returnName = False, returnNameMedicationID = False, returnNewCode = False, returnNewMaxDosesPerDay = False, returnNewMedicationDosageUnitID = False, returnNewMedicationRouteID = False, returnNewRouteName = False, returnNewUnitsPerDoseHigh = False, returnNewUnitsPerDoseLow = False, returnRouteName = False, returnUnitsPerDoseHigh = False, returnUnitsPerDoseLow = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(), :]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/TempNameMedication/" + str(TempNameMedicationID), verb = "post", return_params_list = return_params_list, payload = payload_params)

def createTempNameMedication(EntityID = 1, setCode = None, setMaxDosesPerDay = None, setMedicationCode = None, setMedicationDosageUnitID = None, setMedicationRouteID = None, setName = None, setNameMedicationID = None, setNewCode = None, setNewMaxDosesPerDay = None, setNewMedicationDosageUnitID = None, setNewMedicationRouteID = None, setNewRouteName = None, setNewUnitsPerDoseHigh = None, setNewUnitsPerDoseLow = None, setRouteName = None, setUnitsPerDoseHigh = None, setUnitsPerDoseLow = None, setRelationships = None, returnTempNameMedicationID = True, returnCode = False, returnCreatedTime = False, returnMaxDosesPerDay = False, returnMedicationCode = False, returnMedicationDosageUnitID = False, returnMedicationRouteID = False, returnModifiedTime = False, returnName = False, returnNameMedicationID = False, returnNewCode = False, returnNewMaxDosesPerDay = False, returnNewMedicationDosageUnitID = False, returnNewMedicationRouteID = False, returnNewRouteName = False, returnNewUnitsPerDoseHigh = False, returnNewUnitsPerDoseLow = False, returnRouteName = False, returnUnitsPerDoseHigh = False, returnUnitsPerDoseLow = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params.loc[lambda x: ((x.value & (x.index.to_series().str.contains("return"))) | (~(x.value.isnull()) & (x.index.to_series().str.contains("set")))) & (x.index.to_series() != "EntityID"),:].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(),:]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/TempNameMedication/", verb = "put", return_params_list = return_params_list, payload = payload_params)

def deleteTempNameMedication(TempNameMedicationID, EntityID = 1):

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Attendance/AttendancePeriod/" + str(AttendancePeriodID), verb = "delete")

def getEveryTempStudentChildhoodIllness(EntityID = 1, page = 1, pageSize = 100, returnTempStudentChildhoodIllnessID = True, returnAgeDiagnosed = False, returnChildhoodIllnessCode = False, returnChildhoodIllnessDescription = False, returnCreatedTime = False, returnIsVoid = False, returnModifiedTime = False, returnNewChildhoodIllnessCode = False, returnNewChildhoodIllnessDescription = False, returnNewChildhoodIllnessID = False, returnSchoolYear = False, returnScreeningDate = False, returnStudentChildhoodIllnessID = False, returnStudentName = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[3,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/TempStudentChildhoodIllness/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params_list)

def getTempStudentChildhoodIllness(TempStudentChildhoodIllnessID, EntityID = 1, returnTempStudentChildhoodIllnessID = True, returnAgeDiagnosed = False, returnChildhoodIllnessCode = False, returnChildhoodIllnessDescription = False, returnCreatedTime = False, returnIsVoid = False, returnModifiedTime = False, returnNewChildhoodIllnessCode = False, returnNewChildhoodIllnessDescription = False, returnNewChildhoodIllnessID = False, returnSchoolYear = False, returnScreeningDate = False, returnStudentChildhoodIllnessID = False, returnStudentName = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[2,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/TempStudentChildhoodIllness/" + str(TempStudentChildhoodIllnessID), verb = "get", return_params_list = return_params_list)

def modifyTempStudentChildhoodIllness(TempStudentChildhoodIllnessID, EntityID = 1, setAgeDiagnosed = None, setChildhoodIllnessCode = None, setChildhoodIllnessDescription = None, setIsVoid = None, setNewChildhoodIllnessCode = None, setNewChildhoodIllnessDescription = None, setNewChildhoodIllnessID = None, setSchoolYear = None, setScreeningDate = None, setStudentChildhoodIllnessID = None, setStudentName = None, setRelationships = None, returnTempStudentChildhoodIllnessID = True, returnAgeDiagnosed = False, returnChildhoodIllnessCode = False, returnChildhoodIllnessDescription = False, returnCreatedTime = False, returnIsVoid = False, returnModifiedTime = False, returnNewChildhoodIllnessCode = False, returnNewChildhoodIllnessDescription = False, returnNewChildhoodIllnessID = False, returnSchoolYear = False, returnScreeningDate = False, returnStudentChildhoodIllnessID = False, returnStudentName = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(), :]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/TempStudentChildhoodIllness/" + str(TempStudentChildhoodIllnessID), verb = "post", return_params_list = return_params_list, payload = payload_params)

def createTempStudentChildhoodIllness(EntityID = 1, setAgeDiagnosed = None, setChildhoodIllnessCode = None, setChildhoodIllnessDescription = None, setIsVoid = None, setNewChildhoodIllnessCode = None, setNewChildhoodIllnessDescription = None, setNewChildhoodIllnessID = None, setSchoolYear = None, setScreeningDate = None, setStudentChildhoodIllnessID = None, setStudentName = None, setRelationships = None, returnTempStudentChildhoodIllnessID = True, returnAgeDiagnosed = False, returnChildhoodIllnessCode = False, returnChildhoodIllnessDescription = False, returnCreatedTime = False, returnIsVoid = False, returnModifiedTime = False, returnNewChildhoodIllnessCode = False, returnNewChildhoodIllnessDescription = False, returnNewChildhoodIllnessID = False, returnSchoolYear = False, returnScreeningDate = False, returnStudentChildhoodIllnessID = False, returnStudentName = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params.loc[lambda x: ((x.value & (x.index.to_series().str.contains("return"))) | (~(x.value.isnull()) & (x.index.to_series().str.contains("set")))) & (x.index.to_series() != "EntityID"),:].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(),:]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/TempStudentChildhoodIllness/", verb = "put", return_params_list = return_params_list, payload = payload_params)

def deleteTempStudentChildhoodIllness(TempStudentChildhoodIllnessID, EntityID = 1):

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Attendance/AttendancePeriod/" + str(AttendancePeriodID), verb = "delete")

def getEveryTempStudentVaccine(EntityID = 1, page = 1, pageSize = 100, returnTempStudentVaccineID = True, returnCreatedTime = False, returnCVXCode = False, returnDate = False, returnIsDuplicate = False, returnModifiedTime = False, returnNewCVXCode = False, returnNewVaccineCode = False, returnNewVaccineID = False, returnStudentName = False, returnStudentVaccineID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnVaccineCode = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[3,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/TempStudentVaccine/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params_list)

def getTempStudentVaccine(TempStudentVaccineID, EntityID = 1, returnTempStudentVaccineID = True, returnCreatedTime = False, returnCVXCode = False, returnDate = False, returnIsDuplicate = False, returnModifiedTime = False, returnNewCVXCode = False, returnNewVaccineCode = False, returnNewVaccineID = False, returnStudentName = False, returnStudentVaccineID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnVaccineCode = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[2,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/TempStudentVaccine/" + str(TempStudentVaccineID), verb = "get", return_params_list = return_params_list)

def modifyTempStudentVaccine(TempStudentVaccineID, EntityID = 1, setCVXCode = None, setDate = None, setIsDuplicate = None, setNewCVXCode = None, setNewVaccineCode = None, setNewVaccineID = None, setStudentName = None, setStudentVaccineID = None, setVaccineCode = None, setRelationships = None, returnTempStudentVaccineID = True, returnCreatedTime = False, returnCVXCode = False, returnDate = False, returnIsDuplicate = False, returnModifiedTime = False, returnNewCVXCode = False, returnNewVaccineCode = False, returnNewVaccineID = False, returnStudentName = False, returnStudentVaccineID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnVaccineCode = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(), :]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/TempStudentVaccine/" + str(TempStudentVaccineID), verb = "post", return_params_list = return_params_list, payload = payload_params)

def createTempStudentVaccine(EntityID = 1, setCVXCode = None, setDate = None, setIsDuplicate = None, setNewCVXCode = None, setNewVaccineCode = None, setNewVaccineID = None, setStudentName = None, setStudentVaccineID = None, setVaccineCode = None, setRelationships = None, returnTempStudentVaccineID = True, returnCreatedTime = False, returnCVXCode = False, returnDate = False, returnIsDuplicate = False, returnModifiedTime = False, returnNewCVXCode = False, returnNewVaccineCode = False, returnNewVaccineID = False, returnStudentName = False, returnStudentVaccineID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnVaccineCode = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params.loc[lambda x: ((x.value & (x.index.to_series().str.contains("return"))) | (~(x.value.isnull()) & (x.index.to_series().str.contains("set")))) & (x.index.to_series() != "EntityID"),:].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(),:]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/TempStudentVaccine/", verb = "put", return_params_list = return_params_list, payload = payload_params)

def deleteTempStudentVaccine(TempStudentVaccineID, EntityID = 1):

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Attendance/AttendancePeriod/" + str(AttendancePeriodID), verb = "delete")

def getEveryVaccination(EntityID = 1, page = 1, pageSize = 100, returnVaccinationID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDisplayOrder = False, returnIsDistrictDefined = False, returnModifiedTime = False, returnSkywardHash = False, returnSkywardID = False, returnUsedByDistrict = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[3,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/Vaccination/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params_list)

def getVaccination(VaccinationID, EntityID = 1, returnVaccinationID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDisplayOrder = False, returnIsDistrictDefined = False, returnModifiedTime = False, returnSkywardHash = False, returnSkywardID = False, returnUsedByDistrict = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[2,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/Vaccination/" + str(VaccinationID), verb = "get", return_params_list = return_params_list)

def modifyVaccination(VaccinationID, EntityID = 1, setCode = None, setDescription = None, setDisplayOrder = None, setSkywardHash = None, setSkywardID = None, setUsedByDistrict = None, setRelationships = None, returnVaccinationID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDisplayOrder = False, returnIsDistrictDefined = False, returnModifiedTime = False, returnSkywardHash = False, returnSkywardID = False, returnUsedByDistrict = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(), :]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/Vaccination/" + str(VaccinationID), verb = "post", return_params_list = return_params_list, payload = payload_params)

def createVaccination(EntityID = 1, setCode = None, setDescription = None, setDisplayOrder = None, setSkywardHash = None, setSkywardID = None, setUsedByDistrict = None, setRelationships = None, returnVaccinationID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDisplayOrder = False, returnIsDistrictDefined = False, returnModifiedTime = False, returnSkywardHash = False, returnSkywardID = False, returnUsedByDistrict = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params.loc[lambda x: ((x.value & (x.index.to_series().str.contains("return"))) | (~(x.value.isnull()) & (x.index.to_series().str.contains("set")))) & (x.index.to_series() != "EntityID"),:].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(),:]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/Vaccination/", verb = "put", return_params_list = return_params_list, payload = payload_params)

def deleteVaccination(VaccinationID, EntityID = 1):

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Attendance/AttendancePeriod/" + str(AttendancePeriodID), verb = "delete")

def getEveryVaccinationChildhoodIllness(EntityID = 1, page = 1, pageSize = 100, returnVaccinationChildhoodIllnessID = True, returnChildhoodIllnessID = False, returnCreatedTime = False, returnModifiedTime = False, returnSkywardHash = False, returnSkywardID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnVaccinationID = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[3,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/VaccinationChildhoodIllness/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params_list)

def getVaccinationChildhoodIllness(VaccinationChildhoodIllnessID, EntityID = 1, returnVaccinationChildhoodIllnessID = True, returnChildhoodIllnessID = False, returnCreatedTime = False, returnModifiedTime = False, returnSkywardHash = False, returnSkywardID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnVaccinationID = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[2,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/VaccinationChildhoodIllness/" + str(VaccinationChildhoodIllnessID), verb = "get", return_params_list = return_params_list)

def modifyVaccinationChildhoodIllness(VaccinationChildhoodIllnessID, EntityID = 1, setChildhoodIllnessID = None, setSkywardHash = None, setSkywardID = None, setVaccinationID = None, setRelationships = None, returnVaccinationChildhoodIllnessID = True, returnChildhoodIllnessID = False, returnCreatedTime = False, returnModifiedTime = False, returnSkywardHash = False, returnSkywardID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnVaccinationID = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(), :]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/VaccinationChildhoodIllness/" + str(VaccinationChildhoodIllnessID), verb = "post", return_params_list = return_params_list, payload = payload_params)

def createVaccinationChildhoodIllness(EntityID = 1, setChildhoodIllnessID = None, setSkywardHash = None, setSkywardID = None, setVaccinationID = None, setRelationships = None, returnVaccinationChildhoodIllnessID = True, returnChildhoodIllnessID = False, returnCreatedTime = False, returnModifiedTime = False, returnSkywardHash = False, returnSkywardID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnVaccinationID = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params.loc[lambda x: ((x.value & (x.index.to_series().str.contains("return"))) | (~(x.value.isnull()) & (x.index.to_series().str.contains("set")))) & (x.index.to_series() != "EntityID"),:].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(),:]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/VaccinationChildhoodIllness/", verb = "put", return_params_list = return_params_list, payload = payload_params)

def deleteVaccinationChildhoodIllness(VaccinationChildhoodIllnessID, EntityID = 1):

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Attendance/AttendancePeriod/" + str(AttendancePeriodID), verb = "delete")

def getEveryVaccinationWaiver(EntityID = 1, page = 1, pageSize = 100, returnVaccinationWaiverID = True, returnCreatedTime = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnVaccinationID = False, returnWaiverID = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[3,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/VaccinationWaiver/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params_list)

def getVaccinationWaiver(VaccinationWaiverID, EntityID = 1, returnVaccinationWaiverID = True, returnCreatedTime = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnVaccinationID = False, returnWaiverID = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[2,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/VaccinationWaiver/" + str(VaccinationWaiverID), verb = "get", return_params_list = return_params_list)

def modifyVaccinationWaiver(VaccinationWaiverID, EntityID = 1, setVaccinationID = None, setWaiverID = None, setRelationships = None, returnVaccinationWaiverID = True, returnCreatedTime = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnVaccinationID = False, returnWaiverID = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(), :]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/VaccinationWaiver/" + str(VaccinationWaiverID), verb = "post", return_params_list = return_params_list, payload = payload_params)

def createVaccinationWaiver(EntityID = 1, setVaccinationID = None, setWaiverID = None, setRelationships = None, returnVaccinationWaiverID = True, returnCreatedTime = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnVaccinationID = False, returnWaiverID = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params.loc[lambda x: ((x.value & (x.index.to_series().str.contains("return"))) | (~(x.value.isnull()) & (x.index.to_series().str.contains("set")))) & (x.index.to_series() != "EntityID"),:].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(),:]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/VaccinationWaiver/", verb = "put", return_params_list = return_params_list, payload = payload_params)

def deleteVaccinationWaiver(VaccinationWaiverID, EntityID = 1):

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Attendance/AttendancePeriod/" + str(AttendancePeriodID), verb = "delete")

def getEveryVaccinationYear(EntityID = 1, page = 1, pageSize = 100, returnVaccinationYearID = True, returnCreatedTime = False, returnIsDistrictDefined = False, returnIsLiveVaccination = False, returnLiveVaccinationDoseIntervalDays = False, returnLiveVaccinationGracePeriodDays = False, returnModifiedTime = False, returnProcessByType = False, returnProcessByTypeCode = False, returnRequiredAgeHigh = False, returnRequiredAgeHighDescription = False, returnRequiredAgeHighUnitType = False, returnRequiredAgeHighUnitTypeCode = False, returnRequiredAgeLow = False, returnRequiredAgeLowDescription = False, returnRequiredAgeLowUnitType = False, returnRequiredAgeLowUnitTypeCode = False, returnSchoolYearID = False, returnSkywardHash = False, returnSkywardID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnVaccinationID = False, returnVaccinationYearIDClonedFrom = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[3,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/VaccinationYear/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params_list)

def getVaccinationYear(VaccinationYearID, EntityID = 1, returnVaccinationYearID = True, returnCreatedTime = False, returnIsDistrictDefined = False, returnIsLiveVaccination = False, returnLiveVaccinationDoseIntervalDays = False, returnLiveVaccinationGracePeriodDays = False, returnModifiedTime = False, returnProcessByType = False, returnProcessByTypeCode = False, returnRequiredAgeHigh = False, returnRequiredAgeHighDescription = False, returnRequiredAgeHighUnitType = False, returnRequiredAgeHighUnitTypeCode = False, returnRequiredAgeLow = False, returnRequiredAgeLowDescription = False, returnRequiredAgeLowUnitType = False, returnRequiredAgeLowUnitTypeCode = False, returnSchoolYearID = False, returnSkywardHash = False, returnSkywardID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnVaccinationID = False, returnVaccinationYearIDClonedFrom = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[2,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/VaccinationYear/" + str(VaccinationYearID), verb = "get", return_params_list = return_params_list)

def modifyVaccinationYear(VaccinationYearID, EntityID = 1, setIsLiveVaccination = None, setLiveVaccinationDoseIntervalDays = None, setLiveVaccinationGracePeriodDays = None, setProcessByType = None, setProcessByTypeCode = None, setRequiredAgeHigh = None, setRequiredAgeHighUnitType = None, setRequiredAgeHighUnitTypeCode = None, setRequiredAgeLow = None, setRequiredAgeLowUnitType = None, setRequiredAgeLowUnitTypeCode = None, setSchoolYearID = None, setSkywardHash = None, setSkywardID = None, setVaccinationID = None, setVaccinationYearIDClonedFrom = None, setRelationships = None, returnVaccinationYearID = True, returnCreatedTime = False, returnIsDistrictDefined = False, returnIsLiveVaccination = False, returnLiveVaccinationDoseIntervalDays = False, returnLiveVaccinationGracePeriodDays = False, returnModifiedTime = False, returnProcessByType = False, returnProcessByTypeCode = False, returnRequiredAgeHigh = False, returnRequiredAgeHighDescription = False, returnRequiredAgeHighUnitType = False, returnRequiredAgeHighUnitTypeCode = False, returnRequiredAgeLow = False, returnRequiredAgeLowDescription = False, returnRequiredAgeLowUnitType = False, returnRequiredAgeLowUnitTypeCode = False, returnSchoolYearID = False, returnSkywardHash = False, returnSkywardID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnVaccinationID = False, returnVaccinationYearIDClonedFrom = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(), :]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/VaccinationYear/" + str(VaccinationYearID), verb = "post", return_params_list = return_params_list, payload = payload_params)

def createVaccinationYear(EntityID = 1, setIsLiveVaccination = None, setLiveVaccinationDoseIntervalDays = None, setLiveVaccinationGracePeriodDays = None, setProcessByType = None, setProcessByTypeCode = None, setRequiredAgeHigh = None, setRequiredAgeHighUnitType = None, setRequiredAgeHighUnitTypeCode = None, setRequiredAgeLow = None, setRequiredAgeLowUnitType = None, setRequiredAgeLowUnitTypeCode = None, setSchoolYearID = None, setSkywardHash = None, setSkywardID = None, setVaccinationID = None, setVaccinationYearIDClonedFrom = None, setRelationships = None, returnVaccinationYearID = True, returnCreatedTime = False, returnIsDistrictDefined = False, returnIsLiveVaccination = False, returnLiveVaccinationDoseIntervalDays = False, returnLiveVaccinationGracePeriodDays = False, returnModifiedTime = False, returnProcessByType = False, returnProcessByTypeCode = False, returnRequiredAgeHigh = False, returnRequiredAgeHighDescription = False, returnRequiredAgeHighUnitType = False, returnRequiredAgeHighUnitTypeCode = False, returnRequiredAgeLow = False, returnRequiredAgeLowDescription = False, returnRequiredAgeLowUnitType = False, returnRequiredAgeLowUnitTypeCode = False, returnSchoolYearID = False, returnSkywardHash = False, returnSkywardID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnVaccinationID = False, returnVaccinationYearIDClonedFrom = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params.loc[lambda x: ((x.value & (x.index.to_series().str.contains("return"))) | (~(x.value.isnull()) & (x.index.to_series().str.contains("set")))) & (x.index.to_series() != "EntityID"),:].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(),:]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/VaccinationYear/", verb = "put", return_params_list = return_params_list, payload = payload_params)

def deleteVaccinationYear(VaccinationYearID, EntityID = 1):

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Attendance/AttendancePeriod/" + str(AttendancePeriodID), verb = "delete")

def getEveryVaccinationYearComplianceSchedule(EntityID = 1, page = 1, pageSize = 100, returnVaccinationYearComplianceScheduleID = True, returnComplianceScheduleID = False, returnCreatedTime = False, returnIsDistrictDefined = False, returnModifiedTime = False, returnRank = False, returnSkywardHash = False, returnSkywardID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnVaccinationYearComplianceScheduleIDClonedFrom = False, returnVaccinationYearID = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[3,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/VaccinationYearComplianceSchedule/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params_list)

def getVaccinationYearComplianceSchedule(VaccinationYearComplianceScheduleID, EntityID = 1, returnVaccinationYearComplianceScheduleID = True, returnComplianceScheduleID = False, returnCreatedTime = False, returnIsDistrictDefined = False, returnModifiedTime = False, returnRank = False, returnSkywardHash = False, returnSkywardID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnVaccinationYearComplianceScheduleIDClonedFrom = False, returnVaccinationYearID = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[2,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/VaccinationYearComplianceSchedule/" + str(VaccinationYearComplianceScheduleID), verb = "get", return_params_list = return_params_list)

def modifyVaccinationYearComplianceSchedule(VaccinationYearComplianceScheduleID, EntityID = 1, setComplianceScheduleID = None, setRank = None, setSkywardHash = None, setSkywardID = None, setVaccinationYearComplianceScheduleIDClonedFrom = None, setVaccinationYearID = None, setRelationships = None, returnVaccinationYearComplianceScheduleID = True, returnComplianceScheduleID = False, returnCreatedTime = False, returnIsDistrictDefined = False, returnModifiedTime = False, returnRank = False, returnSkywardHash = False, returnSkywardID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnVaccinationYearComplianceScheduleIDClonedFrom = False, returnVaccinationYearID = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(), :]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/VaccinationYearComplianceSchedule/" + str(VaccinationYearComplianceScheduleID), verb = "post", return_params_list = return_params_list, payload = payload_params)

def createVaccinationYearComplianceSchedule(EntityID = 1, setComplianceScheduleID = None, setRank = None, setSkywardHash = None, setSkywardID = None, setVaccinationYearComplianceScheduleIDClonedFrom = None, setVaccinationYearID = None, setRelationships = None, returnVaccinationYearComplianceScheduleID = True, returnComplianceScheduleID = False, returnCreatedTime = False, returnIsDistrictDefined = False, returnModifiedTime = False, returnRank = False, returnSkywardHash = False, returnSkywardID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnVaccinationYearComplianceScheduleIDClonedFrom = False, returnVaccinationYearID = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params.loc[lambda x: ((x.value & (x.index.to_series().str.contains("return"))) | (~(x.value.isnull()) & (x.index.to_series().str.contains("set")))) & (x.index.to_series() != "EntityID"),:].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(),:]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/VaccinationYearComplianceSchedule/", verb = "put", return_params_list = return_params_list, payload = payload_params)

def deleteVaccinationYearComplianceSchedule(VaccinationYearComplianceScheduleID, EntityID = 1):

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Attendance/AttendancePeriod/" + str(AttendancePeriodID), verb = "delete")

def getEveryVaccinationYearComplianceScheduleRule(EntityID = 1, page = 1, pageSize = 100, returnVaccinationYearComplianceScheduleRuleID = True, returnComplianceScheduleRuleID = False, returnCreatedTime = False, returnDoseIntervalID = False, returnModifiedTime = False, returnRuleType = False, returnRuleTypeCode = False, returnSkywardHash = False, returnSkywardID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnVaccinationYearComplianceScheduleID = False, returnVaccinationYearComplianceScheduleRuleIDClonedFrom = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[3,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/VaccinationYearComplianceScheduleRule/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params_list)

def getVaccinationYearComplianceScheduleRule(VaccinationYearComplianceScheduleRuleID, EntityID = 1, returnVaccinationYearComplianceScheduleRuleID = True, returnComplianceScheduleRuleID = False, returnCreatedTime = False, returnDoseIntervalID = False, returnModifiedTime = False, returnRuleType = False, returnRuleTypeCode = False, returnSkywardHash = False, returnSkywardID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnVaccinationYearComplianceScheduleID = False, returnVaccinationYearComplianceScheduleRuleIDClonedFrom = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[2,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/VaccinationYearComplianceScheduleRule/" + str(VaccinationYearComplianceScheduleRuleID), verb = "get", return_params_list = return_params_list)

def modifyVaccinationYearComplianceScheduleRule(VaccinationYearComplianceScheduleRuleID, EntityID = 1, setComplianceScheduleRuleID = None, setDoseIntervalID = None, setRuleType = None, setRuleTypeCode = None, setSkywardHash = None, setSkywardID = None, setVaccinationYearComplianceScheduleID = None, setVaccinationYearComplianceScheduleRuleIDClonedFrom = None, setRelationships = None, returnVaccinationYearComplianceScheduleRuleID = True, returnComplianceScheduleRuleID = False, returnCreatedTime = False, returnDoseIntervalID = False, returnModifiedTime = False, returnRuleType = False, returnRuleTypeCode = False, returnSkywardHash = False, returnSkywardID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnVaccinationYearComplianceScheduleID = False, returnVaccinationYearComplianceScheduleRuleIDClonedFrom = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(), :]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/VaccinationYearComplianceScheduleRule/" + str(VaccinationYearComplianceScheduleRuleID), verb = "post", return_params_list = return_params_list, payload = payload_params)

def createVaccinationYearComplianceScheduleRule(EntityID = 1, setComplianceScheduleRuleID = None, setDoseIntervalID = None, setRuleType = None, setRuleTypeCode = None, setSkywardHash = None, setSkywardID = None, setVaccinationYearComplianceScheduleID = None, setVaccinationYearComplianceScheduleRuleIDClonedFrom = None, setRelationships = None, returnVaccinationYearComplianceScheduleRuleID = True, returnComplianceScheduleRuleID = False, returnCreatedTime = False, returnDoseIntervalID = False, returnModifiedTime = False, returnRuleType = False, returnRuleTypeCode = False, returnSkywardHash = False, returnSkywardID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnVaccinationYearComplianceScheduleID = False, returnVaccinationYearComplianceScheduleRuleIDClonedFrom = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params.loc[lambda x: ((x.value & (x.index.to_series().str.contains("return"))) | (~(x.value.isnull()) & (x.index.to_series().str.contains("set")))) & (x.index.to_series() != "EntityID"),:].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(),:]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/VaccinationYearComplianceScheduleRule/", verb = "put", return_params_list = return_params_list, payload = payload_params)

def deleteVaccinationYearComplianceScheduleRule(VaccinationYearComplianceScheduleRuleID, EntityID = 1):

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Attendance/AttendancePeriod/" + str(AttendancePeriodID), verb = "delete")

def getEveryVaccine(EntityID = 1, page = 1, pageSize = 100, returnVaccineID = True, returnCode = False, returnCPTCode = False, returnCPTDescription = False, returnCreatedTime = False, returnCVXCode = False, returnCVXFullName = False, returnCVXName = False, returnDescription = False, returnDisplayCode = False, returnDisplayDescription = False, returnDisplayOrder = False, returnIsLiveVaccine = False, returnModifiedTime = False, returnSkywardHash = False, returnSkywardID = False, returnUsedByDistrict = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[3,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/Vaccine/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params_list)

def getVaccine(VaccineID, EntityID = 1, returnVaccineID = True, returnCode = False, returnCPTCode = False, returnCPTDescription = False, returnCreatedTime = False, returnCVXCode = False, returnCVXFullName = False, returnCVXName = False, returnDescription = False, returnDisplayCode = False, returnDisplayDescription = False, returnDisplayOrder = False, returnIsLiveVaccine = False, returnModifiedTime = False, returnSkywardHash = False, returnSkywardID = False, returnUsedByDistrict = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[2,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/Vaccine/" + str(VaccineID), verb = "get", return_params_list = return_params_list)

def modifyVaccine(VaccineID, EntityID = 1, setCode = None, setCPTCode = None, setCPTDescription = None, setCVXCode = None, setCVXFullName = None, setCVXName = None, setDescription = None, setDisplayOrder = None, setIsLiveVaccine = None, setSkywardHash = None, setSkywardID = None, setUsedByDistrict = None, setRelationships = None, returnVaccineID = True, returnCode = False, returnCPTCode = False, returnCPTDescription = False, returnCreatedTime = False, returnCVXCode = False, returnCVXFullName = False, returnCVXName = False, returnDescription = False, returnDisplayCode = False, returnDisplayDescription = False, returnDisplayOrder = False, returnIsLiveVaccine = False, returnModifiedTime = False, returnSkywardHash = False, returnSkywardID = False, returnUsedByDistrict = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(), :]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/Vaccine/" + str(VaccineID), verb = "post", return_params_list = return_params_list, payload = payload_params)

def createVaccine(EntityID = 1, setCode = None, setCPTCode = None, setCPTDescription = None, setCVXCode = None, setCVXFullName = None, setCVXName = None, setDescription = None, setDisplayOrder = None, setIsLiveVaccine = None, setSkywardHash = None, setSkywardID = None, setUsedByDistrict = None, setRelationships = None, returnVaccineID = True, returnCode = False, returnCPTCode = False, returnCPTDescription = False, returnCreatedTime = False, returnCVXCode = False, returnCVXFullName = False, returnCVXName = False, returnDescription = False, returnDisplayCode = False, returnDisplayDescription = False, returnDisplayOrder = False, returnIsLiveVaccine = False, returnModifiedTime = False, returnSkywardHash = False, returnSkywardID = False, returnUsedByDistrict = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params.loc[lambda x: ((x.value & (x.index.to_series().str.contains("return"))) | (~(x.value.isnull()) & (x.index.to_series().str.contains("set")))) & (x.index.to_series() != "EntityID"),:].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(),:]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/Vaccine/", verb = "put", return_params_list = return_params_list, payload = payload_params)

def deleteVaccine(VaccineID, EntityID = 1):

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Attendance/AttendancePeriod/" + str(AttendancePeriodID), verb = "delete")

def getEveryVaccineContent(EntityID = 1, page = 1, pageSize = 100, returnVaccineContentID = True, returnCreatedTime = False, returnIsDistrictDefined = False, returnModifiedTime = False, returnSkywardHash = False, returnSkywardID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnVaccinationID = False, returnVaccineID = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[3,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/VaccineContent/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params_list)

def getVaccineContent(VaccineContentID, EntityID = 1, returnVaccineContentID = True, returnCreatedTime = False, returnIsDistrictDefined = False, returnModifiedTime = False, returnSkywardHash = False, returnSkywardID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnVaccinationID = False, returnVaccineID = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[2,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/VaccineContent/" + str(VaccineContentID), verb = "get", return_params_list = return_params_list)

def modifyVaccineContent(VaccineContentID, EntityID = 1, setSkywardHash = None, setSkywardID = None, setVaccinationID = None, setVaccineID = None, setRelationships = None, returnVaccineContentID = True, returnCreatedTime = False, returnIsDistrictDefined = False, returnModifiedTime = False, returnSkywardHash = False, returnSkywardID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnVaccinationID = False, returnVaccineID = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(), :]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/VaccineContent/" + str(VaccineContentID), verb = "post", return_params_list = return_params_list, payload = payload_params)

def createVaccineContent(EntityID = 1, setSkywardHash = None, setSkywardID = None, setVaccinationID = None, setVaccineID = None, setRelationships = None, returnVaccineContentID = True, returnCreatedTime = False, returnIsDistrictDefined = False, returnModifiedTime = False, returnSkywardHash = False, returnSkywardID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnVaccinationID = False, returnVaccineID = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params.loc[lambda x: ((x.value & (x.index.to_series().str.contains("return"))) | (~(x.value.isnull()) & (x.index.to_series().str.contains("set")))) & (x.index.to_series() != "EntityID"),:].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(),:]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/VaccineContent/", verb = "put", return_params_list = return_params_list, payload = payload_params)

def deleteVaccineContent(VaccineContentID, EntityID = 1):

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Attendance/AttendancePeriod/" + str(AttendancePeriodID), verb = "delete")

def getEveryVisionComment(EntityID = 1, page = 1, pageSize = 100, returnVisionCommentID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[3,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/VisionComment/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params_list)

def getVisionComment(VisionCommentID, EntityID = 1, returnVisionCommentID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[2,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/VisionComment/" + str(VisionCommentID), verb = "get", return_params_list = return_params_list)

def modifyVisionComment(VisionCommentID, EntityID = 1, setCode = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setRelationships = None, returnVisionCommentID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(), :]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/VisionComment/" + str(VisionCommentID), verb = "post", return_params_list = return_params_list, payload = payload_params)

def createVisionComment(EntityID = 1, setCode = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setRelationships = None, returnVisionCommentID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params.loc[lambda x: ((x.value & (x.index.to_series().str.contains("return"))) | (~(x.value.isnull()) & (x.index.to_series().str.contains("set")))) & (x.index.to_series() != "EntityID"),:].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(),:]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/VisionComment/", verb = "put", return_params_list = return_params_list, payload = payload_params)

def deleteVisionComment(VisionCommentID, EntityID = 1):

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Attendance/AttendancePeriod/" + str(AttendancePeriodID), verb = "delete")

def getEveryVisionCorrectiveLens(EntityID = 1, page = 1, pageSize = 100, returnVisionCorrectiveLensID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[3,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/VisionCorrectiveLens/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params_list)

def getVisionCorrectiveLens(VisionCorrectiveLensID, EntityID = 1, returnVisionCorrectiveLensID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[2,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/VisionCorrectiveLens/" + str(VisionCorrectiveLensID), verb = "get", return_params_list = return_params_list)

def modifyVisionCorrectiveLens(VisionCorrectiveLensID, EntityID = 1, setCode = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setRelationships = None, returnVisionCorrectiveLensID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(), :]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/VisionCorrectiveLens/" + str(VisionCorrectiveLensID), verb = "post", return_params_list = return_params_list, payload = payload_params)

def createVisionCorrectiveLens(EntityID = 1, setCode = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setRelationships = None, returnVisionCorrectiveLensID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params.loc[lambda x: ((x.value & (x.index.to_series().str.contains("return"))) | (~(x.value.isnull()) & (x.index.to_series().str.contains("set")))) & (x.index.to_series() != "EntityID"),:].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(),:]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/VisionCorrectiveLens/", verb = "put", return_params_list = return_params_list, payload = payload_params)

def deleteVisionCorrectiveLens(VisionCorrectiveLensID, EntityID = 1):

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Attendance/AttendancePeriod/" + str(AttendancePeriodID), verb = "delete")

def getEveryVisionGuardianNotification(EntityID = 1, page = 1, pageSize = 100, returnVisionGuardianNotificationID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[3,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/VisionGuardianNotification/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params_list)

def getVisionGuardianNotification(VisionGuardianNotificationID, EntityID = 1, returnVisionGuardianNotificationID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[2,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/VisionGuardianNotification/" + str(VisionGuardianNotificationID), verb = "get", return_params_list = return_params_list)

def modifyVisionGuardianNotification(VisionGuardianNotificationID, EntityID = 1, setCode = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setRelationships = None, returnVisionGuardianNotificationID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(), :]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/VisionGuardianNotification/" + str(VisionGuardianNotificationID), verb = "post", return_params_list = return_params_list, payload = payload_params)

def createVisionGuardianNotification(EntityID = 1, setCode = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setRelationships = None, returnVisionGuardianNotificationID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params.loc[lambda x: ((x.value & (x.index.to_series().str.contains("return"))) | (~(x.value.isnull()) & (x.index.to_series().str.contains("set")))) & (x.index.to_series() != "EntityID"),:].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(),:]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/VisionGuardianNotification/", verb = "put", return_params_list = return_params_list, payload = payload_params)

def deleteVisionGuardianNotification(VisionGuardianNotificationID, EntityID = 1):

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Attendance/AttendancePeriod/" + str(AttendancePeriodID), verb = "delete")

def getEveryVisionGuardianResponse(EntityID = 1, page = 1, pageSize = 100, returnVisionGuardianResponseID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[3,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/VisionGuardianResponse/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params_list)

def getVisionGuardianResponse(VisionGuardianResponseID, EntityID = 1, returnVisionGuardianResponseID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[2,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/VisionGuardianResponse/" + str(VisionGuardianResponseID), verb = "get", return_params_list = return_params_list)

def modifyVisionGuardianResponse(VisionGuardianResponseID, EntityID = 1, setCode = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setRelationships = None, returnVisionGuardianResponseID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(), :]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/VisionGuardianResponse/" + str(VisionGuardianResponseID), verb = "post", return_params_list = return_params_list, payload = payload_params)

def createVisionGuardianResponse(EntityID = 1, setCode = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setRelationships = None, returnVisionGuardianResponseID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params.loc[lambda x: ((x.value & (x.index.to_series().str.contains("return"))) | (~(x.value.isnull()) & (x.index.to_series().str.contains("set")))) & (x.index.to_series() != "EntityID"),:].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(),:]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/VisionGuardianResponse/", verb = "put", return_params_list = return_params_list, payload = payload_params)

def deleteVisionGuardianResponse(VisionGuardianResponseID, EntityID = 1):

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Attendance/AttendancePeriod/" + str(AttendancePeriodID), verb = "delete")

def getEveryVisionObservation(EntityID = 1, page = 1, pageSize = 100, returnVisionObservationID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[3,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/VisionObservation/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params_list)

def getVisionObservation(VisionObservationID, EntityID = 1, returnVisionObservationID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[2,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/VisionObservation/" + str(VisionObservationID), verb = "get", return_params_list = return_params_list)

def modifyVisionObservation(VisionObservationID, EntityID = 1, setCode = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setRelationships = None, returnVisionObservationID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(), :]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/VisionObservation/" + str(VisionObservationID), verb = "post", return_params_list = return_params_list, payload = payload_params)

def createVisionObservation(EntityID = 1, setCode = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setRelationships = None, returnVisionObservationID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params.loc[lambda x: ((x.value & (x.index.to_series().str.contains("return"))) | (~(x.value.isnull()) & (x.index.to_series().str.contains("set")))) & (x.index.to_series() != "EntityID"),:].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(),:]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/VisionObservation/", verb = "put", return_params_list = return_params_list, payload = payload_params)

def deleteVisionObservation(VisionObservationID, EntityID = 1):

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Attendance/AttendancePeriod/" + str(AttendancePeriodID), verb = "delete")

def getEveryVisionReferralReason(EntityID = 1, page = 1, pageSize = 100, returnVisionReferralReasonID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[3,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/VisionReferralReason/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params_list)

def getVisionReferralReason(VisionReferralReasonID, EntityID = 1, returnVisionReferralReasonID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[2,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/VisionReferralReason/" + str(VisionReferralReasonID), verb = "get", return_params_list = return_params_list)

def modifyVisionReferralReason(VisionReferralReasonID, EntityID = 1, setCode = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setRelationships = None, returnVisionReferralReasonID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(), :]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/VisionReferralReason/" + str(VisionReferralReasonID), verb = "post", return_params_list = return_params_list, payload = payload_params)

def createVisionReferralReason(EntityID = 1, setCode = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setRelationships = None, returnVisionReferralReasonID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params.loc[lambda x: ((x.value & (x.index.to_series().str.contains("return"))) | (~(x.value.isnull()) & (x.index.to_series().str.contains("set")))) & (x.index.to_series() != "EntityID"),:].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(),:]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/VisionReferralReason/", verb = "put", return_params_list = return_params_list, payload = payload_params)

def deleteVisionReferralReason(VisionReferralReasonID, EntityID = 1):

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Attendance/AttendancePeriod/" + str(AttendancePeriodID), verb = "delete")

def getEveryVisionReferralResult(EntityID = 1, page = 1, pageSize = 100, returnVisionReferralResultID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[3,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/VisionReferralResult/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params_list)

def getVisionReferralResult(VisionReferralResultID, EntityID = 1, returnVisionReferralResultID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[2,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/VisionReferralResult/" + str(VisionReferralResultID), verb = "get", return_params_list = return_params_list)

def modifyVisionReferralResult(VisionReferralResultID, EntityID = 1, setCode = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setRelationships = None, returnVisionReferralResultID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(), :]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/VisionReferralResult/" + str(VisionReferralResultID), verb = "post", return_params_list = return_params_list, payload = payload_params)

def createVisionReferralResult(EntityID = 1, setCode = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsActive = None, setRelationships = None, returnVisionReferralResultID = True, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsActive = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params.loc[lambda x: ((x.value & (x.index.to_series().str.contains("return"))) | (~(x.value.isnull()) & (x.index.to_series().str.contains("set")))) & (x.index.to_series() != "EntityID"),:].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(),:]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/VisionReferralResult/", verb = "put", return_params_list = return_params_list, payload = payload_params)

def deleteVisionReferralResult(VisionReferralResultID, EntityID = 1):

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Attendance/AttendancePeriod/" + str(AttendancePeriodID), verb = "delete")

def getEveryVisionScreening(EntityID = 1, page = 1, pageSize = 100, returnVisionScreeningID = True, returnColorBlindnessTestResult = False, returnColorBlindnessTestResultCode = False, returnCreatedTime = False, returnDistrictID = False, returnFarVisionCorrectedLeftEye = False, returnFarVisionCorrectedRightEye = False, returnFarVisionScreeningDistance = False, returnFarVisionScreeningResult = False, returnFarVisionScreeningResultCode = False, returnFarVisionUncorrectedLeftEye = False, returnFarVisionUncorrectedRightEye = False, returnFittingDate = False, returnHealthProfessionalIDExaminedBy = False, returnIsVoid = False, returnModifiedTime = False, returnMuscleBalanceTestResult = False, returnMuscleBalanceTestResultCode = False, returnNameID = False, returnNameOfficeVisitID = False, returnNearVisionCorrectedLeftEye = False, returnNearVisionCorrectedRightEye = False, returnNearVisionScreeningDistance = False, returnNearVisionScreeningResult = False, returnNearVisionScreeningResultCode = False, returnNearVisionUncorrectedLeftEye = False, returnNearVisionUncorrectedRightEye = False, returnOverallScreeningResult = False, returnOverallScreeningResultCode = False, returnReScreen = False, returnSchoolYearID = False, returnScreeningDate = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnUserIDVoidedBy = False, returnVisionCorrectedPriorToExam = False, returnVisionCorrectiveLensID = False, returnVoidedTime = False, returnVoidNote = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[3,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/VisionScreening/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params_list)

def getVisionScreening(VisionScreeningID, EntityID = 1, returnVisionScreeningID = True, returnColorBlindnessTestResult = False, returnColorBlindnessTestResultCode = False, returnCreatedTime = False, returnDistrictID = False, returnFarVisionCorrectedLeftEye = False, returnFarVisionCorrectedRightEye = False, returnFarVisionScreeningDistance = False, returnFarVisionScreeningResult = False, returnFarVisionScreeningResultCode = False, returnFarVisionUncorrectedLeftEye = False, returnFarVisionUncorrectedRightEye = False, returnFittingDate = False, returnHealthProfessionalIDExaminedBy = False, returnIsVoid = False, returnModifiedTime = False, returnMuscleBalanceTestResult = False, returnMuscleBalanceTestResultCode = False, returnNameID = False, returnNameOfficeVisitID = False, returnNearVisionCorrectedLeftEye = False, returnNearVisionCorrectedRightEye = False, returnNearVisionScreeningDistance = False, returnNearVisionScreeningResult = False, returnNearVisionScreeningResultCode = False, returnNearVisionUncorrectedLeftEye = False, returnNearVisionUncorrectedRightEye = False, returnOverallScreeningResult = False, returnOverallScreeningResultCode = False, returnReScreen = False, returnSchoolYearID = False, returnScreeningDate = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnUserIDVoidedBy = False, returnVisionCorrectedPriorToExam = False, returnVisionCorrectiveLensID = False, returnVoidedTime = False, returnVoidNote = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[2,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/VisionScreening/" + str(VisionScreeningID), verb = "get", return_params_list = return_params_list)

def modifyVisionScreening(VisionScreeningID, EntityID = 1, setColorBlindnessTestResult = None, setColorBlindnessTestResultCode = None, setDistrictID = None, setFarVisionCorrectedLeftEye = None, setFarVisionCorrectedRightEye = None, setFarVisionScreeningDistance = None, setFarVisionScreeningResult = None, setFarVisionScreeningResultCode = None, setFarVisionUncorrectedLeftEye = None, setFarVisionUncorrectedRightEye = None, setFittingDate = None, setHealthProfessionalIDExaminedBy = None, setIsVoid = None, setMuscleBalanceTestResult = None, setMuscleBalanceTestResultCode = None, setNameID = None, setNameOfficeVisitID = None, setNearVisionCorrectedLeftEye = None, setNearVisionCorrectedRightEye = None, setNearVisionScreeningDistance = None, setNearVisionScreeningResult = None, setNearVisionScreeningResultCode = None, setNearVisionUncorrectedLeftEye = None, setNearVisionUncorrectedRightEye = None, setOverallScreeningResult = None, setOverallScreeningResultCode = None, setReScreen = None, setSchoolYearID = None, setScreeningDate = None, setUserIDVoidedBy = None, setVisionCorrectedPriorToExam = None, setVisionCorrectiveLensID = None, setVoidedTime = None, setVoidNote = None, setRelationships = None, returnVisionScreeningID = True, returnColorBlindnessTestResult = False, returnColorBlindnessTestResultCode = False, returnCreatedTime = False, returnDistrictID = False, returnFarVisionCorrectedLeftEye = False, returnFarVisionCorrectedRightEye = False, returnFarVisionScreeningDistance = False, returnFarVisionScreeningResult = False, returnFarVisionScreeningResultCode = False, returnFarVisionUncorrectedLeftEye = False, returnFarVisionUncorrectedRightEye = False, returnFittingDate = False, returnHealthProfessionalIDExaminedBy = False, returnIsVoid = False, returnModifiedTime = False, returnMuscleBalanceTestResult = False, returnMuscleBalanceTestResultCode = False, returnNameID = False, returnNameOfficeVisitID = False, returnNearVisionCorrectedLeftEye = False, returnNearVisionCorrectedRightEye = False, returnNearVisionScreeningDistance = False, returnNearVisionScreeningResult = False, returnNearVisionScreeningResultCode = False, returnNearVisionUncorrectedLeftEye = False, returnNearVisionUncorrectedRightEye = False, returnOverallScreeningResult = False, returnOverallScreeningResultCode = False, returnReScreen = False, returnSchoolYearID = False, returnScreeningDate = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnUserIDVoidedBy = False, returnVisionCorrectedPriorToExam = False, returnVisionCorrectiveLensID = False, returnVoidedTime = False, returnVoidNote = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(), :]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/VisionScreening/" + str(VisionScreeningID), verb = "post", return_params_list = return_params_list, payload = payload_params)

def createVisionScreening(EntityID = 1, setColorBlindnessTestResult = None, setColorBlindnessTestResultCode = None, setDistrictID = None, setFarVisionCorrectedLeftEye = None, setFarVisionCorrectedRightEye = None, setFarVisionScreeningDistance = None, setFarVisionScreeningResult = None, setFarVisionScreeningResultCode = None, setFarVisionUncorrectedLeftEye = None, setFarVisionUncorrectedRightEye = None, setFittingDate = None, setHealthProfessionalIDExaminedBy = None, setIsVoid = None, setMuscleBalanceTestResult = None, setMuscleBalanceTestResultCode = None, setNameID = None, setNameOfficeVisitID = None, setNearVisionCorrectedLeftEye = None, setNearVisionCorrectedRightEye = None, setNearVisionScreeningDistance = None, setNearVisionScreeningResult = None, setNearVisionScreeningResultCode = None, setNearVisionUncorrectedLeftEye = None, setNearVisionUncorrectedRightEye = None, setOverallScreeningResult = None, setOverallScreeningResultCode = None, setReScreen = None, setSchoolYearID = None, setScreeningDate = None, setUserIDVoidedBy = None, setVisionCorrectedPriorToExam = None, setVisionCorrectiveLensID = None, setVoidedTime = None, setVoidNote = None, setRelationships = None, returnVisionScreeningID = True, returnColorBlindnessTestResult = False, returnColorBlindnessTestResultCode = False, returnCreatedTime = False, returnDistrictID = False, returnFarVisionCorrectedLeftEye = False, returnFarVisionCorrectedRightEye = False, returnFarVisionScreeningDistance = False, returnFarVisionScreeningResult = False, returnFarVisionScreeningResultCode = False, returnFarVisionUncorrectedLeftEye = False, returnFarVisionUncorrectedRightEye = False, returnFittingDate = False, returnHealthProfessionalIDExaminedBy = False, returnIsVoid = False, returnModifiedTime = False, returnMuscleBalanceTestResult = False, returnMuscleBalanceTestResultCode = False, returnNameID = False, returnNameOfficeVisitID = False, returnNearVisionCorrectedLeftEye = False, returnNearVisionCorrectedRightEye = False, returnNearVisionScreeningDistance = False, returnNearVisionScreeningResult = False, returnNearVisionScreeningResultCode = False, returnNearVisionUncorrectedLeftEye = False, returnNearVisionUncorrectedRightEye = False, returnOverallScreeningResult = False, returnOverallScreeningResultCode = False, returnReScreen = False, returnSchoolYearID = False, returnScreeningDate = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnUserIDVoidedBy = False, returnVisionCorrectedPriorToExam = False, returnVisionCorrectiveLensID = False, returnVoidedTime = False, returnVoidNote = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params.loc[lambda x: ((x.value & (x.index.to_series().str.contains("return"))) | (~(x.value.isnull()) & (x.index.to_series().str.contains("set")))) & (x.index.to_series() != "EntityID"),:].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(),:]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/VisionScreening/", verb = "put", return_params_list = return_params_list, payload = payload_params)

def deleteVisionScreening(VisionScreeningID, EntityID = 1):

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Attendance/AttendancePeriod/" + str(AttendancePeriodID), verb = "delete")

def getEveryVisionScreeningComment(EntityID = 1, page = 1, pageSize = 100, returnVisionScreeningCommentID = True, returnCreatedTime = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnVisionCommentID = False, returnVisionScreeningID = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[3,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/VisionScreeningComment/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params_list)

def getVisionScreeningComment(VisionScreeningCommentID, EntityID = 1, returnVisionScreeningCommentID = True, returnCreatedTime = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnVisionCommentID = False, returnVisionScreeningID = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[2,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/VisionScreeningComment/" + str(VisionScreeningCommentID), verb = "get", return_params_list = return_params_list)

def modifyVisionScreeningComment(VisionScreeningCommentID, EntityID = 1, setVisionCommentID = None, setVisionScreeningID = None, setRelationships = None, returnVisionScreeningCommentID = True, returnCreatedTime = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnVisionCommentID = False, returnVisionScreeningID = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(), :]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/VisionScreeningComment/" + str(VisionScreeningCommentID), verb = "post", return_params_list = return_params_list, payload = payload_params)

def createVisionScreeningComment(EntityID = 1, setVisionCommentID = None, setVisionScreeningID = None, setRelationships = None, returnVisionScreeningCommentID = True, returnCreatedTime = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnVisionCommentID = False, returnVisionScreeningID = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params.loc[lambda x: ((x.value & (x.index.to_series().str.contains("return"))) | (~(x.value.isnull()) & (x.index.to_series().str.contains("set")))) & (x.index.to_series() != "EntityID"),:].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(),:]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/VisionScreeningComment/", verb = "put", return_params_list = return_params_list, payload = payload_params)

def deleteVisionScreeningComment(VisionScreeningCommentID, EntityID = 1):

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Attendance/AttendancePeriod/" + str(AttendancePeriodID), verb = "delete")

def getEveryVisionScreeningNote(EntityID = 1, page = 1, pageSize = 100, returnVisionScreeningNoteID = True, returnCreatedTime = False, returnModifiedTime = False, returnNote = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnVisionScreeningID = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[3,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/VisionScreeningNote/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params_list)

def getVisionScreeningNote(VisionScreeningNoteID, EntityID = 1, returnVisionScreeningNoteID = True, returnCreatedTime = False, returnModifiedTime = False, returnNote = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnVisionScreeningID = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[2,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/VisionScreeningNote/" + str(VisionScreeningNoteID), verb = "get", return_params_list = return_params_list)

def modifyVisionScreeningNote(VisionScreeningNoteID, EntityID = 1, setNote = None, setVisionScreeningID = None, setRelationships = None, returnVisionScreeningNoteID = True, returnCreatedTime = False, returnModifiedTime = False, returnNote = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnVisionScreeningID = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(), :]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/VisionScreeningNote/" + str(VisionScreeningNoteID), verb = "post", return_params_list = return_params_list, payload = payload_params)

def createVisionScreeningNote(EntityID = 1, setNote = None, setVisionScreeningID = None, setRelationships = None, returnVisionScreeningNoteID = True, returnCreatedTime = False, returnModifiedTime = False, returnNote = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnVisionScreeningID = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params.loc[lambda x: ((x.value & (x.index.to_series().str.contains("return"))) | (~(x.value.isnull()) & (x.index.to_series().str.contains("set")))) & (x.index.to_series() != "EntityID"),:].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(),:]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/VisionScreeningNote/", verb = "put", return_params_list = return_params_list, payload = payload_params)

def deleteVisionScreeningNote(VisionScreeningNoteID, EntityID = 1):

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Attendance/AttendancePeriod/" + str(AttendancePeriodID), verb = "delete")

def getEveryVisionScreeningObservation(EntityID = 1, page = 1, pageSize = 100, returnVisionScreeningObservationID = True, returnCreatedTime = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnVisionObservationID = False, returnVisionScreeningID = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[3,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/VisionScreeningObservation/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params_list)

def getVisionScreeningObservation(VisionScreeningObservationID, EntityID = 1, returnVisionScreeningObservationID = True, returnCreatedTime = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnVisionObservationID = False, returnVisionScreeningID = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[2,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/VisionScreeningObservation/" + str(VisionScreeningObservationID), verb = "get", return_params_list = return_params_list)

def modifyVisionScreeningObservation(VisionScreeningObservationID, EntityID = 1, setVisionObservationID = None, setVisionScreeningID = None, setRelationships = None, returnVisionScreeningObservationID = True, returnCreatedTime = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnVisionObservationID = False, returnVisionScreeningID = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(), :]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/VisionScreeningObservation/" + str(VisionScreeningObservationID), verb = "post", return_params_list = return_params_list, payload = payload_params)

def createVisionScreeningObservation(EntityID = 1, setVisionObservationID = None, setVisionScreeningID = None, setRelationships = None, returnVisionScreeningObservationID = True, returnCreatedTime = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnVisionObservationID = False, returnVisionScreeningID = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params.loc[lambda x: ((x.value & (x.index.to_series().str.contains("return"))) | (~(x.value.isnull()) & (x.index.to_series().str.contains("set")))) & (x.index.to_series() != "EntityID"),:].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(),:]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/VisionScreeningObservation/", verb = "put", return_params_list = return_params_list, payload = payload_params)

def deleteVisionScreeningObservation(VisionScreeningObservationID, EntityID = 1):

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Attendance/AttendancePeriod/" + str(AttendancePeriodID), verb = "delete")

def getEveryVisionScreeningReferral(EntityID = 1, page = 1, pageSize = 100, returnVisionScreeningReferralID = True, returnCompletionDate = False, returnCreatedTime = False, returnHealthProfessionalIDReferredBy = False, returnHealthProfessionalIDReferredTo = False, returnModifiedTime = False, returnReferralCompleted = False, returnReferralDate = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnVisionGuardianNotificationID = False, returnVisionGuardianResponseID = False, returnVisionReferralReasonID = False, returnVisionReferralResultID = False, returnVisionScreeningID = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[3,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/VisionScreeningReferral/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params_list)

def getVisionScreeningReferral(VisionScreeningReferralID, EntityID = 1, returnVisionScreeningReferralID = True, returnCompletionDate = False, returnCreatedTime = False, returnHealthProfessionalIDReferredBy = False, returnHealthProfessionalIDReferredTo = False, returnModifiedTime = False, returnReferralCompleted = False, returnReferralDate = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnVisionGuardianNotificationID = False, returnVisionGuardianResponseID = False, returnVisionReferralReasonID = False, returnVisionReferralResultID = False, returnVisionScreeningID = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[2,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/VisionScreeningReferral/" + str(VisionScreeningReferralID), verb = "get", return_params_list = return_params_list)

def modifyVisionScreeningReferral(VisionScreeningReferralID, EntityID = 1, setCompletionDate = None, setHealthProfessionalIDReferredBy = None, setHealthProfessionalIDReferredTo = None, setReferralCompleted = None, setReferralDate = None, setVisionGuardianNotificationID = None, setVisionGuardianResponseID = None, setVisionReferralReasonID = None, setVisionReferralResultID = None, setVisionScreeningID = None, setRelationships = None, returnVisionScreeningReferralID = True, returnCompletionDate = False, returnCreatedTime = False, returnHealthProfessionalIDReferredBy = False, returnHealthProfessionalIDReferredTo = False, returnModifiedTime = False, returnReferralCompleted = False, returnReferralDate = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnVisionGuardianNotificationID = False, returnVisionGuardianResponseID = False, returnVisionReferralReasonID = False, returnVisionReferralResultID = False, returnVisionScreeningID = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(), :]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/VisionScreeningReferral/" + str(VisionScreeningReferralID), verb = "post", return_params_list = return_params_list, payload = payload_params)

def createVisionScreeningReferral(EntityID = 1, setCompletionDate = None, setHealthProfessionalIDReferredBy = None, setHealthProfessionalIDReferredTo = None, setReferralCompleted = None, setReferralDate = None, setVisionGuardianNotificationID = None, setVisionGuardianResponseID = None, setVisionReferralReasonID = None, setVisionReferralResultID = None, setVisionScreeningID = None, setRelationships = None, returnVisionScreeningReferralID = True, returnCompletionDate = False, returnCreatedTime = False, returnHealthProfessionalIDReferredBy = False, returnHealthProfessionalIDReferredTo = False, returnModifiedTime = False, returnReferralCompleted = False, returnReferralDate = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnVisionGuardianNotificationID = False, returnVisionGuardianResponseID = False, returnVisionReferralReasonID = False, returnVisionReferralResultID = False, returnVisionScreeningID = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params.loc[lambda x: ((x.value & (x.index.to_series().str.contains("return"))) | (~(x.value.isnull()) & (x.index.to_series().str.contains("set")))) & (x.index.to_series() != "EntityID"),:].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(),:]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/VisionScreeningReferral/", verb = "put", return_params_list = return_params_list, payload = payload_params)

def deleteVisionScreeningReferral(VisionScreeningReferralID, EntityID = 1):

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Attendance/AttendancePeriod/" + str(AttendancePeriodID), verb = "delete")

def getEveryVisionScreeningSecuredNote(EntityID = 1, page = 1, pageSize = 100, returnVisionScreeningSecuredNoteID = True, returnCreatedTime = False, returnModifiedTime = False, returnNote = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnVisionScreeningID = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[3,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/VisionScreeningSecuredNote/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params_list)

def getVisionScreeningSecuredNote(VisionScreeningSecuredNoteID, EntityID = 1, returnVisionScreeningSecuredNoteID = True, returnCreatedTime = False, returnModifiedTime = False, returnNote = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnVisionScreeningID = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[2,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/VisionScreeningSecuredNote/" + str(VisionScreeningSecuredNoteID), verb = "get", return_params_list = return_params_list)

def modifyVisionScreeningSecuredNote(VisionScreeningSecuredNoteID, EntityID = 1, setNote = None, setVisionScreeningID = None, setRelationships = None, returnVisionScreeningSecuredNoteID = True, returnCreatedTime = False, returnModifiedTime = False, returnNote = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnVisionScreeningID = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(), :]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/VisionScreeningSecuredNote/" + str(VisionScreeningSecuredNoteID), verb = "post", return_params_list = return_params_list, payload = payload_params)

def createVisionScreeningSecuredNote(EntityID = 1, setNote = None, setVisionScreeningID = None, setRelationships = None, returnVisionScreeningSecuredNoteID = True, returnCreatedTime = False, returnModifiedTime = False, returnNote = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnVisionScreeningID = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params.loc[lambda x: ((x.value & (x.index.to_series().str.contains("return"))) | (~(x.value.isnull()) & (x.index.to_series().str.contains("set")))) & (x.index.to_series() != "EntityID"),:].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(),:]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/VisionScreeningSecuredNote/", verb = "put", return_params_list = return_params_list, payload = payload_params)

def deleteVisionScreeningSecuredNote(VisionScreeningSecuredNoteID, EntityID = 1):

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Attendance/AttendancePeriod/" + str(AttendancePeriodID), verb = "delete")

def getEveryVitalSign(EntityID = 1, page = 1, pageSize = 100, returnVitalSignID = True, returnBloodPressureDiastolic = False, returnBloodPressureSystolic = False, returnCreatedTime = False, returnModifiedTime = False, returnNameOfficeVisitID = False, returnPhysicalScreeningID = False, returnPulseRate = False, returnRespiration = False, returnSaturationOfPeripheralOxygen = False, returnTemperature = False, returnTimeTaken = False, returnTimeTakenDate = False, returnTimeTakenTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[3,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/VitalSign/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params_list)

def getVitalSign(VitalSignID, EntityID = 1, returnVitalSignID = True, returnBloodPressureDiastolic = False, returnBloodPressureSystolic = False, returnCreatedTime = False, returnModifiedTime = False, returnNameOfficeVisitID = False, returnPhysicalScreeningID = False, returnPulseRate = False, returnRespiration = False, returnSaturationOfPeripheralOxygen = False, returnTemperature = False, returnTimeTaken = False, returnTimeTakenDate = False, returnTimeTakenTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[2,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/VitalSign/" + str(VitalSignID), verb = "get", return_params_list = return_params_list)

def modifyVitalSign(VitalSignID, EntityID = 1, setBloodPressureDiastolic = None, setBloodPressureSystolic = None, setNameOfficeVisitID = None, setPhysicalScreeningID = None, setPulseRate = None, setRespiration = None, setSaturationOfPeripheralOxygen = None, setTemperature = None, setTimeTaken = None, setTimeTakenDate = None, setTimeTakenTime = None, setRelationships = None, returnVitalSignID = True, returnBloodPressureDiastolic = False, returnBloodPressureSystolic = False, returnCreatedTime = False, returnModifiedTime = False, returnNameOfficeVisitID = False, returnPhysicalScreeningID = False, returnPulseRate = False, returnRespiration = False, returnSaturationOfPeripheralOxygen = False, returnTemperature = False, returnTimeTaken = False, returnTimeTakenDate = False, returnTimeTakenTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(), :]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/VitalSign/" + str(VitalSignID), verb = "post", return_params_list = return_params_list, payload = payload_params)

def createVitalSign(EntityID = 1, setBloodPressureDiastolic = None, setBloodPressureSystolic = None, setNameOfficeVisitID = None, setPhysicalScreeningID = None, setPulseRate = None, setRespiration = None, setSaturationOfPeripheralOxygen = None, setTemperature = None, setTimeTaken = None, setTimeTakenDate = None, setTimeTakenTime = None, setRelationships = None, returnVitalSignID = True, returnBloodPressureDiastolic = False, returnBloodPressureSystolic = False, returnCreatedTime = False, returnModifiedTime = False, returnNameOfficeVisitID = False, returnPhysicalScreeningID = False, returnPulseRate = False, returnRespiration = False, returnSaturationOfPeripheralOxygen = False, returnTemperature = False, returnTimeTaken = False, returnTimeTakenDate = False, returnTimeTakenTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params.loc[lambda x: ((x.value & (x.index.to_series().str.contains("return"))) | (~(x.value.isnull()) & (x.index.to_series().str.contains("set")))) & (x.index.to_series() != "EntityID"),:].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(),:]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/VitalSign/", verb = "put", return_params_list = return_params_list, payload = payload_params)

def deleteVitalSign(VitalSignID, EntityID = 1):

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Attendance/AttendancePeriod/" + str(AttendancePeriodID), verb = "delete")

def getEveryWaiver(EntityID = 1, page = 1, pageSize = 100, returnWaiverID = True, returnCode = False, returnCreatedTime = False, returnDescription = False, returnExpirationType = False, returnExpirationTypeCode = False, returnExpireUnit = False, returnExpireUnitCode = False, returnExpireValue = False, returnIsActive = False, returnModifiedTime = False, returnRestrictVaccinations = False, returnUseInStateReporting = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnWaiverType = False, returnWaiverTypeCode = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[3,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/Waiver/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params_list)

def getWaiver(WaiverID, EntityID = 1, returnWaiverID = True, returnCode = False, returnCreatedTime = False, returnDescription = False, returnExpirationType = False, returnExpirationTypeCode = False, returnExpireUnit = False, returnExpireUnitCode = False, returnExpireValue = False, returnIsActive = False, returnModifiedTime = False, returnRestrictVaccinations = False, returnUseInStateReporting = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnWaiverType = False, returnWaiverTypeCode = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params[[(value is True) for value in params.value]].index)
	if params.iloc[2,:].name == "".join(return_params_list):
		return_params_list = list(params[[("return" in name) for name in params.index.to_series()]].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/Waiver/" + str(WaiverID), verb = "get", return_params_list = return_params_list)

def modifyWaiver(WaiverID, EntityID = 1, setCode = None, setDescription = None, setExpirationType = None, setExpirationTypeCode = None, setExpireUnit = None, setExpireUnitCode = None, setExpireValue = None, setIsActive = None, setRestrictVaccinations = None, setUseInStateReporting = None, setWaiverType = None, setWaiverTypeCode = None, setRelationships = None, returnWaiverID = True, returnCode = False, returnCreatedTime = False, returnDescription = False, returnExpirationType = False, returnExpirationTypeCode = False, returnExpireUnit = False, returnExpireUnitCode = False, returnExpireValue = False, returnIsActive = False, returnModifiedTime = False, returnRestrictVaccinations = False, returnUseInStateReporting = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnWaiverType = False, returnWaiverTypeCode = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(), :]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/Waiver/" + str(WaiverID), verb = "post", return_params_list = return_params_list, payload = payload_params)

def createWaiver(EntityID = 1, setCode = None, setDescription = None, setExpirationType = None, setExpirationTypeCode = None, setExpireUnit = None, setExpireUnitCode = None, setExpireValue = None, setIsActive = None, setRestrictVaccinations = None, setUseInStateReporting = None, setWaiverType = None, setWaiverTypeCode = None, setRelationships = None, returnWaiverID = True, returnCode = False, returnCreatedTime = False, returnDescription = False, returnExpirationType = False, returnExpirationTypeCode = False, returnExpireUnit = False, returnExpireUnitCode = False, returnExpireValue = False, returnIsActive = False, returnModifiedTime = False, returnRestrictVaccinations = False, returnUseInStateReporting = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnWaiverType = False, returnWaiverTypeCode = False, returnRelationships = False):

	params = pd.DataFrame.from_dict(locals(), orient = "index", columns = ["value"])

	return_params_list = list(params.loc[lambda x: ((x.value & (x.index.to_series().str.contains("return"))) | (~(x.value.isnull()) & (x.index.to_series().str.contains("set")))) & (x.index.to_series() != "EntityID"),:].index)
	return_params_list = [re.sub("^return", "", param) for param in return_params_list]
	return_params_list = [re.sub("^set", "", param) for param in return_params_list]
	return_params_list = list(set(return_params_list))

	payload_params = params.loc[lambda x: x.index.to_series().str.contains("set") & ~x.value.isnull(),:]
	payload_params.index = [re.sub("^set", "", name) for name in payload_params.index]
	payload_params = dict({"DataObject": dict(payload_params["value"])})
	payload_params = json.dumps(payload_params)

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Health/Waiver/", verb = "put", return_params_list = return_params_list, payload = payload_params)

def deleteWaiver(WaiverID, EntityID = 1):

	return make_request(endpoint = "/Generic/" + str(EntityID) + "/Attendance/AttendancePeriod/" + str(AttendancePeriodID), verb = "delete")