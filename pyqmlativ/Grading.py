# This module contains Grading functions.

from .Utilities import *

import pandas as pd

import json

import re


def getEveryCommentBucket(searchConditions = [], EntityID = 1, returnCommentBucketID = False, returnCommentBucketIDClonedFrom = False, returnCommentSetID = False, returnCreatedTime = False, returnDisplayOrder = False, returnEntityGroupKey = False, returnGradingPeriodID = False, returnIsLimitedByCourse = False, returnModifiedTime = False, returnName = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every CommentBucket in the district.

    This function returns a dataframe of every CommentBucket in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/CommentBucket/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/CommentBucket/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getCommentBucket(CommentBucketID, EntityID = 1, returnCommentBucketID = False, returnCommentBucketIDClonedFrom = False, returnCommentSetID = False, returnCreatedTime = False, returnDisplayOrder = False, returnEntityGroupKey = False, returnGradingPeriodID = False, returnIsLimitedByCourse = False, returnModifiedTime = False, returnName = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/CommentBucket/" + str(CommentBucketID), verb = "get", return_params_list = return_params)

def modifyCommentBucket(CommentBucketID, EntityID = 1, setCommentBucketID = None, setCommentBucketIDClonedFrom = None, setCommentSetID = None, setCreatedTime = None, setDisplayOrder = None, setEntityGroupKey = None, setGradingPeriodID = None, setIsLimitedByCourse = None, setModifiedTime = None, setName = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnCommentBucketID = False, returnCommentBucketIDClonedFrom = False, returnCommentSetID = False, returnCreatedTime = False, returnDisplayOrder = False, returnEntityGroupKey = False, returnGradingPeriodID = False, returnIsLimitedByCourse = False, returnModifiedTime = False, returnName = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/CommentBucket/" + str(CommentBucketID), verb = "post", return_params_list = return_params, payload = payload_params)

def createCommentBucket(EntityID = 1, setCommentBucketID = None, setCommentBucketIDClonedFrom = None, setCommentSetID = None, setCreatedTime = None, setDisplayOrder = None, setEntityGroupKey = None, setGradingPeriodID = None, setIsLimitedByCourse = None, setModifiedTime = None, setName = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnCommentBucketID = False, returnCommentBucketIDClonedFrom = False, returnCommentSetID = False, returnCreatedTime = False, returnDisplayOrder = False, returnEntityGroupKey = False, returnGradingPeriodID = False, returnIsLimitedByCourse = False, returnModifiedTime = False, returnName = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/CommentBucket/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteCommentBucket(CommentBucketID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/CommentBucket/" + str(CommentBucketID), verb = "delete")


def getEveryCommentBucketCourse(searchConditions = [], EntityID = 1, returnCommentBucketCourseID = False, returnCommentBucketID = False, returnCourseID = False, returnCreatedTime = False, returnEntityGroupKey = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every CommentBucketCourse in the district.

    This function returns a dataframe of every CommentBucketCourse in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/CommentBucketCourse/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/CommentBucketCourse/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getCommentBucketCourse(CommentBucketCourseID, EntityID = 1, returnCommentBucketCourseID = False, returnCommentBucketID = False, returnCourseID = False, returnCreatedTime = False, returnEntityGroupKey = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/CommentBucketCourse/" + str(CommentBucketCourseID), verb = "get", return_params_list = return_params)

def modifyCommentBucketCourse(CommentBucketCourseID, EntityID = 1, setCommentBucketCourseID = None, setCommentBucketID = None, setCourseID = None, setCreatedTime = None, setEntityGroupKey = None, setModifiedTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnCommentBucketCourseID = False, returnCommentBucketID = False, returnCourseID = False, returnCreatedTime = False, returnEntityGroupKey = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/CommentBucketCourse/" + str(CommentBucketCourseID), verb = "post", return_params_list = return_params, payload = payload_params)

def createCommentBucketCourse(EntityID = 1, setCommentBucketCourseID = None, setCommentBucketID = None, setCourseID = None, setCreatedTime = None, setEntityGroupKey = None, setModifiedTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnCommentBucketCourseID = False, returnCommentBucketID = False, returnCourseID = False, returnCreatedTime = False, returnEntityGroupKey = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/CommentBucketCourse/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteCommentBucketCourse(CommentBucketCourseID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/CommentBucketCourse/" + str(CommentBucketCourseID), verb = "delete")


def getEveryCommentCode(searchConditions = [], EntityID = 1, returnCommentCodeID = False, returnCode = False, returnCodeDescription = False, returnCommentCodeIDClonedFrom = False, returnCommentSetID = False, returnCreatedTime = False, returnDescription = False, returnEntityGroupKey = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every CommentCode in the district.

    This function returns a dataframe of every CommentCode in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/CommentCode/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/CommentCode/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getCommentCode(CommentCodeID, EntityID = 1, returnCommentCodeID = False, returnCode = False, returnCodeDescription = False, returnCommentCodeIDClonedFrom = False, returnCommentSetID = False, returnCreatedTime = False, returnDescription = False, returnEntityGroupKey = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/CommentCode/" + str(CommentCodeID), verb = "get", return_params_list = return_params)

def modifyCommentCode(CommentCodeID, EntityID = 1, setCommentCodeID = None, setCode = None, setCodeDescription = None, setCommentCodeIDClonedFrom = None, setCommentSetID = None, setCreatedTime = None, setDescription = None, setEntityGroupKey = None, setModifiedTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnCommentCodeID = False, returnCode = False, returnCodeDescription = False, returnCommentCodeIDClonedFrom = False, returnCommentSetID = False, returnCreatedTime = False, returnDescription = False, returnEntityGroupKey = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/CommentCode/" + str(CommentCodeID), verb = "post", return_params_list = return_params, payload = payload_params)

def createCommentCode(EntityID = 1, setCommentCodeID = None, setCode = None, setCodeDescription = None, setCommentCodeIDClonedFrom = None, setCommentSetID = None, setCreatedTime = None, setDescription = None, setEntityGroupKey = None, setModifiedTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnCommentCodeID = False, returnCode = False, returnCodeDescription = False, returnCommentCodeIDClonedFrom = False, returnCommentSetID = False, returnCreatedTime = False, returnDescription = False, returnEntityGroupKey = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/CommentCode/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteCommentCode(CommentCodeID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/CommentCode/" + str(CommentCodeID), verb = "delete")


def getEveryCommentSet(searchConditions = [], EntityID = 1, returnCommentSetID = False, returnCode = False, returnCodeDescription = False, returnCommentSetIDClonedFrom = False, returnCreatedTime = False, returnDescription = False, returnEntityGroupKey = False, returnEntityID = False, returnModifiedTime = False, returnSchoolYearID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every CommentSet in the district.

    This function returns a dataframe of every CommentSet in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/CommentSet/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/CommentSet/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getCommentSet(CommentSetID, EntityID = 1, returnCommentSetID = False, returnCode = False, returnCodeDescription = False, returnCommentSetIDClonedFrom = False, returnCreatedTime = False, returnDescription = False, returnEntityGroupKey = False, returnEntityID = False, returnModifiedTime = False, returnSchoolYearID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/CommentSet/" + str(CommentSetID), verb = "get", return_params_list = return_params)

def modifyCommentSet(CommentSetID, EntityID = 1, setCommentSetID = None, setCode = None, setCodeDescription = None, setCommentSetIDClonedFrom = None, setCreatedTime = None, setDescription = None, setEntityGroupKey = None, setEntityID = None, setModifiedTime = None, setSchoolYearID = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnCommentSetID = False, returnCode = False, returnCodeDescription = False, returnCommentSetIDClonedFrom = False, returnCreatedTime = False, returnDescription = False, returnEntityGroupKey = False, returnEntityID = False, returnModifiedTime = False, returnSchoolYearID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/CommentSet/" + str(CommentSetID), verb = "post", return_params_list = return_params, payload = payload_params)

def createCommentSet(EntityID = 1, setCommentSetID = None, setCode = None, setCodeDescription = None, setCommentSetIDClonedFrom = None, setCreatedTime = None, setDescription = None, setEntityGroupKey = None, setEntityID = None, setModifiedTime = None, setSchoolYearID = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnCommentSetID = False, returnCode = False, returnCodeDescription = False, returnCommentSetIDClonedFrom = False, returnCreatedTime = False, returnDescription = False, returnEntityGroupKey = False, returnEntityID = False, returnModifiedTime = False, returnSchoolYearID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/CommentSet/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteCommentSet(CommentSetID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/CommentSet/" + str(CommentSetID), verb = "delete")


def getEveryConfigDistrictGroup(searchConditions = [], EntityID = 1, returnConfigDistrictGroupID = False, returnCreatedTime = False, returnDistrictGroupKey = False, returnDistrictID = False, returnEarnedCreditsRoundingDecimals = False, returnFinalGPADecimalSetting = False, returnFinalGPADecimalSettingCode = False, returnFinalGPARoundingDecimals = False, returnGPACalculationDecimalSetting = False, returnGPACalculationDecimalSettingCode = False, returnGPACalculationRoundingDecimals = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every ConfigDistrictGroup in the district.

    This function returns a dataframe of every ConfigDistrictGroup in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ConfigDistrictGroup/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ConfigDistrictGroup/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getConfigDistrictGroup(ConfigDistrictGroupID, EntityID = 1, returnConfigDistrictGroupID = False, returnCreatedTime = False, returnDistrictGroupKey = False, returnDistrictID = False, returnEarnedCreditsRoundingDecimals = False, returnFinalGPADecimalSetting = False, returnFinalGPADecimalSettingCode = False, returnFinalGPARoundingDecimals = False, returnGPACalculationDecimalSetting = False, returnGPACalculationDecimalSettingCode = False, returnGPACalculationRoundingDecimals = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ConfigDistrictGroup/" + str(ConfigDistrictGroupID), verb = "get", return_params_list = return_params)

def modifyConfigDistrictGroup(ConfigDistrictGroupID, EntityID = 1, setConfigDistrictGroupID = None, setCreatedTime = None, setDistrictGroupKey = None, setDistrictID = None, setEarnedCreditsRoundingDecimals = None, setFinalGPADecimalSetting = None, setFinalGPADecimalSettingCode = None, setFinalGPARoundingDecimals = None, setGPACalculationDecimalSetting = None, setGPACalculationDecimalSettingCode = None, setGPACalculationRoundingDecimals = None, setModifiedTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnConfigDistrictGroupID = False, returnCreatedTime = False, returnDistrictGroupKey = False, returnDistrictID = False, returnEarnedCreditsRoundingDecimals = False, returnFinalGPADecimalSetting = False, returnFinalGPADecimalSettingCode = False, returnFinalGPARoundingDecimals = False, returnGPACalculationDecimalSetting = False, returnGPACalculationDecimalSettingCode = False, returnGPACalculationRoundingDecimals = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ConfigDistrictGroup/" + str(ConfigDistrictGroupID), verb = "post", return_params_list = return_params, payload = payload_params)

def createConfigDistrictGroup(EntityID = 1, setConfigDistrictGroupID = None, setCreatedTime = None, setDistrictGroupKey = None, setDistrictID = None, setEarnedCreditsRoundingDecimals = None, setFinalGPADecimalSetting = None, setFinalGPADecimalSettingCode = None, setFinalGPARoundingDecimals = None, setGPACalculationDecimalSetting = None, setGPACalculationDecimalSettingCode = None, setGPACalculationRoundingDecimals = None, setModifiedTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnConfigDistrictGroupID = False, returnCreatedTime = False, returnDistrictGroupKey = False, returnDistrictID = False, returnEarnedCreditsRoundingDecimals = False, returnFinalGPADecimalSetting = False, returnFinalGPADecimalSettingCode = False, returnFinalGPARoundingDecimals = False, returnGPACalculationDecimalSetting = False, returnGPACalculationDecimalSettingCode = False, returnGPACalculationRoundingDecimals = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ConfigDistrictGroup/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteConfigDistrictGroup(ConfigDistrictGroupID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ConfigDistrictGroup/" + str(ConfigDistrictGroupID), verb = "delete")


def getEveryConfigDistrictYear(searchConditions = [], EntityID = 1, returnConfigDistrictYearID = False, returnConfigDistrictYearIDClonedFrom = False, returnCreatedTime = False, returnDistrictID = False, returnModifiedTime = False, returnSchoolYearID = False, returnStudentSectionLinkOption = False, returnStudentSectionLinkOptionCode = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnUseStudentSectionLinkCourseType = False, returnUseStudentSectionLinking = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every ConfigDistrictYear in the district.

    This function returns a dataframe of every ConfigDistrictYear in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ConfigDistrictYear/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ConfigDistrictYear/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getConfigDistrictYear(ConfigDistrictYearID, EntityID = 1, returnConfigDistrictYearID = False, returnConfigDistrictYearIDClonedFrom = False, returnCreatedTime = False, returnDistrictID = False, returnModifiedTime = False, returnSchoolYearID = False, returnStudentSectionLinkOption = False, returnStudentSectionLinkOptionCode = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnUseStudentSectionLinkCourseType = False, returnUseStudentSectionLinking = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ConfigDistrictYear/" + str(ConfigDistrictYearID), verb = "get", return_params_list = return_params)

def modifyConfigDistrictYear(ConfigDistrictYearID, EntityID = 1, setConfigDistrictYearID = None, setConfigDistrictYearIDClonedFrom = None, setCreatedTime = None, setDistrictID = None, setModifiedTime = None, setSchoolYearID = None, setStudentSectionLinkOption = None, setStudentSectionLinkOptionCode = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, setUseStudentSectionLinkCourseType = None, setUseStudentSectionLinking = None, returnConfigDistrictYearID = False, returnConfigDistrictYearIDClonedFrom = False, returnCreatedTime = False, returnDistrictID = False, returnModifiedTime = False, returnSchoolYearID = False, returnStudentSectionLinkOption = False, returnStudentSectionLinkOptionCode = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnUseStudentSectionLinkCourseType = False, returnUseStudentSectionLinking = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ConfigDistrictYear/" + str(ConfigDistrictYearID), verb = "post", return_params_list = return_params, payload = payload_params)

def createConfigDistrictYear(EntityID = 1, setConfigDistrictYearID = None, setConfigDistrictYearIDClonedFrom = None, setCreatedTime = None, setDistrictID = None, setModifiedTime = None, setSchoolYearID = None, setStudentSectionLinkOption = None, setStudentSectionLinkOptionCode = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, setUseStudentSectionLinkCourseType = None, setUseStudentSectionLinking = None, returnConfigDistrictYearID = False, returnConfigDistrictYearIDClonedFrom = False, returnCreatedTime = False, returnDistrictID = False, returnModifiedTime = False, returnSchoolYearID = False, returnStudentSectionLinkOption = False, returnStudentSectionLinkOptionCode = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnUseStudentSectionLinkCourseType = False, returnUseStudentSectionLinking = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ConfigDistrictYear/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteConfigDistrictYear(ConfigDistrictYearID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ConfigDistrictYear/" + str(ConfigDistrictYearID), verb = "delete")


def getEveryConfigEntityGroupYear(searchConditions = [], EntityID = 1, returnConfigEntityGroupYearID = False, returnConfigEntityGroupYearIDClonedFrom = False, returnCreatedTime = False, returnCurrentCalculation = False, returnCurrentCalculationCode = False, returnEarnedCreditsMethodIDDefault = False, returnEntityGroupKey = False, returnEntityID = False, returnFreeFormCommentMaxLength = False, returnGradebookLockMessage = False, returnGradeLevelIDCohort = False, returnLockGradebookAssignmentsAfterDate = False, returnLockGradebookCalculation = False, returnLockGradebookStartTime = False, returnLockGradeBuckets = False, returnModifiedTime = False, returnRetainGradesNumberOfDays = False, returnSchoolYearID = False, returnUseAddOnGPA = False, returnUseFactorBasedAddOn = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every ConfigEntityGroupYear in the district.

    This function returns a dataframe of every ConfigEntityGroupYear in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ConfigEntityGroupYear/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ConfigEntityGroupYear/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getConfigEntityGroupYear(ConfigEntityGroupYearID, EntityID = 1, returnConfigEntityGroupYearID = False, returnConfigEntityGroupYearIDClonedFrom = False, returnCreatedTime = False, returnCurrentCalculation = False, returnCurrentCalculationCode = False, returnEarnedCreditsMethodIDDefault = False, returnEntityGroupKey = False, returnEntityID = False, returnFreeFormCommentMaxLength = False, returnGradebookLockMessage = False, returnGradeLevelIDCohort = False, returnLockGradebookAssignmentsAfterDate = False, returnLockGradebookCalculation = False, returnLockGradebookStartTime = False, returnLockGradeBuckets = False, returnModifiedTime = False, returnRetainGradesNumberOfDays = False, returnSchoolYearID = False, returnUseAddOnGPA = False, returnUseFactorBasedAddOn = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ConfigEntityGroupYear/" + str(ConfigEntityGroupYearID), verb = "get", return_params_list = return_params)

def modifyConfigEntityGroupYear(ConfigEntityGroupYearID, EntityID = 1, setConfigEntityGroupYearID = None, setConfigEntityGroupYearIDClonedFrom = None, setCreatedTime = None, setCurrentCalculation = None, setCurrentCalculationCode = None, setEarnedCreditsMethodIDDefault = None, setEntityGroupKey = None, setEntityID = None, setFreeFormCommentMaxLength = None, setGradebookLockMessage = None, setGradeLevelIDCohort = None, setLockGradebookAssignmentsAfterDate = None, setLockGradebookCalculation = None, setLockGradebookStartTime = None, setLockGradeBuckets = None, setModifiedTime = None, setRetainGradesNumberOfDays = None, setSchoolYearID = None, setUseAddOnGPA = None, setUseFactorBasedAddOn = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnConfigEntityGroupYearID = False, returnConfigEntityGroupYearIDClonedFrom = False, returnCreatedTime = False, returnCurrentCalculation = False, returnCurrentCalculationCode = False, returnEarnedCreditsMethodIDDefault = False, returnEntityGroupKey = False, returnEntityID = False, returnFreeFormCommentMaxLength = False, returnGradebookLockMessage = False, returnGradeLevelIDCohort = False, returnLockGradebookAssignmentsAfterDate = False, returnLockGradebookCalculation = False, returnLockGradebookStartTime = False, returnLockGradeBuckets = False, returnModifiedTime = False, returnRetainGradesNumberOfDays = False, returnSchoolYearID = False, returnUseAddOnGPA = False, returnUseFactorBasedAddOn = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ConfigEntityGroupYear/" + str(ConfigEntityGroupYearID), verb = "post", return_params_list = return_params, payload = payload_params)

def createConfigEntityGroupYear(EntityID = 1, setConfigEntityGroupYearID = None, setConfigEntityGroupYearIDClonedFrom = None, setCreatedTime = None, setCurrentCalculation = None, setCurrentCalculationCode = None, setEarnedCreditsMethodIDDefault = None, setEntityGroupKey = None, setEntityID = None, setFreeFormCommentMaxLength = None, setGradebookLockMessage = None, setGradeLevelIDCohort = None, setLockGradebookAssignmentsAfterDate = None, setLockGradebookCalculation = None, setLockGradebookStartTime = None, setLockGradeBuckets = None, setModifiedTime = None, setRetainGradesNumberOfDays = None, setSchoolYearID = None, setUseAddOnGPA = None, setUseFactorBasedAddOn = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnConfigEntityGroupYearID = False, returnConfigEntityGroupYearIDClonedFrom = False, returnCreatedTime = False, returnCurrentCalculation = False, returnCurrentCalculationCode = False, returnEarnedCreditsMethodIDDefault = False, returnEntityGroupKey = False, returnEntityID = False, returnFreeFormCommentMaxLength = False, returnGradebookLockMessage = False, returnGradeLevelIDCohort = False, returnLockGradebookAssignmentsAfterDate = False, returnLockGradebookCalculation = False, returnLockGradebookStartTime = False, returnLockGradeBuckets = False, returnModifiedTime = False, returnRetainGradesNumberOfDays = False, returnSchoolYearID = False, returnUseAddOnGPA = False, returnUseFactorBasedAddOn = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ConfigEntityGroupYear/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteConfigEntityGroupYear(ConfigEntityGroupYearID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ConfigEntityGroupYear/" + str(ConfigEntityGroupYearID), verb = "delete")


def getEveryConfigEntityYear(searchConditions = [], EntityID = 1, returnConfigEntityYearID = False, returnAcademicSummaryTypeETranscript = False, returnAcademicSummaryTypeETranscriptCode = False, returnConfigEntityYearIDClonedFrom = False, returnCreatedTime = False, returnElectronicSignatureIDReportCard = False, returnElectronicSignatureIDTranscript = False, returnEntityID = False, returnGPAMaximumRangeETranscript = False, returnGPAMethodEntityIDETranscript = False, returnModifiedTime = False, returnRankMethodIDETranscript = False, returnRequiredCreditTypeETranscript = False, returnRequiredCreditTypeETranscriptCode = False, returnSchoolYearID = False, returnTranscriptTitle = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every ConfigEntityYear in the district.

    This function returns a dataframe of every ConfigEntityYear in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ConfigEntityYear/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ConfigEntityYear/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getConfigEntityYear(ConfigEntityYearID, EntityID = 1, returnConfigEntityYearID = False, returnAcademicSummaryTypeETranscript = False, returnAcademicSummaryTypeETranscriptCode = False, returnConfigEntityYearIDClonedFrom = False, returnCreatedTime = False, returnElectronicSignatureIDReportCard = False, returnElectronicSignatureIDTranscript = False, returnEntityID = False, returnGPAMaximumRangeETranscript = False, returnGPAMethodEntityIDETranscript = False, returnModifiedTime = False, returnRankMethodIDETranscript = False, returnRequiredCreditTypeETranscript = False, returnRequiredCreditTypeETranscriptCode = False, returnSchoolYearID = False, returnTranscriptTitle = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ConfigEntityYear/" + str(ConfigEntityYearID), verb = "get", return_params_list = return_params)

def modifyConfigEntityYear(ConfigEntityYearID, EntityID = 1, setConfigEntityYearID = None, setAcademicSummaryTypeETranscript = None, setAcademicSummaryTypeETranscriptCode = None, setConfigEntityYearIDClonedFrom = None, setCreatedTime = None, setElectronicSignatureIDReportCard = None, setElectronicSignatureIDTranscript = None, setEntityID = None, setGPAMaximumRangeETranscript = None, setGPAMethodEntityIDETranscript = None, setModifiedTime = None, setRankMethodIDETranscript = None, setRequiredCreditTypeETranscript = None, setRequiredCreditTypeETranscriptCode = None, setSchoolYearID = None, setTranscriptTitle = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnConfigEntityYearID = False, returnAcademicSummaryTypeETranscript = False, returnAcademicSummaryTypeETranscriptCode = False, returnConfigEntityYearIDClonedFrom = False, returnCreatedTime = False, returnElectronicSignatureIDReportCard = False, returnElectronicSignatureIDTranscript = False, returnEntityID = False, returnGPAMaximumRangeETranscript = False, returnGPAMethodEntityIDETranscript = False, returnModifiedTime = False, returnRankMethodIDETranscript = False, returnRequiredCreditTypeETranscript = False, returnRequiredCreditTypeETranscriptCode = False, returnSchoolYearID = False, returnTranscriptTitle = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ConfigEntityYear/" + str(ConfigEntityYearID), verb = "post", return_params_list = return_params, payload = payload_params)

def createConfigEntityYear(EntityID = 1, setConfigEntityYearID = None, setAcademicSummaryTypeETranscript = None, setAcademicSummaryTypeETranscriptCode = None, setConfigEntityYearIDClonedFrom = None, setCreatedTime = None, setElectronicSignatureIDReportCard = None, setElectronicSignatureIDTranscript = None, setEntityID = None, setGPAMaximumRangeETranscript = None, setGPAMethodEntityIDETranscript = None, setModifiedTime = None, setRankMethodIDETranscript = None, setRequiredCreditTypeETranscript = None, setRequiredCreditTypeETranscriptCode = None, setSchoolYearID = None, setTranscriptTitle = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnConfigEntityYearID = False, returnAcademicSummaryTypeETranscript = False, returnAcademicSummaryTypeETranscriptCode = False, returnConfigEntityYearIDClonedFrom = False, returnCreatedTime = False, returnElectronicSignatureIDReportCard = False, returnElectronicSignatureIDTranscript = False, returnEntityID = False, returnGPAMaximumRangeETranscript = False, returnGPAMethodEntityIDETranscript = False, returnModifiedTime = False, returnRankMethodIDETranscript = False, returnRequiredCreditTypeETranscript = False, returnRequiredCreditTypeETranscriptCode = False, returnSchoolYearID = False, returnTranscriptTitle = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ConfigEntityYear/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteConfigEntityYear(ConfigEntityYearID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ConfigEntityYear/" + str(ConfigEntityYearID), verb = "delete")


def getEveryConfigEntityYearGraduationRequiredCredit(searchConditions = [], EntityID = 1, returnConfigEntityYearGraduationRequiredCreditID = False, returnConfigEntityYearID = False, returnCreatedTime = False, returnCreditsRequired = False, returnGradYearHigh = False, returnGradYearLow = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every ConfigEntityYearGraduationRequiredCredit in the district.

    This function returns a dataframe of every ConfigEntityYearGraduationRequiredCredit in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ConfigEntityYearGraduationRequiredCredit/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ConfigEntityYearGraduationRequiredCredit/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getConfigEntityYearGraduationRequiredCredit(ConfigEntityYearGraduationRequiredCreditID, EntityID = 1, returnConfigEntityYearGraduationRequiredCreditID = False, returnConfigEntityYearID = False, returnCreatedTime = False, returnCreditsRequired = False, returnGradYearHigh = False, returnGradYearLow = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ConfigEntityYearGraduationRequiredCredit/" + str(ConfigEntityYearGraduationRequiredCreditID), verb = "get", return_params_list = return_params)

def modifyConfigEntityYearGraduationRequiredCredit(ConfigEntityYearGraduationRequiredCreditID, EntityID = 1, setConfigEntityYearGraduationRequiredCreditID = None, setConfigEntityYearID = None, setCreatedTime = None, setCreditsRequired = None, setGradYearHigh = None, setGradYearLow = None, setModifiedTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnConfigEntityYearGraduationRequiredCreditID = False, returnConfigEntityYearID = False, returnCreatedTime = False, returnCreditsRequired = False, returnGradYearHigh = False, returnGradYearLow = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ConfigEntityYearGraduationRequiredCredit/" + str(ConfigEntityYearGraduationRequiredCreditID), verb = "post", return_params_list = return_params, payload = payload_params)

def createConfigEntityYearGraduationRequiredCredit(EntityID = 1, setConfigEntityYearGraduationRequiredCreditID = None, setConfigEntityYearID = None, setCreatedTime = None, setCreditsRequired = None, setGradYearHigh = None, setGradYearLow = None, setModifiedTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnConfigEntityYearGraduationRequiredCreditID = False, returnConfigEntityYearID = False, returnCreatedTime = False, returnCreditsRequired = False, returnGradYearHigh = False, returnGradYearLow = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ConfigEntityYearGraduationRequiredCredit/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteConfigEntityYearGraduationRequiredCredit(ConfigEntityYearGraduationRequiredCreditID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ConfigEntityYearGraduationRequiredCredit/" + str(ConfigEntityYearGraduationRequiredCreditID), verb = "delete")


def getEveryCourseEarnedCreditsMethod(searchConditions = [], EntityID = 1, returnCourseEarnedCreditsMethodID = False, returnCourseEarnedCreditsMethodIDClonedFrom = False, returnCourseID = False, returnCourseOrOverrideEarnedCredits = False, returnCreatedTime = False, returnEarnedCreditsMethodEntityID = False, returnEarnedCreditsOverride = False, returnEntityGroupKey = False, returnModifiedTime = False, returnUseOverride = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every CourseEarnedCreditsMethod in the district.

    This function returns a dataframe of every CourseEarnedCreditsMethod in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/CourseEarnedCreditsMethod/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/CourseEarnedCreditsMethod/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getCourseEarnedCreditsMethod(CourseEarnedCreditsMethodID, EntityID = 1, returnCourseEarnedCreditsMethodID = False, returnCourseEarnedCreditsMethodIDClonedFrom = False, returnCourseID = False, returnCourseOrOverrideEarnedCredits = False, returnCreatedTime = False, returnEarnedCreditsMethodEntityID = False, returnEarnedCreditsOverride = False, returnEntityGroupKey = False, returnModifiedTime = False, returnUseOverride = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/CourseEarnedCreditsMethod/" + str(CourseEarnedCreditsMethodID), verb = "get", return_params_list = return_params)

def modifyCourseEarnedCreditsMethod(CourseEarnedCreditsMethodID, EntityID = 1, setCourseEarnedCreditsMethodID = None, setCourseEarnedCreditsMethodIDClonedFrom = None, setCourseID = None, setCourseOrOverrideEarnedCredits = None, setCreatedTime = None, setEarnedCreditsMethodEntityID = None, setEarnedCreditsOverride = None, setEntityGroupKey = None, setModifiedTime = None, setUseOverride = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnCourseEarnedCreditsMethodID = False, returnCourseEarnedCreditsMethodIDClonedFrom = False, returnCourseID = False, returnCourseOrOverrideEarnedCredits = False, returnCreatedTime = False, returnEarnedCreditsMethodEntityID = False, returnEarnedCreditsOverride = False, returnEntityGroupKey = False, returnModifiedTime = False, returnUseOverride = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/CourseEarnedCreditsMethod/" + str(CourseEarnedCreditsMethodID), verb = "post", return_params_list = return_params, payload = payload_params)

def createCourseEarnedCreditsMethod(EntityID = 1, setCourseEarnedCreditsMethodID = None, setCourseEarnedCreditsMethodIDClonedFrom = None, setCourseID = None, setCourseOrOverrideEarnedCredits = None, setCreatedTime = None, setEarnedCreditsMethodEntityID = None, setEarnedCreditsOverride = None, setEntityGroupKey = None, setModifiedTime = None, setUseOverride = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnCourseEarnedCreditsMethodID = False, returnCourseEarnedCreditsMethodIDClonedFrom = False, returnCourseID = False, returnCourseOrOverrideEarnedCredits = False, returnCreatedTime = False, returnEarnedCreditsMethodEntityID = False, returnEarnedCreditsOverride = False, returnEntityGroupKey = False, returnModifiedTime = False, returnUseOverride = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/CourseEarnedCreditsMethod/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteCourseEarnedCreditsMethod(CourseEarnedCreditsMethodID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/CourseEarnedCreditsMethod/" + str(CourseEarnedCreditsMethodID), verb = "delete")


def getEveryCourseGPAMethod(searchConditions = [], EntityID = 1, returnCourseGPAMethodID = False, returnCourseGPAMethodIDClonedFrom = False, returnCourseID = False, returnCreatedTime = False, returnEntityGroupKey = False, returnGPACredit = False, returnGPACredits = False, returnGPAMethodEntityID = False, returnModifiedTime = False, returnPointSetEntityID = False, returnUseOverride = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every CourseGPAMethod in the district.

    This function returns a dataframe of every CourseGPAMethod in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/CourseGPAMethod/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/CourseGPAMethod/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getCourseGPAMethod(CourseGPAMethodID, EntityID = 1, returnCourseGPAMethodID = False, returnCourseGPAMethodIDClonedFrom = False, returnCourseID = False, returnCreatedTime = False, returnEntityGroupKey = False, returnGPACredit = False, returnGPACredits = False, returnGPAMethodEntityID = False, returnModifiedTime = False, returnPointSetEntityID = False, returnUseOverride = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/CourseGPAMethod/" + str(CourseGPAMethodID), verb = "get", return_params_list = return_params)

def modifyCourseGPAMethod(CourseGPAMethodID, EntityID = 1, setCourseGPAMethodID = None, setCourseGPAMethodIDClonedFrom = None, setCourseID = None, setCreatedTime = None, setEntityGroupKey = None, setGPACredit = None, setGPACredits = None, setGPAMethodEntityID = None, setModifiedTime = None, setPointSetEntityID = None, setUseOverride = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnCourseGPAMethodID = False, returnCourseGPAMethodIDClonedFrom = False, returnCourseID = False, returnCreatedTime = False, returnEntityGroupKey = False, returnGPACredit = False, returnGPACredits = False, returnGPAMethodEntityID = False, returnModifiedTime = False, returnPointSetEntityID = False, returnUseOverride = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/CourseGPAMethod/" + str(CourseGPAMethodID), verb = "post", return_params_list = return_params, payload = payload_params)

def createCourseGPAMethod(EntityID = 1, setCourseGPAMethodID = None, setCourseGPAMethodIDClonedFrom = None, setCourseID = None, setCreatedTime = None, setEntityGroupKey = None, setGPACredit = None, setGPACredits = None, setGPAMethodEntityID = None, setModifiedTime = None, setPointSetEntityID = None, setUseOverride = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnCourseGPAMethodID = False, returnCourseGPAMethodIDClonedFrom = False, returnCourseID = False, returnCreatedTime = False, returnEntityGroupKey = False, returnGPACredit = False, returnGPACredits = False, returnGPAMethodEntityID = False, returnModifiedTime = False, returnPointSetEntityID = False, returnUseOverride = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/CourseGPAMethod/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteCourseGPAMethod(CourseGPAMethodID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/CourseGPAMethod/" + str(CourseGPAMethodID), verb = "delete")


def getEveryCourseGPAMethodGradeReferenceOverride(searchConditions = [], EntityID = 1, returnCourseGPAMethodGradeReferenceOverrideID = False, returnCourseGPAMethodID = False, returnCreatedTime = False, returnGPACredits = False, returnGradeReferenceID = False, returnModifiedTime = False, returnPointSetEntityID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every CourseGPAMethodGradeReferenceOverride in the district.

    This function returns a dataframe of every CourseGPAMethodGradeReferenceOverride in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/CourseGPAMethodGradeReferenceOverride/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/CourseGPAMethodGradeReferenceOverride/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getCourseGPAMethodGradeReferenceOverride(CourseGPAMethodGradeReferenceOverrideID, EntityID = 1, returnCourseGPAMethodGradeReferenceOverrideID = False, returnCourseGPAMethodID = False, returnCreatedTime = False, returnGPACredits = False, returnGradeReferenceID = False, returnModifiedTime = False, returnPointSetEntityID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/CourseGPAMethodGradeReferenceOverride/" + str(CourseGPAMethodGradeReferenceOverrideID), verb = "get", return_params_list = return_params)

def modifyCourseGPAMethodGradeReferenceOverride(CourseGPAMethodGradeReferenceOverrideID, EntityID = 1, setCourseGPAMethodGradeReferenceOverrideID = None, setCourseGPAMethodID = None, setCreatedTime = None, setGPACredits = None, setGradeReferenceID = None, setModifiedTime = None, setPointSetEntityID = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnCourseGPAMethodGradeReferenceOverrideID = False, returnCourseGPAMethodID = False, returnCreatedTime = False, returnGPACredits = False, returnGradeReferenceID = False, returnModifiedTime = False, returnPointSetEntityID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/CourseGPAMethodGradeReferenceOverride/" + str(CourseGPAMethodGradeReferenceOverrideID), verb = "post", return_params_list = return_params, payload = payload_params)

def createCourseGPAMethodGradeReferenceOverride(EntityID = 1, setCourseGPAMethodGradeReferenceOverrideID = None, setCourseGPAMethodID = None, setCreatedTime = None, setGPACredits = None, setGradeReferenceID = None, setModifiedTime = None, setPointSetEntityID = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnCourseGPAMethodGradeReferenceOverrideID = False, returnCourseGPAMethodID = False, returnCreatedTime = False, returnGPACredits = False, returnGradeReferenceID = False, returnModifiedTime = False, returnPointSetEntityID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/CourseGPAMethodGradeReferenceOverride/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteCourseGPAMethodGradeReferenceOverride(CourseGPAMethodGradeReferenceOverrideID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/CourseGPAMethodGradeReferenceOverride/" + str(CourseGPAMethodGradeReferenceOverrideID), verb = "delete")


def getEveryDefaultGradingScaleGroupGradeMark(searchConditions = [], EntityID = 1, returnDefaultGradingScaleGroupGradeMarkID = False, returnConfigEntityGroupYearID = False, returnCreatedTime = False, returnDefaultCalculationPercent = False, returnDefaultGradingScaleGroupGradeMarkIDClonedFrom = False, returnEntityGroupKey = False, returnGradeMarkID = False, returnModifiedTime = False, returnPercentHigh = False, returnPercentLow = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every DefaultGradingScaleGroupGradeMark in the district.

    This function returns a dataframe of every DefaultGradingScaleGroupGradeMark in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/DefaultGradingScaleGroupGradeMark/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/DefaultGradingScaleGroupGradeMark/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getDefaultGradingScaleGroupGradeMark(DefaultGradingScaleGroupGradeMarkID, EntityID = 1, returnDefaultGradingScaleGroupGradeMarkID = False, returnConfigEntityGroupYearID = False, returnCreatedTime = False, returnDefaultCalculationPercent = False, returnDefaultGradingScaleGroupGradeMarkIDClonedFrom = False, returnEntityGroupKey = False, returnGradeMarkID = False, returnModifiedTime = False, returnPercentHigh = False, returnPercentLow = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/DefaultGradingScaleGroupGradeMark/" + str(DefaultGradingScaleGroupGradeMarkID), verb = "get", return_params_list = return_params)

def modifyDefaultGradingScaleGroupGradeMark(DefaultGradingScaleGroupGradeMarkID, EntityID = 1, setDefaultGradingScaleGroupGradeMarkID = None, setConfigEntityGroupYearID = None, setCreatedTime = None, setDefaultCalculationPercent = None, setDefaultGradingScaleGroupGradeMarkIDClonedFrom = None, setEntityGroupKey = None, setGradeMarkID = None, setModifiedTime = None, setPercentHigh = None, setPercentLow = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnDefaultGradingScaleGroupGradeMarkID = False, returnConfigEntityGroupYearID = False, returnCreatedTime = False, returnDefaultCalculationPercent = False, returnDefaultGradingScaleGroupGradeMarkIDClonedFrom = False, returnEntityGroupKey = False, returnGradeMarkID = False, returnModifiedTime = False, returnPercentHigh = False, returnPercentLow = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/DefaultGradingScaleGroupGradeMark/" + str(DefaultGradingScaleGroupGradeMarkID), verb = "post", return_params_list = return_params, payload = payload_params)

def createDefaultGradingScaleGroupGradeMark(EntityID = 1, setDefaultGradingScaleGroupGradeMarkID = None, setConfigEntityGroupYearID = None, setCreatedTime = None, setDefaultCalculationPercent = None, setDefaultGradingScaleGroupGradeMarkIDClonedFrom = None, setEntityGroupKey = None, setGradeMarkID = None, setModifiedTime = None, setPercentHigh = None, setPercentLow = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnDefaultGradingScaleGroupGradeMarkID = False, returnConfigEntityGroupYearID = False, returnCreatedTime = False, returnDefaultCalculationPercent = False, returnDefaultGradingScaleGroupGradeMarkIDClonedFrom = False, returnEntityGroupKey = False, returnGradeMarkID = False, returnModifiedTime = False, returnPercentHigh = False, returnPercentLow = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/DefaultGradingScaleGroupGradeMark/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteDefaultGradingScaleGroupGradeMark(DefaultGradingScaleGroupGradeMarkID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/DefaultGradingScaleGroupGradeMark/" + str(DefaultGradingScaleGroupGradeMarkID), verb = "delete")


def getEveryEarnedCreditsBucketGroup(searchConditions = [], EntityID = 1, returnEarnedCreditsBucketGroupID = False, returnCreatedTime = False, returnEarnedCreditsBucketGroupIDClonedFrom = False, returnEntityGroupKey = False, returnGradingPeriodSetID = False, returnModifiedTime = False, returnSectionLengthID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every EarnedCreditsBucketGroup in the district.

    This function returns a dataframe of every EarnedCreditsBucketGroup in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/EarnedCreditsBucketGroup/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/EarnedCreditsBucketGroup/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getEarnedCreditsBucketGroup(EarnedCreditsBucketGroupID, EntityID = 1, returnEarnedCreditsBucketGroupID = False, returnCreatedTime = False, returnEarnedCreditsBucketGroupIDClonedFrom = False, returnEntityGroupKey = False, returnGradingPeriodSetID = False, returnModifiedTime = False, returnSectionLengthID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/EarnedCreditsBucketGroup/" + str(EarnedCreditsBucketGroupID), verb = "get", return_params_list = return_params)

def modifyEarnedCreditsBucketGroup(EarnedCreditsBucketGroupID, EntityID = 1, setEarnedCreditsBucketGroupID = None, setCreatedTime = None, setEarnedCreditsBucketGroupIDClonedFrom = None, setEntityGroupKey = None, setGradingPeriodSetID = None, setModifiedTime = None, setSectionLengthID = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnEarnedCreditsBucketGroupID = False, returnCreatedTime = False, returnEarnedCreditsBucketGroupIDClonedFrom = False, returnEntityGroupKey = False, returnGradingPeriodSetID = False, returnModifiedTime = False, returnSectionLengthID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/EarnedCreditsBucketGroup/" + str(EarnedCreditsBucketGroupID), verb = "post", return_params_list = return_params, payload = payload_params)

def createEarnedCreditsBucketGroup(EntityID = 1, setEarnedCreditsBucketGroupID = None, setCreatedTime = None, setEarnedCreditsBucketGroupIDClonedFrom = None, setEntityGroupKey = None, setGradingPeriodSetID = None, setModifiedTime = None, setSectionLengthID = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnEarnedCreditsBucketGroupID = False, returnCreatedTime = False, returnEarnedCreditsBucketGroupIDClonedFrom = False, returnEntityGroupKey = False, returnGradingPeriodSetID = False, returnModifiedTime = False, returnSectionLengthID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/EarnedCreditsBucketGroup/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteEarnedCreditsBucketGroup(EarnedCreditsBucketGroupID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/EarnedCreditsBucketGroup/" + str(EarnedCreditsBucketGroupID), verb = "delete")


def getEveryEarnedCreditsBucketGroupGradeBucket(searchConditions = [], EntityID = 1, returnEarnedCreditsBucketGroupGradeBucketID = False, returnCreatedTime = False, returnEarnedCreditsBucketGroupGradeBucketIDClonedFrom = False, returnEarnedCreditsBucketGroupID = False, returnEntityGroupKey = False, returnGradeBucketID = False, returnModifiedTime = False, returnPercent = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every EarnedCreditsBucketGroupGradeBucket in the district.

    This function returns a dataframe of every EarnedCreditsBucketGroupGradeBucket in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/EarnedCreditsBucketGroupGradeBucket/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/EarnedCreditsBucketGroupGradeBucket/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getEarnedCreditsBucketGroupGradeBucket(EarnedCreditsBucketGroupGradeBucketID, EntityID = 1, returnEarnedCreditsBucketGroupGradeBucketID = False, returnCreatedTime = False, returnEarnedCreditsBucketGroupGradeBucketIDClonedFrom = False, returnEarnedCreditsBucketGroupID = False, returnEntityGroupKey = False, returnGradeBucketID = False, returnModifiedTime = False, returnPercent = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/EarnedCreditsBucketGroupGradeBucket/" + str(EarnedCreditsBucketGroupGradeBucketID), verb = "get", return_params_list = return_params)

def modifyEarnedCreditsBucketGroupGradeBucket(EarnedCreditsBucketGroupGradeBucketID, EntityID = 1, setEarnedCreditsBucketGroupGradeBucketID = None, setCreatedTime = None, setEarnedCreditsBucketGroupGradeBucketIDClonedFrom = None, setEarnedCreditsBucketGroupID = None, setEntityGroupKey = None, setGradeBucketID = None, setModifiedTime = None, setPercent = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnEarnedCreditsBucketGroupGradeBucketID = False, returnCreatedTime = False, returnEarnedCreditsBucketGroupGradeBucketIDClonedFrom = False, returnEarnedCreditsBucketGroupID = False, returnEntityGroupKey = False, returnGradeBucketID = False, returnModifiedTime = False, returnPercent = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/EarnedCreditsBucketGroupGradeBucket/" + str(EarnedCreditsBucketGroupGradeBucketID), verb = "post", return_params_list = return_params, payload = payload_params)

def createEarnedCreditsBucketGroupGradeBucket(EntityID = 1, setEarnedCreditsBucketGroupGradeBucketID = None, setCreatedTime = None, setEarnedCreditsBucketGroupGradeBucketIDClonedFrom = None, setEarnedCreditsBucketGroupID = None, setEntityGroupKey = None, setGradeBucketID = None, setModifiedTime = None, setPercent = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnEarnedCreditsBucketGroupGradeBucketID = False, returnCreatedTime = False, returnEarnedCreditsBucketGroupGradeBucketIDClonedFrom = False, returnEarnedCreditsBucketGroupID = False, returnEntityGroupKey = False, returnGradeBucketID = False, returnModifiedTime = False, returnPercent = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/EarnedCreditsBucketGroupGradeBucket/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteEarnedCreditsBucketGroupGradeBucket(EarnedCreditsBucketGroupGradeBucketID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/EarnedCreditsBucketGroupGradeBucket/" + str(EarnedCreditsBucketGroupGradeBucketID), verb = "delete")


def getEveryEarnedCreditsBucketGroupGradeBucketStudentOverride(searchConditions = [], EntityID = 1, returnEarnedCreditsBucketGroupGradeBucketStudentOverrideID = False, returnCreatedTime = False, returnEarnedCreditsBucketGroupGradeBucketID = False, returnModifiedTime = False, returnPercent = False, returnStudentSectionID = False, returnUseOverride = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every EarnedCreditsBucketGroupGradeBucketStudentOverride in the district.

    This function returns a dataframe of every EarnedCreditsBucketGroupGradeBucketStudentOverride in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/EarnedCreditsBucketGroupGradeBucketStudentOverride/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/EarnedCreditsBucketGroupGradeBucketStudentOverride/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getEarnedCreditsBucketGroupGradeBucketStudentOverride(EarnedCreditsBucketGroupGradeBucketStudentOverrideID, EntityID = 1, returnEarnedCreditsBucketGroupGradeBucketStudentOverrideID = False, returnCreatedTime = False, returnEarnedCreditsBucketGroupGradeBucketID = False, returnModifiedTime = False, returnPercent = False, returnStudentSectionID = False, returnUseOverride = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/EarnedCreditsBucketGroupGradeBucketStudentOverride/" + str(EarnedCreditsBucketGroupGradeBucketStudentOverrideID), verb = "get", return_params_list = return_params)

def modifyEarnedCreditsBucketGroupGradeBucketStudentOverride(EarnedCreditsBucketGroupGradeBucketStudentOverrideID, EntityID = 1, setEarnedCreditsBucketGroupGradeBucketStudentOverrideID = None, setCreatedTime = None, setEarnedCreditsBucketGroupGradeBucketID = None, setModifiedTime = None, setPercent = None, setStudentSectionID = None, setUseOverride = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnEarnedCreditsBucketGroupGradeBucketStudentOverrideID = False, returnCreatedTime = False, returnEarnedCreditsBucketGroupGradeBucketID = False, returnModifiedTime = False, returnPercent = False, returnStudentSectionID = False, returnUseOverride = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/EarnedCreditsBucketGroupGradeBucketStudentOverride/" + str(EarnedCreditsBucketGroupGradeBucketStudentOverrideID), verb = "post", return_params_list = return_params, payload = payload_params)

def createEarnedCreditsBucketGroupGradeBucketStudentOverride(EntityID = 1, setEarnedCreditsBucketGroupGradeBucketStudentOverrideID = None, setCreatedTime = None, setEarnedCreditsBucketGroupGradeBucketID = None, setModifiedTime = None, setPercent = None, setStudentSectionID = None, setUseOverride = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnEarnedCreditsBucketGroupGradeBucketStudentOverrideID = False, returnCreatedTime = False, returnEarnedCreditsBucketGroupGradeBucketID = False, returnModifiedTime = False, returnPercent = False, returnStudentSectionID = False, returnUseOverride = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/EarnedCreditsBucketGroupGradeBucketStudentOverride/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteEarnedCreditsBucketGroupGradeBucketStudentOverride(EarnedCreditsBucketGroupGradeBucketStudentOverrideID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/EarnedCreditsBucketGroupGradeBucketStudentOverride/" + str(EarnedCreditsBucketGroupGradeBucketStudentOverrideID), verb = "delete")


def getEveryEarnedCreditsMethod(searchConditions = [], EntityID = 1, returnEarnedCreditsMethodID = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnModifiedTime = False, returnName = False, returnNameDescription = False, returnSortNumber = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every EarnedCreditsMethod in the district.

    This function returns a dataframe of every EarnedCreditsMethod in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/EarnedCreditsMethod/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/EarnedCreditsMethod/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getEarnedCreditsMethod(EarnedCreditsMethodID, EntityID = 1, returnEarnedCreditsMethodID = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnModifiedTime = False, returnName = False, returnNameDescription = False, returnSortNumber = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/EarnedCreditsMethod/" + str(EarnedCreditsMethodID), verb = "get", return_params_list = return_params)

def modifyEarnedCreditsMethod(EarnedCreditsMethodID, EntityID = 1, setEarnedCreditsMethodID = None, setCreatedTime = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setModifiedTime = None, setName = None, setNameDescription = None, setSortNumber = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnEarnedCreditsMethodID = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnModifiedTime = False, returnName = False, returnNameDescription = False, returnSortNumber = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/EarnedCreditsMethod/" + str(EarnedCreditsMethodID), verb = "post", return_params_list = return_params, payload = payload_params)

def createEarnedCreditsMethod(EntityID = 1, setEarnedCreditsMethodID = None, setCreatedTime = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setModifiedTime = None, setName = None, setNameDescription = None, setSortNumber = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnEarnedCreditsMethodID = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnModifiedTime = False, returnName = False, returnNameDescription = False, returnSortNumber = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/EarnedCreditsMethod/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteEarnedCreditsMethod(EarnedCreditsMethodID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/EarnedCreditsMethod/" + str(EarnedCreditsMethodID), verb = "delete")


def getEveryEarnedCreditsMethodEntity(searchConditions = [], EntityID = 1, returnEarnedCreditsMethodEntityID = False, returnCreatedTime = False, returnEarnedCreditsMethodEntityIDClonedFrom = False, returnEarnedCreditsMethodID = False, returnEntityGroupKey = False, returnEntityID = False, returnModifiedTime = False, returnSchoolYearID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every EarnedCreditsMethodEntity in the district.

    This function returns a dataframe of every EarnedCreditsMethodEntity in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/EarnedCreditsMethodEntity/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/EarnedCreditsMethodEntity/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getEarnedCreditsMethodEntity(EarnedCreditsMethodEntityID, EntityID = 1, returnEarnedCreditsMethodEntityID = False, returnCreatedTime = False, returnEarnedCreditsMethodEntityIDClonedFrom = False, returnEarnedCreditsMethodID = False, returnEntityGroupKey = False, returnEntityID = False, returnModifiedTime = False, returnSchoolYearID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/EarnedCreditsMethodEntity/" + str(EarnedCreditsMethodEntityID), verb = "get", return_params_list = return_params)

def modifyEarnedCreditsMethodEntity(EarnedCreditsMethodEntityID, EntityID = 1, setEarnedCreditsMethodEntityID = None, setCreatedTime = None, setEarnedCreditsMethodEntityIDClonedFrom = None, setEarnedCreditsMethodID = None, setEntityGroupKey = None, setEntityID = None, setModifiedTime = None, setSchoolYearID = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnEarnedCreditsMethodEntityID = False, returnCreatedTime = False, returnEarnedCreditsMethodEntityIDClonedFrom = False, returnEarnedCreditsMethodID = False, returnEntityGroupKey = False, returnEntityID = False, returnModifiedTime = False, returnSchoolYearID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/EarnedCreditsMethodEntity/" + str(EarnedCreditsMethodEntityID), verb = "post", return_params_list = return_params, payload = payload_params)

def createEarnedCreditsMethodEntity(EntityID = 1, setEarnedCreditsMethodEntityID = None, setCreatedTime = None, setEarnedCreditsMethodEntityIDClonedFrom = None, setEarnedCreditsMethodID = None, setEntityGroupKey = None, setEntityID = None, setModifiedTime = None, setSchoolYearID = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnEarnedCreditsMethodEntityID = False, returnCreatedTime = False, returnEarnedCreditsMethodEntityIDClonedFrom = False, returnEarnedCreditsMethodID = False, returnEntityGroupKey = False, returnEntityID = False, returnModifiedTime = False, returnSchoolYearID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/EarnedCreditsMethodEntity/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteEarnedCreditsMethodEntity(EarnedCreditsMethodEntityID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/EarnedCreditsMethodEntity/" + str(EarnedCreditsMethodEntityID), verb = "delete")


def getEveryElectronicTranscriptAcademicAwardException(searchConditions = [], EntityID = 1, returnElectronicTranscriptAcademicAwardExceptionID = False, returnCreatedTime = False, returnElectronicTranscriptAcademicAwardV1ID = False, returnElectronicTranscriptRunHistoryID = False, returnEntityID = False, returnMessage = False, returnMessageType = False, returnMessageTypeCode = False, returnModifiedTime = False, returnProcessType = False, returnProcessTypeCode = False, returnRuleNumber = False, returnSchoolYearID = False, returnStudentID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every ElectronicTranscriptAcademicAwardException in the district.

    This function returns a dataframe of every ElectronicTranscriptAcademicAwardException in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ElectronicTranscriptAcademicAwardException/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ElectronicTranscriptAcademicAwardException/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getElectronicTranscriptAcademicAwardException(ElectronicTranscriptAcademicAwardExceptionID, EntityID = 1, returnElectronicTranscriptAcademicAwardExceptionID = False, returnCreatedTime = False, returnElectronicTranscriptAcademicAwardV1ID = False, returnElectronicTranscriptRunHistoryID = False, returnEntityID = False, returnMessage = False, returnMessageType = False, returnMessageTypeCode = False, returnModifiedTime = False, returnProcessType = False, returnProcessTypeCode = False, returnRuleNumber = False, returnSchoolYearID = False, returnStudentID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ElectronicTranscriptAcademicAwardException/" + str(ElectronicTranscriptAcademicAwardExceptionID), verb = "get", return_params_list = return_params)

def modifyElectronicTranscriptAcademicAwardException(ElectronicTranscriptAcademicAwardExceptionID, EntityID = 1, setElectronicTranscriptAcademicAwardExceptionID = None, setCreatedTime = None, setElectronicTranscriptAcademicAwardV1ID = None, setElectronicTranscriptRunHistoryID = None, setEntityID = None, setMessage = None, setMessageType = None, setMessageTypeCode = None, setModifiedTime = None, setProcessType = None, setProcessTypeCode = None, setRuleNumber = None, setSchoolYearID = None, setStudentID = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnElectronicTranscriptAcademicAwardExceptionID = False, returnCreatedTime = False, returnElectronicTranscriptAcademicAwardV1ID = False, returnElectronicTranscriptRunHistoryID = False, returnEntityID = False, returnMessage = False, returnMessageType = False, returnMessageTypeCode = False, returnModifiedTime = False, returnProcessType = False, returnProcessTypeCode = False, returnRuleNumber = False, returnSchoolYearID = False, returnStudentID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ElectronicTranscriptAcademicAwardException/" + str(ElectronicTranscriptAcademicAwardExceptionID), verb = "post", return_params_list = return_params, payload = payload_params)

def createElectronicTranscriptAcademicAwardException(EntityID = 1, setElectronicTranscriptAcademicAwardExceptionID = None, setCreatedTime = None, setElectronicTranscriptAcademicAwardV1ID = None, setElectronicTranscriptRunHistoryID = None, setEntityID = None, setMessage = None, setMessageType = None, setMessageTypeCode = None, setModifiedTime = None, setProcessType = None, setProcessTypeCode = None, setRuleNumber = None, setSchoolYearID = None, setStudentID = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnElectronicTranscriptAcademicAwardExceptionID = False, returnCreatedTime = False, returnElectronicTranscriptAcademicAwardV1ID = False, returnElectronicTranscriptRunHistoryID = False, returnEntityID = False, returnMessage = False, returnMessageType = False, returnMessageTypeCode = False, returnModifiedTime = False, returnProcessType = False, returnProcessTypeCode = False, returnRuleNumber = False, returnSchoolYearID = False, returnStudentID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ElectronicTranscriptAcademicAwardException/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteElectronicTranscriptAcademicAwardException(ElectronicTranscriptAcademicAwardExceptionID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ElectronicTranscriptAcademicAwardException/" + str(ElectronicTranscriptAcademicAwardExceptionID), verb = "delete")


def getEveryElectronicTranscriptAcademicAwardV1(searchConditions = [], EntityID = 1, returnElectronicTranscriptAcademicAwardV1ID = False, returnAcademicAwardDate = False, returnAcademicAwardLevel = False, returnAcademicAwardLevelCode = False, returnAcademicAwardTitle = False, returnCreatedTime = False, returnElectronicTranscriptRunHistoryID = False, returnEntityID = False, returnHasErrors = False, returnKeyHash = False, returnModifiedTime = False, returnOrganizationName = False, returnSchoolYearID = False, returnStudentID = False, returnUpdateHash = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every ElectronicTranscriptAcademicAwardV1 in the district.

    This function returns a dataframe of every ElectronicTranscriptAcademicAwardV1 in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ElectronicTranscriptAcademicAwardV1/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ElectronicTranscriptAcademicAwardV1/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getElectronicTranscriptAcademicAwardV1(ElectronicTranscriptAcademicAwardV1ID, EntityID = 1, returnElectronicTranscriptAcademicAwardV1ID = False, returnAcademicAwardDate = False, returnAcademicAwardLevel = False, returnAcademicAwardLevelCode = False, returnAcademicAwardTitle = False, returnCreatedTime = False, returnElectronicTranscriptRunHistoryID = False, returnEntityID = False, returnHasErrors = False, returnKeyHash = False, returnModifiedTime = False, returnOrganizationName = False, returnSchoolYearID = False, returnStudentID = False, returnUpdateHash = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ElectronicTranscriptAcademicAwardV1/" + str(ElectronicTranscriptAcademicAwardV1ID), verb = "get", return_params_list = return_params)

def modifyElectronicTranscriptAcademicAwardV1(ElectronicTranscriptAcademicAwardV1ID, EntityID = 1, setElectronicTranscriptAcademicAwardV1ID = None, setAcademicAwardDate = None, setAcademicAwardLevel = None, setAcademicAwardLevelCode = None, setAcademicAwardTitle = None, setCreatedTime = None, setElectronicTranscriptRunHistoryID = None, setEntityID = None, setHasErrors = None, setKeyHash = None, setModifiedTime = None, setOrganizationName = None, setSchoolYearID = None, setStudentID = None, setUpdateHash = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnElectronicTranscriptAcademicAwardV1ID = False, returnAcademicAwardDate = False, returnAcademicAwardLevel = False, returnAcademicAwardLevelCode = False, returnAcademicAwardTitle = False, returnCreatedTime = False, returnElectronicTranscriptRunHistoryID = False, returnEntityID = False, returnHasErrors = False, returnKeyHash = False, returnModifiedTime = False, returnOrganizationName = False, returnSchoolYearID = False, returnStudentID = False, returnUpdateHash = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ElectronicTranscriptAcademicAwardV1/" + str(ElectronicTranscriptAcademicAwardV1ID), verb = "post", return_params_list = return_params, payload = payload_params)

def createElectronicTranscriptAcademicAwardV1(EntityID = 1, setElectronicTranscriptAcademicAwardV1ID = None, setAcademicAwardDate = None, setAcademicAwardLevel = None, setAcademicAwardLevelCode = None, setAcademicAwardTitle = None, setCreatedTime = None, setElectronicTranscriptRunHistoryID = None, setEntityID = None, setHasErrors = None, setKeyHash = None, setModifiedTime = None, setOrganizationName = None, setSchoolYearID = None, setStudentID = None, setUpdateHash = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnElectronicTranscriptAcademicAwardV1ID = False, returnAcademicAwardDate = False, returnAcademicAwardLevel = False, returnAcademicAwardLevelCode = False, returnAcademicAwardTitle = False, returnCreatedTime = False, returnElectronicTranscriptRunHistoryID = False, returnEntityID = False, returnHasErrors = False, returnKeyHash = False, returnModifiedTime = False, returnOrganizationName = False, returnSchoolYearID = False, returnStudentID = False, returnUpdateHash = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ElectronicTranscriptAcademicAwardV1/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteElectronicTranscriptAcademicAwardV1(ElectronicTranscriptAcademicAwardV1ID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ElectronicTranscriptAcademicAwardV1/" + str(ElectronicTranscriptAcademicAwardV1ID), verb = "delete")


def getEveryElectronicTranscriptAcademicHonorException(searchConditions = [], EntityID = 1, returnElectronicTranscriptAcademicHonorExceptionID = False, returnCreatedTime = False, returnElectronicTranscriptAcademicHonorV1ID = False, returnElectronicTranscriptRunHistoryID = False, returnEntityID = False, returnMessage = False, returnMessageType = False, returnMessageTypeCode = False, returnModifiedTime = False, returnProcessType = False, returnProcessTypeCode = False, returnRuleNumber = False, returnSchoolYearID = False, returnStudentID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every ElectronicTranscriptAcademicHonorException in the district.

    This function returns a dataframe of every ElectronicTranscriptAcademicHonorException in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ElectronicTranscriptAcademicHonorException/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ElectronicTranscriptAcademicHonorException/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getElectronicTranscriptAcademicHonorException(ElectronicTranscriptAcademicHonorExceptionID, EntityID = 1, returnElectronicTranscriptAcademicHonorExceptionID = False, returnCreatedTime = False, returnElectronicTranscriptAcademicHonorV1ID = False, returnElectronicTranscriptRunHistoryID = False, returnEntityID = False, returnMessage = False, returnMessageType = False, returnMessageTypeCode = False, returnModifiedTime = False, returnProcessType = False, returnProcessTypeCode = False, returnRuleNumber = False, returnSchoolYearID = False, returnStudentID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ElectronicTranscriptAcademicHonorException/" + str(ElectronicTranscriptAcademicHonorExceptionID), verb = "get", return_params_list = return_params)

def modifyElectronicTranscriptAcademicHonorException(ElectronicTranscriptAcademicHonorExceptionID, EntityID = 1, setElectronicTranscriptAcademicHonorExceptionID = None, setCreatedTime = None, setElectronicTranscriptAcademicHonorV1ID = None, setElectronicTranscriptRunHistoryID = None, setEntityID = None, setMessage = None, setMessageType = None, setMessageTypeCode = None, setModifiedTime = None, setProcessType = None, setProcessTypeCode = None, setRuleNumber = None, setSchoolYearID = None, setStudentID = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnElectronicTranscriptAcademicHonorExceptionID = False, returnCreatedTime = False, returnElectronicTranscriptAcademicHonorV1ID = False, returnElectronicTranscriptRunHistoryID = False, returnEntityID = False, returnMessage = False, returnMessageType = False, returnMessageTypeCode = False, returnModifiedTime = False, returnProcessType = False, returnProcessTypeCode = False, returnRuleNumber = False, returnSchoolYearID = False, returnStudentID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ElectronicTranscriptAcademicHonorException/" + str(ElectronicTranscriptAcademicHonorExceptionID), verb = "post", return_params_list = return_params, payload = payload_params)

def createElectronicTranscriptAcademicHonorException(EntityID = 1, setElectronicTranscriptAcademicHonorExceptionID = None, setCreatedTime = None, setElectronicTranscriptAcademicHonorV1ID = None, setElectronicTranscriptRunHistoryID = None, setEntityID = None, setMessage = None, setMessageType = None, setMessageTypeCode = None, setModifiedTime = None, setProcessType = None, setProcessTypeCode = None, setRuleNumber = None, setSchoolYearID = None, setStudentID = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnElectronicTranscriptAcademicHonorExceptionID = False, returnCreatedTime = False, returnElectronicTranscriptAcademicHonorV1ID = False, returnElectronicTranscriptRunHistoryID = False, returnEntityID = False, returnMessage = False, returnMessageType = False, returnMessageTypeCode = False, returnModifiedTime = False, returnProcessType = False, returnProcessTypeCode = False, returnRuleNumber = False, returnSchoolYearID = False, returnStudentID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ElectronicTranscriptAcademicHonorException/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteElectronicTranscriptAcademicHonorException(ElectronicTranscriptAcademicHonorExceptionID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ElectronicTranscriptAcademicHonorException/" + str(ElectronicTranscriptAcademicHonorExceptionID), verb = "delete")


def getEveryElectronicTranscriptAcademicHonorV1(searchConditions = [], EntityID = 1, returnElectronicTranscriptAcademicHonorV1ID = False, returnAcademicAwardLevel = False, returnAcademicAwardLevelCode = False, returnCreatedTime = False, returnElectronicTranscriptRunHistoryID = False, returnEntityID = False, returnHasErrors = False, returnHonorsTitle = False, returnKeyHash = False, returnModifiedTime = False, returnOrganizationName = False, returnSchoolYearID = False, returnStudentID = False, returnUpdateHash = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every ElectronicTranscriptAcademicHonorV1 in the district.

    This function returns a dataframe of every ElectronicTranscriptAcademicHonorV1 in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ElectronicTranscriptAcademicHonorV1/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ElectronicTranscriptAcademicHonorV1/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getElectronicTranscriptAcademicHonorV1(ElectronicTranscriptAcademicHonorV1ID, EntityID = 1, returnElectronicTranscriptAcademicHonorV1ID = False, returnAcademicAwardLevel = False, returnAcademicAwardLevelCode = False, returnCreatedTime = False, returnElectronicTranscriptRunHistoryID = False, returnEntityID = False, returnHasErrors = False, returnHonorsTitle = False, returnKeyHash = False, returnModifiedTime = False, returnOrganizationName = False, returnSchoolYearID = False, returnStudentID = False, returnUpdateHash = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ElectronicTranscriptAcademicHonorV1/" + str(ElectronicTranscriptAcademicHonorV1ID), verb = "get", return_params_list = return_params)

def modifyElectronicTranscriptAcademicHonorV1(ElectronicTranscriptAcademicHonorV1ID, EntityID = 1, setElectronicTranscriptAcademicHonorV1ID = None, setAcademicAwardLevel = None, setAcademicAwardLevelCode = None, setCreatedTime = None, setElectronicTranscriptRunHistoryID = None, setEntityID = None, setHasErrors = None, setHonorsTitle = None, setKeyHash = None, setModifiedTime = None, setOrganizationName = None, setSchoolYearID = None, setStudentID = None, setUpdateHash = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnElectronicTranscriptAcademicHonorV1ID = False, returnAcademicAwardLevel = False, returnAcademicAwardLevelCode = False, returnCreatedTime = False, returnElectronicTranscriptRunHistoryID = False, returnEntityID = False, returnHasErrors = False, returnHonorsTitle = False, returnKeyHash = False, returnModifiedTime = False, returnOrganizationName = False, returnSchoolYearID = False, returnStudentID = False, returnUpdateHash = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ElectronicTranscriptAcademicHonorV1/" + str(ElectronicTranscriptAcademicHonorV1ID), verb = "post", return_params_list = return_params, payload = payload_params)

def createElectronicTranscriptAcademicHonorV1(EntityID = 1, setElectronicTranscriptAcademicHonorV1ID = None, setAcademicAwardLevel = None, setAcademicAwardLevelCode = None, setCreatedTime = None, setElectronicTranscriptRunHistoryID = None, setEntityID = None, setHasErrors = None, setHonorsTitle = None, setKeyHash = None, setModifiedTime = None, setOrganizationName = None, setSchoolYearID = None, setStudentID = None, setUpdateHash = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnElectronicTranscriptAcademicHonorV1ID = False, returnAcademicAwardLevel = False, returnAcademicAwardLevelCode = False, returnCreatedTime = False, returnElectronicTranscriptRunHistoryID = False, returnEntityID = False, returnHasErrors = False, returnHonorsTitle = False, returnKeyHash = False, returnModifiedTime = False, returnOrganizationName = False, returnSchoolYearID = False, returnStudentID = False, returnUpdateHash = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ElectronicTranscriptAcademicHonorV1/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteElectronicTranscriptAcademicHonorV1(ElectronicTranscriptAcademicHonorV1ID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ElectronicTranscriptAcademicHonorV1/" + str(ElectronicTranscriptAcademicHonorV1ID), verb = "delete")


def getEveryElectronicTranscriptAcademicRecordException(searchConditions = [], EntityID = 1, returnElectronicTranscriptAcademicRecordExceptionID = False, returnCreatedTime = False, returnElectronicTranscriptAcademicRecordV1ID = False, returnElectronicTranscriptRunHistoryID = False, returnEntityID = False, returnMessage = False, returnMessageType = False, returnMessageTypeCode = False, returnModifiedTime = False, returnProcessType = False, returnProcessTypeCode = False, returnRuleNumber = False, returnSchoolYearID = False, returnStudentID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every ElectronicTranscriptAcademicRecordException in the district.

    This function returns a dataframe of every ElectronicTranscriptAcademicRecordException in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ElectronicTranscriptAcademicRecordException/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ElectronicTranscriptAcademicRecordException/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getElectronicTranscriptAcademicRecordException(ElectronicTranscriptAcademicRecordExceptionID, EntityID = 1, returnElectronicTranscriptAcademicRecordExceptionID = False, returnCreatedTime = False, returnElectronicTranscriptAcademicRecordV1ID = False, returnElectronicTranscriptRunHistoryID = False, returnEntityID = False, returnMessage = False, returnMessageType = False, returnMessageTypeCode = False, returnModifiedTime = False, returnProcessType = False, returnProcessTypeCode = False, returnRuleNumber = False, returnSchoolYearID = False, returnStudentID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ElectronicTranscriptAcademicRecordException/" + str(ElectronicTranscriptAcademicRecordExceptionID), verb = "get", return_params_list = return_params)

def modifyElectronicTranscriptAcademicRecordException(ElectronicTranscriptAcademicRecordExceptionID, EntityID = 1, setElectronicTranscriptAcademicRecordExceptionID = None, setCreatedTime = None, setElectronicTranscriptAcademicRecordV1ID = None, setElectronicTranscriptRunHistoryID = None, setEntityID = None, setMessage = None, setMessageType = None, setMessageTypeCode = None, setModifiedTime = None, setProcessType = None, setProcessTypeCode = None, setRuleNumber = None, setSchoolYearID = None, setStudentID = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnElectronicTranscriptAcademicRecordExceptionID = False, returnCreatedTime = False, returnElectronicTranscriptAcademicRecordV1ID = False, returnElectronicTranscriptRunHistoryID = False, returnEntityID = False, returnMessage = False, returnMessageType = False, returnMessageTypeCode = False, returnModifiedTime = False, returnProcessType = False, returnProcessTypeCode = False, returnRuleNumber = False, returnSchoolYearID = False, returnStudentID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ElectronicTranscriptAcademicRecordException/" + str(ElectronicTranscriptAcademicRecordExceptionID), verb = "post", return_params_list = return_params, payload = payload_params)

def createElectronicTranscriptAcademicRecordException(EntityID = 1, setElectronicTranscriptAcademicRecordExceptionID = None, setCreatedTime = None, setElectronicTranscriptAcademicRecordV1ID = None, setElectronicTranscriptRunHistoryID = None, setEntityID = None, setMessage = None, setMessageType = None, setMessageTypeCode = None, setModifiedTime = None, setProcessType = None, setProcessTypeCode = None, setRuleNumber = None, setSchoolYearID = None, setStudentID = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnElectronicTranscriptAcademicRecordExceptionID = False, returnCreatedTime = False, returnElectronicTranscriptAcademicRecordV1ID = False, returnElectronicTranscriptRunHistoryID = False, returnEntityID = False, returnMessage = False, returnMessageType = False, returnMessageTypeCode = False, returnModifiedTime = False, returnProcessType = False, returnProcessTypeCode = False, returnRuleNumber = False, returnSchoolYearID = False, returnStudentID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ElectronicTranscriptAcademicRecordException/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteElectronicTranscriptAcademicRecordException(ElectronicTranscriptAcademicRecordExceptionID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ElectronicTranscriptAcademicRecordException/" + str(ElectronicTranscriptAcademicRecordExceptionID), verb = "delete")


def getEveryElectronicTranscriptAcademicRecordV1(searchConditions = [], EntityID = 1, returnElectronicTranscriptAcademicRecordV1ID = False, returnCEEBACT = False, returnCohortGraduationYear = False, returnCreatedTime = False, returnElectronicTranscriptRunHistoryID = False, returnEntityID = False, returnHasErrors = False, returnHasSchoolOverride = False, returnKeyHash = False, returnModifiedTime = False, returnOrganizationName = False, returnSchoolLevel = False, returnSchoolLevelCode = False, returnSchoolOverride = False, returnSchoolOverrideCode = False, returnSchoolYearID = False, returnStudentID = False, returnStudentLevel = False, returnStudentLevelCode = False, returnUpdateHash = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every ElectronicTranscriptAcademicRecordV1 in the district.

    This function returns a dataframe of every ElectronicTranscriptAcademicRecordV1 in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ElectronicTranscriptAcademicRecordV1/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ElectronicTranscriptAcademicRecordV1/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getElectronicTranscriptAcademicRecordV1(ElectronicTranscriptAcademicRecordV1ID, EntityID = 1, returnElectronicTranscriptAcademicRecordV1ID = False, returnCEEBACT = False, returnCohortGraduationYear = False, returnCreatedTime = False, returnElectronicTranscriptRunHistoryID = False, returnEntityID = False, returnHasErrors = False, returnHasSchoolOverride = False, returnKeyHash = False, returnModifiedTime = False, returnOrganizationName = False, returnSchoolLevel = False, returnSchoolLevelCode = False, returnSchoolOverride = False, returnSchoolOverrideCode = False, returnSchoolYearID = False, returnStudentID = False, returnStudentLevel = False, returnStudentLevelCode = False, returnUpdateHash = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ElectronicTranscriptAcademicRecordV1/" + str(ElectronicTranscriptAcademicRecordV1ID), verb = "get", return_params_list = return_params)

def modifyElectronicTranscriptAcademicRecordV1(ElectronicTranscriptAcademicRecordV1ID, EntityID = 1, setElectronicTranscriptAcademicRecordV1ID = None, setCEEBACT = None, setCohortGraduationYear = None, setCreatedTime = None, setElectronicTranscriptRunHistoryID = None, setEntityID = None, setHasErrors = None, setHasSchoolOverride = None, setKeyHash = None, setModifiedTime = None, setOrganizationName = None, setSchoolLevel = None, setSchoolLevelCode = None, setSchoolOverride = None, setSchoolOverrideCode = None, setSchoolYearID = None, setStudentID = None, setStudentLevel = None, setStudentLevelCode = None, setUpdateHash = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnElectronicTranscriptAcademicRecordV1ID = False, returnCEEBACT = False, returnCohortGraduationYear = False, returnCreatedTime = False, returnElectronicTranscriptRunHistoryID = False, returnEntityID = False, returnHasErrors = False, returnHasSchoolOverride = False, returnKeyHash = False, returnModifiedTime = False, returnOrganizationName = False, returnSchoolLevel = False, returnSchoolLevelCode = False, returnSchoolOverride = False, returnSchoolOverrideCode = False, returnSchoolYearID = False, returnStudentID = False, returnStudentLevel = False, returnStudentLevelCode = False, returnUpdateHash = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ElectronicTranscriptAcademicRecordV1/" + str(ElectronicTranscriptAcademicRecordV1ID), verb = "post", return_params_list = return_params, payload = payload_params)

def createElectronicTranscriptAcademicRecordV1(EntityID = 1, setElectronicTranscriptAcademicRecordV1ID = None, setCEEBACT = None, setCohortGraduationYear = None, setCreatedTime = None, setElectronicTranscriptRunHistoryID = None, setEntityID = None, setHasErrors = None, setHasSchoolOverride = None, setKeyHash = None, setModifiedTime = None, setOrganizationName = None, setSchoolLevel = None, setSchoolLevelCode = None, setSchoolOverride = None, setSchoolOverrideCode = None, setSchoolYearID = None, setStudentID = None, setStudentLevel = None, setStudentLevelCode = None, setUpdateHash = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnElectronicTranscriptAcademicRecordV1ID = False, returnCEEBACT = False, returnCohortGraduationYear = False, returnCreatedTime = False, returnElectronicTranscriptRunHistoryID = False, returnEntityID = False, returnHasErrors = False, returnHasSchoolOverride = False, returnKeyHash = False, returnModifiedTime = False, returnOrganizationName = False, returnSchoolLevel = False, returnSchoolLevelCode = False, returnSchoolOverride = False, returnSchoolOverrideCode = False, returnSchoolYearID = False, returnStudentID = False, returnStudentLevel = False, returnStudentLevelCode = False, returnUpdateHash = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ElectronicTranscriptAcademicRecordV1/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteElectronicTranscriptAcademicRecordV1(ElectronicTranscriptAcademicRecordV1ID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ElectronicTranscriptAcademicRecordV1/" + str(ElectronicTranscriptAcademicRecordV1ID), verb = "delete")


def getEveryElectronicTranscriptAcademicSessionException(searchConditions = [], EntityID = 1, returnElectronicTranscriptAcademicSessionExceptionID = False, returnCreatedTime = False, returnElectronicTranscriptAcademicSessionV1ID = False, returnElectronicTranscriptRunHistoryID = False, returnEntityID = False, returnMessage = False, returnMessageType = False, returnMessageTypeCode = False, returnModifiedTime = False, returnProcessType = False, returnProcessTypeCode = False, returnRuleNumber = False, returnSchoolYearID = False, returnStudentID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every ElectronicTranscriptAcademicSessionException in the district.

    This function returns a dataframe of every ElectronicTranscriptAcademicSessionException in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ElectronicTranscriptAcademicSessionException/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ElectronicTranscriptAcademicSessionException/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getElectronicTranscriptAcademicSessionException(ElectronicTranscriptAcademicSessionExceptionID, EntityID = 1, returnElectronicTranscriptAcademicSessionExceptionID = False, returnCreatedTime = False, returnElectronicTranscriptAcademicSessionV1ID = False, returnElectronicTranscriptRunHistoryID = False, returnEntityID = False, returnMessage = False, returnMessageType = False, returnMessageTypeCode = False, returnModifiedTime = False, returnProcessType = False, returnProcessTypeCode = False, returnRuleNumber = False, returnSchoolYearID = False, returnStudentID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ElectronicTranscriptAcademicSessionException/" + str(ElectronicTranscriptAcademicSessionExceptionID), verb = "get", return_params_list = return_params)

def modifyElectronicTranscriptAcademicSessionException(ElectronicTranscriptAcademicSessionExceptionID, EntityID = 1, setElectronicTranscriptAcademicSessionExceptionID = None, setCreatedTime = None, setElectronicTranscriptAcademicSessionV1ID = None, setElectronicTranscriptRunHistoryID = None, setEntityID = None, setMessage = None, setMessageType = None, setMessageTypeCode = None, setModifiedTime = None, setProcessType = None, setProcessTypeCode = None, setRuleNumber = None, setSchoolYearID = None, setStudentID = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnElectronicTranscriptAcademicSessionExceptionID = False, returnCreatedTime = False, returnElectronicTranscriptAcademicSessionV1ID = False, returnElectronicTranscriptRunHistoryID = False, returnEntityID = False, returnMessage = False, returnMessageType = False, returnMessageTypeCode = False, returnModifiedTime = False, returnProcessType = False, returnProcessTypeCode = False, returnRuleNumber = False, returnSchoolYearID = False, returnStudentID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ElectronicTranscriptAcademicSessionException/" + str(ElectronicTranscriptAcademicSessionExceptionID), verb = "post", return_params_list = return_params, payload = payload_params)

def createElectronicTranscriptAcademicSessionException(EntityID = 1, setElectronicTranscriptAcademicSessionExceptionID = None, setCreatedTime = None, setElectronicTranscriptAcademicSessionV1ID = None, setElectronicTranscriptRunHistoryID = None, setEntityID = None, setMessage = None, setMessageType = None, setMessageTypeCode = None, setModifiedTime = None, setProcessType = None, setProcessTypeCode = None, setRuleNumber = None, setSchoolYearID = None, setStudentID = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnElectronicTranscriptAcademicSessionExceptionID = False, returnCreatedTime = False, returnElectronicTranscriptAcademicSessionV1ID = False, returnElectronicTranscriptRunHistoryID = False, returnEntityID = False, returnMessage = False, returnMessageType = False, returnMessageTypeCode = False, returnModifiedTime = False, returnProcessType = False, returnProcessTypeCode = False, returnRuleNumber = False, returnSchoolYearID = False, returnStudentID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ElectronicTranscriptAcademicSessionException/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteElectronicTranscriptAcademicSessionException(ElectronicTranscriptAcademicSessionExceptionID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ElectronicTranscriptAcademicSessionException/" + str(ElectronicTranscriptAcademicSessionExceptionID), verb = "delete")


def getEveryElectronicTranscriptAcademicSessionV1(searchConditions = [], EntityID = 1, returnElectronicTranscriptAcademicSessionV1ID = False, returnCreatedTime = False, returnDaysAbsent = False, returnDaysPresent = False, returnElectronicTranscriptRunHistoryID = False, returnEntityID = False, returnEntryWithdrawalID = False, returnHasErrors = False, returnKeyHash = False, returnModifiedTime = False, returnOrganizationName = False, returnSchoolYearID = False, returnSectionLengthID = False, returnSessionDesignator = False, returnSessionName = False, returnSessionSchoolYear = False, returnSessionType = False, returnSessionTypeCode = False, returnStudentID = False, returnStudentLevel = False, returnStudentLevelCode = False, returnUpdateHash = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every ElectronicTranscriptAcademicSessionV1 in the district.

    This function returns a dataframe of every ElectronicTranscriptAcademicSessionV1 in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ElectronicTranscriptAcademicSessionV1/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ElectronicTranscriptAcademicSessionV1/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getElectronicTranscriptAcademicSessionV1(ElectronicTranscriptAcademicSessionV1ID, EntityID = 1, returnElectronicTranscriptAcademicSessionV1ID = False, returnCreatedTime = False, returnDaysAbsent = False, returnDaysPresent = False, returnElectronicTranscriptRunHistoryID = False, returnEntityID = False, returnEntryWithdrawalID = False, returnHasErrors = False, returnKeyHash = False, returnModifiedTime = False, returnOrganizationName = False, returnSchoolYearID = False, returnSectionLengthID = False, returnSessionDesignator = False, returnSessionName = False, returnSessionSchoolYear = False, returnSessionType = False, returnSessionTypeCode = False, returnStudentID = False, returnStudentLevel = False, returnStudentLevelCode = False, returnUpdateHash = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ElectronicTranscriptAcademicSessionV1/" + str(ElectronicTranscriptAcademicSessionV1ID), verb = "get", return_params_list = return_params)

def modifyElectronicTranscriptAcademicSessionV1(ElectronicTranscriptAcademicSessionV1ID, EntityID = 1, setElectronicTranscriptAcademicSessionV1ID = None, setCreatedTime = None, setDaysAbsent = None, setDaysPresent = None, setElectronicTranscriptRunHistoryID = None, setEntityID = None, setEntryWithdrawalID = None, setHasErrors = None, setKeyHash = None, setModifiedTime = None, setOrganizationName = None, setSchoolYearID = None, setSectionLengthID = None, setSessionDesignator = None, setSessionName = None, setSessionSchoolYear = None, setSessionType = None, setSessionTypeCode = None, setStudentID = None, setStudentLevel = None, setStudentLevelCode = None, setUpdateHash = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnElectronicTranscriptAcademicSessionV1ID = False, returnCreatedTime = False, returnDaysAbsent = False, returnDaysPresent = False, returnElectronicTranscriptRunHistoryID = False, returnEntityID = False, returnEntryWithdrawalID = False, returnHasErrors = False, returnKeyHash = False, returnModifiedTime = False, returnOrganizationName = False, returnSchoolYearID = False, returnSectionLengthID = False, returnSessionDesignator = False, returnSessionName = False, returnSessionSchoolYear = False, returnSessionType = False, returnSessionTypeCode = False, returnStudentID = False, returnStudentLevel = False, returnStudentLevelCode = False, returnUpdateHash = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ElectronicTranscriptAcademicSessionV1/" + str(ElectronicTranscriptAcademicSessionV1ID), verb = "post", return_params_list = return_params, payload = payload_params)

def createElectronicTranscriptAcademicSessionV1(EntityID = 1, setElectronicTranscriptAcademicSessionV1ID = None, setCreatedTime = None, setDaysAbsent = None, setDaysPresent = None, setElectronicTranscriptRunHistoryID = None, setEntityID = None, setEntryWithdrawalID = None, setHasErrors = None, setKeyHash = None, setModifiedTime = None, setOrganizationName = None, setSchoolYearID = None, setSectionLengthID = None, setSessionDesignator = None, setSessionName = None, setSessionSchoolYear = None, setSessionType = None, setSessionTypeCode = None, setStudentID = None, setStudentLevel = None, setStudentLevelCode = None, setUpdateHash = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnElectronicTranscriptAcademicSessionV1ID = False, returnCreatedTime = False, returnDaysAbsent = False, returnDaysPresent = False, returnElectronicTranscriptRunHistoryID = False, returnEntityID = False, returnEntryWithdrawalID = False, returnHasErrors = False, returnKeyHash = False, returnModifiedTime = False, returnOrganizationName = False, returnSchoolYearID = False, returnSectionLengthID = False, returnSessionDesignator = False, returnSessionName = False, returnSessionSchoolYear = False, returnSessionType = False, returnSessionTypeCode = False, returnStudentID = False, returnStudentLevel = False, returnStudentLevelCode = False, returnUpdateHash = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ElectronicTranscriptAcademicSessionV1/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteElectronicTranscriptAcademicSessionV1(ElectronicTranscriptAcademicSessionV1ID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ElectronicTranscriptAcademicSessionV1/" + str(ElectronicTranscriptAcademicSessionV1ID), verb = "delete")


def getEveryElectronicTranscriptAcademicSummaryException(searchConditions = [], EntityID = 1, returnElectronicTranscriptAcademicSummaryExceptionID = False, returnCreatedTime = False, returnElectronicTranscriptAcademicSummaryV1ID = False, returnElectronicTranscriptRunHistoryID = False, returnEntityID = False, returnMessage = False, returnMessageType = False, returnMessageTypeCode = False, returnModifiedTime = False, returnProcessType = False, returnProcessTypeCode = False, returnRuleNumber = False, returnSchoolYearID = False, returnStudentID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every ElectronicTranscriptAcademicSummaryException in the district.

    This function returns a dataframe of every ElectronicTranscriptAcademicSummaryException in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ElectronicTranscriptAcademicSummaryException/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ElectronicTranscriptAcademicSummaryException/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getElectronicTranscriptAcademicSummaryException(ElectronicTranscriptAcademicSummaryExceptionID, EntityID = 1, returnElectronicTranscriptAcademicSummaryExceptionID = False, returnCreatedTime = False, returnElectronicTranscriptAcademicSummaryV1ID = False, returnElectronicTranscriptRunHistoryID = False, returnEntityID = False, returnMessage = False, returnMessageType = False, returnMessageTypeCode = False, returnModifiedTime = False, returnProcessType = False, returnProcessTypeCode = False, returnRuleNumber = False, returnSchoolYearID = False, returnStudentID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ElectronicTranscriptAcademicSummaryException/" + str(ElectronicTranscriptAcademicSummaryExceptionID), verb = "get", return_params_list = return_params)

def modifyElectronicTranscriptAcademicSummaryException(ElectronicTranscriptAcademicSummaryExceptionID, EntityID = 1, setElectronicTranscriptAcademicSummaryExceptionID = None, setCreatedTime = None, setElectronicTranscriptAcademicSummaryV1ID = None, setElectronicTranscriptRunHistoryID = None, setEntityID = None, setMessage = None, setMessageType = None, setMessageTypeCode = None, setModifiedTime = None, setProcessType = None, setProcessTypeCode = None, setRuleNumber = None, setSchoolYearID = None, setStudentID = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnElectronicTranscriptAcademicSummaryExceptionID = False, returnCreatedTime = False, returnElectronicTranscriptAcademicSummaryV1ID = False, returnElectronicTranscriptRunHistoryID = False, returnEntityID = False, returnMessage = False, returnMessageType = False, returnMessageTypeCode = False, returnModifiedTime = False, returnProcessType = False, returnProcessTypeCode = False, returnRuleNumber = False, returnSchoolYearID = False, returnStudentID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ElectronicTranscriptAcademicSummaryException/" + str(ElectronicTranscriptAcademicSummaryExceptionID), verb = "post", return_params_list = return_params, payload = payload_params)

def createElectronicTranscriptAcademicSummaryException(EntityID = 1, setElectronicTranscriptAcademicSummaryExceptionID = None, setCreatedTime = None, setElectronicTranscriptAcademicSummaryV1ID = None, setElectronicTranscriptRunHistoryID = None, setEntityID = None, setMessage = None, setMessageType = None, setMessageTypeCode = None, setModifiedTime = None, setProcessType = None, setProcessTypeCode = None, setRuleNumber = None, setSchoolYearID = None, setStudentID = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnElectronicTranscriptAcademicSummaryExceptionID = False, returnCreatedTime = False, returnElectronicTranscriptAcademicSummaryV1ID = False, returnElectronicTranscriptRunHistoryID = False, returnEntityID = False, returnMessage = False, returnMessageType = False, returnMessageTypeCode = False, returnModifiedTime = False, returnProcessType = False, returnProcessTypeCode = False, returnRuleNumber = False, returnSchoolYearID = False, returnStudentID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ElectronicTranscriptAcademicSummaryException/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteElectronicTranscriptAcademicSummaryException(ElectronicTranscriptAcademicSummaryExceptionID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ElectronicTranscriptAcademicSummaryException/" + str(ElectronicTranscriptAcademicSummaryExceptionID), verb = "delete")


def getEveryElectronicTranscriptAcademicSummaryV1(searchConditions = [], EntityID = 1, returnElectronicTranscriptAcademicSummaryV1ID = False, returnAcademicSummaryType = False, returnAcademicSummaryTypeCode = False, returnClassRank = False, returnClassSize = False, returnCreatedTime = False, returnCreditHoursEarned = False, returnCreditHoursForGPA = False, returnCreditHoursRequired = False, returnElectronicTranscriptRunHistoryID = False, returnEntityID = False, returnEntryDate = False, returnEntryWithdrawalID = False, returnExitDate = False, returnGPARangeMaximum = False, returnGradePointAverage = False, returnHasErrors = False, returnKeyHash = False, returnModifiedTime = False, returnOrganizationName = False, returnSchoolYearID = False, returnStudentGPABucketGroupID = False, returnStudentID = False, returnStudentPlanID = False, returnStudentRankID = False, returnTotalQualityPoints = False, returnUpdateHash = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every ElectronicTranscriptAcademicSummaryV1 in the district.

    This function returns a dataframe of every ElectronicTranscriptAcademicSummaryV1 in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ElectronicTranscriptAcademicSummaryV1/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ElectronicTranscriptAcademicSummaryV1/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getElectronicTranscriptAcademicSummaryV1(ElectronicTranscriptAcademicSummaryV1ID, EntityID = 1, returnElectronicTranscriptAcademicSummaryV1ID = False, returnAcademicSummaryType = False, returnAcademicSummaryTypeCode = False, returnClassRank = False, returnClassSize = False, returnCreatedTime = False, returnCreditHoursEarned = False, returnCreditHoursForGPA = False, returnCreditHoursRequired = False, returnElectronicTranscriptRunHistoryID = False, returnEntityID = False, returnEntryDate = False, returnEntryWithdrawalID = False, returnExitDate = False, returnGPARangeMaximum = False, returnGradePointAverage = False, returnHasErrors = False, returnKeyHash = False, returnModifiedTime = False, returnOrganizationName = False, returnSchoolYearID = False, returnStudentGPABucketGroupID = False, returnStudentID = False, returnStudentPlanID = False, returnStudentRankID = False, returnTotalQualityPoints = False, returnUpdateHash = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ElectronicTranscriptAcademicSummaryV1/" + str(ElectronicTranscriptAcademicSummaryV1ID), verb = "get", return_params_list = return_params)

def modifyElectronicTranscriptAcademicSummaryV1(ElectronicTranscriptAcademicSummaryV1ID, EntityID = 1, setElectronicTranscriptAcademicSummaryV1ID = None, setAcademicSummaryType = None, setAcademicSummaryTypeCode = None, setClassRank = None, setClassSize = None, setCreatedTime = None, setCreditHoursEarned = None, setCreditHoursForGPA = None, setCreditHoursRequired = None, setElectronicTranscriptRunHistoryID = None, setEntityID = None, setEntryDate = None, setEntryWithdrawalID = None, setExitDate = None, setGPARangeMaximum = None, setGradePointAverage = None, setHasErrors = None, setKeyHash = None, setModifiedTime = None, setOrganizationName = None, setSchoolYearID = None, setStudentGPABucketGroupID = None, setStudentID = None, setStudentPlanID = None, setStudentRankID = None, setTotalQualityPoints = None, setUpdateHash = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnElectronicTranscriptAcademicSummaryV1ID = False, returnAcademicSummaryType = False, returnAcademicSummaryTypeCode = False, returnClassRank = False, returnClassSize = False, returnCreatedTime = False, returnCreditHoursEarned = False, returnCreditHoursForGPA = False, returnCreditHoursRequired = False, returnElectronicTranscriptRunHistoryID = False, returnEntityID = False, returnEntryDate = False, returnEntryWithdrawalID = False, returnExitDate = False, returnGPARangeMaximum = False, returnGradePointAverage = False, returnHasErrors = False, returnKeyHash = False, returnModifiedTime = False, returnOrganizationName = False, returnSchoolYearID = False, returnStudentGPABucketGroupID = False, returnStudentID = False, returnStudentPlanID = False, returnStudentRankID = False, returnTotalQualityPoints = False, returnUpdateHash = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ElectronicTranscriptAcademicSummaryV1/" + str(ElectronicTranscriptAcademicSummaryV1ID), verb = "post", return_params_list = return_params, payload = payload_params)

def createElectronicTranscriptAcademicSummaryV1(EntityID = 1, setElectronicTranscriptAcademicSummaryV1ID = None, setAcademicSummaryType = None, setAcademicSummaryTypeCode = None, setClassRank = None, setClassSize = None, setCreatedTime = None, setCreditHoursEarned = None, setCreditHoursForGPA = None, setCreditHoursRequired = None, setElectronicTranscriptRunHistoryID = None, setEntityID = None, setEntryDate = None, setEntryWithdrawalID = None, setExitDate = None, setGPARangeMaximum = None, setGradePointAverage = None, setHasErrors = None, setKeyHash = None, setModifiedTime = None, setOrganizationName = None, setSchoolYearID = None, setStudentGPABucketGroupID = None, setStudentID = None, setStudentPlanID = None, setStudentRankID = None, setTotalQualityPoints = None, setUpdateHash = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnElectronicTranscriptAcademicSummaryV1ID = False, returnAcademicSummaryType = False, returnAcademicSummaryTypeCode = False, returnClassRank = False, returnClassSize = False, returnCreatedTime = False, returnCreditHoursEarned = False, returnCreditHoursForGPA = False, returnCreditHoursRequired = False, returnElectronicTranscriptRunHistoryID = False, returnEntityID = False, returnEntryDate = False, returnEntryWithdrawalID = False, returnExitDate = False, returnGPARangeMaximum = False, returnGradePointAverage = False, returnHasErrors = False, returnKeyHash = False, returnModifiedTime = False, returnOrganizationName = False, returnSchoolYearID = False, returnStudentGPABucketGroupID = False, returnStudentID = False, returnStudentPlanID = False, returnStudentRankID = False, returnTotalQualityPoints = False, returnUpdateHash = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ElectronicTranscriptAcademicSummaryV1/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteElectronicTranscriptAcademicSummaryV1(ElectronicTranscriptAcademicSummaryV1ID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ElectronicTranscriptAcademicSummaryV1/" + str(ElectronicTranscriptAcademicSummaryV1ID), verb = "delete")


def getEveryElectronicTranscriptAddressException(searchConditions = [], EntityID = 1, returnElectronicTranscriptAddressExceptionID = False, returnCreatedTime = False, returnElectronicTranscriptAddressV1ID = False, returnElectronicTranscriptRunHistoryID = False, returnEntityID = False, returnMessage = False, returnMessageType = False, returnMessageTypeCode = False, returnModifiedTime = False, returnProcessType = False, returnProcessTypeCode = False, returnRuleNumber = False, returnSchoolYearID = False, returnStudentID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every ElectronicTranscriptAddressException in the district.

    This function returns a dataframe of every ElectronicTranscriptAddressException in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ElectronicTranscriptAddressException/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ElectronicTranscriptAddressException/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getElectronicTranscriptAddressException(ElectronicTranscriptAddressExceptionID, EntityID = 1, returnElectronicTranscriptAddressExceptionID = False, returnCreatedTime = False, returnElectronicTranscriptAddressV1ID = False, returnElectronicTranscriptRunHistoryID = False, returnEntityID = False, returnMessage = False, returnMessageType = False, returnMessageTypeCode = False, returnModifiedTime = False, returnProcessType = False, returnProcessTypeCode = False, returnRuleNumber = False, returnSchoolYearID = False, returnStudentID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ElectronicTranscriptAddressException/" + str(ElectronicTranscriptAddressExceptionID), verb = "get", return_params_list = return_params)

def modifyElectronicTranscriptAddressException(ElectronicTranscriptAddressExceptionID, EntityID = 1, setElectronicTranscriptAddressExceptionID = None, setCreatedTime = None, setElectronicTranscriptAddressV1ID = None, setElectronicTranscriptRunHistoryID = None, setEntityID = None, setMessage = None, setMessageType = None, setMessageTypeCode = None, setModifiedTime = None, setProcessType = None, setProcessTypeCode = None, setRuleNumber = None, setSchoolYearID = None, setStudentID = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnElectronicTranscriptAddressExceptionID = False, returnCreatedTime = False, returnElectronicTranscriptAddressV1ID = False, returnElectronicTranscriptRunHistoryID = False, returnEntityID = False, returnMessage = False, returnMessageType = False, returnMessageTypeCode = False, returnModifiedTime = False, returnProcessType = False, returnProcessTypeCode = False, returnRuleNumber = False, returnSchoolYearID = False, returnStudentID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ElectronicTranscriptAddressException/" + str(ElectronicTranscriptAddressExceptionID), verb = "post", return_params_list = return_params, payload = payload_params)

def createElectronicTranscriptAddressException(EntityID = 1, setElectronicTranscriptAddressExceptionID = None, setCreatedTime = None, setElectronicTranscriptAddressV1ID = None, setElectronicTranscriptRunHistoryID = None, setEntityID = None, setMessage = None, setMessageType = None, setMessageTypeCode = None, setModifiedTime = None, setProcessType = None, setProcessTypeCode = None, setRuleNumber = None, setSchoolYearID = None, setStudentID = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnElectronicTranscriptAddressExceptionID = False, returnCreatedTime = False, returnElectronicTranscriptAddressV1ID = False, returnElectronicTranscriptRunHistoryID = False, returnEntityID = False, returnMessage = False, returnMessageType = False, returnMessageTypeCode = False, returnModifiedTime = False, returnProcessType = False, returnProcessTypeCode = False, returnRuleNumber = False, returnSchoolYearID = False, returnStudentID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ElectronicTranscriptAddressException/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteElectronicTranscriptAddressException(ElectronicTranscriptAddressExceptionID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ElectronicTranscriptAddressException/" + str(ElectronicTranscriptAddressExceptionID), verb = "delete")


def getEveryElectronicTranscriptAddressV1(searchConditions = [], EntityID = 1, returnElectronicTranscriptAddressV1ID = False, returnAddressID = False, returnAddressLine1 = False, returnAddressLine2 = False, returnAddressLine3 = False, returnCity = False, returnCreatedTime = False, returnElectronicTranscriptRunHistoryID = False, returnEntityID = False, returnHasErrors = False, returnKeyHash = False, returnModifiedTime = False, returnPostalCode = False, returnSchoolYearID = False, returnStateProvinceCode = False, returnStudentID = False, returnUpdateHash = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every ElectronicTranscriptAddressV1 in the district.

    This function returns a dataframe of every ElectronicTranscriptAddressV1 in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ElectronicTranscriptAddressV1/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ElectronicTranscriptAddressV1/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getElectronicTranscriptAddressV1(ElectronicTranscriptAddressV1ID, EntityID = 1, returnElectronicTranscriptAddressV1ID = False, returnAddressID = False, returnAddressLine1 = False, returnAddressLine2 = False, returnAddressLine3 = False, returnCity = False, returnCreatedTime = False, returnElectronicTranscriptRunHistoryID = False, returnEntityID = False, returnHasErrors = False, returnKeyHash = False, returnModifiedTime = False, returnPostalCode = False, returnSchoolYearID = False, returnStateProvinceCode = False, returnStudentID = False, returnUpdateHash = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ElectronicTranscriptAddressV1/" + str(ElectronicTranscriptAddressV1ID), verb = "get", return_params_list = return_params)

def modifyElectronicTranscriptAddressV1(ElectronicTranscriptAddressV1ID, EntityID = 1, setElectronicTranscriptAddressV1ID = None, setAddressID = None, setAddressLine1 = None, setAddressLine2 = None, setAddressLine3 = None, setCity = None, setCreatedTime = None, setElectronicTranscriptRunHistoryID = None, setEntityID = None, setHasErrors = None, setKeyHash = None, setModifiedTime = None, setPostalCode = None, setSchoolYearID = None, setStateProvinceCode = None, setStudentID = None, setUpdateHash = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnElectronicTranscriptAddressV1ID = False, returnAddressID = False, returnAddressLine1 = False, returnAddressLine2 = False, returnAddressLine3 = False, returnCity = False, returnCreatedTime = False, returnElectronicTranscriptRunHistoryID = False, returnEntityID = False, returnHasErrors = False, returnKeyHash = False, returnModifiedTime = False, returnPostalCode = False, returnSchoolYearID = False, returnStateProvinceCode = False, returnStudentID = False, returnUpdateHash = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ElectronicTranscriptAddressV1/" + str(ElectronicTranscriptAddressV1ID), verb = "post", return_params_list = return_params, payload = payload_params)

def createElectronicTranscriptAddressV1(EntityID = 1, setElectronicTranscriptAddressV1ID = None, setAddressID = None, setAddressLine1 = None, setAddressLine2 = None, setAddressLine3 = None, setCity = None, setCreatedTime = None, setElectronicTranscriptRunHistoryID = None, setEntityID = None, setHasErrors = None, setKeyHash = None, setModifiedTime = None, setPostalCode = None, setSchoolYearID = None, setStateProvinceCode = None, setStudentID = None, setUpdateHash = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnElectronicTranscriptAddressV1ID = False, returnAddressID = False, returnAddressLine1 = False, returnAddressLine2 = False, returnAddressLine3 = False, returnCity = False, returnCreatedTime = False, returnElectronicTranscriptRunHistoryID = False, returnEntityID = False, returnHasErrors = False, returnKeyHash = False, returnModifiedTime = False, returnPostalCode = False, returnSchoolYearID = False, returnStateProvinceCode = False, returnStudentID = False, returnUpdateHash = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ElectronicTranscriptAddressV1/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteElectronicTranscriptAddressV1(ElectronicTranscriptAddressV1ID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ElectronicTranscriptAddressV1/" + str(ElectronicTranscriptAddressV1ID), verb = "delete")


def getEveryElectronicTranscriptAgencyIdentifierException(searchConditions = [], EntityID = 1, returnElectronicTranscriptAgencyIdentifierExceptionID = False, returnCreatedTime = False, returnElectronicTranscriptAgencyIdentifierV1ID = False, returnElectronicTranscriptRunHistoryID = False, returnEntityID = False, returnMessage = False, returnMessageType = False, returnMessageTypeCode = False, returnModifiedTime = False, returnProcessType = False, returnProcessTypeCode = False, returnRuleNumber = False, returnSchoolYearID = False, returnStudentID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every ElectronicTranscriptAgencyIdentifierException in the district.

    This function returns a dataframe of every ElectronicTranscriptAgencyIdentifierException in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ElectronicTranscriptAgencyIdentifierException/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ElectronicTranscriptAgencyIdentifierException/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getElectronicTranscriptAgencyIdentifierException(ElectronicTranscriptAgencyIdentifierExceptionID, EntityID = 1, returnElectronicTranscriptAgencyIdentifierExceptionID = False, returnCreatedTime = False, returnElectronicTranscriptAgencyIdentifierV1ID = False, returnElectronicTranscriptRunHistoryID = False, returnEntityID = False, returnMessage = False, returnMessageType = False, returnMessageTypeCode = False, returnModifiedTime = False, returnProcessType = False, returnProcessTypeCode = False, returnRuleNumber = False, returnSchoolYearID = False, returnStudentID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ElectronicTranscriptAgencyIdentifierException/" + str(ElectronicTranscriptAgencyIdentifierExceptionID), verb = "get", return_params_list = return_params)

def modifyElectronicTranscriptAgencyIdentifierException(ElectronicTranscriptAgencyIdentifierExceptionID, EntityID = 1, setElectronicTranscriptAgencyIdentifierExceptionID = None, setCreatedTime = None, setElectronicTranscriptAgencyIdentifierV1ID = None, setElectronicTranscriptRunHistoryID = None, setEntityID = None, setMessage = None, setMessageType = None, setMessageTypeCode = None, setModifiedTime = None, setProcessType = None, setProcessTypeCode = None, setRuleNumber = None, setSchoolYearID = None, setStudentID = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnElectronicTranscriptAgencyIdentifierExceptionID = False, returnCreatedTime = False, returnElectronicTranscriptAgencyIdentifierV1ID = False, returnElectronicTranscriptRunHistoryID = False, returnEntityID = False, returnMessage = False, returnMessageType = False, returnMessageTypeCode = False, returnModifiedTime = False, returnProcessType = False, returnProcessTypeCode = False, returnRuleNumber = False, returnSchoolYearID = False, returnStudentID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ElectronicTranscriptAgencyIdentifierException/" + str(ElectronicTranscriptAgencyIdentifierExceptionID), verb = "post", return_params_list = return_params, payload = payload_params)

def createElectronicTranscriptAgencyIdentifierException(EntityID = 1, setElectronicTranscriptAgencyIdentifierExceptionID = None, setCreatedTime = None, setElectronicTranscriptAgencyIdentifierV1ID = None, setElectronicTranscriptRunHistoryID = None, setEntityID = None, setMessage = None, setMessageType = None, setMessageTypeCode = None, setModifiedTime = None, setProcessType = None, setProcessTypeCode = None, setRuleNumber = None, setSchoolYearID = None, setStudentID = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnElectronicTranscriptAgencyIdentifierExceptionID = False, returnCreatedTime = False, returnElectronicTranscriptAgencyIdentifierV1ID = False, returnElectronicTranscriptRunHistoryID = False, returnEntityID = False, returnMessage = False, returnMessageType = False, returnMessageTypeCode = False, returnModifiedTime = False, returnProcessType = False, returnProcessTypeCode = False, returnRuleNumber = False, returnSchoolYearID = False, returnStudentID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ElectronicTranscriptAgencyIdentifierException/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteElectronicTranscriptAgencyIdentifierException(ElectronicTranscriptAgencyIdentifierExceptionID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ElectronicTranscriptAgencyIdentifierException/" + str(ElectronicTranscriptAgencyIdentifierExceptionID), verb = "delete")


def getEveryElectronicTranscriptAgencyIdentifierV1(searchConditions = [], EntityID = 1, returnElectronicTranscriptAgencyIdentifierV1ID = False, returnAgency = False, returnAgencyAssignedID = False, returnAgencyCode = False, returnAgencyName = False, returnCreatedTime = False, returnElectronicTranscriptRunHistoryID = False, returnEntityID = False, returnHasErrors = False, returnKeyHash = False, returnModifiedTime = False, returnSchoolYearID = False, returnStudentID = False, returnUpdateHash = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every ElectronicTranscriptAgencyIdentifierV1 in the district.

    This function returns a dataframe of every ElectronicTranscriptAgencyIdentifierV1 in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ElectronicTranscriptAgencyIdentifierV1/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ElectronicTranscriptAgencyIdentifierV1/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getElectronicTranscriptAgencyIdentifierV1(ElectronicTranscriptAgencyIdentifierV1ID, EntityID = 1, returnElectronicTranscriptAgencyIdentifierV1ID = False, returnAgency = False, returnAgencyAssignedID = False, returnAgencyCode = False, returnAgencyName = False, returnCreatedTime = False, returnElectronicTranscriptRunHistoryID = False, returnEntityID = False, returnHasErrors = False, returnKeyHash = False, returnModifiedTime = False, returnSchoolYearID = False, returnStudentID = False, returnUpdateHash = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ElectronicTranscriptAgencyIdentifierV1/" + str(ElectronicTranscriptAgencyIdentifierV1ID), verb = "get", return_params_list = return_params)

def modifyElectronicTranscriptAgencyIdentifierV1(ElectronicTranscriptAgencyIdentifierV1ID, EntityID = 1, setElectronicTranscriptAgencyIdentifierV1ID = None, setAgency = None, setAgencyAssignedID = None, setAgencyCode = None, setAgencyName = None, setCreatedTime = None, setElectronicTranscriptRunHistoryID = None, setEntityID = None, setHasErrors = None, setKeyHash = None, setModifiedTime = None, setSchoolYearID = None, setStudentID = None, setUpdateHash = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnElectronicTranscriptAgencyIdentifierV1ID = False, returnAgency = False, returnAgencyAssignedID = False, returnAgencyCode = False, returnAgencyName = False, returnCreatedTime = False, returnElectronicTranscriptRunHistoryID = False, returnEntityID = False, returnHasErrors = False, returnKeyHash = False, returnModifiedTime = False, returnSchoolYearID = False, returnStudentID = False, returnUpdateHash = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ElectronicTranscriptAgencyIdentifierV1/" + str(ElectronicTranscriptAgencyIdentifierV1ID), verb = "post", return_params_list = return_params, payload = payload_params)

def createElectronicTranscriptAgencyIdentifierV1(EntityID = 1, setElectronicTranscriptAgencyIdentifierV1ID = None, setAgency = None, setAgencyAssignedID = None, setAgencyCode = None, setAgencyName = None, setCreatedTime = None, setElectronicTranscriptRunHistoryID = None, setEntityID = None, setHasErrors = None, setKeyHash = None, setModifiedTime = None, setSchoolYearID = None, setStudentID = None, setUpdateHash = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnElectronicTranscriptAgencyIdentifierV1ID = False, returnAgency = False, returnAgencyAssignedID = False, returnAgencyCode = False, returnAgencyName = False, returnCreatedTime = False, returnElectronicTranscriptRunHistoryID = False, returnEntityID = False, returnHasErrors = False, returnKeyHash = False, returnModifiedTime = False, returnSchoolYearID = False, returnStudentID = False, returnUpdateHash = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ElectronicTranscriptAgencyIdentifierV1/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteElectronicTranscriptAgencyIdentifierV1(ElectronicTranscriptAgencyIdentifierV1ID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ElectronicTranscriptAgencyIdentifierV1/" + str(ElectronicTranscriptAgencyIdentifierV1ID), verb = "delete")


def getEveryElectronicTranscriptAPITransaction(searchConditions = [], EntityID = 1, returnElectronicTranscriptAPITransactionID = False, returnCreatedTime = False, returnElectronicTranscriptRunHistoryID = False, returnIsError = False, returnMessage = False, returnModifiedTime = False, returnStudentID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every ElectronicTranscriptAPITransaction in the district.

    This function returns a dataframe of every ElectronicTranscriptAPITransaction in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ElectronicTranscriptAPITransaction/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ElectronicTranscriptAPITransaction/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getElectronicTranscriptAPITransaction(ElectronicTranscriptAPITransactionID, EntityID = 1, returnElectronicTranscriptAPITransactionID = False, returnCreatedTime = False, returnElectronicTranscriptRunHistoryID = False, returnIsError = False, returnMessage = False, returnModifiedTime = False, returnStudentID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ElectronicTranscriptAPITransaction/" + str(ElectronicTranscriptAPITransactionID), verb = "get", return_params_list = return_params)

def modifyElectronicTranscriptAPITransaction(ElectronicTranscriptAPITransactionID, EntityID = 1, setElectronicTranscriptAPITransactionID = None, setCreatedTime = None, setElectronicTranscriptRunHistoryID = None, setIsError = None, setMessage = None, setModifiedTime = None, setStudentID = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnElectronicTranscriptAPITransactionID = False, returnCreatedTime = False, returnElectronicTranscriptRunHistoryID = False, returnIsError = False, returnMessage = False, returnModifiedTime = False, returnStudentID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ElectronicTranscriptAPITransaction/" + str(ElectronicTranscriptAPITransactionID), verb = "post", return_params_list = return_params, payload = payload_params)

def createElectronicTranscriptAPITransaction(EntityID = 1, setElectronicTranscriptAPITransactionID = None, setCreatedTime = None, setElectronicTranscriptRunHistoryID = None, setIsError = None, setMessage = None, setModifiedTime = None, setStudentID = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnElectronicTranscriptAPITransactionID = False, returnCreatedTime = False, returnElectronicTranscriptRunHistoryID = False, returnIsError = False, returnMessage = False, returnModifiedTime = False, returnStudentID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ElectronicTranscriptAPITransaction/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteElectronicTranscriptAPITransaction(ElectronicTranscriptAPITransactionID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ElectronicTranscriptAPITransaction/" + str(ElectronicTranscriptAPITransactionID), verb = "delete")


def getEveryElectronicTranscriptCourseException(searchConditions = [], EntityID = 1, returnElectronicTranscriptCourseExceptionID = False, returnCreatedTime = False, returnElectronicTranscriptCourseV1ID = False, returnElectronicTranscriptRunHistoryID = False, returnEntityID = False, returnMessage = False, returnMessageType = False, returnMessageTypeCode = False, returnModifiedTime = False, returnProcessType = False, returnProcessTypeCode = False, returnRuleNumber = False, returnSchoolYearID = False, returnStudentID = False, returnStudentSectionID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every ElectronicTranscriptCourseException in the district.

    This function returns a dataframe of every ElectronicTranscriptCourseException in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ElectronicTranscriptCourseException/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ElectronicTranscriptCourseException/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getElectronicTranscriptCourseException(ElectronicTranscriptCourseExceptionID, EntityID = 1, returnElectronicTranscriptCourseExceptionID = False, returnCreatedTime = False, returnElectronicTranscriptCourseV1ID = False, returnElectronicTranscriptRunHistoryID = False, returnEntityID = False, returnMessage = False, returnMessageType = False, returnMessageTypeCode = False, returnModifiedTime = False, returnProcessType = False, returnProcessTypeCode = False, returnRuleNumber = False, returnSchoolYearID = False, returnStudentID = False, returnStudentSectionID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ElectronicTranscriptCourseException/" + str(ElectronicTranscriptCourseExceptionID), verb = "get", return_params_list = return_params)

def modifyElectronicTranscriptCourseException(ElectronicTranscriptCourseExceptionID, EntityID = 1, setElectronicTranscriptCourseExceptionID = None, setCreatedTime = None, setElectronicTranscriptCourseV1ID = None, setElectronicTranscriptRunHistoryID = None, setEntityID = None, setMessage = None, setMessageType = None, setMessageTypeCode = None, setModifiedTime = None, setProcessType = None, setProcessTypeCode = None, setRuleNumber = None, setSchoolYearID = None, setStudentID = None, setStudentSectionID = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnElectronicTranscriptCourseExceptionID = False, returnCreatedTime = False, returnElectronicTranscriptCourseV1ID = False, returnElectronicTranscriptRunHistoryID = False, returnEntityID = False, returnMessage = False, returnMessageType = False, returnMessageTypeCode = False, returnModifiedTime = False, returnProcessType = False, returnProcessTypeCode = False, returnRuleNumber = False, returnSchoolYearID = False, returnStudentID = False, returnStudentSectionID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ElectronicTranscriptCourseException/" + str(ElectronicTranscriptCourseExceptionID), verb = "post", return_params_list = return_params, payload = payload_params)

def createElectronicTranscriptCourseException(EntityID = 1, setElectronicTranscriptCourseExceptionID = None, setCreatedTime = None, setElectronicTranscriptCourseV1ID = None, setElectronicTranscriptRunHistoryID = None, setEntityID = None, setMessage = None, setMessageType = None, setMessageTypeCode = None, setModifiedTime = None, setProcessType = None, setProcessTypeCode = None, setRuleNumber = None, setSchoolYearID = None, setStudentID = None, setStudentSectionID = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnElectronicTranscriptCourseExceptionID = False, returnCreatedTime = False, returnElectronicTranscriptCourseV1ID = False, returnElectronicTranscriptRunHistoryID = False, returnEntityID = False, returnMessage = False, returnMessageType = False, returnMessageTypeCode = False, returnModifiedTime = False, returnProcessType = False, returnProcessTypeCode = False, returnRuleNumber = False, returnSchoolYearID = False, returnStudentID = False, returnStudentSectionID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ElectronicTranscriptCourseException/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteElectronicTranscriptCourseException(ElectronicTranscriptCourseExceptionID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ElectronicTranscriptCourseException/" + str(ElectronicTranscriptCourseExceptionID), verb = "delete")


def getEveryElectronicTranscriptCourseV1(searchConditions = [], EntityID = 1, returnElectronicTranscriptCourseV1ID = False, returnAgencyCourseID = False, returnCourseAcademicGrade = False, returnCourseBeginDate = False, returnCourseCreditBasis = False, returnCourseCreditBasisCode = False, returnCourseCreditEarned = False, returnCourseEndDate = False, returnCourseGPAApplicability = False, returnCourseGPAApplicabilityCode = False, returnCourseLevel = False, returnCourseLevelCode = False, returnCourseNumber = False, returnCourseQualityPointsEarned = False, returnCourseTitle = False, returnCreatedTime = False, returnElectronicTranscriptRunHistoryID = False, returnEntityID = False, returnHasErrors = False, returnIsInProgress = False, returnKeyHash = False, returnModifiedTime = False, returnNoteMessage = False, returnOrganizationName = False, returnSchoolYearID = False, returnSectionLengthID = False, returnSessionDesignator = False, returnStudentGradeBucketID = False, returnStudentID = False, returnStudentSectionID = False, returnUpdateHash = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every ElectronicTranscriptCourseV1 in the district.

    This function returns a dataframe of every ElectronicTranscriptCourseV1 in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ElectronicTranscriptCourseV1/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ElectronicTranscriptCourseV1/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getElectronicTranscriptCourseV1(ElectronicTranscriptCourseV1ID, EntityID = 1, returnElectronicTranscriptCourseV1ID = False, returnAgencyCourseID = False, returnCourseAcademicGrade = False, returnCourseBeginDate = False, returnCourseCreditBasis = False, returnCourseCreditBasisCode = False, returnCourseCreditEarned = False, returnCourseEndDate = False, returnCourseGPAApplicability = False, returnCourseGPAApplicabilityCode = False, returnCourseLevel = False, returnCourseLevelCode = False, returnCourseNumber = False, returnCourseQualityPointsEarned = False, returnCourseTitle = False, returnCreatedTime = False, returnElectronicTranscriptRunHistoryID = False, returnEntityID = False, returnHasErrors = False, returnIsInProgress = False, returnKeyHash = False, returnModifiedTime = False, returnNoteMessage = False, returnOrganizationName = False, returnSchoolYearID = False, returnSectionLengthID = False, returnSessionDesignator = False, returnStudentGradeBucketID = False, returnStudentID = False, returnStudentSectionID = False, returnUpdateHash = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ElectronicTranscriptCourseV1/" + str(ElectronicTranscriptCourseV1ID), verb = "get", return_params_list = return_params)

def modifyElectronicTranscriptCourseV1(ElectronicTranscriptCourseV1ID, EntityID = 1, setElectronicTranscriptCourseV1ID = None, setAgencyCourseID = None, setCourseAcademicGrade = None, setCourseBeginDate = None, setCourseCreditBasis = None, setCourseCreditBasisCode = None, setCourseCreditEarned = None, setCourseEndDate = None, setCourseGPAApplicability = None, setCourseGPAApplicabilityCode = None, setCourseLevel = None, setCourseLevelCode = None, setCourseNumber = None, setCourseQualityPointsEarned = None, setCourseTitle = None, setCreatedTime = None, setElectronicTranscriptRunHistoryID = None, setEntityID = None, setHasErrors = None, setIsInProgress = None, setKeyHash = None, setModifiedTime = None, setNoteMessage = None, setOrganizationName = None, setSchoolYearID = None, setSectionLengthID = None, setSessionDesignator = None, setStudentGradeBucketID = None, setStudentID = None, setStudentSectionID = None, setUpdateHash = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnElectronicTranscriptCourseV1ID = False, returnAgencyCourseID = False, returnCourseAcademicGrade = False, returnCourseBeginDate = False, returnCourseCreditBasis = False, returnCourseCreditBasisCode = False, returnCourseCreditEarned = False, returnCourseEndDate = False, returnCourseGPAApplicability = False, returnCourseGPAApplicabilityCode = False, returnCourseLevel = False, returnCourseLevelCode = False, returnCourseNumber = False, returnCourseQualityPointsEarned = False, returnCourseTitle = False, returnCreatedTime = False, returnElectronicTranscriptRunHistoryID = False, returnEntityID = False, returnHasErrors = False, returnIsInProgress = False, returnKeyHash = False, returnModifiedTime = False, returnNoteMessage = False, returnOrganizationName = False, returnSchoolYearID = False, returnSectionLengthID = False, returnSessionDesignator = False, returnStudentGradeBucketID = False, returnStudentID = False, returnStudentSectionID = False, returnUpdateHash = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ElectronicTranscriptCourseV1/" + str(ElectronicTranscriptCourseV1ID), verb = "post", return_params_list = return_params, payload = payload_params)

def createElectronicTranscriptCourseV1(EntityID = 1, setElectronicTranscriptCourseV1ID = None, setAgencyCourseID = None, setCourseAcademicGrade = None, setCourseBeginDate = None, setCourseCreditBasis = None, setCourseCreditBasisCode = None, setCourseCreditEarned = None, setCourseEndDate = None, setCourseGPAApplicability = None, setCourseGPAApplicabilityCode = None, setCourseLevel = None, setCourseLevelCode = None, setCourseNumber = None, setCourseQualityPointsEarned = None, setCourseTitle = None, setCreatedTime = None, setElectronicTranscriptRunHistoryID = None, setEntityID = None, setHasErrors = None, setIsInProgress = None, setKeyHash = None, setModifiedTime = None, setNoteMessage = None, setOrganizationName = None, setSchoolYearID = None, setSectionLengthID = None, setSessionDesignator = None, setStudentGradeBucketID = None, setStudentID = None, setStudentSectionID = None, setUpdateHash = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnElectronicTranscriptCourseV1ID = False, returnAgencyCourseID = False, returnCourseAcademicGrade = False, returnCourseBeginDate = False, returnCourseCreditBasis = False, returnCourseCreditBasisCode = False, returnCourseCreditEarned = False, returnCourseEndDate = False, returnCourseGPAApplicability = False, returnCourseGPAApplicabilityCode = False, returnCourseLevel = False, returnCourseLevelCode = False, returnCourseNumber = False, returnCourseQualityPointsEarned = False, returnCourseTitle = False, returnCreatedTime = False, returnElectronicTranscriptRunHistoryID = False, returnEntityID = False, returnHasErrors = False, returnIsInProgress = False, returnKeyHash = False, returnModifiedTime = False, returnNoteMessage = False, returnOrganizationName = False, returnSchoolYearID = False, returnSectionLengthID = False, returnSessionDesignator = False, returnStudentGradeBucketID = False, returnStudentID = False, returnStudentSectionID = False, returnUpdateHash = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ElectronicTranscriptCourseV1/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteElectronicTranscriptCourseV1(ElectronicTranscriptCourseV1ID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ElectronicTranscriptCourseV1/" + str(ElectronicTranscriptCourseV1ID), verb = "delete")


def getEveryElectronicTranscriptImmunizationException(searchConditions = [], EntityID = 1, returnElectronicTranscriptImmunizationExceptionID = False, returnCreatedTime = False, returnElectronicTranscriptImmunizationV1ID = False, returnElectronicTranscriptRunHistoryID = False, returnEntityID = False, returnMessage = False, returnMessageType = False, returnMessageTypeCode = False, returnModifiedTime = False, returnProcessType = False, returnProcessTypeCode = False, returnRuleNumber = False, returnSchoolYearID = False, returnStudentID = False, returnStudentVaccineID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every ElectronicTranscriptImmunizationException in the district.

    This function returns a dataframe of every ElectronicTranscriptImmunizationException in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ElectronicTranscriptImmunizationException/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ElectronicTranscriptImmunizationException/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getElectronicTranscriptImmunizationException(ElectronicTranscriptImmunizationExceptionID, EntityID = 1, returnElectronicTranscriptImmunizationExceptionID = False, returnCreatedTime = False, returnElectronicTranscriptImmunizationV1ID = False, returnElectronicTranscriptRunHistoryID = False, returnEntityID = False, returnMessage = False, returnMessageType = False, returnMessageTypeCode = False, returnModifiedTime = False, returnProcessType = False, returnProcessTypeCode = False, returnRuleNumber = False, returnSchoolYearID = False, returnStudentID = False, returnStudentVaccineID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ElectronicTranscriptImmunizationException/" + str(ElectronicTranscriptImmunizationExceptionID), verb = "get", return_params_list = return_params)

def modifyElectronicTranscriptImmunizationException(ElectronicTranscriptImmunizationExceptionID, EntityID = 1, setElectronicTranscriptImmunizationExceptionID = None, setCreatedTime = None, setElectronicTranscriptImmunizationV1ID = None, setElectronicTranscriptRunHistoryID = None, setEntityID = None, setMessage = None, setMessageType = None, setMessageTypeCode = None, setModifiedTime = None, setProcessType = None, setProcessTypeCode = None, setRuleNumber = None, setSchoolYearID = None, setStudentID = None, setStudentVaccineID = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnElectronicTranscriptImmunizationExceptionID = False, returnCreatedTime = False, returnElectronicTranscriptImmunizationV1ID = False, returnElectronicTranscriptRunHistoryID = False, returnEntityID = False, returnMessage = False, returnMessageType = False, returnMessageTypeCode = False, returnModifiedTime = False, returnProcessType = False, returnProcessTypeCode = False, returnRuleNumber = False, returnSchoolYearID = False, returnStudentID = False, returnStudentVaccineID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ElectronicTranscriptImmunizationException/" + str(ElectronicTranscriptImmunizationExceptionID), verb = "post", return_params_list = return_params, payload = payload_params)

def createElectronicTranscriptImmunizationException(EntityID = 1, setElectronicTranscriptImmunizationExceptionID = None, setCreatedTime = None, setElectronicTranscriptImmunizationV1ID = None, setElectronicTranscriptRunHistoryID = None, setEntityID = None, setMessage = None, setMessageType = None, setMessageTypeCode = None, setModifiedTime = None, setProcessType = None, setProcessTypeCode = None, setRuleNumber = None, setSchoolYearID = None, setStudentID = None, setStudentVaccineID = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnElectronicTranscriptImmunizationExceptionID = False, returnCreatedTime = False, returnElectronicTranscriptImmunizationV1ID = False, returnElectronicTranscriptRunHistoryID = False, returnEntityID = False, returnMessage = False, returnMessageType = False, returnMessageTypeCode = False, returnModifiedTime = False, returnProcessType = False, returnProcessTypeCode = False, returnRuleNumber = False, returnSchoolYearID = False, returnStudentID = False, returnStudentVaccineID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ElectronicTranscriptImmunizationException/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteElectronicTranscriptImmunizationException(ElectronicTranscriptImmunizationExceptionID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ElectronicTranscriptImmunizationException/" + str(ElectronicTranscriptImmunizationExceptionID), verb = "delete")


def getEveryElectronicTranscriptImmunizationV1(searchConditions = [], EntityID = 1, returnElectronicTranscriptImmunizationV1ID = False, returnCreatedTime = False, returnElectronicTranscriptRunHistoryID = False, returnEntityID = False, returnHasErrors = False, returnImmunizationCode = False, returnImmunizationDate = False, returnImmunizationStatus = False, returnImmunizationStatusCode = False, returnKeyHash = False, returnModifiedTime = False, returnSchoolYearID = False, returnStudentChildhoodIllnessID = False, returnStudentID = False, returnStudentVaccinationWaiverID = False, returnStudentVaccineID = False, returnUpdateHash = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnVaccineID = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every ElectronicTranscriptImmunizationV1 in the district.

    This function returns a dataframe of every ElectronicTranscriptImmunizationV1 in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ElectronicTranscriptImmunizationV1/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ElectronicTranscriptImmunizationV1/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getElectronicTranscriptImmunizationV1(ElectronicTranscriptImmunizationV1ID, EntityID = 1, returnElectronicTranscriptImmunizationV1ID = False, returnCreatedTime = False, returnElectronicTranscriptRunHistoryID = False, returnEntityID = False, returnHasErrors = False, returnImmunizationCode = False, returnImmunizationDate = False, returnImmunizationStatus = False, returnImmunizationStatusCode = False, returnKeyHash = False, returnModifiedTime = False, returnSchoolYearID = False, returnStudentChildhoodIllnessID = False, returnStudentID = False, returnStudentVaccinationWaiverID = False, returnStudentVaccineID = False, returnUpdateHash = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnVaccineID = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ElectronicTranscriptImmunizationV1/" + str(ElectronicTranscriptImmunizationV1ID), verb = "get", return_params_list = return_params)

def modifyElectronicTranscriptImmunizationV1(ElectronicTranscriptImmunizationV1ID, EntityID = 1, setElectronicTranscriptImmunizationV1ID = None, setCreatedTime = None, setElectronicTranscriptRunHistoryID = None, setEntityID = None, setHasErrors = None, setImmunizationCode = None, setImmunizationDate = None, setImmunizationStatus = None, setImmunizationStatusCode = None, setKeyHash = None, setModifiedTime = None, setSchoolYearID = None, setStudentChildhoodIllnessID = None, setStudentID = None, setStudentVaccinationWaiverID = None, setStudentVaccineID = None, setUpdateHash = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, setVaccineID = None, returnElectronicTranscriptImmunizationV1ID = False, returnCreatedTime = False, returnElectronicTranscriptRunHistoryID = False, returnEntityID = False, returnHasErrors = False, returnImmunizationCode = False, returnImmunizationDate = False, returnImmunizationStatus = False, returnImmunizationStatusCode = False, returnKeyHash = False, returnModifiedTime = False, returnSchoolYearID = False, returnStudentChildhoodIllnessID = False, returnStudentID = False, returnStudentVaccinationWaiverID = False, returnStudentVaccineID = False, returnUpdateHash = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnVaccineID = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ElectronicTranscriptImmunizationV1/" + str(ElectronicTranscriptImmunizationV1ID), verb = "post", return_params_list = return_params, payload = payload_params)

def createElectronicTranscriptImmunizationV1(EntityID = 1, setElectronicTranscriptImmunizationV1ID = None, setCreatedTime = None, setElectronicTranscriptRunHistoryID = None, setEntityID = None, setHasErrors = None, setImmunizationCode = None, setImmunizationDate = None, setImmunizationStatus = None, setImmunizationStatusCode = None, setKeyHash = None, setModifiedTime = None, setSchoolYearID = None, setStudentChildhoodIllnessID = None, setStudentID = None, setStudentVaccinationWaiverID = None, setStudentVaccineID = None, setUpdateHash = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, setVaccineID = None, returnElectronicTranscriptImmunizationV1ID = False, returnCreatedTime = False, returnElectronicTranscriptRunHistoryID = False, returnEntityID = False, returnHasErrors = False, returnImmunizationCode = False, returnImmunizationDate = False, returnImmunizationStatus = False, returnImmunizationStatusCode = False, returnKeyHash = False, returnModifiedTime = False, returnSchoolYearID = False, returnStudentChildhoodIllnessID = False, returnStudentID = False, returnStudentVaccinationWaiverID = False, returnStudentVaccineID = False, returnUpdateHash = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnVaccineID = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ElectronicTranscriptImmunizationV1/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteElectronicTranscriptImmunizationV1(ElectronicTranscriptImmunizationV1ID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ElectronicTranscriptImmunizationV1/" + str(ElectronicTranscriptImmunizationV1ID), verb = "delete")


def getEveryElectronicTranscriptLicensureException(searchConditions = [], EntityID = 1, returnElectronicTranscriptLicensureExceptionID = False, returnCreatedTime = False, returnElectronicTranscriptLicensureV1ID = False, returnElectronicTranscriptRunHistoryID = False, returnEntityID = False, returnMessage = False, returnMessageType = False, returnMessageTypeCode = False, returnModifiedTime = False, returnProcessType = False, returnProcessTypeCode = False, returnRuleNumber = False, returnSchoolYearID = False, returnStudentID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every ElectronicTranscriptLicensureException in the district.

    This function returns a dataframe of every ElectronicTranscriptLicensureException in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ElectronicTranscriptLicensureException/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ElectronicTranscriptLicensureException/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getElectronicTranscriptLicensureException(ElectronicTranscriptLicensureExceptionID, EntityID = 1, returnElectronicTranscriptLicensureExceptionID = False, returnCreatedTime = False, returnElectronicTranscriptLicensureV1ID = False, returnElectronicTranscriptRunHistoryID = False, returnEntityID = False, returnMessage = False, returnMessageType = False, returnMessageTypeCode = False, returnModifiedTime = False, returnProcessType = False, returnProcessTypeCode = False, returnRuleNumber = False, returnSchoolYearID = False, returnStudentID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ElectronicTranscriptLicensureException/" + str(ElectronicTranscriptLicensureExceptionID), verb = "get", return_params_list = return_params)

def modifyElectronicTranscriptLicensureException(ElectronicTranscriptLicensureExceptionID, EntityID = 1, setElectronicTranscriptLicensureExceptionID = None, setCreatedTime = None, setElectronicTranscriptLicensureV1ID = None, setElectronicTranscriptRunHistoryID = None, setEntityID = None, setMessage = None, setMessageType = None, setMessageTypeCode = None, setModifiedTime = None, setProcessType = None, setProcessTypeCode = None, setRuleNumber = None, setSchoolYearID = None, setStudentID = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnElectronicTranscriptLicensureExceptionID = False, returnCreatedTime = False, returnElectronicTranscriptLicensureV1ID = False, returnElectronicTranscriptRunHistoryID = False, returnEntityID = False, returnMessage = False, returnMessageType = False, returnMessageTypeCode = False, returnModifiedTime = False, returnProcessType = False, returnProcessTypeCode = False, returnRuleNumber = False, returnSchoolYearID = False, returnStudentID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ElectronicTranscriptLicensureException/" + str(ElectronicTranscriptLicensureExceptionID), verb = "post", return_params_list = return_params, payload = payload_params)

def createElectronicTranscriptLicensureException(EntityID = 1, setElectronicTranscriptLicensureExceptionID = None, setCreatedTime = None, setElectronicTranscriptLicensureV1ID = None, setElectronicTranscriptRunHistoryID = None, setEntityID = None, setMessage = None, setMessageType = None, setMessageTypeCode = None, setModifiedTime = None, setProcessType = None, setProcessTypeCode = None, setRuleNumber = None, setSchoolYearID = None, setStudentID = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnElectronicTranscriptLicensureExceptionID = False, returnCreatedTime = False, returnElectronicTranscriptLicensureV1ID = False, returnElectronicTranscriptRunHistoryID = False, returnEntityID = False, returnMessage = False, returnMessageType = False, returnMessageTypeCode = False, returnModifiedTime = False, returnProcessType = False, returnProcessTypeCode = False, returnRuleNumber = False, returnSchoolYearID = False, returnStudentID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ElectronicTranscriptLicensureException/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteElectronicTranscriptLicensureException(ElectronicTranscriptLicensureExceptionID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ElectronicTranscriptLicensureException/" + str(ElectronicTranscriptLicensureExceptionID), verb = "delete")


def getEveryElectronicTranscriptLicensureNoteException(searchConditions = [], EntityID = 1, returnElectronicTranscriptLicensureNoteExceptionID = False, returnCreatedTime = False, returnElectronicTranscriptLicensureNoteV1ID = False, returnElectronicTranscriptRunHistoryID = False, returnEntityID = False, returnMessage = False, returnMessageType = False, returnMessageTypeCode = False, returnModifiedTime = False, returnProcessType = False, returnProcessTypeCode = False, returnRuleNumber = False, returnSchoolYearID = False, returnStudentID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every ElectronicTranscriptLicensureNoteException in the district.

    This function returns a dataframe of every ElectronicTranscriptLicensureNoteException in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ElectronicTranscriptLicensureNoteException/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ElectronicTranscriptLicensureNoteException/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getElectronicTranscriptLicensureNoteException(ElectronicTranscriptLicensureNoteExceptionID, EntityID = 1, returnElectronicTranscriptLicensureNoteExceptionID = False, returnCreatedTime = False, returnElectronicTranscriptLicensureNoteV1ID = False, returnElectronicTranscriptRunHistoryID = False, returnEntityID = False, returnMessage = False, returnMessageType = False, returnMessageTypeCode = False, returnModifiedTime = False, returnProcessType = False, returnProcessTypeCode = False, returnRuleNumber = False, returnSchoolYearID = False, returnStudentID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ElectronicTranscriptLicensureNoteException/" + str(ElectronicTranscriptLicensureNoteExceptionID), verb = "get", return_params_list = return_params)

def modifyElectronicTranscriptLicensureNoteException(ElectronicTranscriptLicensureNoteExceptionID, EntityID = 1, setElectronicTranscriptLicensureNoteExceptionID = None, setCreatedTime = None, setElectronicTranscriptLicensureNoteV1ID = None, setElectronicTranscriptRunHistoryID = None, setEntityID = None, setMessage = None, setMessageType = None, setMessageTypeCode = None, setModifiedTime = None, setProcessType = None, setProcessTypeCode = None, setRuleNumber = None, setSchoolYearID = None, setStudentID = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnElectronicTranscriptLicensureNoteExceptionID = False, returnCreatedTime = False, returnElectronicTranscriptLicensureNoteV1ID = False, returnElectronicTranscriptRunHistoryID = False, returnEntityID = False, returnMessage = False, returnMessageType = False, returnMessageTypeCode = False, returnModifiedTime = False, returnProcessType = False, returnProcessTypeCode = False, returnRuleNumber = False, returnSchoolYearID = False, returnStudentID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ElectronicTranscriptLicensureNoteException/" + str(ElectronicTranscriptLicensureNoteExceptionID), verb = "post", return_params_list = return_params, payload = payload_params)

def createElectronicTranscriptLicensureNoteException(EntityID = 1, setElectronicTranscriptLicensureNoteExceptionID = None, setCreatedTime = None, setElectronicTranscriptLicensureNoteV1ID = None, setElectronicTranscriptRunHistoryID = None, setEntityID = None, setMessage = None, setMessageType = None, setMessageTypeCode = None, setModifiedTime = None, setProcessType = None, setProcessTypeCode = None, setRuleNumber = None, setSchoolYearID = None, setStudentID = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnElectronicTranscriptLicensureNoteExceptionID = False, returnCreatedTime = False, returnElectronicTranscriptLicensureNoteV1ID = False, returnElectronicTranscriptRunHistoryID = False, returnEntityID = False, returnMessage = False, returnMessageType = False, returnMessageTypeCode = False, returnModifiedTime = False, returnProcessType = False, returnProcessTypeCode = False, returnRuleNumber = False, returnSchoolYearID = False, returnStudentID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ElectronicTranscriptLicensureNoteException/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteElectronicTranscriptLicensureNoteException(ElectronicTranscriptLicensureNoteExceptionID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ElectronicTranscriptLicensureNoteException/" + str(ElectronicTranscriptLicensureNoteExceptionID), verb = "delete")


def getEveryElectronicTranscriptLicensureNoteV1(searchConditions = [], EntityID = 1, returnElectronicTranscriptLicensureNoteV1ID = False, returnCreatedTime = False, returnElectronicTranscriptRunHistoryID = False, returnEntityID = False, returnHasErrors = False, returnKeyHash = False, returnLicensureName = False, returnLicensurePassageDate = False, returnModifiedTime = False, returnNoteMessage = False, returnOrganizationName = False, returnSchoolYearID = False, returnStudentID = False, returnUpdateHash = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every ElectronicTranscriptLicensureNoteV1 in the district.

    This function returns a dataframe of every ElectronicTranscriptLicensureNoteV1 in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ElectronicTranscriptLicensureNoteV1/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ElectronicTranscriptLicensureNoteV1/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getElectronicTranscriptLicensureNoteV1(ElectronicTranscriptLicensureNoteV1ID, EntityID = 1, returnElectronicTranscriptLicensureNoteV1ID = False, returnCreatedTime = False, returnElectronicTranscriptRunHistoryID = False, returnEntityID = False, returnHasErrors = False, returnKeyHash = False, returnLicensureName = False, returnLicensurePassageDate = False, returnModifiedTime = False, returnNoteMessage = False, returnOrganizationName = False, returnSchoolYearID = False, returnStudentID = False, returnUpdateHash = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ElectronicTranscriptLicensureNoteV1/" + str(ElectronicTranscriptLicensureNoteV1ID), verb = "get", return_params_list = return_params)

def modifyElectronicTranscriptLicensureNoteV1(ElectronicTranscriptLicensureNoteV1ID, EntityID = 1, setElectronicTranscriptLicensureNoteV1ID = None, setCreatedTime = None, setElectronicTranscriptRunHistoryID = None, setEntityID = None, setHasErrors = None, setKeyHash = None, setLicensureName = None, setLicensurePassageDate = None, setModifiedTime = None, setNoteMessage = None, setOrganizationName = None, setSchoolYearID = None, setStudentID = None, setUpdateHash = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnElectronicTranscriptLicensureNoteV1ID = False, returnCreatedTime = False, returnElectronicTranscriptRunHistoryID = False, returnEntityID = False, returnHasErrors = False, returnKeyHash = False, returnLicensureName = False, returnLicensurePassageDate = False, returnModifiedTime = False, returnNoteMessage = False, returnOrganizationName = False, returnSchoolYearID = False, returnStudentID = False, returnUpdateHash = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ElectronicTranscriptLicensureNoteV1/" + str(ElectronicTranscriptLicensureNoteV1ID), verb = "post", return_params_list = return_params, payload = payload_params)

def createElectronicTranscriptLicensureNoteV1(EntityID = 1, setElectronicTranscriptLicensureNoteV1ID = None, setCreatedTime = None, setElectronicTranscriptRunHistoryID = None, setEntityID = None, setHasErrors = None, setKeyHash = None, setLicensureName = None, setLicensurePassageDate = None, setModifiedTime = None, setNoteMessage = None, setOrganizationName = None, setSchoolYearID = None, setStudentID = None, setUpdateHash = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnElectronicTranscriptLicensureNoteV1ID = False, returnCreatedTime = False, returnElectronicTranscriptRunHistoryID = False, returnEntityID = False, returnHasErrors = False, returnKeyHash = False, returnLicensureName = False, returnLicensurePassageDate = False, returnModifiedTime = False, returnNoteMessage = False, returnOrganizationName = False, returnSchoolYearID = False, returnStudentID = False, returnUpdateHash = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ElectronicTranscriptLicensureNoteV1/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteElectronicTranscriptLicensureNoteV1(ElectronicTranscriptLicensureNoteV1ID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ElectronicTranscriptLicensureNoteV1/" + str(ElectronicTranscriptLicensureNoteV1ID), verb = "delete")


def getEveryElectronicTranscriptLicensureV1(searchConditions = [], EntityID = 1, returnElectronicTranscriptLicensureV1ID = False, returnCreatedTime = False, returnElectronicTranscriptRunHistoryID = False, returnEntityID = False, returnHasErrors = False, returnKeyHash = False, returnLicensureName = False, returnLicensurePassageDate = False, returnModifiedTime = False, returnOrganizationName = False, returnSchoolYearID = False, returnStudentID = False, returnUpdateHash = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every ElectronicTranscriptLicensureV1 in the district.

    This function returns a dataframe of every ElectronicTranscriptLicensureV1 in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ElectronicTranscriptLicensureV1/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ElectronicTranscriptLicensureV1/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getElectronicTranscriptLicensureV1(ElectronicTranscriptLicensureV1ID, EntityID = 1, returnElectronicTranscriptLicensureV1ID = False, returnCreatedTime = False, returnElectronicTranscriptRunHistoryID = False, returnEntityID = False, returnHasErrors = False, returnKeyHash = False, returnLicensureName = False, returnLicensurePassageDate = False, returnModifiedTime = False, returnOrganizationName = False, returnSchoolYearID = False, returnStudentID = False, returnUpdateHash = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ElectronicTranscriptLicensureV1/" + str(ElectronicTranscriptLicensureV1ID), verb = "get", return_params_list = return_params)

def modifyElectronicTranscriptLicensureV1(ElectronicTranscriptLicensureV1ID, EntityID = 1, setElectronicTranscriptLicensureV1ID = None, setCreatedTime = None, setElectronicTranscriptRunHistoryID = None, setEntityID = None, setHasErrors = None, setKeyHash = None, setLicensureName = None, setLicensurePassageDate = None, setModifiedTime = None, setOrganizationName = None, setSchoolYearID = None, setStudentID = None, setUpdateHash = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnElectronicTranscriptLicensureV1ID = False, returnCreatedTime = False, returnElectronicTranscriptRunHistoryID = False, returnEntityID = False, returnHasErrors = False, returnKeyHash = False, returnLicensureName = False, returnLicensurePassageDate = False, returnModifiedTime = False, returnOrganizationName = False, returnSchoolYearID = False, returnStudentID = False, returnUpdateHash = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ElectronicTranscriptLicensureV1/" + str(ElectronicTranscriptLicensureV1ID), verb = "post", return_params_list = return_params, payload = payload_params)

def createElectronicTranscriptLicensureV1(EntityID = 1, setElectronicTranscriptLicensureV1ID = None, setCreatedTime = None, setElectronicTranscriptRunHistoryID = None, setEntityID = None, setHasErrors = None, setKeyHash = None, setLicensureName = None, setLicensurePassageDate = None, setModifiedTime = None, setOrganizationName = None, setSchoolYearID = None, setStudentID = None, setUpdateHash = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnElectronicTranscriptLicensureV1ID = False, returnCreatedTime = False, returnElectronicTranscriptRunHistoryID = False, returnEntityID = False, returnHasErrors = False, returnKeyHash = False, returnLicensureName = False, returnLicensurePassageDate = False, returnModifiedTime = False, returnOrganizationName = False, returnSchoolYearID = False, returnStudentID = False, returnUpdateHash = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ElectronicTranscriptLicensureV1/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteElectronicTranscriptLicensureV1(ElectronicTranscriptLicensureV1ID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ElectronicTranscriptLicensureV1/" + str(ElectronicTranscriptLicensureV1ID), verb = "delete")


def getEveryElectronicTranscriptPersonException(searchConditions = [], EntityID = 1, returnElectronicTranscriptPersonExceptionID = False, returnCreatedTime = False, returnElectronicTranscriptPersonV1ID = False, returnElectronicTranscriptRunHistoryID = False, returnEntityID = False, returnMessage = False, returnMessageType = False, returnMessageTypeCode = False, returnModifiedTime = False, returnProcessType = False, returnProcessTypeCode = False, returnRuleNumber = False, returnSchoolYearID = False, returnStudentID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every ElectronicTranscriptPersonException in the district.

    This function returns a dataframe of every ElectronicTranscriptPersonException in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ElectronicTranscriptPersonException/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ElectronicTranscriptPersonException/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getElectronicTranscriptPersonException(ElectronicTranscriptPersonExceptionID, EntityID = 1, returnElectronicTranscriptPersonExceptionID = False, returnCreatedTime = False, returnElectronicTranscriptPersonV1ID = False, returnElectronicTranscriptRunHistoryID = False, returnEntityID = False, returnMessage = False, returnMessageType = False, returnMessageTypeCode = False, returnModifiedTime = False, returnProcessType = False, returnProcessTypeCode = False, returnRuleNumber = False, returnSchoolYearID = False, returnStudentID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ElectronicTranscriptPersonException/" + str(ElectronicTranscriptPersonExceptionID), verb = "get", return_params_list = return_params)

def modifyElectronicTranscriptPersonException(ElectronicTranscriptPersonExceptionID, EntityID = 1, setElectronicTranscriptPersonExceptionID = None, setCreatedTime = None, setElectronicTranscriptPersonV1ID = None, setElectronicTranscriptRunHistoryID = None, setEntityID = None, setMessage = None, setMessageType = None, setMessageTypeCode = None, setModifiedTime = None, setProcessType = None, setProcessTypeCode = None, setRuleNumber = None, setSchoolYearID = None, setStudentID = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnElectronicTranscriptPersonExceptionID = False, returnCreatedTime = False, returnElectronicTranscriptPersonV1ID = False, returnElectronicTranscriptRunHistoryID = False, returnEntityID = False, returnMessage = False, returnMessageType = False, returnMessageTypeCode = False, returnModifiedTime = False, returnProcessType = False, returnProcessTypeCode = False, returnRuleNumber = False, returnSchoolYearID = False, returnStudentID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ElectronicTranscriptPersonException/" + str(ElectronicTranscriptPersonExceptionID), verb = "post", return_params_list = return_params, payload = payload_params)

def createElectronicTranscriptPersonException(EntityID = 1, setElectronicTranscriptPersonExceptionID = None, setCreatedTime = None, setElectronicTranscriptPersonV1ID = None, setElectronicTranscriptRunHistoryID = None, setEntityID = None, setMessage = None, setMessageType = None, setMessageTypeCode = None, setModifiedTime = None, setProcessType = None, setProcessTypeCode = None, setRuleNumber = None, setSchoolYearID = None, setStudentID = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnElectronicTranscriptPersonExceptionID = False, returnCreatedTime = False, returnElectronicTranscriptPersonV1ID = False, returnElectronicTranscriptRunHistoryID = False, returnEntityID = False, returnMessage = False, returnMessageType = False, returnMessageTypeCode = False, returnModifiedTime = False, returnProcessType = False, returnProcessTypeCode = False, returnRuleNumber = False, returnSchoolYearID = False, returnStudentID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ElectronicTranscriptPersonException/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteElectronicTranscriptPersonException(ElectronicTranscriptPersonExceptionID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ElectronicTranscriptPersonException/" + str(ElectronicTranscriptPersonExceptionID), verb = "delete")


def getEveryElectronicTranscriptPersonV1(searchConditions = [], EntityID = 1, returnElectronicTranscriptPersonV1ID = False, returnBirthDate = False, returnCreatedTime = False, returnElectronicTranscriptRunHistoryID = False, returnEntityID = False, returnFirstName = False, returnGender = False, returnGenderCode = False, returnGuardianFirstName = False, returnGuardianLastName = False, returnHasErrors = False, returnKeyHash = False, returnLastName = False, returnMiddleName = False, returnModifiedTime = False, returnNameIDGuardian = False, returnNameSuffix = False, returnNameSuffixCode = False, returnSchoolAssignedPersonID = False, returnSchoolYearID = False, returnStudentID = False, returnUpdateHash = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every ElectronicTranscriptPersonV1 in the district.

    This function returns a dataframe of every ElectronicTranscriptPersonV1 in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ElectronicTranscriptPersonV1/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ElectronicTranscriptPersonV1/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getElectronicTranscriptPersonV1(ElectronicTranscriptPersonV1ID, EntityID = 1, returnElectronicTranscriptPersonV1ID = False, returnBirthDate = False, returnCreatedTime = False, returnElectronicTranscriptRunHistoryID = False, returnEntityID = False, returnFirstName = False, returnGender = False, returnGenderCode = False, returnGuardianFirstName = False, returnGuardianLastName = False, returnHasErrors = False, returnKeyHash = False, returnLastName = False, returnMiddleName = False, returnModifiedTime = False, returnNameIDGuardian = False, returnNameSuffix = False, returnNameSuffixCode = False, returnSchoolAssignedPersonID = False, returnSchoolYearID = False, returnStudentID = False, returnUpdateHash = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ElectronicTranscriptPersonV1/" + str(ElectronicTranscriptPersonV1ID), verb = "get", return_params_list = return_params)

def modifyElectronicTranscriptPersonV1(ElectronicTranscriptPersonV1ID, EntityID = 1, setElectronicTranscriptPersonV1ID = None, setBirthDate = None, setCreatedTime = None, setElectronicTranscriptRunHistoryID = None, setEntityID = None, setFirstName = None, setGender = None, setGenderCode = None, setGuardianFirstName = None, setGuardianLastName = None, setHasErrors = None, setKeyHash = None, setLastName = None, setMiddleName = None, setModifiedTime = None, setNameIDGuardian = None, setNameSuffix = None, setNameSuffixCode = None, setSchoolAssignedPersonID = None, setSchoolYearID = None, setStudentID = None, setUpdateHash = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnElectronicTranscriptPersonV1ID = False, returnBirthDate = False, returnCreatedTime = False, returnElectronicTranscriptRunHistoryID = False, returnEntityID = False, returnFirstName = False, returnGender = False, returnGenderCode = False, returnGuardianFirstName = False, returnGuardianLastName = False, returnHasErrors = False, returnKeyHash = False, returnLastName = False, returnMiddleName = False, returnModifiedTime = False, returnNameIDGuardian = False, returnNameSuffix = False, returnNameSuffixCode = False, returnSchoolAssignedPersonID = False, returnSchoolYearID = False, returnStudentID = False, returnUpdateHash = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ElectronicTranscriptPersonV1/" + str(ElectronicTranscriptPersonV1ID), verb = "post", return_params_list = return_params, payload = payload_params)

def createElectronicTranscriptPersonV1(EntityID = 1, setElectronicTranscriptPersonV1ID = None, setBirthDate = None, setCreatedTime = None, setElectronicTranscriptRunHistoryID = None, setEntityID = None, setFirstName = None, setGender = None, setGenderCode = None, setGuardianFirstName = None, setGuardianLastName = None, setHasErrors = None, setKeyHash = None, setLastName = None, setMiddleName = None, setModifiedTime = None, setNameIDGuardian = None, setNameSuffix = None, setNameSuffixCode = None, setSchoolAssignedPersonID = None, setSchoolYearID = None, setStudentID = None, setUpdateHash = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnElectronicTranscriptPersonV1ID = False, returnBirthDate = False, returnCreatedTime = False, returnElectronicTranscriptRunHistoryID = False, returnEntityID = False, returnFirstName = False, returnGender = False, returnGenderCode = False, returnGuardianFirstName = False, returnGuardianLastName = False, returnHasErrors = False, returnKeyHash = False, returnLastName = False, returnMiddleName = False, returnModifiedTime = False, returnNameIDGuardian = False, returnNameSuffix = False, returnNameSuffixCode = False, returnSchoolAssignedPersonID = False, returnSchoolYearID = False, returnStudentID = False, returnUpdateHash = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ElectronicTranscriptPersonV1/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteElectronicTranscriptPersonV1(ElectronicTranscriptPersonV1ID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ElectronicTranscriptPersonV1/" + str(ElectronicTranscriptPersonV1ID), verb = "delete")


def getEveryElectronicTranscriptPhoneException(searchConditions = [], EntityID = 1, returnElectronicTranscriptPhoneExceptionID = False, returnCreatedTime = False, returnElectronicTranscriptPhoneV1ID = False, returnElectronicTranscriptRunHistoryID = False, returnEntityID = False, returnMessage = False, returnMessageType = False, returnMessageTypeCode = False, returnModifiedTime = False, returnProcessType = False, returnProcessTypeCode = False, returnRuleNumber = False, returnSchoolYearID = False, returnStudentID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every ElectronicTranscriptPhoneException in the district.

    This function returns a dataframe of every ElectronicTranscriptPhoneException in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ElectronicTranscriptPhoneException/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ElectronicTranscriptPhoneException/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getElectronicTranscriptPhoneException(ElectronicTranscriptPhoneExceptionID, EntityID = 1, returnElectronicTranscriptPhoneExceptionID = False, returnCreatedTime = False, returnElectronicTranscriptPhoneV1ID = False, returnElectronicTranscriptRunHistoryID = False, returnEntityID = False, returnMessage = False, returnMessageType = False, returnMessageTypeCode = False, returnModifiedTime = False, returnProcessType = False, returnProcessTypeCode = False, returnRuleNumber = False, returnSchoolYearID = False, returnStudentID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ElectronicTranscriptPhoneException/" + str(ElectronicTranscriptPhoneExceptionID), verb = "get", return_params_list = return_params)

def modifyElectronicTranscriptPhoneException(ElectronicTranscriptPhoneExceptionID, EntityID = 1, setElectronicTranscriptPhoneExceptionID = None, setCreatedTime = None, setElectronicTranscriptPhoneV1ID = None, setElectronicTranscriptRunHistoryID = None, setEntityID = None, setMessage = None, setMessageType = None, setMessageTypeCode = None, setModifiedTime = None, setProcessType = None, setProcessTypeCode = None, setRuleNumber = None, setSchoolYearID = None, setStudentID = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnElectronicTranscriptPhoneExceptionID = False, returnCreatedTime = False, returnElectronicTranscriptPhoneV1ID = False, returnElectronicTranscriptRunHistoryID = False, returnEntityID = False, returnMessage = False, returnMessageType = False, returnMessageTypeCode = False, returnModifiedTime = False, returnProcessType = False, returnProcessTypeCode = False, returnRuleNumber = False, returnSchoolYearID = False, returnStudentID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ElectronicTranscriptPhoneException/" + str(ElectronicTranscriptPhoneExceptionID), verb = "post", return_params_list = return_params, payload = payload_params)

def createElectronicTranscriptPhoneException(EntityID = 1, setElectronicTranscriptPhoneExceptionID = None, setCreatedTime = None, setElectronicTranscriptPhoneV1ID = None, setElectronicTranscriptRunHistoryID = None, setEntityID = None, setMessage = None, setMessageType = None, setMessageTypeCode = None, setModifiedTime = None, setProcessType = None, setProcessTypeCode = None, setRuleNumber = None, setSchoolYearID = None, setStudentID = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnElectronicTranscriptPhoneExceptionID = False, returnCreatedTime = False, returnElectronicTranscriptPhoneV1ID = False, returnElectronicTranscriptRunHistoryID = False, returnEntityID = False, returnMessage = False, returnMessageType = False, returnMessageTypeCode = False, returnModifiedTime = False, returnProcessType = False, returnProcessTypeCode = False, returnRuleNumber = False, returnSchoolYearID = False, returnStudentID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ElectronicTranscriptPhoneException/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteElectronicTranscriptPhoneException(ElectronicTranscriptPhoneExceptionID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ElectronicTranscriptPhoneException/" + str(ElectronicTranscriptPhoneExceptionID), verb = "delete")


def getEveryElectronicTranscriptPhoneV1(searchConditions = [], EntityID = 1, returnElectronicTranscriptPhoneV1ID = False, returnAreaCityCode = False, returnCreatedTime = False, returnElectronicTranscriptRunHistoryID = False, returnEntityID = False, returnHasErrors = False, returnKeyHash = False, returnModifiedTime = False, returnNamePhoneID = False, returnPhoneNumber = False, returnSchoolYearID = False, returnStudentID = False, returnUpdateHash = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every ElectronicTranscriptPhoneV1 in the district.

    This function returns a dataframe of every ElectronicTranscriptPhoneV1 in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ElectronicTranscriptPhoneV1/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ElectronicTranscriptPhoneV1/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getElectronicTranscriptPhoneV1(ElectronicTranscriptPhoneV1ID, EntityID = 1, returnElectronicTranscriptPhoneV1ID = False, returnAreaCityCode = False, returnCreatedTime = False, returnElectronicTranscriptRunHistoryID = False, returnEntityID = False, returnHasErrors = False, returnKeyHash = False, returnModifiedTime = False, returnNamePhoneID = False, returnPhoneNumber = False, returnSchoolYearID = False, returnStudentID = False, returnUpdateHash = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ElectronicTranscriptPhoneV1/" + str(ElectronicTranscriptPhoneV1ID), verb = "get", return_params_list = return_params)

def modifyElectronicTranscriptPhoneV1(ElectronicTranscriptPhoneV1ID, EntityID = 1, setElectronicTranscriptPhoneV1ID = None, setAreaCityCode = None, setCreatedTime = None, setElectronicTranscriptRunHistoryID = None, setEntityID = None, setHasErrors = None, setKeyHash = None, setModifiedTime = None, setNamePhoneID = None, setPhoneNumber = None, setSchoolYearID = None, setStudentID = None, setUpdateHash = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnElectronicTranscriptPhoneV1ID = False, returnAreaCityCode = False, returnCreatedTime = False, returnElectronicTranscriptRunHistoryID = False, returnEntityID = False, returnHasErrors = False, returnKeyHash = False, returnModifiedTime = False, returnNamePhoneID = False, returnPhoneNumber = False, returnSchoolYearID = False, returnStudentID = False, returnUpdateHash = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ElectronicTranscriptPhoneV1/" + str(ElectronicTranscriptPhoneV1ID), verb = "post", return_params_list = return_params, payload = payload_params)

def createElectronicTranscriptPhoneV1(EntityID = 1, setElectronicTranscriptPhoneV1ID = None, setAreaCityCode = None, setCreatedTime = None, setElectronicTranscriptRunHistoryID = None, setEntityID = None, setHasErrors = None, setKeyHash = None, setModifiedTime = None, setNamePhoneID = None, setPhoneNumber = None, setSchoolYearID = None, setStudentID = None, setUpdateHash = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnElectronicTranscriptPhoneV1ID = False, returnAreaCityCode = False, returnCreatedTime = False, returnElectronicTranscriptRunHistoryID = False, returnEntityID = False, returnHasErrors = False, returnKeyHash = False, returnModifiedTime = False, returnNamePhoneID = False, returnPhoneNumber = False, returnSchoolYearID = False, returnStudentID = False, returnUpdateHash = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ElectronicTranscriptPhoneV1/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteElectronicTranscriptPhoneV1(ElectronicTranscriptPhoneV1ID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ElectronicTranscriptPhoneV1/" + str(ElectronicTranscriptPhoneV1ID), verb = "delete")


def getEveryElectronicTranscriptRunHistory(searchConditions = [], EntityID = 1, returnElectronicTranscriptRunHistoryID = False, returnAPIErrorCount = False, returnAPISuccessCount = False, returnCanAccessMedia = False, returnCreatedTime = False, returnDistrictID = False, returnEndDateTime = False, returnEntityIDExportedFor = False, returnHasAnEntityExport = False, returnHasValidMedia = False, returnIsExport = False, returnIsLocked = False, returnMediaID = False, returnModifiedTime = False, returnRunData = False, returnRunParameters = False, returnSchoolYearID = False, returnScopeAccessAllowed = False, returnStartDateTime = False, returnStatus = False, returnStatusCode = False, returnStudentFilterDisplay = False, returnType = False, returnTypeCode = False, returnUserIDCanceledBy = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every ElectronicTranscriptRunHistory in the district.

    This function returns a dataframe of every ElectronicTranscriptRunHistory in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ElectronicTranscriptRunHistory/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ElectronicTranscriptRunHistory/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getElectronicTranscriptRunHistory(ElectronicTranscriptRunHistoryID, EntityID = 1, returnElectronicTranscriptRunHistoryID = False, returnAPIErrorCount = False, returnAPISuccessCount = False, returnCanAccessMedia = False, returnCreatedTime = False, returnDistrictID = False, returnEndDateTime = False, returnEntityIDExportedFor = False, returnHasAnEntityExport = False, returnHasValidMedia = False, returnIsExport = False, returnIsLocked = False, returnMediaID = False, returnModifiedTime = False, returnRunData = False, returnRunParameters = False, returnSchoolYearID = False, returnScopeAccessAllowed = False, returnStartDateTime = False, returnStatus = False, returnStatusCode = False, returnStudentFilterDisplay = False, returnType = False, returnTypeCode = False, returnUserIDCanceledBy = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ElectronicTranscriptRunHistory/" + str(ElectronicTranscriptRunHistoryID), verb = "get", return_params_list = return_params)

def modifyElectronicTranscriptRunHistory(ElectronicTranscriptRunHistoryID, EntityID = 1, setElectronicTranscriptRunHistoryID = None, setAPIErrorCount = None, setAPISuccessCount = None, setCanAccessMedia = None, setCreatedTime = None, setDistrictID = None, setEndDateTime = None, setEntityIDExportedFor = None, setHasAnEntityExport = None, setHasValidMedia = None, setIsExport = None, setIsLocked = None, setMediaID = None, setModifiedTime = None, setRunData = None, setRunParameters = None, setSchoolYearID = None, setScopeAccessAllowed = None, setStartDateTime = None, setStatus = None, setStatusCode = None, setStudentFilterDisplay = None, setType = None, setTypeCode = None, setUserIDCanceledBy = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnElectronicTranscriptRunHistoryID = False, returnAPIErrorCount = False, returnAPISuccessCount = False, returnCanAccessMedia = False, returnCreatedTime = False, returnDistrictID = False, returnEndDateTime = False, returnEntityIDExportedFor = False, returnHasAnEntityExport = False, returnHasValidMedia = False, returnIsExport = False, returnIsLocked = False, returnMediaID = False, returnModifiedTime = False, returnRunData = False, returnRunParameters = False, returnSchoolYearID = False, returnScopeAccessAllowed = False, returnStartDateTime = False, returnStatus = False, returnStatusCode = False, returnStudentFilterDisplay = False, returnType = False, returnTypeCode = False, returnUserIDCanceledBy = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ElectronicTranscriptRunHistory/" + str(ElectronicTranscriptRunHistoryID), verb = "post", return_params_list = return_params, payload = payload_params)

def createElectronicTranscriptRunHistory(EntityID = 1, setElectronicTranscriptRunHistoryID = None, setAPIErrorCount = None, setAPISuccessCount = None, setCanAccessMedia = None, setCreatedTime = None, setDistrictID = None, setEndDateTime = None, setEntityIDExportedFor = None, setHasAnEntityExport = None, setHasValidMedia = None, setIsExport = None, setIsLocked = None, setMediaID = None, setModifiedTime = None, setRunData = None, setRunParameters = None, setSchoolYearID = None, setScopeAccessAllowed = None, setStartDateTime = None, setStatus = None, setStatusCode = None, setStudentFilterDisplay = None, setType = None, setTypeCode = None, setUserIDCanceledBy = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnElectronicTranscriptRunHistoryID = False, returnAPIErrorCount = False, returnAPISuccessCount = False, returnCanAccessMedia = False, returnCreatedTime = False, returnDistrictID = False, returnEndDateTime = False, returnEntityIDExportedFor = False, returnHasAnEntityExport = False, returnHasValidMedia = False, returnIsExport = False, returnIsLocked = False, returnMediaID = False, returnModifiedTime = False, returnRunData = False, returnRunParameters = False, returnSchoolYearID = False, returnScopeAccessAllowed = False, returnStartDateTime = False, returnStatus = False, returnStatusCode = False, returnStudentFilterDisplay = False, returnType = False, returnTypeCode = False, returnUserIDCanceledBy = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ElectronicTranscriptRunHistory/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteElectronicTranscriptRunHistory(ElectronicTranscriptRunHistoryID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ElectronicTranscriptRunHistory/" + str(ElectronicTranscriptRunHistoryID), verb = "delete")


def getEveryElectronicTranscriptSubtestException(searchConditions = [], EntityID = 1, returnElectronicTranscriptSubtestExceptionID = False, returnCreatedTime = False, returnElectronicTranscriptRunHistoryID = False, returnElectronicTranscriptSubtestV1ID = False, returnEntityID = False, returnMessage = False, returnMessageType = False, returnMessageTypeCode = False, returnModifiedTime = False, returnProcessType = False, returnProcessTypeCode = False, returnRuleNumber = False, returnSchoolYearID = False, returnStudentID = False, returnStudentTestID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every ElectronicTranscriptSubtestException in the district.

    This function returns a dataframe of every ElectronicTranscriptSubtestException in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ElectronicTranscriptSubtestException/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ElectronicTranscriptSubtestException/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getElectronicTranscriptSubtestException(ElectronicTranscriptSubtestExceptionID, EntityID = 1, returnElectronicTranscriptSubtestExceptionID = False, returnCreatedTime = False, returnElectronicTranscriptRunHistoryID = False, returnElectronicTranscriptSubtestV1ID = False, returnEntityID = False, returnMessage = False, returnMessageType = False, returnMessageTypeCode = False, returnModifiedTime = False, returnProcessType = False, returnProcessTypeCode = False, returnRuleNumber = False, returnSchoolYearID = False, returnStudentID = False, returnStudentTestID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ElectronicTranscriptSubtestException/" + str(ElectronicTranscriptSubtestExceptionID), verb = "get", return_params_list = return_params)

def modifyElectronicTranscriptSubtestException(ElectronicTranscriptSubtestExceptionID, EntityID = 1, setElectronicTranscriptSubtestExceptionID = None, setCreatedTime = None, setElectronicTranscriptRunHistoryID = None, setElectronicTranscriptSubtestV1ID = None, setEntityID = None, setMessage = None, setMessageType = None, setMessageTypeCode = None, setModifiedTime = None, setProcessType = None, setProcessTypeCode = None, setRuleNumber = None, setSchoolYearID = None, setStudentID = None, setStudentTestID = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnElectronicTranscriptSubtestExceptionID = False, returnCreatedTime = False, returnElectronicTranscriptRunHistoryID = False, returnElectronicTranscriptSubtestV1ID = False, returnEntityID = False, returnMessage = False, returnMessageType = False, returnMessageTypeCode = False, returnModifiedTime = False, returnProcessType = False, returnProcessTypeCode = False, returnRuleNumber = False, returnSchoolYearID = False, returnStudentID = False, returnStudentTestID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ElectronicTranscriptSubtestException/" + str(ElectronicTranscriptSubtestExceptionID), verb = "post", return_params_list = return_params, payload = payload_params)

def createElectronicTranscriptSubtestException(EntityID = 1, setElectronicTranscriptSubtestExceptionID = None, setCreatedTime = None, setElectronicTranscriptRunHistoryID = None, setElectronicTranscriptSubtestV1ID = None, setEntityID = None, setMessage = None, setMessageType = None, setMessageTypeCode = None, setModifiedTime = None, setProcessType = None, setProcessTypeCode = None, setRuleNumber = None, setSchoolYearID = None, setStudentID = None, setStudentTestID = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnElectronicTranscriptSubtestExceptionID = False, returnCreatedTime = False, returnElectronicTranscriptRunHistoryID = False, returnElectronicTranscriptSubtestV1ID = False, returnEntityID = False, returnMessage = False, returnMessageType = False, returnMessageTypeCode = False, returnModifiedTime = False, returnProcessType = False, returnProcessTypeCode = False, returnRuleNumber = False, returnSchoolYearID = False, returnStudentID = False, returnStudentTestID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ElectronicTranscriptSubtestException/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteElectronicTranscriptSubtestException(ElectronicTranscriptSubtestExceptionID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ElectronicTranscriptSubtestException/" + str(ElectronicTranscriptSubtestExceptionID), verb = "delete")


def getEveryElectronicTranscriptSubtestV1(searchConditions = [], EntityID = 1, returnElectronicTranscriptSubtestV1ID = False, returnCreatedTime = False, returnEducationSubtest = False, returnEducationSubtestCode = False, returnEducationTest = False, returnEducationTestCode = False, returnElectronicTranscriptRunHistoryID = False, returnEntityID = False, returnHasErrors = False, returnKeyHash = False, returnModifiedTime = False, returnNoteMessage = False, returnSchoolYearID = False, returnStudentID = False, returnStudentTestID = False, returnSubtestName = False, returnTestDate = False, returnUpdateHash = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every ElectronicTranscriptSubtestV1 in the district.

    This function returns a dataframe of every ElectronicTranscriptSubtestV1 in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ElectronicTranscriptSubtestV1/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ElectronicTranscriptSubtestV1/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getElectronicTranscriptSubtestV1(ElectronicTranscriptSubtestV1ID, EntityID = 1, returnElectronicTranscriptSubtestV1ID = False, returnCreatedTime = False, returnEducationSubtest = False, returnEducationSubtestCode = False, returnEducationTest = False, returnEducationTestCode = False, returnElectronicTranscriptRunHistoryID = False, returnEntityID = False, returnHasErrors = False, returnKeyHash = False, returnModifiedTime = False, returnNoteMessage = False, returnSchoolYearID = False, returnStudentID = False, returnStudentTestID = False, returnSubtestName = False, returnTestDate = False, returnUpdateHash = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ElectronicTranscriptSubtestV1/" + str(ElectronicTranscriptSubtestV1ID), verb = "get", return_params_list = return_params)

def modifyElectronicTranscriptSubtestV1(ElectronicTranscriptSubtestV1ID, EntityID = 1, setElectronicTranscriptSubtestV1ID = None, setCreatedTime = None, setEducationSubtest = None, setEducationSubtestCode = None, setEducationTest = None, setEducationTestCode = None, setElectronicTranscriptRunHistoryID = None, setEntityID = None, setHasErrors = None, setKeyHash = None, setModifiedTime = None, setNoteMessage = None, setSchoolYearID = None, setStudentID = None, setStudentTestID = None, setSubtestName = None, setTestDate = None, setUpdateHash = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnElectronicTranscriptSubtestV1ID = False, returnCreatedTime = False, returnEducationSubtest = False, returnEducationSubtestCode = False, returnEducationTest = False, returnEducationTestCode = False, returnElectronicTranscriptRunHistoryID = False, returnEntityID = False, returnHasErrors = False, returnKeyHash = False, returnModifiedTime = False, returnNoteMessage = False, returnSchoolYearID = False, returnStudentID = False, returnStudentTestID = False, returnSubtestName = False, returnTestDate = False, returnUpdateHash = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ElectronicTranscriptSubtestV1/" + str(ElectronicTranscriptSubtestV1ID), verb = "post", return_params_list = return_params, payload = payload_params)

def createElectronicTranscriptSubtestV1(EntityID = 1, setElectronicTranscriptSubtestV1ID = None, setCreatedTime = None, setEducationSubtest = None, setEducationSubtestCode = None, setEducationTest = None, setEducationTestCode = None, setElectronicTranscriptRunHistoryID = None, setEntityID = None, setHasErrors = None, setKeyHash = None, setModifiedTime = None, setNoteMessage = None, setSchoolYearID = None, setStudentID = None, setStudentTestID = None, setSubtestName = None, setTestDate = None, setUpdateHash = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnElectronicTranscriptSubtestV1ID = False, returnCreatedTime = False, returnEducationSubtest = False, returnEducationSubtestCode = False, returnEducationTest = False, returnEducationTestCode = False, returnElectronicTranscriptRunHistoryID = False, returnEntityID = False, returnHasErrors = False, returnKeyHash = False, returnModifiedTime = False, returnNoteMessage = False, returnSchoolYearID = False, returnStudentID = False, returnStudentTestID = False, returnSubtestName = False, returnTestDate = False, returnUpdateHash = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ElectronicTranscriptSubtestV1/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteElectronicTranscriptSubtestV1(ElectronicTranscriptSubtestV1ID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ElectronicTranscriptSubtestV1/" + str(ElectronicTranscriptSubtestV1ID), verb = "delete")


def getEveryElectronicTranscriptTestException(searchConditions = [], EntityID = 1, returnElectronicTranscriptTestExceptionID = False, returnCreatedTime = False, returnElectronicTranscriptRunHistoryID = False, returnElectronicTranscriptTestV1ID = False, returnEntityID = False, returnMessage = False, returnMessageType = False, returnMessageTypeCode = False, returnModifiedTime = False, returnProcessType = False, returnProcessTypeCode = False, returnRuleNumber = False, returnSchoolYearID = False, returnStudentID = False, returnStudentTestID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every ElectronicTranscriptTestException in the district.

    This function returns a dataframe of every ElectronicTranscriptTestException in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ElectronicTranscriptTestException/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ElectronicTranscriptTestException/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getElectronicTranscriptTestException(ElectronicTranscriptTestExceptionID, EntityID = 1, returnElectronicTranscriptTestExceptionID = False, returnCreatedTime = False, returnElectronicTranscriptRunHistoryID = False, returnElectronicTranscriptTestV1ID = False, returnEntityID = False, returnMessage = False, returnMessageType = False, returnMessageTypeCode = False, returnModifiedTime = False, returnProcessType = False, returnProcessTypeCode = False, returnRuleNumber = False, returnSchoolYearID = False, returnStudentID = False, returnStudentTestID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ElectronicTranscriptTestException/" + str(ElectronicTranscriptTestExceptionID), verb = "get", return_params_list = return_params)

def modifyElectronicTranscriptTestException(ElectronicTranscriptTestExceptionID, EntityID = 1, setElectronicTranscriptTestExceptionID = None, setCreatedTime = None, setElectronicTranscriptRunHistoryID = None, setElectronicTranscriptTestV1ID = None, setEntityID = None, setMessage = None, setMessageType = None, setMessageTypeCode = None, setModifiedTime = None, setProcessType = None, setProcessTypeCode = None, setRuleNumber = None, setSchoolYearID = None, setStudentID = None, setStudentTestID = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnElectronicTranscriptTestExceptionID = False, returnCreatedTime = False, returnElectronicTranscriptRunHistoryID = False, returnElectronicTranscriptTestV1ID = False, returnEntityID = False, returnMessage = False, returnMessageType = False, returnMessageTypeCode = False, returnModifiedTime = False, returnProcessType = False, returnProcessTypeCode = False, returnRuleNumber = False, returnSchoolYearID = False, returnStudentID = False, returnStudentTestID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ElectronicTranscriptTestException/" + str(ElectronicTranscriptTestExceptionID), verb = "post", return_params_list = return_params, payload = payload_params)

def createElectronicTranscriptTestException(EntityID = 1, setElectronicTranscriptTestExceptionID = None, setCreatedTime = None, setElectronicTranscriptRunHistoryID = None, setElectronicTranscriptTestV1ID = None, setEntityID = None, setMessage = None, setMessageType = None, setMessageTypeCode = None, setModifiedTime = None, setProcessType = None, setProcessTypeCode = None, setRuleNumber = None, setSchoolYearID = None, setStudentID = None, setStudentTestID = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnElectronicTranscriptTestExceptionID = False, returnCreatedTime = False, returnElectronicTranscriptRunHistoryID = False, returnElectronicTranscriptTestV1ID = False, returnEntityID = False, returnMessage = False, returnMessageType = False, returnMessageTypeCode = False, returnModifiedTime = False, returnProcessType = False, returnProcessTypeCode = False, returnRuleNumber = False, returnSchoolYearID = False, returnStudentID = False, returnStudentTestID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ElectronicTranscriptTestException/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteElectronicTranscriptTestException(ElectronicTranscriptTestExceptionID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ElectronicTranscriptTestException/" + str(ElectronicTranscriptTestExceptionID), verb = "delete")


def getEveryElectronicTranscriptTestScoreException(searchConditions = [], EntityID = 1, returnElectronicTranscriptTestScoreExceptionID = False, returnCreatedTime = False, returnElectronicTranscriptRunHistoryID = False, returnElectronicTranscriptTestScoreV1ID = False, returnEntityID = False, returnMessage = False, returnMessageType = False, returnMessageTypeCode = False, returnModifiedTime = False, returnProcessType = False, returnProcessTypeCode = False, returnRuleNumber = False, returnSchoolYearID = False, returnStudentID = False, returnStudentTestID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every ElectronicTranscriptTestScoreException in the district.

    This function returns a dataframe of every ElectronicTranscriptTestScoreException in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ElectronicTranscriptTestScoreException/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ElectronicTranscriptTestScoreException/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getElectronicTranscriptTestScoreException(ElectronicTranscriptTestScoreExceptionID, EntityID = 1, returnElectronicTranscriptTestScoreExceptionID = False, returnCreatedTime = False, returnElectronicTranscriptRunHistoryID = False, returnElectronicTranscriptTestScoreV1ID = False, returnEntityID = False, returnMessage = False, returnMessageType = False, returnMessageTypeCode = False, returnModifiedTime = False, returnProcessType = False, returnProcessTypeCode = False, returnRuleNumber = False, returnSchoolYearID = False, returnStudentID = False, returnStudentTestID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ElectronicTranscriptTestScoreException/" + str(ElectronicTranscriptTestScoreExceptionID), verb = "get", return_params_list = return_params)

def modifyElectronicTranscriptTestScoreException(ElectronicTranscriptTestScoreExceptionID, EntityID = 1, setElectronicTranscriptTestScoreExceptionID = None, setCreatedTime = None, setElectronicTranscriptRunHistoryID = None, setElectronicTranscriptTestScoreV1ID = None, setEntityID = None, setMessage = None, setMessageType = None, setMessageTypeCode = None, setModifiedTime = None, setProcessType = None, setProcessTypeCode = None, setRuleNumber = None, setSchoolYearID = None, setStudentID = None, setStudentTestID = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnElectronicTranscriptTestScoreExceptionID = False, returnCreatedTime = False, returnElectronicTranscriptRunHistoryID = False, returnElectronicTranscriptTestScoreV1ID = False, returnEntityID = False, returnMessage = False, returnMessageType = False, returnMessageTypeCode = False, returnModifiedTime = False, returnProcessType = False, returnProcessTypeCode = False, returnRuleNumber = False, returnSchoolYearID = False, returnStudentID = False, returnStudentTestID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ElectronicTranscriptTestScoreException/" + str(ElectronicTranscriptTestScoreExceptionID), verb = "post", return_params_list = return_params, payload = payload_params)

def createElectronicTranscriptTestScoreException(EntityID = 1, setElectronicTranscriptTestScoreExceptionID = None, setCreatedTime = None, setElectronicTranscriptRunHistoryID = None, setElectronicTranscriptTestScoreV1ID = None, setEntityID = None, setMessage = None, setMessageType = None, setMessageTypeCode = None, setModifiedTime = None, setProcessType = None, setProcessTypeCode = None, setRuleNumber = None, setSchoolYearID = None, setStudentID = None, setStudentTestID = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnElectronicTranscriptTestScoreExceptionID = False, returnCreatedTime = False, returnElectronicTranscriptRunHistoryID = False, returnElectronicTranscriptTestScoreV1ID = False, returnEntityID = False, returnMessage = False, returnMessageType = False, returnMessageTypeCode = False, returnModifiedTime = False, returnProcessType = False, returnProcessTypeCode = False, returnRuleNumber = False, returnSchoolYearID = False, returnStudentID = False, returnStudentTestID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ElectronicTranscriptTestScoreException/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteElectronicTranscriptTestScoreException(ElectronicTranscriptTestScoreExceptionID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ElectronicTranscriptTestScoreException/" + str(ElectronicTranscriptTestScoreExceptionID), verb = "delete")


def getEveryElectronicTranscriptTestScoreV1(searchConditions = [], EntityID = 1, returnElectronicTranscriptTestScoreV1ID = False, returnCreatedTime = False, returnEducationSubtest = False, returnEducationSubtestCode = False, returnEducationTest = False, returnEducationTestCode = False, returnElectronicTranscriptRunHistoryID = False, returnEntityID = False, returnHasErrors = False, returnKeyHash = False, returnModifiedTime = False, returnNoteMessage = False, returnSchoolYearID = False, returnScoreValue = False, returnStudentID = False, returnStudentTestID = False, returnSubtestName = False, returnTestDate = False, returnTestScoreMethod = False, returnTestScoreMethodCode = False, returnUpdateHash = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every ElectronicTranscriptTestScoreV1 in the district.

    This function returns a dataframe of every ElectronicTranscriptTestScoreV1 in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ElectronicTranscriptTestScoreV1/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ElectronicTranscriptTestScoreV1/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getElectronicTranscriptTestScoreV1(ElectronicTranscriptTestScoreV1ID, EntityID = 1, returnElectronicTranscriptTestScoreV1ID = False, returnCreatedTime = False, returnEducationSubtest = False, returnEducationSubtestCode = False, returnEducationTest = False, returnEducationTestCode = False, returnElectronicTranscriptRunHistoryID = False, returnEntityID = False, returnHasErrors = False, returnKeyHash = False, returnModifiedTime = False, returnNoteMessage = False, returnSchoolYearID = False, returnScoreValue = False, returnStudentID = False, returnStudentTestID = False, returnSubtestName = False, returnTestDate = False, returnTestScoreMethod = False, returnTestScoreMethodCode = False, returnUpdateHash = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ElectronicTranscriptTestScoreV1/" + str(ElectronicTranscriptTestScoreV1ID), verb = "get", return_params_list = return_params)

def modifyElectronicTranscriptTestScoreV1(ElectronicTranscriptTestScoreV1ID, EntityID = 1, setElectronicTranscriptTestScoreV1ID = None, setCreatedTime = None, setEducationSubtest = None, setEducationSubtestCode = None, setEducationTest = None, setEducationTestCode = None, setElectronicTranscriptRunHistoryID = None, setEntityID = None, setHasErrors = None, setKeyHash = None, setModifiedTime = None, setNoteMessage = None, setSchoolYearID = None, setScoreValue = None, setStudentID = None, setStudentTestID = None, setSubtestName = None, setTestDate = None, setTestScoreMethod = None, setTestScoreMethodCode = None, setUpdateHash = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnElectronicTranscriptTestScoreV1ID = False, returnCreatedTime = False, returnEducationSubtest = False, returnEducationSubtestCode = False, returnEducationTest = False, returnEducationTestCode = False, returnElectronicTranscriptRunHistoryID = False, returnEntityID = False, returnHasErrors = False, returnKeyHash = False, returnModifiedTime = False, returnNoteMessage = False, returnSchoolYearID = False, returnScoreValue = False, returnStudentID = False, returnStudentTestID = False, returnSubtestName = False, returnTestDate = False, returnTestScoreMethod = False, returnTestScoreMethodCode = False, returnUpdateHash = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ElectronicTranscriptTestScoreV1/" + str(ElectronicTranscriptTestScoreV1ID), verb = "post", return_params_list = return_params, payload = payload_params)

def createElectronicTranscriptTestScoreV1(EntityID = 1, setElectronicTranscriptTestScoreV1ID = None, setCreatedTime = None, setEducationSubtest = None, setEducationSubtestCode = None, setEducationTest = None, setEducationTestCode = None, setElectronicTranscriptRunHistoryID = None, setEntityID = None, setHasErrors = None, setKeyHash = None, setModifiedTime = None, setNoteMessage = None, setSchoolYearID = None, setScoreValue = None, setStudentID = None, setStudentTestID = None, setSubtestName = None, setTestDate = None, setTestScoreMethod = None, setTestScoreMethodCode = None, setUpdateHash = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnElectronicTranscriptTestScoreV1ID = False, returnCreatedTime = False, returnEducationSubtest = False, returnEducationSubtestCode = False, returnEducationTest = False, returnEducationTestCode = False, returnElectronicTranscriptRunHistoryID = False, returnEntityID = False, returnHasErrors = False, returnKeyHash = False, returnModifiedTime = False, returnNoteMessage = False, returnSchoolYearID = False, returnScoreValue = False, returnStudentID = False, returnStudentTestID = False, returnSubtestName = False, returnTestDate = False, returnTestScoreMethod = False, returnTestScoreMethodCode = False, returnUpdateHash = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ElectronicTranscriptTestScoreV1/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteElectronicTranscriptTestScoreV1(ElectronicTranscriptTestScoreV1ID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ElectronicTranscriptTestScoreV1/" + str(ElectronicTranscriptTestScoreV1ID), verb = "delete")


def getEveryElectronicTranscriptTestV1(searchConditions = [], EntityID = 1, returnElectronicTranscriptTestV1ID = False, returnCreatedTime = False, returnEducationTest = False, returnEducationTestCode = False, returnElectronicTranscriptRunHistoryID = False, returnEntityID = False, returnHasErrors = False, returnKeyHash = False, returnModifiedTime = False, returnNoteMessage = False, returnSchoolYearID = False, returnStudentID = False, returnStudentTestID = False, returnTestDate = False, returnTestName = False, returnUpdateHash = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every ElectronicTranscriptTestV1 in the district.

    This function returns a dataframe of every ElectronicTranscriptTestV1 in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ElectronicTranscriptTestV1/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ElectronicTranscriptTestV1/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getElectronicTranscriptTestV1(ElectronicTranscriptTestV1ID, EntityID = 1, returnElectronicTranscriptTestV1ID = False, returnCreatedTime = False, returnEducationTest = False, returnEducationTestCode = False, returnElectronicTranscriptRunHistoryID = False, returnEntityID = False, returnHasErrors = False, returnKeyHash = False, returnModifiedTime = False, returnNoteMessage = False, returnSchoolYearID = False, returnStudentID = False, returnStudentTestID = False, returnTestDate = False, returnTestName = False, returnUpdateHash = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ElectronicTranscriptTestV1/" + str(ElectronicTranscriptTestV1ID), verb = "get", return_params_list = return_params)

def modifyElectronicTranscriptTestV1(ElectronicTranscriptTestV1ID, EntityID = 1, setElectronicTranscriptTestV1ID = None, setCreatedTime = None, setEducationTest = None, setEducationTestCode = None, setElectronicTranscriptRunHistoryID = None, setEntityID = None, setHasErrors = None, setKeyHash = None, setModifiedTime = None, setNoteMessage = None, setSchoolYearID = None, setStudentID = None, setStudentTestID = None, setTestDate = None, setTestName = None, setUpdateHash = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnElectronicTranscriptTestV1ID = False, returnCreatedTime = False, returnEducationTest = False, returnEducationTestCode = False, returnElectronicTranscriptRunHistoryID = False, returnEntityID = False, returnHasErrors = False, returnKeyHash = False, returnModifiedTime = False, returnNoteMessage = False, returnSchoolYearID = False, returnStudentID = False, returnStudentTestID = False, returnTestDate = False, returnTestName = False, returnUpdateHash = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ElectronicTranscriptTestV1/" + str(ElectronicTranscriptTestV1ID), verb = "post", return_params_list = return_params, payload = payload_params)

def createElectronicTranscriptTestV1(EntityID = 1, setElectronicTranscriptTestV1ID = None, setCreatedTime = None, setEducationTest = None, setEducationTestCode = None, setElectronicTranscriptRunHistoryID = None, setEntityID = None, setHasErrors = None, setKeyHash = None, setModifiedTime = None, setNoteMessage = None, setSchoolYearID = None, setStudentID = None, setStudentTestID = None, setTestDate = None, setTestName = None, setUpdateHash = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnElectronicTranscriptTestV1ID = False, returnCreatedTime = False, returnEducationTest = False, returnEducationTestCode = False, returnElectronicTranscriptRunHistoryID = False, returnEntityID = False, returnHasErrors = False, returnKeyHash = False, returnModifiedTime = False, returnNoteMessage = False, returnSchoolYearID = False, returnStudentID = False, returnStudentTestID = False, returnTestDate = False, returnTestName = False, returnUpdateHash = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ElectronicTranscriptTestV1/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteElectronicTranscriptTestV1(ElectronicTranscriptTestV1ID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/ElectronicTranscriptTestV1/" + str(ElectronicTranscriptTestV1ID), verb = "delete")


def getEveryFactorBasedAddOn(searchConditions = [], EntityID = 1, returnFactorBasedAddOnID = False, returnCreatedTime = False, returnFactor = False, returnFactorBasedAddOnIDClonedFrom = False, returnGPABucketEntityID = False, returnGradeReferenceID = False, returnGradingEndDateCutoffForCumulative = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every FactorBasedAddOn in the district.

    This function returns a dataframe of every FactorBasedAddOn in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/FactorBasedAddOn/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/FactorBasedAddOn/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getFactorBasedAddOn(FactorBasedAddOnID, EntityID = 1, returnFactorBasedAddOnID = False, returnCreatedTime = False, returnFactor = False, returnFactorBasedAddOnIDClonedFrom = False, returnGPABucketEntityID = False, returnGradeReferenceID = False, returnGradingEndDateCutoffForCumulative = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/FactorBasedAddOn/" + str(FactorBasedAddOnID), verb = "get", return_params_list = return_params)

def modifyFactorBasedAddOn(FactorBasedAddOnID, EntityID = 1, setFactorBasedAddOnID = None, setCreatedTime = None, setFactor = None, setFactorBasedAddOnIDClonedFrom = None, setGPABucketEntityID = None, setGradeReferenceID = None, setGradingEndDateCutoffForCumulative = None, setModifiedTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnFactorBasedAddOnID = False, returnCreatedTime = False, returnFactor = False, returnFactorBasedAddOnIDClonedFrom = False, returnGPABucketEntityID = False, returnGradeReferenceID = False, returnGradingEndDateCutoffForCumulative = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/FactorBasedAddOn/" + str(FactorBasedAddOnID), verb = "post", return_params_list = return_params, payload = payload_params)

def createFactorBasedAddOn(EntityID = 1, setFactorBasedAddOnID = None, setCreatedTime = None, setFactor = None, setFactorBasedAddOnIDClonedFrom = None, setGPABucketEntityID = None, setGradeReferenceID = None, setGradingEndDateCutoffForCumulative = None, setModifiedTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnFactorBasedAddOnID = False, returnCreatedTime = False, returnFactor = False, returnFactorBasedAddOnIDClonedFrom = False, returnGPABucketEntityID = False, returnGradeReferenceID = False, returnGradingEndDateCutoffForCumulative = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/FactorBasedAddOn/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteFactorBasedAddOn(FactorBasedAddOnID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/FactorBasedAddOn/" + str(FactorBasedAddOnID), verb = "delete")


def getEveryGPABucket(searchConditions = [], EntityID = 1, returnGPABucketID = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnGPABucketTypeID = False, returnModifiedTime = False, returnName = False, returnNameDescription = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every GPABucket in the district.

    This function returns a dataframe of every GPABucket in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GPABucket/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GPABucket/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getGPABucket(GPABucketID, EntityID = 1, returnGPABucketID = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnGPABucketTypeID = False, returnModifiedTime = False, returnName = False, returnNameDescription = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GPABucket/" + str(GPABucketID), verb = "get", return_params_list = return_params)

def modifyGPABucket(GPABucketID, EntityID = 1, setGPABucketID = None, setCreatedTime = None, setDescription = None, setDistrictGroupKey = None, setGPABucketTypeID = None, setModifiedTime = None, setName = None, setNameDescription = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnGPABucketID = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnGPABucketTypeID = False, returnModifiedTime = False, returnName = False, returnNameDescription = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GPABucket/" + str(GPABucketID), verb = "post", return_params_list = return_params, payload = payload_params)

def createGPABucket(EntityID = 1, setGPABucketID = None, setCreatedTime = None, setDescription = None, setDistrictGroupKey = None, setGPABucketTypeID = None, setModifiedTime = None, setName = None, setNameDescription = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnGPABucketID = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnGPABucketTypeID = False, returnModifiedTime = False, returnName = False, returnNameDescription = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GPABucket/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteGPABucket(GPABucketID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GPABucket/" + str(GPABucketID), verb = "delete")


def getEveryGPABucketEntity(searchConditions = [], EntityID = 1, returnGPABucketEntityID = False, returnCreatedTime = False, returnDisplayOrder = False, returnEntityGroupKey = False, returnEntityID = False, returnFamilyAccessDisplayGradYearHigh = False, returnFamilyAccessDisplayGradYearLow = False, returnGPABucketEntityIDClonedFrom = False, returnGPABucketID = False, returnModifiedTime = False, returnSchoolYearID = False, returnUseForFamilyAccess = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every GPABucketEntity in the district.

    This function returns a dataframe of every GPABucketEntity in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GPABucketEntity/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GPABucketEntity/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getGPABucketEntity(GPABucketEntityID, EntityID = 1, returnGPABucketEntityID = False, returnCreatedTime = False, returnDisplayOrder = False, returnEntityGroupKey = False, returnEntityID = False, returnFamilyAccessDisplayGradYearHigh = False, returnFamilyAccessDisplayGradYearLow = False, returnGPABucketEntityIDClonedFrom = False, returnGPABucketID = False, returnModifiedTime = False, returnSchoolYearID = False, returnUseForFamilyAccess = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GPABucketEntity/" + str(GPABucketEntityID), verb = "get", return_params_list = return_params)

def modifyGPABucketEntity(GPABucketEntityID, EntityID = 1, setGPABucketEntityID = None, setCreatedTime = None, setDisplayOrder = None, setEntityGroupKey = None, setEntityID = None, setFamilyAccessDisplayGradYearHigh = None, setFamilyAccessDisplayGradYearLow = None, setGPABucketEntityIDClonedFrom = None, setGPABucketID = None, setModifiedTime = None, setSchoolYearID = None, setUseForFamilyAccess = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnGPABucketEntityID = False, returnCreatedTime = False, returnDisplayOrder = False, returnEntityGroupKey = False, returnEntityID = False, returnFamilyAccessDisplayGradYearHigh = False, returnFamilyAccessDisplayGradYearLow = False, returnGPABucketEntityIDClonedFrom = False, returnGPABucketID = False, returnModifiedTime = False, returnSchoolYearID = False, returnUseForFamilyAccess = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GPABucketEntity/" + str(GPABucketEntityID), verb = "post", return_params_list = return_params, payload = payload_params)

def createGPABucketEntity(EntityID = 1, setGPABucketEntityID = None, setCreatedTime = None, setDisplayOrder = None, setEntityGroupKey = None, setEntityID = None, setFamilyAccessDisplayGradYearHigh = None, setFamilyAccessDisplayGradYearLow = None, setGPABucketEntityIDClonedFrom = None, setGPABucketID = None, setModifiedTime = None, setSchoolYearID = None, setUseForFamilyAccess = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnGPABucketEntityID = False, returnCreatedTime = False, returnDisplayOrder = False, returnEntityGroupKey = False, returnEntityID = False, returnFamilyAccessDisplayGradYearHigh = False, returnFamilyAccessDisplayGradYearLow = False, returnGPABucketEntityIDClonedFrom = False, returnGPABucketID = False, returnModifiedTime = False, returnSchoolYearID = False, returnUseForFamilyAccess = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GPABucketEntity/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteGPABucketEntity(GPABucketEntityID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GPABucketEntity/" + str(GPABucketEntityID), verb = "delete")


def getEveryGPABucketGroup(searchConditions = [], EntityID = 1, returnGPABucketGroupID = False, returnCreatedTime = False, returnEntityGroupKey = False, returnGPABucketGroupIDClonedFrom = False, returnGPABucketGroupSummaryID = False, returnGPABucketID = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every GPABucketGroup in the district.

    This function returns a dataframe of every GPABucketGroup in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GPABucketGroup/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GPABucketGroup/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getGPABucketGroup(GPABucketGroupID, EntityID = 1, returnGPABucketGroupID = False, returnCreatedTime = False, returnEntityGroupKey = False, returnGPABucketGroupIDClonedFrom = False, returnGPABucketGroupSummaryID = False, returnGPABucketID = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GPABucketGroup/" + str(GPABucketGroupID), verb = "get", return_params_list = return_params)

def modifyGPABucketGroup(GPABucketGroupID, EntityID = 1, setGPABucketGroupID = None, setCreatedTime = None, setEntityGroupKey = None, setGPABucketGroupIDClonedFrom = None, setGPABucketGroupSummaryID = None, setGPABucketID = None, setModifiedTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnGPABucketGroupID = False, returnCreatedTime = False, returnEntityGroupKey = False, returnGPABucketGroupIDClonedFrom = False, returnGPABucketGroupSummaryID = False, returnGPABucketID = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GPABucketGroup/" + str(GPABucketGroupID), verb = "post", return_params_list = return_params, payload = payload_params)

def createGPABucketGroup(EntityID = 1, setGPABucketGroupID = None, setCreatedTime = None, setEntityGroupKey = None, setGPABucketGroupIDClonedFrom = None, setGPABucketGroupSummaryID = None, setGPABucketID = None, setModifiedTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnGPABucketGroupID = False, returnCreatedTime = False, returnEntityGroupKey = False, returnGPABucketGroupIDClonedFrom = False, returnGPABucketGroupSummaryID = False, returnGPABucketID = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GPABucketGroup/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteGPABucketGroup(GPABucketGroupID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GPABucketGroup/" + str(GPABucketGroupID), verb = "delete")


def getEveryGPABucketGroupGradeBucket(searchConditions = [], EntityID = 1, returnGPABucketGroupGradeBucketID = False, returnCreatedTime = False, returnEntityGroupKey = False, returnGPABucketGroupGradeBucketIDClonedFrom = False, returnGPABucketGroupID = False, returnGradeBucketID = False, returnGradeRequiredForGPABucket = False, returnIsUpToDate = False, returnModifiedTime = False, returnPercent = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every GPABucketGroupGradeBucket in the district.

    This function returns a dataframe of every GPABucketGroupGradeBucket in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GPABucketGroupGradeBucket/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GPABucketGroupGradeBucket/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getGPABucketGroupGradeBucket(GPABucketGroupGradeBucketID, EntityID = 1, returnGPABucketGroupGradeBucketID = False, returnCreatedTime = False, returnEntityGroupKey = False, returnGPABucketGroupGradeBucketIDClonedFrom = False, returnGPABucketGroupID = False, returnGradeBucketID = False, returnGradeRequiredForGPABucket = False, returnIsUpToDate = False, returnModifiedTime = False, returnPercent = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GPABucketGroupGradeBucket/" + str(GPABucketGroupGradeBucketID), verb = "get", return_params_list = return_params)

def modifyGPABucketGroupGradeBucket(GPABucketGroupGradeBucketID, EntityID = 1, setGPABucketGroupGradeBucketID = None, setCreatedTime = None, setEntityGroupKey = None, setGPABucketGroupGradeBucketIDClonedFrom = None, setGPABucketGroupID = None, setGradeBucketID = None, setGradeRequiredForGPABucket = None, setIsUpToDate = None, setModifiedTime = None, setPercent = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnGPABucketGroupGradeBucketID = False, returnCreatedTime = False, returnEntityGroupKey = False, returnGPABucketGroupGradeBucketIDClonedFrom = False, returnGPABucketGroupID = False, returnGradeBucketID = False, returnGradeRequiredForGPABucket = False, returnIsUpToDate = False, returnModifiedTime = False, returnPercent = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GPABucketGroupGradeBucket/" + str(GPABucketGroupGradeBucketID), verb = "post", return_params_list = return_params, payload = payload_params)

def createGPABucketGroupGradeBucket(EntityID = 1, setGPABucketGroupGradeBucketID = None, setCreatedTime = None, setEntityGroupKey = None, setGPABucketGroupGradeBucketIDClonedFrom = None, setGPABucketGroupID = None, setGradeBucketID = None, setGradeRequiredForGPABucket = None, setIsUpToDate = None, setModifiedTime = None, setPercent = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnGPABucketGroupGradeBucketID = False, returnCreatedTime = False, returnEntityGroupKey = False, returnGPABucketGroupGradeBucketIDClonedFrom = False, returnGPABucketGroupID = False, returnGradeBucketID = False, returnGradeRequiredForGPABucket = False, returnIsUpToDate = False, returnModifiedTime = False, returnPercent = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GPABucketGroupGradeBucket/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteGPABucketGroupGradeBucket(GPABucketGroupGradeBucketID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GPABucketGroupGradeBucket/" + str(GPABucketGroupGradeBucketID), verb = "delete")


def getEveryGPABucketGroupGradeBucketStudentOverride(searchConditions = [], EntityID = 1, returnGPABucketGroupGradeBucketStudentOverrideID = False, returnCreatedTime = False, returnGPABucketGroupGradeBucketID = False, returnGradeRequiredForGPABucket = False, returnModifiedTime = False, returnPercent = False, returnStudentSectionID = False, returnUseOverride = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every GPABucketGroupGradeBucketStudentOverride in the district.

    This function returns a dataframe of every GPABucketGroupGradeBucketStudentOverride in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GPABucketGroupGradeBucketStudentOverride/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GPABucketGroupGradeBucketStudentOverride/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getGPABucketGroupGradeBucketStudentOverride(GPABucketGroupGradeBucketStudentOverrideID, EntityID = 1, returnGPABucketGroupGradeBucketStudentOverrideID = False, returnCreatedTime = False, returnGPABucketGroupGradeBucketID = False, returnGradeRequiredForGPABucket = False, returnModifiedTime = False, returnPercent = False, returnStudentSectionID = False, returnUseOverride = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GPABucketGroupGradeBucketStudentOverride/" + str(GPABucketGroupGradeBucketStudentOverrideID), verb = "get", return_params_list = return_params)

def modifyGPABucketGroupGradeBucketStudentOverride(GPABucketGroupGradeBucketStudentOverrideID, EntityID = 1, setGPABucketGroupGradeBucketStudentOverrideID = None, setCreatedTime = None, setGPABucketGroupGradeBucketID = None, setGradeRequiredForGPABucket = None, setModifiedTime = None, setPercent = None, setStudentSectionID = None, setUseOverride = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnGPABucketGroupGradeBucketStudentOverrideID = False, returnCreatedTime = False, returnGPABucketGroupGradeBucketID = False, returnGradeRequiredForGPABucket = False, returnModifiedTime = False, returnPercent = False, returnStudentSectionID = False, returnUseOverride = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GPABucketGroupGradeBucketStudentOverride/" + str(GPABucketGroupGradeBucketStudentOverrideID), verb = "post", return_params_list = return_params, payload = payload_params)

def createGPABucketGroupGradeBucketStudentOverride(EntityID = 1, setGPABucketGroupGradeBucketStudentOverrideID = None, setCreatedTime = None, setGPABucketGroupGradeBucketID = None, setGradeRequiredForGPABucket = None, setModifiedTime = None, setPercent = None, setStudentSectionID = None, setUseOverride = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnGPABucketGroupGradeBucketStudentOverrideID = False, returnCreatedTime = False, returnGPABucketGroupGradeBucketID = False, returnGradeRequiredForGPABucket = False, returnModifiedTime = False, returnPercent = False, returnStudentSectionID = False, returnUseOverride = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GPABucketGroupGradeBucketStudentOverride/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteGPABucketGroupGradeBucketStudentOverride(GPABucketGroupGradeBucketStudentOverrideID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GPABucketGroupGradeBucketStudentOverride/" + str(GPABucketGroupGradeBucketStudentOverrideID), verb = "delete")


def getEveryGPABucketGroupSummary(searchConditions = [], EntityID = 1, returnGPABucketGroupSummaryID = False, returnCreatedTime = False, returnEntityGroupKey = False, returnGPABucketGroupSummaryIDClonedFrom = False, returnGPABucketSetID = False, returnGradingPeriodSetID = False, returnModifiedTime = False, returnSectionLengthID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every GPABucketGroupSummary in the district.

    This function returns a dataframe of every GPABucketGroupSummary in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GPABucketGroupSummary/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GPABucketGroupSummary/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getGPABucketGroupSummary(GPABucketGroupSummaryID, EntityID = 1, returnGPABucketGroupSummaryID = False, returnCreatedTime = False, returnEntityGroupKey = False, returnGPABucketGroupSummaryIDClonedFrom = False, returnGPABucketSetID = False, returnGradingPeriodSetID = False, returnModifiedTime = False, returnSectionLengthID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GPABucketGroupSummary/" + str(GPABucketGroupSummaryID), verb = "get", return_params_list = return_params)

def modifyGPABucketGroupSummary(GPABucketGroupSummaryID, EntityID = 1, setGPABucketGroupSummaryID = None, setCreatedTime = None, setEntityGroupKey = None, setGPABucketGroupSummaryIDClonedFrom = None, setGPABucketSetID = None, setGradingPeriodSetID = None, setModifiedTime = None, setSectionLengthID = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnGPABucketGroupSummaryID = False, returnCreatedTime = False, returnEntityGroupKey = False, returnGPABucketGroupSummaryIDClonedFrom = False, returnGPABucketSetID = False, returnGradingPeriodSetID = False, returnModifiedTime = False, returnSectionLengthID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GPABucketGroupSummary/" + str(GPABucketGroupSummaryID), verb = "post", return_params_list = return_params, payload = payload_params)

def createGPABucketGroupSummary(EntityID = 1, setGPABucketGroupSummaryID = None, setCreatedTime = None, setEntityGroupKey = None, setGPABucketGroupSummaryIDClonedFrom = None, setGPABucketSetID = None, setGradingPeriodSetID = None, setModifiedTime = None, setSectionLengthID = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnGPABucketGroupSummaryID = False, returnCreatedTime = False, returnEntityGroupKey = False, returnGPABucketGroupSummaryIDClonedFrom = False, returnGPABucketSetID = False, returnGradingPeriodSetID = False, returnModifiedTime = False, returnSectionLengthID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GPABucketGroupSummary/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteGPABucketGroupSummary(GPABucketGroupSummaryID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GPABucketGroupSummary/" + str(GPABucketGroupSummaryID), verb = "delete")


def getEveryGPABucketSet(searchConditions = [], EntityID = 1, returnGPABucketSetID = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnModifiedTime = False, returnName = False, returnNameDescription = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every GPABucketSet in the district.

    This function returns a dataframe of every GPABucketSet in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GPABucketSet/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GPABucketSet/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getGPABucketSet(GPABucketSetID, EntityID = 1, returnGPABucketSetID = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnModifiedTime = False, returnName = False, returnNameDescription = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GPABucketSet/" + str(GPABucketSetID), verb = "get", return_params_list = return_params)

def modifyGPABucketSet(GPABucketSetID, EntityID = 1, setGPABucketSetID = None, setCreatedTime = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setModifiedTime = None, setName = None, setNameDescription = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnGPABucketSetID = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnModifiedTime = False, returnName = False, returnNameDescription = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GPABucketSet/" + str(GPABucketSetID), verb = "post", return_params_list = return_params, payload = payload_params)

def createGPABucketSet(EntityID = 1, setGPABucketSetID = None, setCreatedTime = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setModifiedTime = None, setName = None, setNameDescription = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnGPABucketSetID = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnModifiedTime = False, returnName = False, returnNameDescription = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GPABucketSet/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteGPABucketSet(GPABucketSetID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GPABucketSet/" + str(GPABucketSetID), verb = "delete")


def getEveryGPABucketType(searchConditions = [], EntityID = 1, returnGPABucketTypeID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsCumulative = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every GPABucketType in the district.

    This function returns a dataframe of every GPABucketType in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GPABucketType/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GPABucketType/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getGPABucketType(GPABucketTypeID, EntityID = 1, returnGPABucketTypeID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsCumulative = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GPABucketType/" + str(GPABucketTypeID), verb = "get", return_params_list = return_params)

def modifyGPABucketType(GPABucketTypeID, EntityID = 1, setGPABucketTypeID = None, setCode = None, setCodeDescription = None, setCreatedTime = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsCumulative = None, setModifiedTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnGPABucketTypeID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsCumulative = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GPABucketType/" + str(GPABucketTypeID), verb = "post", return_params_list = return_params, payload = payload_params)

def createGPABucketType(EntityID = 1, setGPABucketTypeID = None, setCode = None, setCodeDescription = None, setCreatedTime = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setIsCumulative = None, setModifiedTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnGPABucketTypeID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnIsCumulative = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GPABucketType/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteGPABucketType(GPABucketTypeID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GPABucketType/" + str(GPABucketTypeID), verb = "delete")


def getEveryGPAMethod(searchConditions = [], EntityID = 1, returnGPAMethodID = False, returnAllowFurtherAttemptsOfNonHighSchoolCourses = False, returnCancelSubAreaCreditFromMiddleSchoolCredit = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnExcludeTermTwoFinalYearGrade = False, returnGPABucketSetID = False, returnGradReqRankGPARequiredCourseRule = False, returnGradReqRankGPARequiredCourseRuleCode = False, returnLockGradeMarkPoints = False, returnModifiedTime = False, returnName = False, returnNameDescription = False, returnSortNumber = False, returnTotalElectiveCreditsPossible = False, returnUseGradReqRankGPA = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnUseTotalElectiveCredits = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every GPAMethod in the district.

    This function returns a dataframe of every GPAMethod in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GPAMethod/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GPAMethod/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getGPAMethod(GPAMethodID, EntityID = 1, returnGPAMethodID = False, returnAllowFurtherAttemptsOfNonHighSchoolCourses = False, returnCancelSubAreaCreditFromMiddleSchoolCredit = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnExcludeTermTwoFinalYearGrade = False, returnGPABucketSetID = False, returnGradReqRankGPARequiredCourseRule = False, returnGradReqRankGPARequiredCourseRuleCode = False, returnLockGradeMarkPoints = False, returnModifiedTime = False, returnName = False, returnNameDescription = False, returnSortNumber = False, returnTotalElectiveCreditsPossible = False, returnUseGradReqRankGPA = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnUseTotalElectiveCredits = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GPAMethod/" + str(GPAMethodID), verb = "get", return_params_list = return_params)

def modifyGPAMethod(GPAMethodID, EntityID = 1, setGPAMethodID = None, setAllowFurtherAttemptsOfNonHighSchoolCourses = None, setCancelSubAreaCreditFromMiddleSchoolCredit = None, setCreatedTime = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setExcludeTermTwoFinalYearGrade = None, setGPABucketSetID = None, setGradReqRankGPARequiredCourseRule = None, setGradReqRankGPARequiredCourseRuleCode = None, setLockGradeMarkPoints = None, setModifiedTime = None, setName = None, setNameDescription = None, setSortNumber = None, setTotalElectiveCreditsPossible = None, setUseGradReqRankGPA = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, setUseTotalElectiveCredits = None, returnGPAMethodID = False, returnAllowFurtherAttemptsOfNonHighSchoolCourses = False, returnCancelSubAreaCreditFromMiddleSchoolCredit = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnExcludeTermTwoFinalYearGrade = False, returnGPABucketSetID = False, returnGradReqRankGPARequiredCourseRule = False, returnGradReqRankGPARequiredCourseRuleCode = False, returnLockGradeMarkPoints = False, returnModifiedTime = False, returnName = False, returnNameDescription = False, returnSortNumber = False, returnTotalElectiveCreditsPossible = False, returnUseGradReqRankGPA = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnUseTotalElectiveCredits = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GPAMethod/" + str(GPAMethodID), verb = "post", return_params_list = return_params, payload = payload_params)

def createGPAMethod(EntityID = 1, setGPAMethodID = None, setAllowFurtherAttemptsOfNonHighSchoolCourses = None, setCancelSubAreaCreditFromMiddleSchoolCredit = None, setCreatedTime = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setExcludeTermTwoFinalYearGrade = None, setGPABucketSetID = None, setGradReqRankGPARequiredCourseRule = None, setGradReqRankGPARequiredCourseRuleCode = None, setLockGradeMarkPoints = None, setModifiedTime = None, setName = None, setNameDescription = None, setSortNumber = None, setTotalElectiveCreditsPossible = None, setUseGradReqRankGPA = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, setUseTotalElectiveCredits = None, returnGPAMethodID = False, returnAllowFurtherAttemptsOfNonHighSchoolCourses = False, returnCancelSubAreaCreditFromMiddleSchoolCredit = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnExcludeTermTwoFinalYearGrade = False, returnGPABucketSetID = False, returnGradReqRankGPARequiredCourseRule = False, returnGradReqRankGPARequiredCourseRuleCode = False, returnLockGradeMarkPoints = False, returnModifiedTime = False, returnName = False, returnNameDescription = False, returnSortNumber = False, returnTotalElectiveCreditsPossible = False, returnUseGradReqRankGPA = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnUseTotalElectiveCredits = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GPAMethod/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteGPAMethod(GPAMethodID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GPAMethod/" + str(GPAMethodID), verb = "delete")


def getEveryGPAMethodCourseGroup(searchConditions = [], EntityID = 1, returnGPAMethodCourseGroupID = False, returnCourseGroupID = False, returnCreatedTime = False, returnGPAMethodID = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every GPAMethodCourseGroup in the district.

    This function returns a dataframe of every GPAMethodCourseGroup in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GPAMethodCourseGroup/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GPAMethodCourseGroup/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getGPAMethodCourseGroup(GPAMethodCourseGroupID, EntityID = 1, returnGPAMethodCourseGroupID = False, returnCourseGroupID = False, returnCreatedTime = False, returnGPAMethodID = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GPAMethodCourseGroup/" + str(GPAMethodCourseGroupID), verb = "get", return_params_list = return_params)

def modifyGPAMethodCourseGroup(GPAMethodCourseGroupID, EntityID = 1, setGPAMethodCourseGroupID = None, setCourseGroupID = None, setCreatedTime = None, setGPAMethodID = None, setModifiedTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnGPAMethodCourseGroupID = False, returnCourseGroupID = False, returnCreatedTime = False, returnGPAMethodID = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GPAMethodCourseGroup/" + str(GPAMethodCourseGroupID), verb = "post", return_params_list = return_params, payload = payload_params)

def createGPAMethodCourseGroup(EntityID = 1, setGPAMethodCourseGroupID = None, setCourseGroupID = None, setCreatedTime = None, setGPAMethodID = None, setModifiedTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnGPAMethodCourseGroupID = False, returnCourseGroupID = False, returnCreatedTime = False, returnGPAMethodID = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GPAMethodCourseGroup/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteGPAMethodCourseGroup(GPAMethodCourseGroupID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GPAMethodCourseGroup/" + str(GPAMethodCourseGroupID), verb = "delete")


def getEveryGPAMethodEntity(searchConditions = [], EntityID = 1, returnGPAMethodEntityID = False, returnCreatedTime = False, returnDisplayOrder = False, returnEntityGroupKey = False, returnEntityID = False, returnFamilyAccessDisplayGradYearHigh = False, returnFamilyAccessDisplayGradYearLow = False, returnGPAMethodEntityIDClonedFrom = False, returnGPAMethodID = False, returnIsUpToDate = False, returnModifiedTime = False, returnSchoolYearID = False, returnStatus = False, returnUseForFamilyAccess = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every GPAMethodEntity in the district.

    This function returns a dataframe of every GPAMethodEntity in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GPAMethodEntity/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GPAMethodEntity/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getGPAMethodEntity(GPAMethodEntityID, EntityID = 1, returnGPAMethodEntityID = False, returnCreatedTime = False, returnDisplayOrder = False, returnEntityGroupKey = False, returnEntityID = False, returnFamilyAccessDisplayGradYearHigh = False, returnFamilyAccessDisplayGradYearLow = False, returnGPAMethodEntityIDClonedFrom = False, returnGPAMethodID = False, returnIsUpToDate = False, returnModifiedTime = False, returnSchoolYearID = False, returnStatus = False, returnUseForFamilyAccess = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GPAMethodEntity/" + str(GPAMethodEntityID), verb = "get", return_params_list = return_params)

def modifyGPAMethodEntity(GPAMethodEntityID, EntityID = 1, setGPAMethodEntityID = None, setCreatedTime = None, setDisplayOrder = None, setEntityGroupKey = None, setEntityID = None, setFamilyAccessDisplayGradYearHigh = None, setFamilyAccessDisplayGradYearLow = None, setGPAMethodEntityIDClonedFrom = None, setGPAMethodID = None, setIsUpToDate = None, setModifiedTime = None, setSchoolYearID = None, setStatus = None, setUseForFamilyAccess = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnGPAMethodEntityID = False, returnCreatedTime = False, returnDisplayOrder = False, returnEntityGroupKey = False, returnEntityID = False, returnFamilyAccessDisplayGradYearHigh = False, returnFamilyAccessDisplayGradYearLow = False, returnGPAMethodEntityIDClonedFrom = False, returnGPAMethodID = False, returnIsUpToDate = False, returnModifiedTime = False, returnSchoolYearID = False, returnStatus = False, returnUseForFamilyAccess = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GPAMethodEntity/" + str(GPAMethodEntityID), verb = "post", return_params_list = return_params, payload = payload_params)

def createGPAMethodEntity(EntityID = 1, setGPAMethodEntityID = None, setCreatedTime = None, setDisplayOrder = None, setEntityGroupKey = None, setEntityID = None, setFamilyAccessDisplayGradYearHigh = None, setFamilyAccessDisplayGradYearLow = None, setGPAMethodEntityIDClonedFrom = None, setGPAMethodID = None, setIsUpToDate = None, setModifiedTime = None, setSchoolYearID = None, setStatus = None, setUseForFamilyAccess = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnGPAMethodEntityID = False, returnCreatedTime = False, returnDisplayOrder = False, returnEntityGroupKey = False, returnEntityID = False, returnFamilyAccessDisplayGradYearHigh = False, returnFamilyAccessDisplayGradYearLow = False, returnGPAMethodEntityIDClonedFrom = False, returnGPAMethodID = False, returnIsUpToDate = False, returnModifiedTime = False, returnSchoolYearID = False, returnStatus = False, returnUseForFamilyAccess = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GPAMethodEntity/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteGPAMethodEntity(GPAMethodEntityID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GPAMethodEntity/" + str(GPAMethodEntityID), verb = "delete")


def getEveryGPAMethodGradeBucketFlagGPAPointsOverride(searchConditions = [], EntityID = 1, returnGPAMethodGradeBucketFlagGPAPointsOverrideID = False, returnCreatedTime = False, returnGPAMethodID = False, returnGPAPoints = False, returnGPAPointsOverrideOption = False, returnGPAPointsOverrideOptionCode = False, returnGradeBucketFlagID = False, returnModifiedTime = False, returnRank = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every GPAMethodGradeBucketFlagGPAPointsOverride in the district.

    This function returns a dataframe of every GPAMethodGradeBucketFlagGPAPointsOverride in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GPAMethodGradeBucketFlagGPAPointsOverride/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GPAMethodGradeBucketFlagGPAPointsOverride/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getGPAMethodGradeBucketFlagGPAPointsOverride(GPAMethodGradeBucketFlagGPAPointsOverrideID, EntityID = 1, returnGPAMethodGradeBucketFlagGPAPointsOverrideID = False, returnCreatedTime = False, returnGPAMethodID = False, returnGPAPoints = False, returnGPAPointsOverrideOption = False, returnGPAPointsOverrideOptionCode = False, returnGradeBucketFlagID = False, returnModifiedTime = False, returnRank = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GPAMethodGradeBucketFlagGPAPointsOverride/" + str(GPAMethodGradeBucketFlagGPAPointsOverrideID), verb = "get", return_params_list = return_params)

def modifyGPAMethodGradeBucketFlagGPAPointsOverride(GPAMethodGradeBucketFlagGPAPointsOverrideID, EntityID = 1, setGPAMethodGradeBucketFlagGPAPointsOverrideID = None, setCreatedTime = None, setGPAMethodID = None, setGPAPoints = None, setGPAPointsOverrideOption = None, setGPAPointsOverrideOptionCode = None, setGradeBucketFlagID = None, setModifiedTime = None, setRank = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnGPAMethodGradeBucketFlagGPAPointsOverrideID = False, returnCreatedTime = False, returnGPAMethodID = False, returnGPAPoints = False, returnGPAPointsOverrideOption = False, returnGPAPointsOverrideOptionCode = False, returnGradeBucketFlagID = False, returnModifiedTime = False, returnRank = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GPAMethodGradeBucketFlagGPAPointsOverride/" + str(GPAMethodGradeBucketFlagGPAPointsOverrideID), verb = "post", return_params_list = return_params, payload = payload_params)

def createGPAMethodGradeBucketFlagGPAPointsOverride(EntityID = 1, setGPAMethodGradeBucketFlagGPAPointsOverrideID = None, setCreatedTime = None, setGPAMethodID = None, setGPAPoints = None, setGPAPointsOverrideOption = None, setGPAPointsOverrideOptionCode = None, setGradeBucketFlagID = None, setModifiedTime = None, setRank = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnGPAMethodGradeBucketFlagGPAPointsOverrideID = False, returnCreatedTime = False, returnGPAMethodID = False, returnGPAPoints = False, returnGPAPointsOverrideOption = False, returnGPAPointsOverrideOptionCode = False, returnGradeBucketFlagID = False, returnModifiedTime = False, returnRank = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GPAMethodGradeBucketFlagGPAPointsOverride/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteGPAMethodGradeBucketFlagGPAPointsOverride(GPAMethodGradeBucketFlagGPAPointsOverrideID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GPAMethodGradeBucketFlagGPAPointsOverride/" + str(GPAMethodGradeBucketFlagGPAPointsOverrideID), verb = "delete")


def getEveryGradebookLockGradeBucket(searchConditions = [], EntityID = 1, returnGradebookLockGradeBucketID = False, returnConfigEntityGroupYearID = False, returnCreatedTime = False, returnGradingPeriodGradeBucketID = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every GradebookLockGradeBucket in the district.

    This function returns a dataframe of every GradebookLockGradeBucket in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradebookLockGradeBucket/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradebookLockGradeBucket/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getGradebookLockGradeBucket(GradebookLockGradeBucketID, EntityID = 1, returnGradebookLockGradeBucketID = False, returnConfigEntityGroupYearID = False, returnCreatedTime = False, returnGradingPeriodGradeBucketID = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradebookLockGradeBucket/" + str(GradebookLockGradeBucketID), verb = "get", return_params_list = return_params)

def modifyGradebookLockGradeBucket(GradebookLockGradeBucketID, EntityID = 1, setGradebookLockGradeBucketID = None, setConfigEntityGroupYearID = None, setCreatedTime = None, setGradingPeriodGradeBucketID = None, setModifiedTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnGradebookLockGradeBucketID = False, returnConfigEntityGroupYearID = False, returnCreatedTime = False, returnGradingPeriodGradeBucketID = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradebookLockGradeBucket/" + str(GradebookLockGradeBucketID), verb = "post", return_params_list = return_params, payload = payload_params)

def createGradebookLockGradeBucket(EntityID = 1, setGradebookLockGradeBucketID = None, setConfigEntityGroupYearID = None, setCreatedTime = None, setGradingPeriodGradeBucketID = None, setModifiedTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnGradebookLockGradeBucketID = False, returnConfigEntityGroupYearID = False, returnCreatedTime = False, returnGradingPeriodGradeBucketID = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradebookLockGradeBucket/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteGradebookLockGradeBucket(GradebookLockGradeBucketID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradebookLockGradeBucket/" + str(GradebookLockGradeBucketID), verb = "delete")


def getEveryGradebookLockGradeReference(searchConditions = [], EntityID = 1, returnGradebookLockGradeReferenceID = False, returnConfigEntityGroupYearID = False, returnCreatedTime = False, returnGradeReferenceID = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every GradebookLockGradeReference in the district.

    This function returns a dataframe of every GradebookLockGradeReference in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradebookLockGradeReference/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradebookLockGradeReference/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getGradebookLockGradeReference(GradebookLockGradeReferenceID, EntityID = 1, returnGradebookLockGradeReferenceID = False, returnConfigEntityGroupYearID = False, returnCreatedTime = False, returnGradeReferenceID = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradebookLockGradeReference/" + str(GradebookLockGradeReferenceID), verb = "get", return_params_list = return_params)

def modifyGradebookLockGradeReference(GradebookLockGradeReferenceID, EntityID = 1, setGradebookLockGradeReferenceID = None, setConfigEntityGroupYearID = None, setCreatedTime = None, setGradeReferenceID = None, setModifiedTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnGradebookLockGradeReferenceID = False, returnConfigEntityGroupYearID = False, returnCreatedTime = False, returnGradeReferenceID = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradebookLockGradeReference/" + str(GradebookLockGradeReferenceID), verb = "post", return_params_list = return_params, payload = payload_params)

def createGradebookLockGradeReference(EntityID = 1, setGradebookLockGradeReferenceID = None, setConfigEntityGroupYearID = None, setCreatedTime = None, setGradeReferenceID = None, setModifiedTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnGradebookLockGradeReferenceID = False, returnConfigEntityGroupYearID = False, returnCreatedTime = False, returnGradeReferenceID = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradebookLockGradeReference/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteGradebookLockGradeReference(GradebookLockGradeReferenceID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradebookLockGradeReference/" + str(GradebookLockGradeReferenceID), verb = "delete")


def getEveryGradeBucket(searchConditions = [], EntityID = 1, returnGradeBucketID = False, returnCreatedTime = False, returnDescription = False, returnDynamicRelationshipID = False, returnEdFiGradingPeriodDescriptorID = False, returnEdFiGradingPeriodID = False, returnEntityGroupKey = False, returnFamilyAccessDisplayGradYearHigh = False, returnFamilyAccessDisplayGradYearLow = False, returnGradeBucketIDClonedFrom = False, returnGradeBucketTypeID = False, returnLabel = False, returnLabelDescription = False, returnModifiedTime = False, returnNumber = False, returnOrder = False, returnUseForFamilyAccess = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every GradeBucket in the district.

    This function returns a dataframe of every GradeBucket in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeBucket/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeBucket/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getGradeBucket(GradeBucketID, EntityID = 1, returnGradeBucketID = False, returnCreatedTime = False, returnDescription = False, returnDynamicRelationshipID = False, returnEdFiGradingPeriodDescriptorID = False, returnEdFiGradingPeriodID = False, returnEntityGroupKey = False, returnFamilyAccessDisplayGradYearHigh = False, returnFamilyAccessDisplayGradYearLow = False, returnGradeBucketIDClonedFrom = False, returnGradeBucketTypeID = False, returnLabel = False, returnLabelDescription = False, returnModifiedTime = False, returnNumber = False, returnOrder = False, returnUseForFamilyAccess = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeBucket/" + str(GradeBucketID), verb = "get", return_params_list = return_params)

def modifyGradeBucket(GradeBucketID, EntityID = 1, setGradeBucketID = None, setCreatedTime = None, setDescription = None, setDynamicRelationshipID = None, setEdFiGradingPeriodDescriptorID = None, setEdFiGradingPeriodID = None, setEntityGroupKey = None, setFamilyAccessDisplayGradYearHigh = None, setFamilyAccessDisplayGradYearLow = None, setGradeBucketIDClonedFrom = None, setGradeBucketTypeID = None, setLabel = None, setLabelDescription = None, setModifiedTime = None, setNumber = None, setOrder = None, setUseForFamilyAccess = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnGradeBucketID = False, returnCreatedTime = False, returnDescription = False, returnDynamicRelationshipID = False, returnEdFiGradingPeriodDescriptorID = False, returnEdFiGradingPeriodID = False, returnEntityGroupKey = False, returnFamilyAccessDisplayGradYearHigh = False, returnFamilyAccessDisplayGradYearLow = False, returnGradeBucketIDClonedFrom = False, returnGradeBucketTypeID = False, returnLabel = False, returnLabelDescription = False, returnModifiedTime = False, returnNumber = False, returnOrder = False, returnUseForFamilyAccess = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeBucket/" + str(GradeBucketID), verb = "post", return_params_list = return_params, payload = payload_params)

def createGradeBucket(EntityID = 1, setGradeBucketID = None, setCreatedTime = None, setDescription = None, setDynamicRelationshipID = None, setEdFiGradingPeriodDescriptorID = None, setEdFiGradingPeriodID = None, setEntityGroupKey = None, setFamilyAccessDisplayGradYearHigh = None, setFamilyAccessDisplayGradYearLow = None, setGradeBucketIDClonedFrom = None, setGradeBucketTypeID = None, setLabel = None, setLabelDescription = None, setModifiedTime = None, setNumber = None, setOrder = None, setUseForFamilyAccess = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnGradeBucketID = False, returnCreatedTime = False, returnDescription = False, returnDynamicRelationshipID = False, returnEdFiGradingPeriodDescriptorID = False, returnEdFiGradingPeriodID = False, returnEntityGroupKey = False, returnFamilyAccessDisplayGradYearHigh = False, returnFamilyAccessDisplayGradYearLow = False, returnGradeBucketIDClonedFrom = False, returnGradeBucketTypeID = False, returnLabel = False, returnLabelDescription = False, returnModifiedTime = False, returnNumber = False, returnOrder = False, returnUseForFamilyAccess = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeBucket/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteGradeBucket(GradeBucketID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeBucket/" + str(GradeBucketID), verb = "delete")


def getEveryGradeBucketFlag(searchConditions = [], EntityID = 1, returnGradeBucketFlagID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDisplayOrder = False, returnDistrictGroupKey = False, returnDistrictID = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every GradeBucketFlag in the district.

    This function returns a dataframe of every GradeBucketFlag in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeBucketFlag/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeBucketFlag/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getGradeBucketFlag(GradeBucketFlagID, EntityID = 1, returnGradeBucketFlagID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDisplayOrder = False, returnDistrictGroupKey = False, returnDistrictID = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeBucketFlag/" + str(GradeBucketFlagID), verb = "get", return_params_list = return_params)

def modifyGradeBucketFlag(GradeBucketFlagID, EntityID = 1, setGradeBucketFlagID = None, setCode = None, setCodeDescription = None, setCreatedTime = None, setDescription = None, setDisplayOrder = None, setDistrictGroupKey = None, setDistrictID = None, setModifiedTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnGradeBucketFlagID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDisplayOrder = False, returnDistrictGroupKey = False, returnDistrictID = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeBucketFlag/" + str(GradeBucketFlagID), verb = "post", return_params_list = return_params, payload = payload_params)

def createGradeBucketFlag(EntityID = 1, setGradeBucketFlagID = None, setCode = None, setCodeDescription = None, setCreatedTime = None, setDescription = None, setDisplayOrder = None, setDistrictGroupKey = None, setDistrictID = None, setModifiedTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnGradeBucketFlagID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDisplayOrder = False, returnDistrictGroupKey = False, returnDistrictID = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeBucketFlag/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteGradeBucketFlag(GradeBucketFlagID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeBucketFlag/" + str(GradeBucketFlagID), verb = "delete")


def getEveryGradeBucketFlagDetail(searchConditions = [], EntityID = 1, returnGradeBucketFlagDetailID = False, returnCreatedTime = False, returnEntityGroupKey = False, returnEntityID = False, returnGradeBucketFlagDetailIDClonedFrom = False, returnGradeBucketFlagID = False, returnIsActive = False, returnModifiedTime = False, returnPrintWithGradeMark = False, returnSchoolYearID = False, returnUseEarnedOverride = False, returnUseGPAOverride = False, returnUseGPAPointsOverride = False, returnUseInEarned = False, returnUseInFailed = False, returnUseInGPA = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every GradeBucketFlagDetail in the district.

    This function returns a dataframe of every GradeBucketFlagDetail in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeBucketFlagDetail/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeBucketFlagDetail/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getGradeBucketFlagDetail(GradeBucketFlagDetailID, EntityID = 1, returnGradeBucketFlagDetailID = False, returnCreatedTime = False, returnEntityGroupKey = False, returnEntityID = False, returnGradeBucketFlagDetailIDClonedFrom = False, returnGradeBucketFlagID = False, returnIsActive = False, returnModifiedTime = False, returnPrintWithGradeMark = False, returnSchoolYearID = False, returnUseEarnedOverride = False, returnUseGPAOverride = False, returnUseGPAPointsOverride = False, returnUseInEarned = False, returnUseInFailed = False, returnUseInGPA = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeBucketFlagDetail/" + str(GradeBucketFlagDetailID), verb = "get", return_params_list = return_params)

def modifyGradeBucketFlagDetail(GradeBucketFlagDetailID, EntityID = 1, setGradeBucketFlagDetailID = None, setCreatedTime = None, setEntityGroupKey = None, setEntityID = None, setGradeBucketFlagDetailIDClonedFrom = None, setGradeBucketFlagID = None, setIsActive = None, setModifiedTime = None, setPrintWithGradeMark = None, setSchoolYearID = None, setUseEarnedOverride = None, setUseGPAOverride = None, setUseGPAPointsOverride = None, setUseInEarned = None, setUseInFailed = None, setUseInGPA = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnGradeBucketFlagDetailID = False, returnCreatedTime = False, returnEntityGroupKey = False, returnEntityID = False, returnGradeBucketFlagDetailIDClonedFrom = False, returnGradeBucketFlagID = False, returnIsActive = False, returnModifiedTime = False, returnPrintWithGradeMark = False, returnSchoolYearID = False, returnUseEarnedOverride = False, returnUseGPAOverride = False, returnUseGPAPointsOverride = False, returnUseInEarned = False, returnUseInFailed = False, returnUseInGPA = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeBucketFlagDetail/" + str(GradeBucketFlagDetailID), verb = "post", return_params_list = return_params, payload = payload_params)

def createGradeBucketFlagDetail(EntityID = 1, setGradeBucketFlagDetailID = None, setCreatedTime = None, setEntityGroupKey = None, setEntityID = None, setGradeBucketFlagDetailIDClonedFrom = None, setGradeBucketFlagID = None, setIsActive = None, setModifiedTime = None, setPrintWithGradeMark = None, setSchoolYearID = None, setUseEarnedOverride = None, setUseGPAOverride = None, setUseGPAPointsOverride = None, setUseInEarned = None, setUseInFailed = None, setUseInGPA = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnGradeBucketFlagDetailID = False, returnCreatedTime = False, returnEntityGroupKey = False, returnEntityID = False, returnGradeBucketFlagDetailIDClonedFrom = False, returnGradeBucketFlagID = False, returnIsActive = False, returnModifiedTime = False, returnPrintWithGradeMark = False, returnSchoolYearID = False, returnUseEarnedOverride = False, returnUseGPAOverride = False, returnUseGPAPointsOverride = False, returnUseInEarned = False, returnUseInFailed = False, returnUseInGPA = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeBucketFlagDetail/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteGradeBucketFlagDetail(GradeBucketFlagDetailID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeBucketFlagDetail/" + str(GradeBucketFlagDetailID), verb = "delete")


def getEveryGradeBucketFlagDetailGPAMethod(searchConditions = [], EntityID = 1, returnGradeBucketFlagDetailGPAMethodID = False, returnCreatedTime = False, returnEntityGroupKey = False, returnGPAMethodEntityID = False, returnGPAPoints = False, returnGPAPointsOverrideOption = False, returnGPAPointsOverrideOptionCode = False, returnGradeBucketFlagDetailID = False, returnModifiedTime = False, returnPointSetEntityID = False, returnUseOverride = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every GradeBucketFlagDetailGPAMethod in the district.

    This function returns a dataframe of every GradeBucketFlagDetailGPAMethod in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeBucketFlagDetailGPAMethod/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeBucketFlagDetailGPAMethod/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getGradeBucketFlagDetailGPAMethod(GradeBucketFlagDetailGPAMethodID, EntityID = 1, returnGradeBucketFlagDetailGPAMethodID = False, returnCreatedTime = False, returnEntityGroupKey = False, returnGPAMethodEntityID = False, returnGPAPoints = False, returnGPAPointsOverrideOption = False, returnGPAPointsOverrideOptionCode = False, returnGradeBucketFlagDetailID = False, returnModifiedTime = False, returnPointSetEntityID = False, returnUseOverride = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeBucketFlagDetailGPAMethod/" + str(GradeBucketFlagDetailGPAMethodID), verb = "get", return_params_list = return_params)

def modifyGradeBucketFlagDetailGPAMethod(GradeBucketFlagDetailGPAMethodID, EntityID = 1, setGradeBucketFlagDetailGPAMethodID = None, setCreatedTime = None, setEntityGroupKey = None, setGPAMethodEntityID = None, setGPAPoints = None, setGPAPointsOverrideOption = None, setGPAPointsOverrideOptionCode = None, setGradeBucketFlagDetailID = None, setModifiedTime = None, setPointSetEntityID = None, setUseOverride = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnGradeBucketFlagDetailGPAMethodID = False, returnCreatedTime = False, returnEntityGroupKey = False, returnGPAMethodEntityID = False, returnGPAPoints = False, returnGPAPointsOverrideOption = False, returnGPAPointsOverrideOptionCode = False, returnGradeBucketFlagDetailID = False, returnModifiedTime = False, returnPointSetEntityID = False, returnUseOverride = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeBucketFlagDetailGPAMethod/" + str(GradeBucketFlagDetailGPAMethodID), verb = "post", return_params_list = return_params, payload = payload_params)

def createGradeBucketFlagDetailGPAMethod(EntityID = 1, setGradeBucketFlagDetailGPAMethodID = None, setCreatedTime = None, setEntityGroupKey = None, setGPAMethodEntityID = None, setGPAPoints = None, setGPAPointsOverrideOption = None, setGPAPointsOverrideOptionCode = None, setGradeBucketFlagDetailID = None, setModifiedTime = None, setPointSetEntityID = None, setUseOverride = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnGradeBucketFlagDetailGPAMethodID = False, returnCreatedTime = False, returnEntityGroupKey = False, returnGPAMethodEntityID = False, returnGPAPoints = False, returnGPAPointsOverrideOption = False, returnGPAPointsOverrideOptionCode = False, returnGradeBucketFlagDetailID = False, returnModifiedTime = False, returnPointSetEntityID = False, returnUseOverride = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeBucketFlagDetailGPAMethod/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteGradeBucketFlagDetailGPAMethod(GradeBucketFlagDetailGPAMethodID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeBucketFlagDetailGPAMethod/" + str(GradeBucketFlagDetailGPAMethodID), verb = "delete")


def getEveryGradeBucketType(searchConditions = [], EntityID = 1, returnGradeBucketTypeID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDisplayOrder = False, returnEdFiGradeTypeID = False, returnEntityGroupKey = False, returnEntityID = False, returnGradeBucketTypeIDClonedFrom = False, returnHasSpecificCategories = False, returnMinimumPercent = False, returnModifiedTime = False, returnSchoolYearID = False, returnSnapshotGradeExtensionDays = False, returnSpecificCategoryGradeBucketTypeCount = False, returnUseAllCategories = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnUseSnapshotGrade = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every GradeBucketType in the district.

    This function returns a dataframe of every GradeBucketType in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeBucketType/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeBucketType/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getGradeBucketType(GradeBucketTypeID, EntityID = 1, returnGradeBucketTypeID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDisplayOrder = False, returnEdFiGradeTypeID = False, returnEntityGroupKey = False, returnEntityID = False, returnGradeBucketTypeIDClonedFrom = False, returnHasSpecificCategories = False, returnMinimumPercent = False, returnModifiedTime = False, returnSchoolYearID = False, returnSnapshotGradeExtensionDays = False, returnSpecificCategoryGradeBucketTypeCount = False, returnUseAllCategories = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnUseSnapshotGrade = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeBucketType/" + str(GradeBucketTypeID), verb = "get", return_params_list = return_params)

def modifyGradeBucketType(GradeBucketTypeID, EntityID = 1, setGradeBucketTypeID = None, setCode = None, setCodeDescription = None, setCreatedTime = None, setDescription = None, setDisplayOrder = None, setEdFiGradeTypeID = None, setEntityGroupKey = None, setEntityID = None, setGradeBucketTypeIDClonedFrom = None, setHasSpecificCategories = None, setMinimumPercent = None, setModifiedTime = None, setSchoolYearID = None, setSnapshotGradeExtensionDays = None, setSpecificCategoryGradeBucketTypeCount = None, setUseAllCategories = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, setUseSnapshotGrade = None, returnGradeBucketTypeID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDisplayOrder = False, returnEdFiGradeTypeID = False, returnEntityGroupKey = False, returnEntityID = False, returnGradeBucketTypeIDClonedFrom = False, returnHasSpecificCategories = False, returnMinimumPercent = False, returnModifiedTime = False, returnSchoolYearID = False, returnSnapshotGradeExtensionDays = False, returnSpecificCategoryGradeBucketTypeCount = False, returnUseAllCategories = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnUseSnapshotGrade = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeBucketType/" + str(GradeBucketTypeID), verb = "post", return_params_list = return_params, payload = payload_params)

def createGradeBucketType(EntityID = 1, setGradeBucketTypeID = None, setCode = None, setCodeDescription = None, setCreatedTime = None, setDescription = None, setDisplayOrder = None, setEdFiGradeTypeID = None, setEntityGroupKey = None, setEntityID = None, setGradeBucketTypeIDClonedFrom = None, setHasSpecificCategories = None, setMinimumPercent = None, setModifiedTime = None, setSchoolYearID = None, setSnapshotGradeExtensionDays = None, setSpecificCategoryGradeBucketTypeCount = None, setUseAllCategories = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, setUseSnapshotGrade = None, returnGradeBucketTypeID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDisplayOrder = False, returnEdFiGradeTypeID = False, returnEntityGroupKey = False, returnEntityID = False, returnGradeBucketTypeIDClonedFrom = False, returnHasSpecificCategories = False, returnMinimumPercent = False, returnModifiedTime = False, returnSchoolYearID = False, returnSnapshotGradeExtensionDays = False, returnSpecificCategoryGradeBucketTypeCount = False, returnUseAllCategories = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnUseSnapshotGrade = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeBucketType/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteGradeBucketType(GradeBucketTypeID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeBucketType/" + str(GradeBucketTypeID), verb = "delete")


def getEveryGradeMark(searchConditions = [], EntityID = 1, returnGradeMarkID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDisplayOrder = False, returnEntityGroupKey = False, returnEntityID = False, returnGradeMarkExistsInSpecifcEntity = False, returnGradeMarkIDClonedFrom = False, returnGradeMarkIDReverse = False, returnGradeMarkMNID = False, returnGradYearHigh = False, returnGradYearLow = False, returnIsAHistoricRecord = False, returnModifiedTime = False, returnReportCardDisplayValue = False, returnSchoolYearID = False, returnStateGradeMarkMNID = False, returnTranscriptDisplayValue = False, returnUseAsTeacherOverride = False, returnUseInEarned = False, returnUseInFailed = False, returnUseInGPA = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every GradeMark in the district.

    This function returns a dataframe of every GradeMark in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeMark/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeMark/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getGradeMark(GradeMarkID, EntityID = 1, returnGradeMarkID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDisplayOrder = False, returnEntityGroupKey = False, returnEntityID = False, returnGradeMarkExistsInSpecifcEntity = False, returnGradeMarkIDClonedFrom = False, returnGradeMarkIDReverse = False, returnGradeMarkMNID = False, returnGradYearHigh = False, returnGradYearLow = False, returnIsAHistoricRecord = False, returnModifiedTime = False, returnReportCardDisplayValue = False, returnSchoolYearID = False, returnStateGradeMarkMNID = False, returnTranscriptDisplayValue = False, returnUseAsTeacherOverride = False, returnUseInEarned = False, returnUseInFailed = False, returnUseInGPA = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeMark/" + str(GradeMarkID), verb = "get", return_params_list = return_params)

def modifyGradeMark(GradeMarkID, EntityID = 1, setGradeMarkID = None, setCode = None, setCodeDescription = None, setCreatedTime = None, setDescription = None, setDisplayOrder = None, setEntityGroupKey = None, setEntityID = None, setGradeMarkExistsInSpecifcEntity = None, setGradeMarkIDClonedFrom = None, setGradeMarkIDReverse = None, setGradeMarkMNID = None, setGradYearHigh = None, setGradYearLow = None, setIsAHistoricRecord = None, setModifiedTime = None, setReportCardDisplayValue = None, setSchoolYearID = None, setStateGradeMarkMNID = None, setTranscriptDisplayValue = None, setUseAsTeacherOverride = None, setUseInEarned = None, setUseInFailed = None, setUseInGPA = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnGradeMarkID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDisplayOrder = False, returnEntityGroupKey = False, returnEntityID = False, returnGradeMarkExistsInSpecifcEntity = False, returnGradeMarkIDClonedFrom = False, returnGradeMarkIDReverse = False, returnGradeMarkMNID = False, returnGradYearHigh = False, returnGradYearLow = False, returnIsAHistoricRecord = False, returnModifiedTime = False, returnReportCardDisplayValue = False, returnSchoolYearID = False, returnStateGradeMarkMNID = False, returnTranscriptDisplayValue = False, returnUseAsTeacherOverride = False, returnUseInEarned = False, returnUseInFailed = False, returnUseInGPA = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeMark/" + str(GradeMarkID), verb = "post", return_params_list = return_params, payload = payload_params)

def createGradeMark(EntityID = 1, setGradeMarkID = None, setCode = None, setCodeDescription = None, setCreatedTime = None, setDescription = None, setDisplayOrder = None, setEntityGroupKey = None, setEntityID = None, setGradeMarkExistsInSpecifcEntity = None, setGradeMarkIDClonedFrom = None, setGradeMarkIDReverse = None, setGradeMarkMNID = None, setGradYearHigh = None, setGradYearLow = None, setIsAHistoricRecord = None, setModifiedTime = None, setReportCardDisplayValue = None, setSchoolYearID = None, setStateGradeMarkMNID = None, setTranscriptDisplayValue = None, setUseAsTeacherOverride = None, setUseInEarned = None, setUseInFailed = None, setUseInGPA = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnGradeMarkID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDisplayOrder = False, returnEntityGroupKey = False, returnEntityID = False, returnGradeMarkExistsInSpecifcEntity = False, returnGradeMarkIDClonedFrom = False, returnGradeMarkIDReverse = False, returnGradeMarkMNID = False, returnGradYearHigh = False, returnGradYearLow = False, returnIsAHistoricRecord = False, returnModifiedTime = False, returnReportCardDisplayValue = False, returnSchoolYearID = False, returnStateGradeMarkMNID = False, returnTranscriptDisplayValue = False, returnUseAsTeacherOverride = False, returnUseInEarned = False, returnUseInFailed = False, returnUseInGPA = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeMark/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteGradeMark(GradeMarkID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeMark/" + str(GradeMarkID), verb = "delete")


def getEveryGradeMarkPointSet(searchConditions = [], EntityID = 1, returnGradeMarkPointSetID = False, returnAddOnPoints = False, returnCreatedTime = False, returnEntityGroupKey = False, returnGPAMethodEntityID = False, returnGradeMarkID = False, returnGradeMarkPointSetIDClonedFrom = False, returnModifiedTime = False, returnPointSetEntityID = False, returnRegularPoints = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every GradeMarkPointSet in the district.

    This function returns a dataframe of every GradeMarkPointSet in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeMarkPointSet/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeMarkPointSet/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getGradeMarkPointSet(GradeMarkPointSetID, EntityID = 1, returnGradeMarkPointSetID = False, returnAddOnPoints = False, returnCreatedTime = False, returnEntityGroupKey = False, returnGPAMethodEntityID = False, returnGradeMarkID = False, returnGradeMarkPointSetIDClonedFrom = False, returnModifiedTime = False, returnPointSetEntityID = False, returnRegularPoints = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeMarkPointSet/" + str(GradeMarkPointSetID), verb = "get", return_params_list = return_params)

def modifyGradeMarkPointSet(GradeMarkPointSetID, EntityID = 1, setGradeMarkPointSetID = None, setAddOnPoints = None, setCreatedTime = None, setEntityGroupKey = None, setGPAMethodEntityID = None, setGradeMarkID = None, setGradeMarkPointSetIDClonedFrom = None, setModifiedTime = None, setPointSetEntityID = None, setRegularPoints = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnGradeMarkPointSetID = False, returnAddOnPoints = False, returnCreatedTime = False, returnEntityGroupKey = False, returnGPAMethodEntityID = False, returnGradeMarkID = False, returnGradeMarkPointSetIDClonedFrom = False, returnModifiedTime = False, returnPointSetEntityID = False, returnRegularPoints = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeMarkPointSet/" + str(GradeMarkPointSetID), verb = "post", return_params_list = return_params, payload = payload_params)

def createGradeMarkPointSet(EntityID = 1, setGradeMarkPointSetID = None, setAddOnPoints = None, setCreatedTime = None, setEntityGroupKey = None, setGPAMethodEntityID = None, setGradeMarkID = None, setGradeMarkPointSetIDClonedFrom = None, setModifiedTime = None, setPointSetEntityID = None, setRegularPoints = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnGradeMarkPointSetID = False, returnAddOnPoints = False, returnCreatedTime = False, returnEntityGroupKey = False, returnGPAMethodEntityID = False, returnGradeMarkID = False, returnGradeMarkPointSetIDClonedFrom = False, returnModifiedTime = False, returnPointSetEntityID = False, returnRegularPoints = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeMarkPointSet/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteGradeMarkPointSet(GradeMarkPointSetID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeMarkPointSet/" + str(GradeMarkPointSetID), verb = "delete")


def getEveryGradeReportAcademicSession(searchConditions = [], EntityID = 1, returnGradeReportAcademicSessionID = False, returnCreatedTime = False, returnDaysAbsentYTD = False, returnDaysEnrolledYTD = False, returnDaysExcusedYTD = False, returnDaysUnexcusedYTD = False, returnEarnedCredit = False, returnEarnedCreditAttempted = False, returnEarnedCreditsValue = False, returnEntryDate = False, returnGPAValue = False, returnGradeLevelCode = False, returnGradeReportAcademicSessionTemplateGroupID = False, returnGradeReportStudentID = False, returnHeaderDescription = False, returnModifiedTime = False, returnSchoolYearDescription = False, returnSchoolYearID = False, returnSortNumber = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnWithdrawalDate = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every GradeReportAcademicSession in the district.

    This function returns a dataframe of every GradeReportAcademicSession in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeReportAcademicSession/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeReportAcademicSession/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getGradeReportAcademicSession(GradeReportAcademicSessionID, EntityID = 1, returnGradeReportAcademicSessionID = False, returnCreatedTime = False, returnDaysAbsentYTD = False, returnDaysEnrolledYTD = False, returnDaysExcusedYTD = False, returnDaysUnexcusedYTD = False, returnEarnedCredit = False, returnEarnedCreditAttempted = False, returnEarnedCreditsValue = False, returnEntryDate = False, returnGPAValue = False, returnGradeLevelCode = False, returnGradeReportAcademicSessionTemplateGroupID = False, returnGradeReportStudentID = False, returnHeaderDescription = False, returnModifiedTime = False, returnSchoolYearDescription = False, returnSchoolYearID = False, returnSortNumber = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnWithdrawalDate = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeReportAcademicSession/" + str(GradeReportAcademicSessionID), verb = "get", return_params_list = return_params)

def modifyGradeReportAcademicSession(GradeReportAcademicSessionID, EntityID = 1, setGradeReportAcademicSessionID = None, setCreatedTime = None, setDaysAbsentYTD = None, setDaysEnrolledYTD = None, setDaysExcusedYTD = None, setDaysUnexcusedYTD = None, setEarnedCredit = None, setEarnedCreditAttempted = None, setEarnedCreditsValue = None, setEntryDate = None, setGPAValue = None, setGradeLevelCode = None, setGradeReportAcademicSessionTemplateGroupID = None, setGradeReportStudentID = None, setHeaderDescription = None, setModifiedTime = None, setSchoolYearDescription = None, setSchoolYearID = None, setSortNumber = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, setWithdrawalDate = None, returnGradeReportAcademicSessionID = False, returnCreatedTime = False, returnDaysAbsentYTD = False, returnDaysEnrolledYTD = False, returnDaysExcusedYTD = False, returnDaysUnexcusedYTD = False, returnEarnedCredit = False, returnEarnedCreditAttempted = False, returnEarnedCreditsValue = False, returnEntryDate = False, returnGPAValue = False, returnGradeLevelCode = False, returnGradeReportAcademicSessionTemplateGroupID = False, returnGradeReportStudentID = False, returnHeaderDescription = False, returnModifiedTime = False, returnSchoolYearDescription = False, returnSchoolYearID = False, returnSortNumber = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnWithdrawalDate = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeReportAcademicSession/" + str(GradeReportAcademicSessionID), verb = "post", return_params_list = return_params, payload = payload_params)

def createGradeReportAcademicSession(EntityID = 1, setGradeReportAcademicSessionID = None, setCreatedTime = None, setDaysAbsentYTD = None, setDaysEnrolledYTD = None, setDaysExcusedYTD = None, setDaysUnexcusedYTD = None, setEarnedCredit = None, setEarnedCreditAttempted = None, setEarnedCreditsValue = None, setEntryDate = None, setGPAValue = None, setGradeLevelCode = None, setGradeReportAcademicSessionTemplateGroupID = None, setGradeReportStudentID = None, setHeaderDescription = None, setModifiedTime = None, setSchoolYearDescription = None, setSchoolYearID = None, setSortNumber = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, setWithdrawalDate = None, returnGradeReportAcademicSessionID = False, returnCreatedTime = False, returnDaysAbsentYTD = False, returnDaysEnrolledYTD = False, returnDaysExcusedYTD = False, returnDaysUnexcusedYTD = False, returnEarnedCredit = False, returnEarnedCreditAttempted = False, returnEarnedCreditsValue = False, returnEntryDate = False, returnGPAValue = False, returnGradeLevelCode = False, returnGradeReportAcademicSessionTemplateGroupID = False, returnGradeReportStudentID = False, returnHeaderDescription = False, returnModifiedTime = False, returnSchoolYearDescription = False, returnSchoolYearID = False, returnSortNumber = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnWithdrawalDate = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeReportAcademicSession/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteGradeReportAcademicSession(GradeReportAcademicSessionID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeReportAcademicSession/" + str(GradeReportAcademicSessionID), verb = "delete")


def getEveryGradeReportAcademicSessionTemplate(searchConditions = [], EntityID = 1, returnGradeReportAcademicSessionTemplateID = False, returnBreakBySchoolYear = False, returnCourseFilter = False, returnCreatedTime = False, returnGradeReportAcademicSessionTemplateGroupID = False, returnHeaderDescription = False, returnIncludeNonCreditEarningCourses = False, returnModifiedTime = False, returnSearchConditionFilter = False, returnSortNumber = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnUseSchoolYearDescending = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every GradeReportAcademicSessionTemplate in the district.

    This function returns a dataframe of every GradeReportAcademicSessionTemplate in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeReportAcademicSessionTemplate/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeReportAcademicSessionTemplate/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getGradeReportAcademicSessionTemplate(GradeReportAcademicSessionTemplateID, EntityID = 1, returnGradeReportAcademicSessionTemplateID = False, returnBreakBySchoolYear = False, returnCourseFilter = False, returnCreatedTime = False, returnGradeReportAcademicSessionTemplateGroupID = False, returnHeaderDescription = False, returnIncludeNonCreditEarningCourses = False, returnModifiedTime = False, returnSearchConditionFilter = False, returnSortNumber = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnUseSchoolYearDescending = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeReportAcademicSessionTemplate/" + str(GradeReportAcademicSessionTemplateID), verb = "get", return_params_list = return_params)

def modifyGradeReportAcademicSessionTemplate(GradeReportAcademicSessionTemplateID, EntityID = 1, setGradeReportAcademicSessionTemplateID = None, setBreakBySchoolYear = None, setCourseFilter = None, setCreatedTime = None, setGradeReportAcademicSessionTemplateGroupID = None, setHeaderDescription = None, setIncludeNonCreditEarningCourses = None, setModifiedTime = None, setSearchConditionFilter = None, setSortNumber = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, setUseSchoolYearDescending = None, returnGradeReportAcademicSessionTemplateID = False, returnBreakBySchoolYear = False, returnCourseFilter = False, returnCreatedTime = False, returnGradeReportAcademicSessionTemplateGroupID = False, returnHeaderDescription = False, returnIncludeNonCreditEarningCourses = False, returnModifiedTime = False, returnSearchConditionFilter = False, returnSortNumber = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnUseSchoolYearDescending = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeReportAcademicSessionTemplate/" + str(GradeReportAcademicSessionTemplateID), verb = "post", return_params_list = return_params, payload = payload_params)

def createGradeReportAcademicSessionTemplate(EntityID = 1, setGradeReportAcademicSessionTemplateID = None, setBreakBySchoolYear = None, setCourseFilter = None, setCreatedTime = None, setGradeReportAcademicSessionTemplateGroupID = None, setHeaderDescription = None, setIncludeNonCreditEarningCourses = None, setModifiedTime = None, setSearchConditionFilter = None, setSortNumber = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, setUseSchoolYearDescending = None, returnGradeReportAcademicSessionTemplateID = False, returnBreakBySchoolYear = False, returnCourseFilter = False, returnCreatedTime = False, returnGradeReportAcademicSessionTemplateGroupID = False, returnHeaderDescription = False, returnIncludeNonCreditEarningCourses = False, returnModifiedTime = False, returnSearchConditionFilter = False, returnSortNumber = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnUseSchoolYearDescending = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeReportAcademicSessionTemplate/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteGradeReportAcademicSessionTemplate(GradeReportAcademicSessionTemplateID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeReportAcademicSessionTemplate/" + str(GradeReportAcademicSessionTemplateID), verb = "delete")


def getEveryGradeReportAcademicSessionTemplateCourse(searchConditions = [], EntityID = 1, returnGradeReportAcademicSessionTemplateCourseID = False, returnCourseID = False, returnCreatedTime = False, returnGradeReportAcademicSessionTemplateCourseIDClonedFrom = False, returnGradeReportAcademicSessionTemplateID = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every GradeReportAcademicSessionTemplateCourse in the district.

    This function returns a dataframe of every GradeReportAcademicSessionTemplateCourse in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeReportAcademicSessionTemplateCourse/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeReportAcademicSessionTemplateCourse/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getGradeReportAcademicSessionTemplateCourse(GradeReportAcademicSessionTemplateCourseID, EntityID = 1, returnGradeReportAcademicSessionTemplateCourseID = False, returnCourseID = False, returnCreatedTime = False, returnGradeReportAcademicSessionTemplateCourseIDClonedFrom = False, returnGradeReportAcademicSessionTemplateID = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeReportAcademicSessionTemplateCourse/" + str(GradeReportAcademicSessionTemplateCourseID), verb = "get", return_params_list = return_params)

def modifyGradeReportAcademicSessionTemplateCourse(GradeReportAcademicSessionTemplateCourseID, EntityID = 1, setGradeReportAcademicSessionTemplateCourseID = None, setCourseID = None, setCreatedTime = None, setGradeReportAcademicSessionTemplateCourseIDClonedFrom = None, setGradeReportAcademicSessionTemplateID = None, setModifiedTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnGradeReportAcademicSessionTemplateCourseID = False, returnCourseID = False, returnCreatedTime = False, returnGradeReportAcademicSessionTemplateCourseIDClonedFrom = False, returnGradeReportAcademicSessionTemplateID = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeReportAcademicSessionTemplateCourse/" + str(GradeReportAcademicSessionTemplateCourseID), verb = "post", return_params_list = return_params, payload = payload_params)

def createGradeReportAcademicSessionTemplateCourse(EntityID = 1, setGradeReportAcademicSessionTemplateCourseID = None, setCourseID = None, setCreatedTime = None, setGradeReportAcademicSessionTemplateCourseIDClonedFrom = None, setGradeReportAcademicSessionTemplateID = None, setModifiedTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnGradeReportAcademicSessionTemplateCourseID = False, returnCourseID = False, returnCreatedTime = False, returnGradeReportAcademicSessionTemplateCourseIDClonedFrom = False, returnGradeReportAcademicSessionTemplateID = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeReportAcademicSessionTemplateCourse/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteGradeReportAcademicSessionTemplateCourse(GradeReportAcademicSessionTemplateCourseID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeReportAcademicSessionTemplateCourse/" + str(GradeReportAcademicSessionTemplateCourseID), verb = "delete")


def getEveryGradeReportAcademicSessionTemplateCourseGroup(searchConditions = [], EntityID = 1, returnGradeReportAcademicSessionTemplateCourseGroupID = False, returnCourseGroupID = False, returnCreatedTime = False, returnGradeReportAcademicSessionTemplateID = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every GradeReportAcademicSessionTemplateCourseGroup in the district.

    This function returns a dataframe of every GradeReportAcademicSessionTemplateCourseGroup in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeReportAcademicSessionTemplateCourseGroup/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeReportAcademicSessionTemplateCourseGroup/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getGradeReportAcademicSessionTemplateCourseGroup(GradeReportAcademicSessionTemplateCourseGroupID, EntityID = 1, returnGradeReportAcademicSessionTemplateCourseGroupID = False, returnCourseGroupID = False, returnCreatedTime = False, returnGradeReportAcademicSessionTemplateID = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeReportAcademicSessionTemplateCourseGroup/" + str(GradeReportAcademicSessionTemplateCourseGroupID), verb = "get", return_params_list = return_params)

def modifyGradeReportAcademicSessionTemplateCourseGroup(GradeReportAcademicSessionTemplateCourseGroupID, EntityID = 1, setGradeReportAcademicSessionTemplateCourseGroupID = None, setCourseGroupID = None, setCreatedTime = None, setGradeReportAcademicSessionTemplateID = None, setModifiedTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnGradeReportAcademicSessionTemplateCourseGroupID = False, returnCourseGroupID = False, returnCreatedTime = False, returnGradeReportAcademicSessionTemplateID = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeReportAcademicSessionTemplateCourseGroup/" + str(GradeReportAcademicSessionTemplateCourseGroupID), verb = "post", return_params_list = return_params, payload = payload_params)

def createGradeReportAcademicSessionTemplateCourseGroup(EntityID = 1, setGradeReportAcademicSessionTemplateCourseGroupID = None, setCourseGroupID = None, setCreatedTime = None, setGradeReportAcademicSessionTemplateID = None, setModifiedTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnGradeReportAcademicSessionTemplateCourseGroupID = False, returnCourseGroupID = False, returnCreatedTime = False, returnGradeReportAcademicSessionTemplateID = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeReportAcademicSessionTemplateCourseGroup/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteGradeReportAcademicSessionTemplateCourseGroup(GradeReportAcademicSessionTemplateCourseGroupID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeReportAcademicSessionTemplateCourseGroup/" + str(GradeReportAcademicSessionTemplateCourseGroupID), verb = "delete")


def getEveryGradeReportAcademicSessionTemplateGradeLevel(searchConditions = [], EntityID = 1, returnGradeReportAcademicSessionTemplateGradeLevelID = False, returnCreatedTime = False, returnGradeLevelID = False, returnGradeReportAcademicSessionTemplateID = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every GradeReportAcademicSessionTemplateGradeLevel in the district.

    This function returns a dataframe of every GradeReportAcademicSessionTemplateGradeLevel in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeReportAcademicSessionTemplateGradeLevel/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeReportAcademicSessionTemplateGradeLevel/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getGradeReportAcademicSessionTemplateGradeLevel(GradeReportAcademicSessionTemplateGradeLevelID, EntityID = 1, returnGradeReportAcademicSessionTemplateGradeLevelID = False, returnCreatedTime = False, returnGradeLevelID = False, returnGradeReportAcademicSessionTemplateID = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeReportAcademicSessionTemplateGradeLevel/" + str(GradeReportAcademicSessionTemplateGradeLevelID), verb = "get", return_params_list = return_params)

def modifyGradeReportAcademicSessionTemplateGradeLevel(GradeReportAcademicSessionTemplateGradeLevelID, EntityID = 1, setGradeReportAcademicSessionTemplateGradeLevelID = None, setCreatedTime = None, setGradeLevelID = None, setGradeReportAcademicSessionTemplateID = None, setModifiedTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnGradeReportAcademicSessionTemplateGradeLevelID = False, returnCreatedTime = False, returnGradeLevelID = False, returnGradeReportAcademicSessionTemplateID = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeReportAcademicSessionTemplateGradeLevel/" + str(GradeReportAcademicSessionTemplateGradeLevelID), verb = "post", return_params_list = return_params, payload = payload_params)

def createGradeReportAcademicSessionTemplateGradeLevel(EntityID = 1, setGradeReportAcademicSessionTemplateGradeLevelID = None, setCreatedTime = None, setGradeLevelID = None, setGradeReportAcademicSessionTemplateID = None, setModifiedTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnGradeReportAcademicSessionTemplateGradeLevelID = False, returnCreatedTime = False, returnGradeLevelID = False, returnGradeReportAcademicSessionTemplateID = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeReportAcademicSessionTemplateGradeLevel/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteGradeReportAcademicSessionTemplateGradeLevel(GradeReportAcademicSessionTemplateGradeLevelID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeReportAcademicSessionTemplateGradeLevel/" + str(GradeReportAcademicSessionTemplateGradeLevelID), verb = "delete")


def getEveryGradeReportAcademicSessionTemplateGroup(searchConditions = [], EntityID = 1, returnGradeReportAcademicSessionTemplateGroupID = False, returnCreatedTime = False, returnDescription = False, returnDistrictID = False, returnEarnedCreditsMethodIDDefaultOverride = False, returnGPABucketID = False, returnGPAField = False, returnGPAFieldCode = False, returnGPALabel1 = False, returnGPAMethodID = False, returnIncludeEarnedCredits = False, returnIncludeGPA = False, returnIncludeSchoolYearDescription = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every GradeReportAcademicSessionTemplateGroup in the district.

    This function returns a dataframe of every GradeReportAcademicSessionTemplateGroup in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeReportAcademicSessionTemplateGroup/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeReportAcademicSessionTemplateGroup/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getGradeReportAcademicSessionTemplateGroup(GradeReportAcademicSessionTemplateGroupID, EntityID = 1, returnGradeReportAcademicSessionTemplateGroupID = False, returnCreatedTime = False, returnDescription = False, returnDistrictID = False, returnEarnedCreditsMethodIDDefaultOverride = False, returnGPABucketID = False, returnGPAField = False, returnGPAFieldCode = False, returnGPALabel1 = False, returnGPAMethodID = False, returnIncludeEarnedCredits = False, returnIncludeGPA = False, returnIncludeSchoolYearDescription = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeReportAcademicSessionTemplateGroup/" + str(GradeReportAcademicSessionTemplateGroupID), verb = "get", return_params_list = return_params)

def modifyGradeReportAcademicSessionTemplateGroup(GradeReportAcademicSessionTemplateGroupID, EntityID = 1, setGradeReportAcademicSessionTemplateGroupID = None, setCreatedTime = None, setDescription = None, setDistrictID = None, setEarnedCreditsMethodIDDefaultOverride = None, setGPABucketID = None, setGPAField = None, setGPAFieldCode = None, setGPALabel1 = None, setGPAMethodID = None, setIncludeEarnedCredits = None, setIncludeGPA = None, setIncludeSchoolYearDescription = None, setModifiedTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnGradeReportAcademicSessionTemplateGroupID = False, returnCreatedTime = False, returnDescription = False, returnDistrictID = False, returnEarnedCreditsMethodIDDefaultOverride = False, returnGPABucketID = False, returnGPAField = False, returnGPAFieldCode = False, returnGPALabel1 = False, returnGPAMethodID = False, returnIncludeEarnedCredits = False, returnIncludeGPA = False, returnIncludeSchoolYearDescription = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeReportAcademicSessionTemplateGroup/" + str(GradeReportAcademicSessionTemplateGroupID), verb = "post", return_params_list = return_params, payload = payload_params)

def createGradeReportAcademicSessionTemplateGroup(EntityID = 1, setGradeReportAcademicSessionTemplateGroupID = None, setCreatedTime = None, setDescription = None, setDistrictID = None, setEarnedCreditsMethodIDDefaultOverride = None, setGPABucketID = None, setGPAField = None, setGPAFieldCode = None, setGPALabel1 = None, setGPAMethodID = None, setIncludeEarnedCredits = None, setIncludeGPA = None, setIncludeSchoolYearDescription = None, setModifiedTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnGradeReportAcademicSessionTemplateGroupID = False, returnCreatedTime = False, returnDescription = False, returnDistrictID = False, returnEarnedCreditsMethodIDDefaultOverride = False, returnGPABucketID = False, returnGPAField = False, returnGPAFieldCode = False, returnGPALabel1 = False, returnGPAMethodID = False, returnIncludeEarnedCredits = False, returnIncludeGPA = False, returnIncludeSchoolYearDescription = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeReportAcademicSessionTemplateGroup/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteGradeReportAcademicSessionTemplateGroup(GradeReportAcademicSessionTemplateGroupID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeReportAcademicSessionTemplateGroup/" + str(GradeReportAcademicSessionTemplateGroupID), verb = "delete")


def getEveryGradeReportColumnAttendanceCategory(searchConditions = [], EntityID = 1, returnGradeReportColumnAttendanceCategoryID = False, returnCategory = False, returnCategoryCode = False, returnCreatedTime = False, returnGradeReportColumnAttendanceCategoryIDClonedFrom = False, returnGradeReportColumnGroupColumnID = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every GradeReportColumnAttendanceCategory in the district.

    This function returns a dataframe of every GradeReportColumnAttendanceCategory in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeReportColumnAttendanceCategory/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeReportColumnAttendanceCategory/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getGradeReportColumnAttendanceCategory(GradeReportColumnAttendanceCategoryID, EntityID = 1, returnGradeReportColumnAttendanceCategoryID = False, returnCategory = False, returnCategoryCode = False, returnCreatedTime = False, returnGradeReportColumnAttendanceCategoryIDClonedFrom = False, returnGradeReportColumnGroupColumnID = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeReportColumnAttendanceCategory/" + str(GradeReportColumnAttendanceCategoryID), verb = "get", return_params_list = return_params)

def modifyGradeReportColumnAttendanceCategory(GradeReportColumnAttendanceCategoryID, EntityID = 1, setGradeReportColumnAttendanceCategoryID = None, setCategory = None, setCategoryCode = None, setCreatedTime = None, setGradeReportColumnAttendanceCategoryIDClonedFrom = None, setGradeReportColumnGroupColumnID = None, setModifiedTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnGradeReportColumnAttendanceCategoryID = False, returnCategory = False, returnCategoryCode = False, returnCreatedTime = False, returnGradeReportColumnAttendanceCategoryIDClonedFrom = False, returnGradeReportColumnGroupColumnID = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeReportColumnAttendanceCategory/" + str(GradeReportColumnAttendanceCategoryID), verb = "post", return_params_list = return_params, payload = payload_params)

def createGradeReportColumnAttendanceCategory(EntityID = 1, setGradeReportColumnAttendanceCategoryID = None, setCategory = None, setCategoryCode = None, setCreatedTime = None, setGradeReportColumnAttendanceCategoryIDClonedFrom = None, setGradeReportColumnGroupColumnID = None, setModifiedTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnGradeReportColumnAttendanceCategoryID = False, returnCategory = False, returnCategoryCode = False, returnCreatedTime = False, returnGradeReportColumnAttendanceCategoryIDClonedFrom = False, returnGradeReportColumnGroupColumnID = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeReportColumnAttendanceCategory/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteGradeReportColumnAttendanceCategory(GradeReportColumnAttendanceCategoryID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeReportColumnAttendanceCategory/" + str(GradeReportColumnAttendanceCategoryID), verb = "delete")


def getEveryGradeReportColumnAttendanceTerm(searchConditions = [], EntityID = 1, returnGradeReportColumnAttendanceTermID = False, returnAttendanceTermID = False, returnCreatedTime = False, returnGradeReportColumnAttendanceTermIDClonedFrom = False, returnGradeReportColumnGroupColumnID = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every GradeReportColumnAttendanceTerm in the district.

    This function returns a dataframe of every GradeReportColumnAttendanceTerm in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeReportColumnAttendanceTerm/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeReportColumnAttendanceTerm/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getGradeReportColumnAttendanceTerm(GradeReportColumnAttendanceTermID, EntityID = 1, returnGradeReportColumnAttendanceTermID = False, returnAttendanceTermID = False, returnCreatedTime = False, returnGradeReportColumnAttendanceTermIDClonedFrom = False, returnGradeReportColumnGroupColumnID = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeReportColumnAttendanceTerm/" + str(GradeReportColumnAttendanceTermID), verb = "get", return_params_list = return_params)

def modifyGradeReportColumnAttendanceTerm(GradeReportColumnAttendanceTermID, EntityID = 1, setGradeReportColumnAttendanceTermID = None, setAttendanceTermID = None, setCreatedTime = None, setGradeReportColumnAttendanceTermIDClonedFrom = None, setGradeReportColumnGroupColumnID = None, setModifiedTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnGradeReportColumnAttendanceTermID = False, returnAttendanceTermID = False, returnCreatedTime = False, returnGradeReportColumnAttendanceTermIDClonedFrom = False, returnGradeReportColumnGroupColumnID = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeReportColumnAttendanceTerm/" + str(GradeReportColumnAttendanceTermID), verb = "post", return_params_list = return_params, payload = payload_params)

def createGradeReportColumnAttendanceTerm(EntityID = 1, setGradeReportColumnAttendanceTermID = None, setAttendanceTermID = None, setCreatedTime = None, setGradeReportColumnAttendanceTermIDClonedFrom = None, setGradeReportColumnGroupColumnID = None, setModifiedTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnGradeReportColumnAttendanceTermID = False, returnAttendanceTermID = False, returnCreatedTime = False, returnGradeReportColumnAttendanceTermIDClonedFrom = False, returnGradeReportColumnGroupColumnID = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeReportColumnAttendanceTerm/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteGradeReportColumnAttendanceTerm(GradeReportColumnAttendanceTermID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeReportColumnAttendanceTerm/" + str(GradeReportColumnAttendanceTermID), verb = "delete")


def getEveryGradeReportColumnGradeBucket(searchConditions = [], EntityID = 1, returnGradeReportColumnGradeBucketID = False, returnCreatedTime = False, returnGradeReportColumnGradeBucketIDClonedFrom = False, returnGradeReportColumnGroupColumnID = False, returnGradingPeriodGradeBucketID = False, returnModifiedTime = False, returnSortNumber = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every GradeReportColumnGradeBucket in the district.

    This function returns a dataframe of every GradeReportColumnGradeBucket in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeReportColumnGradeBucket/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeReportColumnGradeBucket/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getGradeReportColumnGradeBucket(GradeReportColumnGradeBucketID, EntityID = 1, returnGradeReportColumnGradeBucketID = False, returnCreatedTime = False, returnGradeReportColumnGradeBucketIDClonedFrom = False, returnGradeReportColumnGroupColumnID = False, returnGradingPeriodGradeBucketID = False, returnModifiedTime = False, returnSortNumber = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeReportColumnGradeBucket/" + str(GradeReportColumnGradeBucketID), verb = "get", return_params_list = return_params)

def modifyGradeReportColumnGradeBucket(GradeReportColumnGradeBucketID, EntityID = 1, setGradeReportColumnGradeBucketID = None, setCreatedTime = None, setGradeReportColumnGradeBucketIDClonedFrom = None, setGradeReportColumnGroupColumnID = None, setGradingPeriodGradeBucketID = None, setModifiedTime = None, setSortNumber = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnGradeReportColumnGradeBucketID = False, returnCreatedTime = False, returnGradeReportColumnGradeBucketIDClonedFrom = False, returnGradeReportColumnGroupColumnID = False, returnGradingPeriodGradeBucketID = False, returnModifiedTime = False, returnSortNumber = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeReportColumnGradeBucket/" + str(GradeReportColumnGradeBucketID), verb = "post", return_params_list = return_params, payload = payload_params)

def createGradeReportColumnGradeBucket(EntityID = 1, setGradeReportColumnGradeBucketID = None, setCreatedTime = None, setGradeReportColumnGradeBucketIDClonedFrom = None, setGradeReportColumnGroupColumnID = None, setGradingPeriodGradeBucketID = None, setModifiedTime = None, setSortNumber = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnGradeReportColumnGradeBucketID = False, returnCreatedTime = False, returnGradeReportColumnGradeBucketIDClonedFrom = False, returnGradeReportColumnGroupColumnID = False, returnGradingPeriodGradeBucketID = False, returnModifiedTime = False, returnSortNumber = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeReportColumnGradeBucket/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteGradeReportColumnGradeBucket(GradeReportColumnGradeBucketID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeReportColumnGradeBucket/" + str(GradeReportColumnGradeBucketID), verb = "delete")


def getEveryGradeReportColumnGroup(searchConditions = [], EntityID = 1, returnGradeReportColumnGroupID = False, returnAlwaysDisplayGradingColumns = False, returnConfigDistrictYearID = False, returnCreatedTime = False, returnDescription = False, returnGradeReportColumnGroupIDClonedFrom = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every GradeReportColumnGroup in the district.

    This function returns a dataframe of every GradeReportColumnGroup in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeReportColumnGroup/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeReportColumnGroup/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getGradeReportColumnGroup(GradeReportColumnGroupID, EntityID = 1, returnGradeReportColumnGroupID = False, returnAlwaysDisplayGradingColumns = False, returnConfigDistrictYearID = False, returnCreatedTime = False, returnDescription = False, returnGradeReportColumnGroupIDClonedFrom = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeReportColumnGroup/" + str(GradeReportColumnGroupID), verb = "get", return_params_list = return_params)

def modifyGradeReportColumnGroup(GradeReportColumnGroupID, EntityID = 1, setGradeReportColumnGroupID = None, setAlwaysDisplayGradingColumns = None, setConfigDistrictYearID = None, setCreatedTime = None, setDescription = None, setGradeReportColumnGroupIDClonedFrom = None, setModifiedTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnGradeReportColumnGroupID = False, returnAlwaysDisplayGradingColumns = False, returnConfigDistrictYearID = False, returnCreatedTime = False, returnDescription = False, returnGradeReportColumnGroupIDClonedFrom = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeReportColumnGroup/" + str(GradeReportColumnGroupID), verb = "post", return_params_list = return_params, payload = payload_params)

def createGradeReportColumnGroup(EntityID = 1, setGradeReportColumnGroupID = None, setAlwaysDisplayGradingColumns = None, setConfigDistrictYearID = None, setCreatedTime = None, setDescription = None, setGradeReportColumnGroupIDClonedFrom = None, setModifiedTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnGradeReportColumnGroupID = False, returnAlwaysDisplayGradingColumns = False, returnConfigDistrictYearID = False, returnCreatedTime = False, returnDescription = False, returnGradeReportColumnGroupIDClonedFrom = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeReportColumnGroup/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteGradeReportColumnGroup(GradeReportColumnGroupID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeReportColumnGroup/" + str(GradeReportColumnGroupID), verb = "delete")


def getEveryGradeReportColumnGroupColumn(searchConditions = [], EntityID = 1, returnGradeReportColumnGroupColumnID = False, returnAttendanceOption = False, returnAttendanceOptionCode = False, returnColumnHeader = False, returnColumnType = False, returnColumnTypeCode = False, returnContinueIfBlank = False, returnCreatedTime = False, returnDynamicRelationshipID = False, returnGradeReportColumnGroupColumnIDClonedFrom = False, returnGradeReportColumnGroupID = False, returnModifiedTime = False, returnSortNumber = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every GradeReportColumnGroupColumn in the district.

    This function returns a dataframe of every GradeReportColumnGroupColumn in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeReportColumnGroupColumn/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeReportColumnGroupColumn/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getGradeReportColumnGroupColumn(GradeReportColumnGroupColumnID, EntityID = 1, returnGradeReportColumnGroupColumnID = False, returnAttendanceOption = False, returnAttendanceOptionCode = False, returnColumnHeader = False, returnColumnType = False, returnColumnTypeCode = False, returnContinueIfBlank = False, returnCreatedTime = False, returnDynamicRelationshipID = False, returnGradeReportColumnGroupColumnIDClonedFrom = False, returnGradeReportColumnGroupID = False, returnModifiedTime = False, returnSortNumber = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeReportColumnGroupColumn/" + str(GradeReportColumnGroupColumnID), verb = "get", return_params_list = return_params)

def modifyGradeReportColumnGroupColumn(GradeReportColumnGroupColumnID, EntityID = 1, setGradeReportColumnGroupColumnID = None, setAttendanceOption = None, setAttendanceOptionCode = None, setColumnHeader = None, setColumnType = None, setColumnTypeCode = None, setContinueIfBlank = None, setCreatedTime = None, setDynamicRelationshipID = None, setGradeReportColumnGroupColumnIDClonedFrom = None, setGradeReportColumnGroupID = None, setModifiedTime = None, setSortNumber = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnGradeReportColumnGroupColumnID = False, returnAttendanceOption = False, returnAttendanceOptionCode = False, returnColumnHeader = False, returnColumnType = False, returnColumnTypeCode = False, returnContinueIfBlank = False, returnCreatedTime = False, returnDynamicRelationshipID = False, returnGradeReportColumnGroupColumnIDClonedFrom = False, returnGradeReportColumnGroupID = False, returnModifiedTime = False, returnSortNumber = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeReportColumnGroupColumn/" + str(GradeReportColumnGroupColumnID), verb = "post", return_params_list = return_params, payload = payload_params)

def createGradeReportColumnGroupColumn(EntityID = 1, setGradeReportColumnGroupColumnID = None, setAttendanceOption = None, setAttendanceOptionCode = None, setColumnHeader = None, setColumnType = None, setColumnTypeCode = None, setContinueIfBlank = None, setCreatedTime = None, setDynamicRelationshipID = None, setGradeReportColumnGroupColumnIDClonedFrom = None, setGradeReportColumnGroupID = None, setModifiedTime = None, setSortNumber = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnGradeReportColumnGroupColumnID = False, returnAttendanceOption = False, returnAttendanceOptionCode = False, returnColumnHeader = False, returnColumnType = False, returnColumnTypeCode = False, returnContinueIfBlank = False, returnCreatedTime = False, returnDynamicRelationshipID = False, returnGradeReportColumnGroupColumnIDClonedFrom = False, returnGradeReportColumnGroupID = False, returnModifiedTime = False, returnSortNumber = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeReportColumnGroupColumn/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteGradeReportColumnGroupColumn(GradeReportColumnGroupColumnID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeReportColumnGroupColumn/" + str(GradeReportColumnGroupColumnID), verb = "delete")


def getEveryGradeReportEndorsementRow(searchConditions = [], EntityID = 1, returnGradeReportEndorsementRowID = False, returnCreatedTime = False, returnDescription = False, returnGradeReportStudentID = False, returnIsDistrictDefined = False, returnModifiedTime = False, returnSort1 = False, returnSort2 = False, returnStatus = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every GradeReportEndorsementRow in the district.

    This function returns a dataframe of every GradeReportEndorsementRow in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeReportEndorsementRow/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeReportEndorsementRow/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getGradeReportEndorsementRow(GradeReportEndorsementRowID, EntityID = 1, returnGradeReportEndorsementRowID = False, returnCreatedTime = False, returnDescription = False, returnGradeReportStudentID = False, returnIsDistrictDefined = False, returnModifiedTime = False, returnSort1 = False, returnSort2 = False, returnStatus = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeReportEndorsementRow/" + str(GradeReportEndorsementRowID), verb = "get", return_params_list = return_params)

def modifyGradeReportEndorsementRow(GradeReportEndorsementRowID, EntityID = 1, setGradeReportEndorsementRowID = None, setCreatedTime = None, setDescription = None, setGradeReportStudentID = None, setIsDistrictDefined = None, setModifiedTime = None, setSort1 = None, setSort2 = None, setStatus = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnGradeReportEndorsementRowID = False, returnCreatedTime = False, returnDescription = False, returnGradeReportStudentID = False, returnIsDistrictDefined = False, returnModifiedTime = False, returnSort1 = False, returnSort2 = False, returnStatus = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeReportEndorsementRow/" + str(GradeReportEndorsementRowID), verb = "post", return_params_list = return_params, payload = payload_params)

def createGradeReportEndorsementRow(EntityID = 1, setGradeReportEndorsementRowID = None, setCreatedTime = None, setDescription = None, setGradeReportStudentID = None, setIsDistrictDefined = None, setModifiedTime = None, setSort1 = None, setSort2 = None, setStatus = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnGradeReportEndorsementRowID = False, returnCreatedTime = False, returnDescription = False, returnGradeReportStudentID = False, returnIsDistrictDefined = False, returnModifiedTime = False, returnSort1 = False, returnSort2 = False, returnStatus = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeReportEndorsementRow/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteGradeReportEndorsementRow(GradeReportEndorsementRowID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeReportEndorsementRow/" + str(GradeReportEndorsementRowID), verb = "delete")


def getEveryGradeReportGPARow(searchConditions = [], EntityID = 1, returnGradeReportGPARowID = False, returnCreatedTime = False, returnDataColumn1 = False, returnDataColumn2 = False, returnDataColumn3 = False, returnDataColumn4 = False, returnDataColumn5 = False, returnDataColumn6 = False, returnDataColumn7 = False, returnGPABucketDescription = False, returnGPABucketID = False, returnGPAMethodDescription = False, returnGPAMethodID = False, returnGradeReportAcademicSessionID = False, returnGradeReportAcademicSessionSortNumber = False, returnModifiedTime = False, returnSortNumber = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every GradeReportGPARow in the district.

    This function returns a dataframe of every GradeReportGPARow in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeReportGPARow/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeReportGPARow/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getGradeReportGPARow(GradeReportGPARowID, EntityID = 1, returnGradeReportGPARowID = False, returnCreatedTime = False, returnDataColumn1 = False, returnDataColumn2 = False, returnDataColumn3 = False, returnDataColumn4 = False, returnDataColumn5 = False, returnDataColumn6 = False, returnDataColumn7 = False, returnGPABucketDescription = False, returnGPABucketID = False, returnGPAMethodDescription = False, returnGPAMethodID = False, returnGradeReportAcademicSessionID = False, returnGradeReportAcademicSessionSortNumber = False, returnModifiedTime = False, returnSortNumber = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeReportGPARow/" + str(GradeReportGPARowID), verb = "get", return_params_list = return_params)

def modifyGradeReportGPARow(GradeReportGPARowID, EntityID = 1, setGradeReportGPARowID = None, setCreatedTime = None, setDataColumn1 = None, setDataColumn2 = None, setDataColumn3 = None, setDataColumn4 = None, setDataColumn5 = None, setDataColumn6 = None, setDataColumn7 = None, setGPABucketDescription = None, setGPABucketID = None, setGPAMethodDescription = None, setGPAMethodID = None, setGradeReportAcademicSessionID = None, setGradeReportAcademicSessionSortNumber = None, setModifiedTime = None, setSortNumber = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnGradeReportGPARowID = False, returnCreatedTime = False, returnDataColumn1 = False, returnDataColumn2 = False, returnDataColumn3 = False, returnDataColumn4 = False, returnDataColumn5 = False, returnDataColumn6 = False, returnDataColumn7 = False, returnGPABucketDescription = False, returnGPABucketID = False, returnGPAMethodDescription = False, returnGPAMethodID = False, returnGradeReportAcademicSessionID = False, returnGradeReportAcademicSessionSortNumber = False, returnModifiedTime = False, returnSortNumber = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeReportGPARow/" + str(GradeReportGPARowID), verb = "post", return_params_list = return_params, payload = payload_params)

def createGradeReportGPARow(EntityID = 1, setGradeReportGPARowID = None, setCreatedTime = None, setDataColumn1 = None, setDataColumn2 = None, setDataColumn3 = None, setDataColumn4 = None, setDataColumn5 = None, setDataColumn6 = None, setDataColumn7 = None, setGPABucketDescription = None, setGPABucketID = None, setGPAMethodDescription = None, setGPAMethodID = None, setGradeReportAcademicSessionID = None, setGradeReportAcademicSessionSortNumber = None, setModifiedTime = None, setSortNumber = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnGradeReportGPARowID = False, returnCreatedTime = False, returnDataColumn1 = False, returnDataColumn2 = False, returnDataColumn3 = False, returnDataColumn4 = False, returnDataColumn5 = False, returnDataColumn6 = False, returnDataColumn7 = False, returnGPABucketDescription = False, returnGPABucketID = False, returnGPAMethodDescription = False, returnGPAMethodID = False, returnGradeReportAcademicSessionID = False, returnGradeReportAcademicSessionSortNumber = False, returnModifiedTime = False, returnSortNumber = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeReportGPARow/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteGradeReportGPARow(GradeReportGPARowID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeReportGPARow/" + str(GradeReportGPARowID), verb = "delete")


def getEveryGradeReportGradingScale(searchConditions = [], EntityID = 1, returnGradeReportGradingScaleID = False, returnCreatedTime = False, returnDisplayType = False, returnDisplayTypeCode = False, returnFreeformText = False, returnGradeMarkCode = False, returnGradeReportStudentID = False, returnModifiedTime = False, returnRangeHigh = False, returnRangeLow = False, returnSortNumber = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every GradeReportGradingScale in the district.

    This function returns a dataframe of every GradeReportGradingScale in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeReportGradingScale/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeReportGradingScale/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getGradeReportGradingScale(GradeReportGradingScaleID, EntityID = 1, returnGradeReportGradingScaleID = False, returnCreatedTime = False, returnDisplayType = False, returnDisplayTypeCode = False, returnFreeformText = False, returnGradeMarkCode = False, returnGradeReportStudentID = False, returnModifiedTime = False, returnRangeHigh = False, returnRangeLow = False, returnSortNumber = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeReportGradingScale/" + str(GradeReportGradingScaleID), verb = "get", return_params_list = return_params)

def modifyGradeReportGradingScale(GradeReportGradingScaleID, EntityID = 1, setGradeReportGradingScaleID = None, setCreatedTime = None, setDisplayType = None, setDisplayTypeCode = None, setFreeformText = None, setGradeMarkCode = None, setGradeReportStudentID = None, setModifiedTime = None, setRangeHigh = None, setRangeLow = None, setSortNumber = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnGradeReportGradingScaleID = False, returnCreatedTime = False, returnDisplayType = False, returnDisplayTypeCode = False, returnFreeformText = False, returnGradeMarkCode = False, returnGradeReportStudentID = False, returnModifiedTime = False, returnRangeHigh = False, returnRangeLow = False, returnSortNumber = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeReportGradingScale/" + str(GradeReportGradingScaleID), verb = "post", return_params_list = return_params, payload = payload_params)

def createGradeReportGradingScale(EntityID = 1, setGradeReportGradingScaleID = None, setCreatedTime = None, setDisplayType = None, setDisplayTypeCode = None, setFreeformText = None, setGradeMarkCode = None, setGradeReportStudentID = None, setModifiedTime = None, setRangeHigh = None, setRangeLow = None, setSortNumber = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnGradeReportGradingScaleID = False, returnCreatedTime = False, returnDisplayType = False, returnDisplayTypeCode = False, returnFreeformText = False, returnGradeMarkCode = False, returnGradeReportStudentID = False, returnModifiedTime = False, returnRangeHigh = False, returnRangeLow = False, returnSortNumber = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeReportGradingScale/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteGradeReportGradingScale(GradeReportGradingScaleID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeReportGradingScale/" + str(GradeReportGradingScaleID), verb = "delete")


def getEveryGradeReportRow(searchConditions = [], EntityID = 1, returnGradeReportRowID = False, returnAttemptedCredit = False, returnBackgroundColor = False, returnClassPeriod = False, returnCourseSubjectDescription = False, returnCourseTypeCode = False, returnCourseTypeDescription = False, returnCreatedTime = False, returnDepartment = False, returnDescription = False, returnEarnedCredit = False, returnGradeReportAcademicSessionID = False, returnGradeReportAcademicSessionSortNumber = False, returnGradeReportRowIDParent = False, returnModifiedTime = False, returnRowType = False, returnRowTypeCode = False, returnSectionLengthSubsetCode = False, returnSectionLengthSubsetDescription = False, returnSort1 = False, returnSort2 = False, returnSort3 = False, returnSort4 = False, returnSortNumber = False, returnStaffName = False, returnStudentSectionID = False, returnTextColor = False, returnTotalPossibleCredit = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every GradeReportRow in the district.

    This function returns a dataframe of every GradeReportRow in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeReportRow/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeReportRow/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getGradeReportRow(GradeReportRowID, EntityID = 1, returnGradeReportRowID = False, returnAttemptedCredit = False, returnBackgroundColor = False, returnClassPeriod = False, returnCourseSubjectDescription = False, returnCourseTypeCode = False, returnCourseTypeDescription = False, returnCreatedTime = False, returnDepartment = False, returnDescription = False, returnEarnedCredit = False, returnGradeReportAcademicSessionID = False, returnGradeReportAcademicSessionSortNumber = False, returnGradeReportRowIDParent = False, returnModifiedTime = False, returnRowType = False, returnRowTypeCode = False, returnSectionLengthSubsetCode = False, returnSectionLengthSubsetDescription = False, returnSort1 = False, returnSort2 = False, returnSort3 = False, returnSort4 = False, returnSortNumber = False, returnStaffName = False, returnStudentSectionID = False, returnTextColor = False, returnTotalPossibleCredit = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeReportRow/" + str(GradeReportRowID), verb = "get", return_params_list = return_params)

def modifyGradeReportRow(GradeReportRowID, EntityID = 1, setGradeReportRowID = None, setAttemptedCredit = None, setBackgroundColor = None, setClassPeriod = None, setCourseSubjectDescription = None, setCourseTypeCode = None, setCourseTypeDescription = None, setCreatedTime = None, setDepartment = None, setDescription = None, setEarnedCredit = None, setGradeReportAcademicSessionID = None, setGradeReportAcademicSessionSortNumber = None, setGradeReportRowIDParent = None, setModifiedTime = None, setRowType = None, setRowTypeCode = None, setSectionLengthSubsetCode = None, setSectionLengthSubsetDescription = None, setSort1 = None, setSort2 = None, setSort3 = None, setSort4 = None, setSortNumber = None, setStaffName = None, setStudentSectionID = None, setTextColor = None, setTotalPossibleCredit = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnGradeReportRowID = False, returnAttemptedCredit = False, returnBackgroundColor = False, returnClassPeriod = False, returnCourseSubjectDescription = False, returnCourseTypeCode = False, returnCourseTypeDescription = False, returnCreatedTime = False, returnDepartment = False, returnDescription = False, returnEarnedCredit = False, returnGradeReportAcademicSessionID = False, returnGradeReportAcademicSessionSortNumber = False, returnGradeReportRowIDParent = False, returnModifiedTime = False, returnRowType = False, returnRowTypeCode = False, returnSectionLengthSubsetCode = False, returnSectionLengthSubsetDescription = False, returnSort1 = False, returnSort2 = False, returnSort3 = False, returnSort4 = False, returnSortNumber = False, returnStaffName = False, returnStudentSectionID = False, returnTextColor = False, returnTotalPossibleCredit = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeReportRow/" + str(GradeReportRowID), verb = "post", return_params_list = return_params, payload = payload_params)

def createGradeReportRow(EntityID = 1, setGradeReportRowID = None, setAttemptedCredit = None, setBackgroundColor = None, setClassPeriod = None, setCourseSubjectDescription = None, setCourseTypeCode = None, setCourseTypeDescription = None, setCreatedTime = None, setDepartment = None, setDescription = None, setEarnedCredit = None, setGradeReportAcademicSessionID = None, setGradeReportAcademicSessionSortNumber = None, setGradeReportRowIDParent = None, setModifiedTime = None, setRowType = None, setRowTypeCode = None, setSectionLengthSubsetCode = None, setSectionLengthSubsetDescription = None, setSort1 = None, setSort2 = None, setSort3 = None, setSort4 = None, setSortNumber = None, setStaffName = None, setStudentSectionID = None, setTextColor = None, setTotalPossibleCredit = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnGradeReportRowID = False, returnAttemptedCredit = False, returnBackgroundColor = False, returnClassPeriod = False, returnCourseSubjectDescription = False, returnCourseTypeCode = False, returnCourseTypeDescription = False, returnCreatedTime = False, returnDepartment = False, returnDescription = False, returnEarnedCredit = False, returnGradeReportAcademicSessionID = False, returnGradeReportAcademicSessionSortNumber = False, returnGradeReportRowIDParent = False, returnModifiedTime = False, returnRowType = False, returnRowTypeCode = False, returnSectionLengthSubsetCode = False, returnSectionLengthSubsetDescription = False, returnSort1 = False, returnSort2 = False, returnSort3 = False, returnSort4 = False, returnSortNumber = False, returnStaffName = False, returnStudentSectionID = False, returnTextColor = False, returnTotalPossibleCredit = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeReportRow/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteGradeReportRow(GradeReportRowID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeReportRow/" + str(GradeReportRowID), verb = "delete")


def getEveryGradeReportRowColumn(searchConditions = [], EntityID = 1, returnGradeReportRowColumnID = False, returnCreatedTime = False, returnDisplayValue = False, returnGradeMarkID = False, returnGradeReportColumnGroupColumnID = False, returnGradeReportRowID = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every GradeReportRowColumn in the district.

    This function returns a dataframe of every GradeReportRowColumn in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeReportRowColumn/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeReportRowColumn/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getGradeReportRowColumn(GradeReportRowColumnID, EntityID = 1, returnGradeReportRowColumnID = False, returnCreatedTime = False, returnDisplayValue = False, returnGradeMarkID = False, returnGradeReportColumnGroupColumnID = False, returnGradeReportRowID = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeReportRowColumn/" + str(GradeReportRowColumnID), verb = "get", return_params_list = return_params)

def modifyGradeReportRowColumn(GradeReportRowColumnID, EntityID = 1, setGradeReportRowColumnID = None, setCreatedTime = None, setDisplayValue = None, setGradeMarkID = None, setGradeReportColumnGroupColumnID = None, setGradeReportRowID = None, setModifiedTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnGradeReportRowColumnID = False, returnCreatedTime = False, returnDisplayValue = False, returnGradeMarkID = False, returnGradeReportColumnGroupColumnID = False, returnGradeReportRowID = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeReportRowColumn/" + str(GradeReportRowColumnID), verb = "post", return_params_list = return_params, payload = payload_params)

def createGradeReportRowColumn(EntityID = 1, setGradeReportRowColumnID = None, setCreatedTime = None, setDisplayValue = None, setGradeMarkID = None, setGradeReportColumnGroupColumnID = None, setGradeReportRowID = None, setModifiedTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnGradeReportRowColumnID = False, returnCreatedTime = False, returnDisplayValue = False, returnGradeMarkID = False, returnGradeReportColumnGroupColumnID = False, returnGradeReportRowID = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeReportRowColumn/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteGradeReportRowColumn(GradeReportRowColumnID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeReportRowColumn/" + str(GradeReportRowColumnID), verb = "delete")


def getEveryGradeReportRowDetail(searchConditions = [], EntityID = 1, returnGradeReportRowDetailID = False, returnCreatedTime = False, returnDetailData = False, returnGradeReportRowID = False, returnGradingPeriodLabel = False, returnGradingPeriodSortNumber = False, returnLabel = False, returnModifiedTime = False, returnSortNumber = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every GradeReportRowDetail in the district.

    This function returns a dataframe of every GradeReportRowDetail in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeReportRowDetail/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeReportRowDetail/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getGradeReportRowDetail(GradeReportRowDetailID, EntityID = 1, returnGradeReportRowDetailID = False, returnCreatedTime = False, returnDetailData = False, returnGradeReportRowID = False, returnGradingPeriodLabel = False, returnGradingPeriodSortNumber = False, returnLabel = False, returnModifiedTime = False, returnSortNumber = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeReportRowDetail/" + str(GradeReportRowDetailID), verb = "get", return_params_list = return_params)

def modifyGradeReportRowDetail(GradeReportRowDetailID, EntityID = 1, setGradeReportRowDetailID = None, setCreatedTime = None, setDetailData = None, setGradeReportRowID = None, setGradingPeriodLabel = None, setGradingPeriodSortNumber = None, setLabel = None, setModifiedTime = None, setSortNumber = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnGradeReportRowDetailID = False, returnCreatedTime = False, returnDetailData = False, returnGradeReportRowID = False, returnGradingPeriodLabel = False, returnGradingPeriodSortNumber = False, returnLabel = False, returnModifiedTime = False, returnSortNumber = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeReportRowDetail/" + str(GradeReportRowDetailID), verb = "post", return_params_list = return_params, payload = payload_params)

def createGradeReportRowDetail(EntityID = 1, setGradeReportRowDetailID = None, setCreatedTime = None, setDetailData = None, setGradeReportRowID = None, setGradingPeriodLabel = None, setGradingPeriodSortNumber = None, setLabel = None, setModifiedTime = None, setSortNumber = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnGradeReportRowDetailID = False, returnCreatedTime = False, returnDetailData = False, returnGradeReportRowID = False, returnGradingPeriodLabel = False, returnGradingPeriodSortNumber = False, returnLabel = False, returnModifiedTime = False, returnSortNumber = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeReportRowDetail/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteGradeReportRowDetail(GradeReportRowDetailID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeReportRowDetail/" + str(GradeReportRowDetailID), verb = "delete")


def getEveryGradeReportRunHistory(searchConditions = [], EntityID = 1, returnGradeReportRunHistoryID = False, returnAddressLine1 = False, returnAddressLine2 = False, returnCEEBACT = False, returnCity = False, returnCode = False, returnCreatedTime = False, returnEntityID = False, returnFamilyPrintType = False, returnFamilyPrintTypeCode = False, returnFaxNumber = False, returnFooterMessage = False, returnFormattedFullAddress = False, returnGradeReportTemplateID = False, returnIsTexasTranscript = False, returnModifiedTime = False, returnName = False, returnOverwriteExistingReportCard = False, returnParameterDescription = False, returnPhoneNumber = False, returnPostalCode = False, returnPostReportCardToFASA = False, returnPrintCompletedGradingPeriodComments = False, returnReportCardFileName = False, returnRequireFamilyAccessElectronicSignature = False, returnStateProvince = False, returnStatusType = False, returnStatusTypeCode = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every GradeReportRunHistory in the district.

    This function returns a dataframe of every GradeReportRunHistory in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeReportRunHistory/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeReportRunHistory/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getGradeReportRunHistory(GradeReportRunHistoryID, EntityID = 1, returnGradeReportRunHistoryID = False, returnAddressLine1 = False, returnAddressLine2 = False, returnCEEBACT = False, returnCity = False, returnCode = False, returnCreatedTime = False, returnEntityID = False, returnFamilyPrintType = False, returnFamilyPrintTypeCode = False, returnFaxNumber = False, returnFooterMessage = False, returnFormattedFullAddress = False, returnGradeReportTemplateID = False, returnIsTexasTranscript = False, returnModifiedTime = False, returnName = False, returnOverwriteExistingReportCard = False, returnParameterDescription = False, returnPhoneNumber = False, returnPostalCode = False, returnPostReportCardToFASA = False, returnPrintCompletedGradingPeriodComments = False, returnReportCardFileName = False, returnRequireFamilyAccessElectronicSignature = False, returnStateProvince = False, returnStatusType = False, returnStatusTypeCode = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeReportRunHistory/" + str(GradeReportRunHistoryID), verb = "get", return_params_list = return_params)

def modifyGradeReportRunHistory(GradeReportRunHistoryID, EntityID = 1, setGradeReportRunHistoryID = None, setAddressLine1 = None, setAddressLine2 = None, setCEEBACT = None, setCity = None, setCode = None, setCreatedTime = None, setEntityID = None, setFamilyPrintType = None, setFamilyPrintTypeCode = None, setFaxNumber = None, setFooterMessage = None, setFormattedFullAddress = None, setGradeReportTemplateID = None, setIsTexasTranscript = None, setModifiedTime = None, setName = None, setOverwriteExistingReportCard = None, setParameterDescription = None, setPhoneNumber = None, setPostalCode = None, setPostReportCardToFASA = None, setPrintCompletedGradingPeriodComments = None, setReportCardFileName = None, setRequireFamilyAccessElectronicSignature = None, setStateProvince = None, setStatusType = None, setStatusTypeCode = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnGradeReportRunHistoryID = False, returnAddressLine1 = False, returnAddressLine2 = False, returnCEEBACT = False, returnCity = False, returnCode = False, returnCreatedTime = False, returnEntityID = False, returnFamilyPrintType = False, returnFamilyPrintTypeCode = False, returnFaxNumber = False, returnFooterMessage = False, returnFormattedFullAddress = False, returnGradeReportTemplateID = False, returnIsTexasTranscript = False, returnModifiedTime = False, returnName = False, returnOverwriteExistingReportCard = False, returnParameterDescription = False, returnPhoneNumber = False, returnPostalCode = False, returnPostReportCardToFASA = False, returnPrintCompletedGradingPeriodComments = False, returnReportCardFileName = False, returnRequireFamilyAccessElectronicSignature = False, returnStateProvince = False, returnStatusType = False, returnStatusTypeCode = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeReportRunHistory/" + str(GradeReportRunHistoryID), verb = "post", return_params_list = return_params, payload = payload_params)

def createGradeReportRunHistory(EntityID = 1, setGradeReportRunHistoryID = None, setAddressLine1 = None, setAddressLine2 = None, setCEEBACT = None, setCity = None, setCode = None, setCreatedTime = None, setEntityID = None, setFamilyPrintType = None, setFamilyPrintTypeCode = None, setFaxNumber = None, setFooterMessage = None, setFormattedFullAddress = None, setGradeReportTemplateID = None, setIsTexasTranscript = None, setModifiedTime = None, setName = None, setOverwriteExistingReportCard = None, setParameterDescription = None, setPhoneNumber = None, setPostalCode = None, setPostReportCardToFASA = None, setPrintCompletedGradingPeriodComments = None, setReportCardFileName = None, setRequireFamilyAccessElectronicSignature = None, setStateProvince = None, setStatusType = None, setStatusTypeCode = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnGradeReportRunHistoryID = False, returnAddressLine1 = False, returnAddressLine2 = False, returnCEEBACT = False, returnCity = False, returnCode = False, returnCreatedTime = False, returnEntityID = False, returnFamilyPrintType = False, returnFamilyPrintTypeCode = False, returnFaxNumber = False, returnFooterMessage = False, returnFormattedFullAddress = False, returnGradeReportTemplateID = False, returnIsTexasTranscript = False, returnModifiedTime = False, returnName = False, returnOverwriteExistingReportCard = False, returnParameterDescription = False, returnPhoneNumber = False, returnPostalCode = False, returnPostReportCardToFASA = False, returnPrintCompletedGradingPeriodComments = False, returnReportCardFileName = False, returnRequireFamilyAccessElectronicSignature = False, returnStateProvince = False, returnStatusType = False, returnStatusTypeCode = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeReportRunHistory/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteGradeReportRunHistory(GradeReportRunHistoryID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeReportRunHistory/" + str(GradeReportRunHistoryID), verb = "delete")


def getEveryGradeReportRunHistoryAttachment(searchConditions = [], EntityID = 1, returnGradeReportRunHistoryAttachmentID = False, returnAttachmentCanBeViewedByStudentFamilyFamilyAccess = False, returnAttachmentID = False, returnCreatedTime = False, returnGradeReportRunHistoryID = False, returnGuardianSignedTime = False, returnModifiedTime = False, returnNameIDGuardianSignedBy = False, returnSignedByGuardian = False, returnStudentID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every GradeReportRunHistoryAttachment in the district.

    This function returns a dataframe of every GradeReportRunHistoryAttachment in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeReportRunHistoryAttachment/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeReportRunHistoryAttachment/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getGradeReportRunHistoryAttachment(GradeReportRunHistoryAttachmentID, EntityID = 1, returnGradeReportRunHistoryAttachmentID = False, returnAttachmentCanBeViewedByStudentFamilyFamilyAccess = False, returnAttachmentID = False, returnCreatedTime = False, returnGradeReportRunHistoryID = False, returnGuardianSignedTime = False, returnModifiedTime = False, returnNameIDGuardianSignedBy = False, returnSignedByGuardian = False, returnStudentID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeReportRunHistoryAttachment/" + str(GradeReportRunHistoryAttachmentID), verb = "get", return_params_list = return_params)

def modifyGradeReportRunHistoryAttachment(GradeReportRunHistoryAttachmentID, EntityID = 1, setGradeReportRunHistoryAttachmentID = None, setAttachmentCanBeViewedByStudentFamilyFamilyAccess = None, setAttachmentID = None, setCreatedTime = None, setGradeReportRunHistoryID = None, setGuardianSignedTime = None, setModifiedTime = None, setNameIDGuardianSignedBy = None, setSignedByGuardian = None, setStudentID = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnGradeReportRunHistoryAttachmentID = False, returnAttachmentCanBeViewedByStudentFamilyFamilyAccess = False, returnAttachmentID = False, returnCreatedTime = False, returnGradeReportRunHistoryID = False, returnGuardianSignedTime = False, returnModifiedTime = False, returnNameIDGuardianSignedBy = False, returnSignedByGuardian = False, returnStudentID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeReportRunHistoryAttachment/" + str(GradeReportRunHistoryAttachmentID), verb = "post", return_params_list = return_params, payload = payload_params)

def createGradeReportRunHistoryAttachment(EntityID = 1, setGradeReportRunHistoryAttachmentID = None, setAttachmentCanBeViewedByStudentFamilyFamilyAccess = None, setAttachmentID = None, setCreatedTime = None, setGradeReportRunHistoryID = None, setGuardianSignedTime = None, setModifiedTime = None, setNameIDGuardianSignedBy = None, setSignedByGuardian = None, setStudentID = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnGradeReportRunHistoryAttachmentID = False, returnAttachmentCanBeViewedByStudentFamilyFamilyAccess = False, returnAttachmentID = False, returnCreatedTime = False, returnGradeReportRunHistoryID = False, returnGuardianSignedTime = False, returnModifiedTime = False, returnNameIDGuardianSignedBy = False, returnSignedByGuardian = False, returnStudentID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeReportRunHistoryAttachment/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteGradeReportRunHistoryAttachment(GradeReportRunHistoryAttachmentID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeReportRunHistoryAttachment/" + str(GradeReportRunHistoryAttachmentID), verb = "delete")


def getEveryGradeReportStudent(searchConditions = [], EntityID = 1, returnGradeReportStudentID = False, returnAddressLine1 = False, returnAddressLine2 = False, returnAdvisorName = False, returnBirthDate = False, returnCity = False, returnCreatedTime = False, returnDoubleColumnHeaderField1 = False, returnDoubleColumnHeaderField10 = False, returnDoubleColumnHeaderField2 = False, returnDoubleColumnHeaderField3 = False, returnDoubleColumnHeaderField4 = False, returnDoubleColumnHeaderField5 = False, returnDoubleColumnHeaderField6 = False, returnDoubleColumnHeaderField7 = False, returnDoubleColumnHeaderField8 = False, returnDoubleColumnHeaderField9 = False, returnEmailAddress = False, returnEthnicityAndRace = False, returnFirstName = False, returnFormattedFullAddress = False, returnFormattedName = False, returnGender = False, returnGenderCode = False, returnGradeReportRunHistoryID = False, returnGraduationDate = False, returnHomeroom = False, returnLastName = False, returnMiddleName = False, returnModifiedTime = False, returnNameIDPrimaryGuardian = False, returnNameSuffix = False, returnNameTitle = False, returnPostalCode = False, returnPrimaryGuardianEmailAddress = False, returnPrimaryGuardianFirstName = False, returnPrimaryGuardianFormattedName = False, returnPrimaryGuardianLastName = False, returnPrimaryGuardianMiddleName = False, returnPrimaryGuardianNameSuffix = False, returnPrimaryGuardianNameTitle = False, returnPrimaryGuardianPhoneNumber = False, returnPromotionStatus = False, returnPromotionStatusCode = False, returnSingleColumnHeaderField1 = False, returnSingleColumnHeaderField2 = False, returnSingleColumnHeaderField3 = False, returnSingleColumnHeaderField4 = False, returnSingleColumnHeaderField5 = False, returnSort1 = False, returnSort2 = False, returnSort3 = False, returnSort4 = False, returnStateProvince = False, returnStudentFamilyID = False, returnStudentFamilyRank = False, returnStudentID = False, returnStudentNumber = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every GradeReportStudent in the district.

    This function returns a dataframe of every GradeReportStudent in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeReportStudent/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeReportStudent/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getGradeReportStudent(GradeReportStudentID, EntityID = 1, returnGradeReportStudentID = False, returnAddressLine1 = False, returnAddressLine2 = False, returnAdvisorName = False, returnBirthDate = False, returnCity = False, returnCreatedTime = False, returnDoubleColumnHeaderField1 = False, returnDoubleColumnHeaderField10 = False, returnDoubleColumnHeaderField2 = False, returnDoubleColumnHeaderField3 = False, returnDoubleColumnHeaderField4 = False, returnDoubleColumnHeaderField5 = False, returnDoubleColumnHeaderField6 = False, returnDoubleColumnHeaderField7 = False, returnDoubleColumnHeaderField8 = False, returnDoubleColumnHeaderField9 = False, returnEmailAddress = False, returnEthnicityAndRace = False, returnFirstName = False, returnFormattedFullAddress = False, returnFormattedName = False, returnGender = False, returnGenderCode = False, returnGradeReportRunHistoryID = False, returnGraduationDate = False, returnHomeroom = False, returnLastName = False, returnMiddleName = False, returnModifiedTime = False, returnNameIDPrimaryGuardian = False, returnNameSuffix = False, returnNameTitle = False, returnPostalCode = False, returnPrimaryGuardianEmailAddress = False, returnPrimaryGuardianFirstName = False, returnPrimaryGuardianFormattedName = False, returnPrimaryGuardianLastName = False, returnPrimaryGuardianMiddleName = False, returnPrimaryGuardianNameSuffix = False, returnPrimaryGuardianNameTitle = False, returnPrimaryGuardianPhoneNumber = False, returnPromotionStatus = False, returnPromotionStatusCode = False, returnSingleColumnHeaderField1 = False, returnSingleColumnHeaderField2 = False, returnSingleColumnHeaderField3 = False, returnSingleColumnHeaderField4 = False, returnSingleColumnHeaderField5 = False, returnSort1 = False, returnSort2 = False, returnSort3 = False, returnSort4 = False, returnStateProvince = False, returnStudentFamilyID = False, returnStudentFamilyRank = False, returnStudentID = False, returnStudentNumber = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeReportStudent/" + str(GradeReportStudentID), verb = "get", return_params_list = return_params)

def modifyGradeReportStudent(GradeReportStudentID, EntityID = 1, setGradeReportStudentID = None, setAddressLine1 = None, setAddressLine2 = None, setAdvisorName = None, setBirthDate = None, setCity = None, setCreatedTime = None, setDoubleColumnHeaderField1 = None, setDoubleColumnHeaderField10 = None, setDoubleColumnHeaderField2 = None, setDoubleColumnHeaderField3 = None, setDoubleColumnHeaderField4 = None, setDoubleColumnHeaderField5 = None, setDoubleColumnHeaderField6 = None, setDoubleColumnHeaderField7 = None, setDoubleColumnHeaderField8 = None, setDoubleColumnHeaderField9 = None, setEmailAddress = None, setEthnicityAndRace = None, setFirstName = None, setFormattedFullAddress = None, setFormattedName = None, setGender = None, setGenderCode = None, setGradeReportRunHistoryID = None, setGraduationDate = None, setHomeroom = None, setLastName = None, setMiddleName = None, setModifiedTime = None, setNameIDPrimaryGuardian = None, setNameSuffix = None, setNameTitle = None, setPostalCode = None, setPrimaryGuardianEmailAddress = None, setPrimaryGuardianFirstName = None, setPrimaryGuardianFormattedName = None, setPrimaryGuardianLastName = None, setPrimaryGuardianMiddleName = None, setPrimaryGuardianNameSuffix = None, setPrimaryGuardianNameTitle = None, setPrimaryGuardianPhoneNumber = None, setPromotionStatus = None, setPromotionStatusCode = None, setSingleColumnHeaderField1 = None, setSingleColumnHeaderField2 = None, setSingleColumnHeaderField3 = None, setSingleColumnHeaderField4 = None, setSingleColumnHeaderField5 = None, setSort1 = None, setSort2 = None, setSort3 = None, setSort4 = None, setStateProvince = None, setStudentFamilyID = None, setStudentFamilyRank = None, setStudentID = None, setStudentNumber = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnGradeReportStudentID = False, returnAddressLine1 = False, returnAddressLine2 = False, returnAdvisorName = False, returnBirthDate = False, returnCity = False, returnCreatedTime = False, returnDoubleColumnHeaderField1 = False, returnDoubleColumnHeaderField10 = False, returnDoubleColumnHeaderField2 = False, returnDoubleColumnHeaderField3 = False, returnDoubleColumnHeaderField4 = False, returnDoubleColumnHeaderField5 = False, returnDoubleColumnHeaderField6 = False, returnDoubleColumnHeaderField7 = False, returnDoubleColumnHeaderField8 = False, returnDoubleColumnHeaderField9 = False, returnEmailAddress = False, returnEthnicityAndRace = False, returnFirstName = False, returnFormattedFullAddress = False, returnFormattedName = False, returnGender = False, returnGenderCode = False, returnGradeReportRunHistoryID = False, returnGraduationDate = False, returnHomeroom = False, returnLastName = False, returnMiddleName = False, returnModifiedTime = False, returnNameIDPrimaryGuardian = False, returnNameSuffix = False, returnNameTitle = False, returnPostalCode = False, returnPrimaryGuardianEmailAddress = False, returnPrimaryGuardianFirstName = False, returnPrimaryGuardianFormattedName = False, returnPrimaryGuardianLastName = False, returnPrimaryGuardianMiddleName = False, returnPrimaryGuardianNameSuffix = False, returnPrimaryGuardianNameTitle = False, returnPrimaryGuardianPhoneNumber = False, returnPromotionStatus = False, returnPromotionStatusCode = False, returnSingleColumnHeaderField1 = False, returnSingleColumnHeaderField2 = False, returnSingleColumnHeaderField3 = False, returnSingleColumnHeaderField4 = False, returnSingleColumnHeaderField5 = False, returnSort1 = False, returnSort2 = False, returnSort3 = False, returnSort4 = False, returnStateProvince = False, returnStudentFamilyID = False, returnStudentFamilyRank = False, returnStudentID = False, returnStudentNumber = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeReportStudent/" + str(GradeReportStudentID), verb = "post", return_params_list = return_params, payload = payload_params)

def createGradeReportStudent(EntityID = 1, setGradeReportStudentID = None, setAddressLine1 = None, setAddressLine2 = None, setAdvisorName = None, setBirthDate = None, setCity = None, setCreatedTime = None, setDoubleColumnHeaderField1 = None, setDoubleColumnHeaderField10 = None, setDoubleColumnHeaderField2 = None, setDoubleColumnHeaderField3 = None, setDoubleColumnHeaderField4 = None, setDoubleColumnHeaderField5 = None, setDoubleColumnHeaderField6 = None, setDoubleColumnHeaderField7 = None, setDoubleColumnHeaderField8 = None, setDoubleColumnHeaderField9 = None, setEmailAddress = None, setEthnicityAndRace = None, setFirstName = None, setFormattedFullAddress = None, setFormattedName = None, setGender = None, setGenderCode = None, setGradeReportRunHistoryID = None, setGraduationDate = None, setHomeroom = None, setLastName = None, setMiddleName = None, setModifiedTime = None, setNameIDPrimaryGuardian = None, setNameSuffix = None, setNameTitle = None, setPostalCode = None, setPrimaryGuardianEmailAddress = None, setPrimaryGuardianFirstName = None, setPrimaryGuardianFormattedName = None, setPrimaryGuardianLastName = None, setPrimaryGuardianMiddleName = None, setPrimaryGuardianNameSuffix = None, setPrimaryGuardianNameTitle = None, setPrimaryGuardianPhoneNumber = None, setPromotionStatus = None, setPromotionStatusCode = None, setSingleColumnHeaderField1 = None, setSingleColumnHeaderField2 = None, setSingleColumnHeaderField3 = None, setSingleColumnHeaderField4 = None, setSingleColumnHeaderField5 = None, setSort1 = None, setSort2 = None, setSort3 = None, setSort4 = None, setStateProvince = None, setStudentFamilyID = None, setStudentFamilyRank = None, setStudentID = None, setStudentNumber = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnGradeReportStudentID = False, returnAddressLine1 = False, returnAddressLine2 = False, returnAdvisorName = False, returnBirthDate = False, returnCity = False, returnCreatedTime = False, returnDoubleColumnHeaderField1 = False, returnDoubleColumnHeaderField10 = False, returnDoubleColumnHeaderField2 = False, returnDoubleColumnHeaderField3 = False, returnDoubleColumnHeaderField4 = False, returnDoubleColumnHeaderField5 = False, returnDoubleColumnHeaderField6 = False, returnDoubleColumnHeaderField7 = False, returnDoubleColumnHeaderField8 = False, returnDoubleColumnHeaderField9 = False, returnEmailAddress = False, returnEthnicityAndRace = False, returnFirstName = False, returnFormattedFullAddress = False, returnFormattedName = False, returnGender = False, returnGenderCode = False, returnGradeReportRunHistoryID = False, returnGraduationDate = False, returnHomeroom = False, returnLastName = False, returnMiddleName = False, returnModifiedTime = False, returnNameIDPrimaryGuardian = False, returnNameSuffix = False, returnNameTitle = False, returnPostalCode = False, returnPrimaryGuardianEmailAddress = False, returnPrimaryGuardianFirstName = False, returnPrimaryGuardianFormattedName = False, returnPrimaryGuardianLastName = False, returnPrimaryGuardianMiddleName = False, returnPrimaryGuardianNameSuffix = False, returnPrimaryGuardianNameTitle = False, returnPrimaryGuardianPhoneNumber = False, returnPromotionStatus = False, returnPromotionStatusCode = False, returnSingleColumnHeaderField1 = False, returnSingleColumnHeaderField2 = False, returnSingleColumnHeaderField3 = False, returnSingleColumnHeaderField4 = False, returnSingleColumnHeaderField5 = False, returnSort1 = False, returnSort2 = False, returnSort3 = False, returnSort4 = False, returnStateProvince = False, returnStudentFamilyID = False, returnStudentFamilyRank = False, returnStudentID = False, returnStudentNumber = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeReportStudent/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteGradeReportStudent(GradeReportStudentID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeReportStudent/" + str(GradeReportStudentID), verb = "delete")


def getEveryGradeReportStudentAttendanceTerm(searchConditions = [], EntityID = 1, returnGradeReportStudentAttendanceTermID = False, returnAttendanceTermCode = False, returnCreatedTime = False, returnDaysAbsent = False, returnDaysExcused = False, returnDaysOther = False, returnDaysTardy = False, returnDaysUnexcused = False, returnGradeReportAcademicSessionID = False, returnModifiedTime = False, returnSortNumber = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every GradeReportStudentAttendanceTerm in the district.

    This function returns a dataframe of every GradeReportStudentAttendanceTerm in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeReportStudentAttendanceTerm/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeReportStudentAttendanceTerm/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getGradeReportStudentAttendanceTerm(GradeReportStudentAttendanceTermID, EntityID = 1, returnGradeReportStudentAttendanceTermID = False, returnAttendanceTermCode = False, returnCreatedTime = False, returnDaysAbsent = False, returnDaysExcused = False, returnDaysOther = False, returnDaysTardy = False, returnDaysUnexcused = False, returnGradeReportAcademicSessionID = False, returnModifiedTime = False, returnSortNumber = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeReportStudentAttendanceTerm/" + str(GradeReportStudentAttendanceTermID), verb = "get", return_params_list = return_params)

def modifyGradeReportStudentAttendanceTerm(GradeReportStudentAttendanceTermID, EntityID = 1, setGradeReportStudentAttendanceTermID = None, setAttendanceTermCode = None, setCreatedTime = None, setDaysAbsent = None, setDaysExcused = None, setDaysOther = None, setDaysTardy = None, setDaysUnexcused = None, setGradeReportAcademicSessionID = None, setModifiedTime = None, setSortNumber = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnGradeReportStudentAttendanceTermID = False, returnAttendanceTermCode = False, returnCreatedTime = False, returnDaysAbsent = False, returnDaysExcused = False, returnDaysOther = False, returnDaysTardy = False, returnDaysUnexcused = False, returnGradeReportAcademicSessionID = False, returnModifiedTime = False, returnSortNumber = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeReportStudentAttendanceTerm/" + str(GradeReportStudentAttendanceTermID), verb = "post", return_params_list = return_params, payload = payload_params)

def createGradeReportStudentAttendanceTerm(EntityID = 1, setGradeReportStudentAttendanceTermID = None, setAttendanceTermCode = None, setCreatedTime = None, setDaysAbsent = None, setDaysExcused = None, setDaysOther = None, setDaysTardy = None, setDaysUnexcused = None, setGradeReportAcademicSessionID = None, setModifiedTime = None, setSortNumber = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnGradeReportStudentAttendanceTermID = False, returnAttendanceTermCode = False, returnCreatedTime = False, returnDaysAbsent = False, returnDaysExcused = False, returnDaysOther = False, returnDaysTardy = False, returnDaysUnexcused = False, returnGradeReportAcademicSessionID = False, returnModifiedTime = False, returnSortNumber = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeReportStudentAttendanceTerm/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteGradeReportStudentAttendanceTerm(GradeReportStudentAttendanceTermID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeReportStudentAttendanceTerm/" + str(GradeReportStudentAttendanceTermID), verb = "delete")


def getEveryGradeReportStudentCTE(searchConditions = [], EntityID = 1, returnGradeReportStudentCTEID = False, returnCreatedTime = False, returnGradeReportStudentID = False, returnModifiedTime = False, returnProgramName = False, returnProgramStatus = False, returnProgramType = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every GradeReportStudentCTE in the district.

    This function returns a dataframe of every GradeReportStudentCTE in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeReportStudentCTE/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeReportStudentCTE/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getGradeReportStudentCTE(GradeReportStudentCTEID, EntityID = 1, returnGradeReportStudentCTEID = False, returnCreatedTime = False, returnGradeReportStudentID = False, returnModifiedTime = False, returnProgramName = False, returnProgramStatus = False, returnProgramType = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeReportStudentCTE/" + str(GradeReportStudentCTEID), verb = "get", return_params_list = return_params)

def modifyGradeReportStudentCTE(GradeReportStudentCTEID, EntityID = 1, setGradeReportStudentCTEID = None, setCreatedTime = None, setGradeReportStudentID = None, setModifiedTime = None, setProgramName = None, setProgramStatus = None, setProgramType = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnGradeReportStudentCTEID = False, returnCreatedTime = False, returnGradeReportStudentID = False, returnModifiedTime = False, returnProgramName = False, returnProgramStatus = False, returnProgramType = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeReportStudentCTE/" + str(GradeReportStudentCTEID), verb = "post", return_params_list = return_params, payload = payload_params)

def createGradeReportStudentCTE(EntityID = 1, setGradeReportStudentCTEID = None, setCreatedTime = None, setGradeReportStudentID = None, setModifiedTime = None, setProgramName = None, setProgramStatus = None, setProgramType = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnGradeReportStudentCTEID = False, returnCreatedTime = False, returnGradeReportStudentID = False, returnModifiedTime = False, returnProgramName = False, returnProgramStatus = False, returnProgramType = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeReportStudentCTE/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteGradeReportStudentCTE(GradeReportStudentCTEID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeReportStudentCTE/" + str(GradeReportStudentCTEID), verb = "delete")


def getEveryGradeReportStudentHighlightIN(searchConditions = [], EntityID = 1, returnGradeReportStudentHighlightINID = False, returnCreatedTime = False, returnGradeReportStudentID = False, returnHighlightType = False, returnHighlightTypeCode = False, returnModifiedTime = False, returnSchoolYear = False, returnTitle = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every GradeReportStudentHighlightIN in the district.

    This function returns a dataframe of every GradeReportStudentHighlightIN in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeReportStudentHighlightIN/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeReportStudentHighlightIN/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getGradeReportStudentHighlightIN(GradeReportStudentHighlightINID, EntityID = 1, returnGradeReportStudentHighlightINID = False, returnCreatedTime = False, returnGradeReportStudentID = False, returnHighlightType = False, returnHighlightTypeCode = False, returnModifiedTime = False, returnSchoolYear = False, returnTitle = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeReportStudentHighlightIN/" + str(GradeReportStudentHighlightINID), verb = "get", return_params_list = return_params)

def modifyGradeReportStudentHighlightIN(GradeReportStudentHighlightINID, EntityID = 1, setGradeReportStudentHighlightINID = None, setCreatedTime = None, setGradeReportStudentID = None, setHighlightType = None, setHighlightTypeCode = None, setModifiedTime = None, setSchoolYear = None, setTitle = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnGradeReportStudentHighlightINID = False, returnCreatedTime = False, returnGradeReportStudentID = False, returnHighlightType = False, returnHighlightTypeCode = False, returnModifiedTime = False, returnSchoolYear = False, returnTitle = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeReportStudentHighlightIN/" + str(GradeReportStudentHighlightINID), verb = "post", return_params_list = return_params, payload = payload_params)

def createGradeReportStudentHighlightIN(EntityID = 1, setGradeReportStudentHighlightINID = None, setCreatedTime = None, setGradeReportStudentID = None, setHighlightType = None, setHighlightTypeCode = None, setModifiedTime = None, setSchoolYear = None, setTitle = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnGradeReportStudentHighlightINID = False, returnCreatedTime = False, returnGradeReportStudentID = False, returnHighlightType = False, returnHighlightTypeCode = False, returnModifiedTime = False, returnSchoolYear = False, returnTitle = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeReportStudentHighlightIN/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteGradeReportStudentHighlightIN(GradeReportStudentHighlightINID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeReportStudentHighlightIN/" + str(GradeReportStudentHighlightINID), verb = "delete")


def getEveryGradeReportStudentTestRow(searchConditions = [], EntityID = 1, returnGradeReportStudentTestRowID = False, returnCreatedTime = False, returnDateTaken = False, returnGradeReportStudentTestTypeID = False, returnModifiedTime = False, returnSortNumber = False, returnTestColumn1 = False, returnTestColumn10 = False, returnTestColumn2 = False, returnTestColumn3 = False, returnTestColumn4 = False, returnTestColumn5 = False, returnTestColumn6 = False, returnTestColumn7 = False, returnTestColumn8 = False, returnTestColumn9 = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every GradeReportStudentTestRow in the district.

    This function returns a dataframe of every GradeReportStudentTestRow in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeReportStudentTestRow/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeReportStudentTestRow/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getGradeReportStudentTestRow(GradeReportStudentTestRowID, EntityID = 1, returnGradeReportStudentTestRowID = False, returnCreatedTime = False, returnDateTaken = False, returnGradeReportStudentTestTypeID = False, returnModifiedTime = False, returnSortNumber = False, returnTestColumn1 = False, returnTestColumn10 = False, returnTestColumn2 = False, returnTestColumn3 = False, returnTestColumn4 = False, returnTestColumn5 = False, returnTestColumn6 = False, returnTestColumn7 = False, returnTestColumn8 = False, returnTestColumn9 = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeReportStudentTestRow/" + str(GradeReportStudentTestRowID), verb = "get", return_params_list = return_params)

def modifyGradeReportStudentTestRow(GradeReportStudentTestRowID, EntityID = 1, setGradeReportStudentTestRowID = None, setCreatedTime = None, setDateTaken = None, setGradeReportStudentTestTypeID = None, setModifiedTime = None, setSortNumber = None, setTestColumn1 = None, setTestColumn10 = None, setTestColumn2 = None, setTestColumn3 = None, setTestColumn4 = None, setTestColumn5 = None, setTestColumn6 = None, setTestColumn7 = None, setTestColumn8 = None, setTestColumn9 = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnGradeReportStudentTestRowID = False, returnCreatedTime = False, returnDateTaken = False, returnGradeReportStudentTestTypeID = False, returnModifiedTime = False, returnSortNumber = False, returnTestColumn1 = False, returnTestColumn10 = False, returnTestColumn2 = False, returnTestColumn3 = False, returnTestColumn4 = False, returnTestColumn5 = False, returnTestColumn6 = False, returnTestColumn7 = False, returnTestColumn8 = False, returnTestColumn9 = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeReportStudentTestRow/" + str(GradeReportStudentTestRowID), verb = "post", return_params_list = return_params, payload = payload_params)

def createGradeReportStudentTestRow(EntityID = 1, setGradeReportStudentTestRowID = None, setCreatedTime = None, setDateTaken = None, setGradeReportStudentTestTypeID = None, setModifiedTime = None, setSortNumber = None, setTestColumn1 = None, setTestColumn10 = None, setTestColumn2 = None, setTestColumn3 = None, setTestColumn4 = None, setTestColumn5 = None, setTestColumn6 = None, setTestColumn7 = None, setTestColumn8 = None, setTestColumn9 = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnGradeReportStudentTestRowID = False, returnCreatedTime = False, returnDateTaken = False, returnGradeReportStudentTestTypeID = False, returnModifiedTime = False, returnSortNumber = False, returnTestColumn1 = False, returnTestColumn10 = False, returnTestColumn2 = False, returnTestColumn3 = False, returnTestColumn4 = False, returnTestColumn5 = False, returnTestColumn6 = False, returnTestColumn7 = False, returnTestColumn8 = False, returnTestColumn9 = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeReportStudentTestRow/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteGradeReportStudentTestRow(GradeReportStudentTestRowID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeReportStudentTestRow/" + str(GradeReportStudentTestRowID), verb = "delete")


def getEveryGradeReportStudentTestType(searchConditions = [], EntityID = 1, returnGradeReportStudentTestTypeID = False, returnCreatedTime = False, returnGradeReportStudentID = False, returnModifiedTime = False, returnSortNumber = False, returnTestCode = False, returnTestColumnHeader1 = False, returnTestColumnHeader10 = False, returnTestColumnHeader2 = False, returnTestColumnHeader3 = False, returnTestColumnHeader4 = False, returnTestColumnHeader5 = False, returnTestColumnHeader6 = False, returnTestColumnHeader7 = False, returnTestColumnHeader8 = False, returnTestColumnHeader9 = False, returnTestType = False, returnTestTypeCode = False, returnTestVersion = False, returnTestVersionCode = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every GradeReportStudentTestType in the district.

    This function returns a dataframe of every GradeReportStudentTestType in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeReportStudentTestType/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeReportStudentTestType/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getGradeReportStudentTestType(GradeReportStudentTestTypeID, EntityID = 1, returnGradeReportStudentTestTypeID = False, returnCreatedTime = False, returnGradeReportStudentID = False, returnModifiedTime = False, returnSortNumber = False, returnTestCode = False, returnTestColumnHeader1 = False, returnTestColumnHeader10 = False, returnTestColumnHeader2 = False, returnTestColumnHeader3 = False, returnTestColumnHeader4 = False, returnTestColumnHeader5 = False, returnTestColumnHeader6 = False, returnTestColumnHeader7 = False, returnTestColumnHeader8 = False, returnTestColumnHeader9 = False, returnTestType = False, returnTestTypeCode = False, returnTestVersion = False, returnTestVersionCode = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeReportStudentTestType/" + str(GradeReportStudentTestTypeID), verb = "get", return_params_list = return_params)

def modifyGradeReportStudentTestType(GradeReportStudentTestTypeID, EntityID = 1, setGradeReportStudentTestTypeID = None, setCreatedTime = None, setGradeReportStudentID = None, setModifiedTime = None, setSortNumber = None, setTestCode = None, setTestColumnHeader1 = None, setTestColumnHeader10 = None, setTestColumnHeader2 = None, setTestColumnHeader3 = None, setTestColumnHeader4 = None, setTestColumnHeader5 = None, setTestColumnHeader6 = None, setTestColumnHeader7 = None, setTestColumnHeader8 = None, setTestColumnHeader9 = None, setTestType = None, setTestTypeCode = None, setTestVersion = None, setTestVersionCode = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnGradeReportStudentTestTypeID = False, returnCreatedTime = False, returnGradeReportStudentID = False, returnModifiedTime = False, returnSortNumber = False, returnTestCode = False, returnTestColumnHeader1 = False, returnTestColumnHeader10 = False, returnTestColumnHeader2 = False, returnTestColumnHeader3 = False, returnTestColumnHeader4 = False, returnTestColumnHeader5 = False, returnTestColumnHeader6 = False, returnTestColumnHeader7 = False, returnTestColumnHeader8 = False, returnTestColumnHeader9 = False, returnTestType = False, returnTestTypeCode = False, returnTestVersion = False, returnTestVersionCode = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeReportStudentTestType/" + str(GradeReportStudentTestTypeID), verb = "post", return_params_list = return_params, payload = payload_params)

def createGradeReportStudentTestType(EntityID = 1, setGradeReportStudentTestTypeID = None, setCreatedTime = None, setGradeReportStudentID = None, setModifiedTime = None, setSortNumber = None, setTestCode = None, setTestColumnHeader1 = None, setTestColumnHeader10 = None, setTestColumnHeader2 = None, setTestColumnHeader3 = None, setTestColumnHeader4 = None, setTestColumnHeader5 = None, setTestColumnHeader6 = None, setTestColumnHeader7 = None, setTestColumnHeader8 = None, setTestColumnHeader9 = None, setTestType = None, setTestTypeCode = None, setTestVersion = None, setTestVersionCode = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnGradeReportStudentTestTypeID = False, returnCreatedTime = False, returnGradeReportStudentID = False, returnModifiedTime = False, returnSortNumber = False, returnTestCode = False, returnTestColumnHeader1 = False, returnTestColumnHeader10 = False, returnTestColumnHeader2 = False, returnTestColumnHeader3 = False, returnTestColumnHeader4 = False, returnTestColumnHeader5 = False, returnTestColumnHeader6 = False, returnTestColumnHeader7 = False, returnTestColumnHeader8 = False, returnTestColumnHeader9 = False, returnTestType = False, returnTestTypeCode = False, returnTestVersion = False, returnTestVersionCode = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeReportStudentTestType/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteGradeReportStudentTestType(GradeReportStudentTestTypeID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeReportStudentTestType/" + str(GradeReportStudentTestTypeID), verb = "delete")


def getEveryGradeReportStudentVaccination(searchConditions = [], EntityID = 1, returnGradeReportStudentVaccinationID = False, returnComplianceScheduleCode = False, returnCreatedTime = False, returnDoseDates = False, returnGradeReportStudentID = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnVaccinationCodeDescription = False, returnWaiverCodeDescription = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every GradeReportStudentVaccination in the district.

    This function returns a dataframe of every GradeReportStudentVaccination in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeReportStudentVaccination/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeReportStudentVaccination/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getGradeReportStudentVaccination(GradeReportStudentVaccinationID, EntityID = 1, returnGradeReportStudentVaccinationID = False, returnComplianceScheduleCode = False, returnCreatedTime = False, returnDoseDates = False, returnGradeReportStudentID = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnVaccinationCodeDescription = False, returnWaiverCodeDescription = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeReportStudentVaccination/" + str(GradeReportStudentVaccinationID), verb = "get", return_params_list = return_params)

def modifyGradeReportStudentVaccination(GradeReportStudentVaccinationID, EntityID = 1, setGradeReportStudentVaccinationID = None, setComplianceScheduleCode = None, setCreatedTime = None, setDoseDates = None, setGradeReportStudentID = None, setModifiedTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, setVaccinationCodeDescription = None, setWaiverCodeDescription = None, returnGradeReportStudentVaccinationID = False, returnComplianceScheduleCode = False, returnCreatedTime = False, returnDoseDates = False, returnGradeReportStudentID = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnVaccinationCodeDescription = False, returnWaiverCodeDescription = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeReportStudentVaccination/" + str(GradeReportStudentVaccinationID), verb = "post", return_params_list = return_params, payload = payload_params)

def createGradeReportStudentVaccination(EntityID = 1, setGradeReportStudentVaccinationID = None, setComplianceScheduleCode = None, setCreatedTime = None, setDoseDates = None, setGradeReportStudentID = None, setModifiedTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, setVaccinationCodeDescription = None, setWaiverCodeDescription = None, returnGradeReportStudentVaccinationID = False, returnComplianceScheduleCode = False, returnCreatedTime = False, returnDoseDates = False, returnGradeReportStudentID = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnVaccinationCodeDescription = False, returnWaiverCodeDescription = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeReportStudentVaccination/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteGradeReportStudentVaccination(GradeReportStudentVaccinationID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeReportStudentVaccination/" + str(GradeReportStudentVaccinationID), verb = "delete")


def getEveryGradeReportTemplate(searchConditions = [], EntityID = 1, returnGradeReportTemplateID = False, returnAcademicSessionType = False, returnAcademicSessionTypeCode = False, returnAdvisorNameFormat = False, returnAdvisorNameFormatCode = False, returnBlankSignatureLabel = False, returnColumnHeaderLabel1 = False, returnColumnHeaderLabel10 = False, returnColumnHeaderLabel2 = False, returnColumnHeaderLabel3 = False, returnColumnHeaderLabel4 = False, returnColumnHeaderLabel5 = False, returnColumnHeaderLabel6 = False, returnColumnHeaderLabel7 = False, returnColumnHeaderLabel8 = False, returnColumnHeaderLabel9 = False, returnCommentPrintType = False, returnCommentPrintTypeCode = False, returnConfigEntityYearID = False, returnCourseDescriptionFormat = False, returnCourseDescriptionFormatCode = False, returnCourseFilter = False, returnCourseFilterCode = False, returnCreatedTime = False, returnDescription = False, returnDisplayPeriodCodeSort1 = False, returnDisplayPeriodCodeSort2 = False, returnDisplayPeriodCodeSort3 = False, returnDisplayPeriodCodeSort4 = False, returnEarnedCreditsMethodIDDefaultOverride = False, returnFamilyPrintType = False, returnFamilyPrintTypeCode = False, returnFreeFormGradingLegend = False, returnGPAField1 = False, returnGPAField1Code = False, returnGPAField2 = False, returnGPAField2Code = False, returnGPAField3 = False, returnGPAField3Code = False, returnGPAField4 = False, returnGPAField4Code = False, returnGPAField5 = False, returnGPAField5Code = False, returnGPAField6 = False, returnGPAField6Code = False, returnGPAField7 = False, returnGPAField7Code = False, returnGPALabel1 = False, returnGPALabel2 = False, returnGPALabel3 = False, returnGPALabel4 = False, returnGPALabel5 = False, returnGPALabel6 = False, returnGPALabel7 = False, returnGradeReportAcademicSessionTemplateGroupID = False, returnGradeReportColumnGroupIDSecondary = False, returnGradeReportTemplateIDClonedFrom = False, returnGradingSort = False, returnGradingSortCode = False, returnGuardianNameFormat = False, returnGuardianNameFormatCode = False, returnHasLogo = False, returnHideSignatureSection = False, returnIncludeCurrentYearClasses = False, returnIncludeInProgressGrades = False, returnIncludePhoneInEntityAddress = False, returnIncludePhoneInGuardianAddress = False, returnIncludeTranscriptNotes = False, returnIncludeTransferCourses = False, returnMediaIDLogo = False, returnModifiedTime = False, returnNoReceivingFamily = False, returnOfficialSignatureLabel = False, returnPrintAllCourseRowHeaders = False, returnPrintAttendanceTotals = False, returnPrintBlankSignatureLine = False, returnPrintComments = False, returnPrintCTEPrograms = False, returnPrintElectronicSignature = False, returnPrintEndorsements = False, returnPrintFreeFormComments = False, returnPrintGPA = False, returnPrintGradeScaleAtTop = False, returnPrintHighFrequencyWords = False, returnPrintIndividualAttendanceTerms = False, returnPrintLettersAndSounds = False, returnPrintStudentHighlights = False, returnPrintVaccinations = False, returnPrintYearAttendanceTotals = False, returnPrintYearToDateTotals = False, returnReceivesForms = False, returnReportRunInfoID = False, returnStudentNameFormat = False, returnStudentNameFormatCode = False, returnStudentSort1 = False, returnStudentSort1Code = False, returnStudentSort2 = False, returnStudentSort2Code = False, returnStudentSort3 = False, returnStudentSort3Code = False, returnStudentSort4 = False, returnStudentSort4Code = False, returnTeacherNameFormat = False, returnTeacherNameFormatCode = False, returnTemplateType = False, returnTemplateTypeCode = False, returnUseFreeFormGradingLegend = False, returnUseFullGPASection = False, returnUseFullGradesSection = False, returnUseGradeMarkDescriptionGradingLegend = False, returnUseGradeMarkRangeGradingLegend = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnUsesGPAOrEarnedCredits = False, returnUseStudentSectionLinking = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every GradeReportTemplate in the district.

    This function returns a dataframe of every GradeReportTemplate in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeReportTemplate/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeReportTemplate/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getGradeReportTemplate(GradeReportTemplateID, EntityID = 1, returnGradeReportTemplateID = False, returnAcademicSessionType = False, returnAcademicSessionTypeCode = False, returnAdvisorNameFormat = False, returnAdvisorNameFormatCode = False, returnBlankSignatureLabel = False, returnColumnHeaderLabel1 = False, returnColumnHeaderLabel10 = False, returnColumnHeaderLabel2 = False, returnColumnHeaderLabel3 = False, returnColumnHeaderLabel4 = False, returnColumnHeaderLabel5 = False, returnColumnHeaderLabel6 = False, returnColumnHeaderLabel7 = False, returnColumnHeaderLabel8 = False, returnColumnHeaderLabel9 = False, returnCommentPrintType = False, returnCommentPrintTypeCode = False, returnConfigEntityYearID = False, returnCourseDescriptionFormat = False, returnCourseDescriptionFormatCode = False, returnCourseFilter = False, returnCourseFilterCode = False, returnCreatedTime = False, returnDescription = False, returnDisplayPeriodCodeSort1 = False, returnDisplayPeriodCodeSort2 = False, returnDisplayPeriodCodeSort3 = False, returnDisplayPeriodCodeSort4 = False, returnEarnedCreditsMethodIDDefaultOverride = False, returnFamilyPrintType = False, returnFamilyPrintTypeCode = False, returnFreeFormGradingLegend = False, returnGPAField1 = False, returnGPAField1Code = False, returnGPAField2 = False, returnGPAField2Code = False, returnGPAField3 = False, returnGPAField3Code = False, returnGPAField4 = False, returnGPAField4Code = False, returnGPAField5 = False, returnGPAField5Code = False, returnGPAField6 = False, returnGPAField6Code = False, returnGPAField7 = False, returnGPAField7Code = False, returnGPALabel1 = False, returnGPALabel2 = False, returnGPALabel3 = False, returnGPALabel4 = False, returnGPALabel5 = False, returnGPALabel6 = False, returnGPALabel7 = False, returnGradeReportAcademicSessionTemplateGroupID = False, returnGradeReportColumnGroupIDSecondary = False, returnGradeReportTemplateIDClonedFrom = False, returnGradingSort = False, returnGradingSortCode = False, returnGuardianNameFormat = False, returnGuardianNameFormatCode = False, returnHasLogo = False, returnHideSignatureSection = False, returnIncludeCurrentYearClasses = False, returnIncludeInProgressGrades = False, returnIncludePhoneInEntityAddress = False, returnIncludePhoneInGuardianAddress = False, returnIncludeTranscriptNotes = False, returnIncludeTransferCourses = False, returnMediaIDLogo = False, returnModifiedTime = False, returnNoReceivingFamily = False, returnOfficialSignatureLabel = False, returnPrintAllCourseRowHeaders = False, returnPrintAttendanceTotals = False, returnPrintBlankSignatureLine = False, returnPrintComments = False, returnPrintCTEPrograms = False, returnPrintElectronicSignature = False, returnPrintEndorsements = False, returnPrintFreeFormComments = False, returnPrintGPA = False, returnPrintGradeScaleAtTop = False, returnPrintHighFrequencyWords = False, returnPrintIndividualAttendanceTerms = False, returnPrintLettersAndSounds = False, returnPrintStudentHighlights = False, returnPrintVaccinations = False, returnPrintYearAttendanceTotals = False, returnPrintYearToDateTotals = False, returnReceivesForms = False, returnReportRunInfoID = False, returnStudentNameFormat = False, returnStudentNameFormatCode = False, returnStudentSort1 = False, returnStudentSort1Code = False, returnStudentSort2 = False, returnStudentSort2Code = False, returnStudentSort3 = False, returnStudentSort3Code = False, returnStudentSort4 = False, returnStudentSort4Code = False, returnTeacherNameFormat = False, returnTeacherNameFormatCode = False, returnTemplateType = False, returnTemplateTypeCode = False, returnUseFreeFormGradingLegend = False, returnUseFullGPASection = False, returnUseFullGradesSection = False, returnUseGradeMarkDescriptionGradingLegend = False, returnUseGradeMarkRangeGradingLegend = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnUsesGPAOrEarnedCredits = False, returnUseStudentSectionLinking = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeReportTemplate/" + str(GradeReportTemplateID), verb = "get", return_params_list = return_params)

def modifyGradeReportTemplate(GradeReportTemplateID, EntityID = 1, setGradeReportTemplateID = None, setAcademicSessionType = None, setAcademicSessionTypeCode = None, setAdvisorNameFormat = None, setAdvisorNameFormatCode = None, setBlankSignatureLabel = None, setColumnHeaderLabel1 = None, setColumnHeaderLabel10 = None, setColumnHeaderLabel2 = None, setColumnHeaderLabel3 = None, setColumnHeaderLabel4 = None, setColumnHeaderLabel5 = None, setColumnHeaderLabel6 = None, setColumnHeaderLabel7 = None, setColumnHeaderLabel8 = None, setColumnHeaderLabel9 = None, setCommentPrintType = None, setCommentPrintTypeCode = None, setConfigEntityYearID = None, setCourseDescriptionFormat = None, setCourseDescriptionFormatCode = None, setCourseFilter = None, setCourseFilterCode = None, setCreatedTime = None, setDescription = None, setDisplayPeriodCodeSort1 = None, setDisplayPeriodCodeSort2 = None, setDisplayPeriodCodeSort3 = None, setDisplayPeriodCodeSort4 = None, setEarnedCreditsMethodIDDefaultOverride = None, setFamilyPrintType = None, setFamilyPrintTypeCode = None, setFreeFormGradingLegend = None, setGPAField1 = None, setGPAField1Code = None, setGPAField2 = None, setGPAField2Code = None, setGPAField3 = None, setGPAField3Code = None, setGPAField4 = None, setGPAField4Code = None, setGPAField5 = None, setGPAField5Code = None, setGPAField6 = None, setGPAField6Code = None, setGPAField7 = None, setGPAField7Code = None, setGPALabel1 = None, setGPALabel2 = None, setGPALabel3 = None, setGPALabel4 = None, setGPALabel5 = None, setGPALabel6 = None, setGPALabel7 = None, setGradeReportAcademicSessionTemplateGroupID = None, setGradeReportColumnGroupIDSecondary = None, setGradeReportTemplateIDClonedFrom = None, setGradingSort = None, setGradingSortCode = None, setGuardianNameFormat = None, setGuardianNameFormatCode = None, setHasLogo = None, setHideSignatureSection = None, setIncludeCurrentYearClasses = None, setIncludeInProgressGrades = None, setIncludePhoneInEntityAddress = None, setIncludePhoneInGuardianAddress = None, setIncludeTranscriptNotes = None, setIncludeTransferCourses = None, setMediaIDLogo = None, setModifiedTime = None, setNoReceivingFamily = None, setOfficialSignatureLabel = None, setPrintAllCourseRowHeaders = None, setPrintAttendanceTotals = None, setPrintBlankSignatureLine = None, setPrintComments = None, setPrintCTEPrograms = None, setPrintElectronicSignature = None, setPrintEndorsements = None, setPrintFreeFormComments = None, setPrintGPA = None, setPrintGradeScaleAtTop = None, setPrintHighFrequencyWords = None, setPrintIndividualAttendanceTerms = None, setPrintLettersAndSounds = None, setPrintStudentHighlights = None, setPrintVaccinations = None, setPrintYearAttendanceTotals = None, setPrintYearToDateTotals = None, setReceivesForms = None, setReportRunInfoID = None, setStudentNameFormat = None, setStudentNameFormatCode = None, setStudentSort1 = None, setStudentSort1Code = None, setStudentSort2 = None, setStudentSort2Code = None, setStudentSort3 = None, setStudentSort3Code = None, setStudentSort4 = None, setStudentSort4Code = None, setTeacherNameFormat = None, setTeacherNameFormatCode = None, setTemplateType = None, setTemplateTypeCode = None, setUseFreeFormGradingLegend = None, setUseFullGPASection = None, setUseFullGradesSection = None, setUseGradeMarkDescriptionGradingLegend = None, setUseGradeMarkRangeGradingLegend = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, setUsesGPAOrEarnedCredits = None, setUseStudentSectionLinking = None, returnGradeReportTemplateID = False, returnAcademicSessionType = False, returnAcademicSessionTypeCode = False, returnAdvisorNameFormat = False, returnAdvisorNameFormatCode = False, returnBlankSignatureLabel = False, returnColumnHeaderLabel1 = False, returnColumnHeaderLabel10 = False, returnColumnHeaderLabel2 = False, returnColumnHeaderLabel3 = False, returnColumnHeaderLabel4 = False, returnColumnHeaderLabel5 = False, returnColumnHeaderLabel6 = False, returnColumnHeaderLabel7 = False, returnColumnHeaderLabel8 = False, returnColumnHeaderLabel9 = False, returnCommentPrintType = False, returnCommentPrintTypeCode = False, returnConfigEntityYearID = False, returnCourseDescriptionFormat = False, returnCourseDescriptionFormatCode = False, returnCourseFilter = False, returnCourseFilterCode = False, returnCreatedTime = False, returnDescription = False, returnDisplayPeriodCodeSort1 = False, returnDisplayPeriodCodeSort2 = False, returnDisplayPeriodCodeSort3 = False, returnDisplayPeriodCodeSort4 = False, returnEarnedCreditsMethodIDDefaultOverride = False, returnFamilyPrintType = False, returnFamilyPrintTypeCode = False, returnFreeFormGradingLegend = False, returnGPAField1 = False, returnGPAField1Code = False, returnGPAField2 = False, returnGPAField2Code = False, returnGPAField3 = False, returnGPAField3Code = False, returnGPAField4 = False, returnGPAField4Code = False, returnGPAField5 = False, returnGPAField5Code = False, returnGPAField6 = False, returnGPAField6Code = False, returnGPAField7 = False, returnGPAField7Code = False, returnGPALabel1 = False, returnGPALabel2 = False, returnGPALabel3 = False, returnGPALabel4 = False, returnGPALabel5 = False, returnGPALabel6 = False, returnGPALabel7 = False, returnGradeReportAcademicSessionTemplateGroupID = False, returnGradeReportColumnGroupIDSecondary = False, returnGradeReportTemplateIDClonedFrom = False, returnGradingSort = False, returnGradingSortCode = False, returnGuardianNameFormat = False, returnGuardianNameFormatCode = False, returnHasLogo = False, returnHideSignatureSection = False, returnIncludeCurrentYearClasses = False, returnIncludeInProgressGrades = False, returnIncludePhoneInEntityAddress = False, returnIncludePhoneInGuardianAddress = False, returnIncludeTranscriptNotes = False, returnIncludeTransferCourses = False, returnMediaIDLogo = False, returnModifiedTime = False, returnNoReceivingFamily = False, returnOfficialSignatureLabel = False, returnPrintAllCourseRowHeaders = False, returnPrintAttendanceTotals = False, returnPrintBlankSignatureLine = False, returnPrintComments = False, returnPrintCTEPrograms = False, returnPrintElectronicSignature = False, returnPrintEndorsements = False, returnPrintFreeFormComments = False, returnPrintGPA = False, returnPrintGradeScaleAtTop = False, returnPrintHighFrequencyWords = False, returnPrintIndividualAttendanceTerms = False, returnPrintLettersAndSounds = False, returnPrintStudentHighlights = False, returnPrintVaccinations = False, returnPrintYearAttendanceTotals = False, returnPrintYearToDateTotals = False, returnReceivesForms = False, returnReportRunInfoID = False, returnStudentNameFormat = False, returnStudentNameFormatCode = False, returnStudentSort1 = False, returnStudentSort1Code = False, returnStudentSort2 = False, returnStudentSort2Code = False, returnStudentSort3 = False, returnStudentSort3Code = False, returnStudentSort4 = False, returnStudentSort4Code = False, returnTeacherNameFormat = False, returnTeacherNameFormatCode = False, returnTemplateType = False, returnTemplateTypeCode = False, returnUseFreeFormGradingLegend = False, returnUseFullGPASection = False, returnUseFullGradesSection = False, returnUseGradeMarkDescriptionGradingLegend = False, returnUseGradeMarkRangeGradingLegend = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnUsesGPAOrEarnedCredits = False, returnUseStudentSectionLinking = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeReportTemplate/" + str(GradeReportTemplateID), verb = "post", return_params_list = return_params, payload = payload_params)

def createGradeReportTemplate(EntityID = 1, setGradeReportTemplateID = None, setAcademicSessionType = None, setAcademicSessionTypeCode = None, setAdvisorNameFormat = None, setAdvisorNameFormatCode = None, setBlankSignatureLabel = None, setColumnHeaderLabel1 = None, setColumnHeaderLabel10 = None, setColumnHeaderLabel2 = None, setColumnHeaderLabel3 = None, setColumnHeaderLabel4 = None, setColumnHeaderLabel5 = None, setColumnHeaderLabel6 = None, setColumnHeaderLabel7 = None, setColumnHeaderLabel8 = None, setColumnHeaderLabel9 = None, setCommentPrintType = None, setCommentPrintTypeCode = None, setConfigEntityYearID = None, setCourseDescriptionFormat = None, setCourseDescriptionFormatCode = None, setCourseFilter = None, setCourseFilterCode = None, setCreatedTime = None, setDescription = None, setDisplayPeriodCodeSort1 = None, setDisplayPeriodCodeSort2 = None, setDisplayPeriodCodeSort3 = None, setDisplayPeriodCodeSort4 = None, setEarnedCreditsMethodIDDefaultOverride = None, setFamilyPrintType = None, setFamilyPrintTypeCode = None, setFreeFormGradingLegend = None, setGPAField1 = None, setGPAField1Code = None, setGPAField2 = None, setGPAField2Code = None, setGPAField3 = None, setGPAField3Code = None, setGPAField4 = None, setGPAField4Code = None, setGPAField5 = None, setGPAField5Code = None, setGPAField6 = None, setGPAField6Code = None, setGPAField7 = None, setGPAField7Code = None, setGPALabel1 = None, setGPALabel2 = None, setGPALabel3 = None, setGPALabel4 = None, setGPALabel5 = None, setGPALabel6 = None, setGPALabel7 = None, setGradeReportAcademicSessionTemplateGroupID = None, setGradeReportColumnGroupIDSecondary = None, setGradeReportTemplateIDClonedFrom = None, setGradingSort = None, setGradingSortCode = None, setGuardianNameFormat = None, setGuardianNameFormatCode = None, setHasLogo = None, setHideSignatureSection = None, setIncludeCurrentYearClasses = None, setIncludeInProgressGrades = None, setIncludePhoneInEntityAddress = None, setIncludePhoneInGuardianAddress = None, setIncludeTranscriptNotes = None, setIncludeTransferCourses = None, setMediaIDLogo = None, setModifiedTime = None, setNoReceivingFamily = None, setOfficialSignatureLabel = None, setPrintAllCourseRowHeaders = None, setPrintAttendanceTotals = None, setPrintBlankSignatureLine = None, setPrintComments = None, setPrintCTEPrograms = None, setPrintElectronicSignature = None, setPrintEndorsements = None, setPrintFreeFormComments = None, setPrintGPA = None, setPrintGradeScaleAtTop = None, setPrintHighFrequencyWords = None, setPrintIndividualAttendanceTerms = None, setPrintLettersAndSounds = None, setPrintStudentHighlights = None, setPrintVaccinations = None, setPrintYearAttendanceTotals = None, setPrintYearToDateTotals = None, setReceivesForms = None, setReportRunInfoID = None, setStudentNameFormat = None, setStudentNameFormatCode = None, setStudentSort1 = None, setStudentSort1Code = None, setStudentSort2 = None, setStudentSort2Code = None, setStudentSort3 = None, setStudentSort3Code = None, setStudentSort4 = None, setStudentSort4Code = None, setTeacherNameFormat = None, setTeacherNameFormatCode = None, setTemplateType = None, setTemplateTypeCode = None, setUseFreeFormGradingLegend = None, setUseFullGPASection = None, setUseFullGradesSection = None, setUseGradeMarkDescriptionGradingLegend = None, setUseGradeMarkRangeGradingLegend = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, setUsesGPAOrEarnedCredits = None, setUseStudentSectionLinking = None, returnGradeReportTemplateID = False, returnAcademicSessionType = False, returnAcademicSessionTypeCode = False, returnAdvisorNameFormat = False, returnAdvisorNameFormatCode = False, returnBlankSignatureLabel = False, returnColumnHeaderLabel1 = False, returnColumnHeaderLabel10 = False, returnColumnHeaderLabel2 = False, returnColumnHeaderLabel3 = False, returnColumnHeaderLabel4 = False, returnColumnHeaderLabel5 = False, returnColumnHeaderLabel6 = False, returnColumnHeaderLabel7 = False, returnColumnHeaderLabel8 = False, returnColumnHeaderLabel9 = False, returnCommentPrintType = False, returnCommentPrintTypeCode = False, returnConfigEntityYearID = False, returnCourseDescriptionFormat = False, returnCourseDescriptionFormatCode = False, returnCourseFilter = False, returnCourseFilterCode = False, returnCreatedTime = False, returnDescription = False, returnDisplayPeriodCodeSort1 = False, returnDisplayPeriodCodeSort2 = False, returnDisplayPeriodCodeSort3 = False, returnDisplayPeriodCodeSort4 = False, returnEarnedCreditsMethodIDDefaultOverride = False, returnFamilyPrintType = False, returnFamilyPrintTypeCode = False, returnFreeFormGradingLegend = False, returnGPAField1 = False, returnGPAField1Code = False, returnGPAField2 = False, returnGPAField2Code = False, returnGPAField3 = False, returnGPAField3Code = False, returnGPAField4 = False, returnGPAField4Code = False, returnGPAField5 = False, returnGPAField5Code = False, returnGPAField6 = False, returnGPAField6Code = False, returnGPAField7 = False, returnGPAField7Code = False, returnGPALabel1 = False, returnGPALabel2 = False, returnGPALabel3 = False, returnGPALabel4 = False, returnGPALabel5 = False, returnGPALabel6 = False, returnGPALabel7 = False, returnGradeReportAcademicSessionTemplateGroupID = False, returnGradeReportColumnGroupIDSecondary = False, returnGradeReportTemplateIDClonedFrom = False, returnGradingSort = False, returnGradingSortCode = False, returnGuardianNameFormat = False, returnGuardianNameFormatCode = False, returnHasLogo = False, returnHideSignatureSection = False, returnIncludeCurrentYearClasses = False, returnIncludeInProgressGrades = False, returnIncludePhoneInEntityAddress = False, returnIncludePhoneInGuardianAddress = False, returnIncludeTranscriptNotes = False, returnIncludeTransferCourses = False, returnMediaIDLogo = False, returnModifiedTime = False, returnNoReceivingFamily = False, returnOfficialSignatureLabel = False, returnPrintAllCourseRowHeaders = False, returnPrintAttendanceTotals = False, returnPrintBlankSignatureLine = False, returnPrintComments = False, returnPrintCTEPrograms = False, returnPrintElectronicSignature = False, returnPrintEndorsements = False, returnPrintFreeFormComments = False, returnPrintGPA = False, returnPrintGradeScaleAtTop = False, returnPrintHighFrequencyWords = False, returnPrintIndividualAttendanceTerms = False, returnPrintLettersAndSounds = False, returnPrintStudentHighlights = False, returnPrintVaccinations = False, returnPrintYearAttendanceTotals = False, returnPrintYearToDateTotals = False, returnReceivesForms = False, returnReportRunInfoID = False, returnStudentNameFormat = False, returnStudentNameFormatCode = False, returnStudentSort1 = False, returnStudentSort1Code = False, returnStudentSort2 = False, returnStudentSort2Code = False, returnStudentSort3 = False, returnStudentSort3Code = False, returnStudentSort4 = False, returnStudentSort4Code = False, returnTeacherNameFormat = False, returnTeacherNameFormatCode = False, returnTemplateType = False, returnTemplateTypeCode = False, returnUseFreeFormGradingLegend = False, returnUseFullGPASection = False, returnUseFullGradesSection = False, returnUseGradeMarkDescriptionGradingLegend = False, returnUseGradeMarkRangeGradingLegend = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnUsesGPAOrEarnedCredits = False, returnUseStudentSectionLinking = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeReportTemplate/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteGradeReportTemplate(GradeReportTemplateID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeReportTemplate/" + str(GradeReportTemplateID), verb = "delete")


def getEveryGradeReportTemplateCommentSet(searchConditions = [], EntityID = 1, returnGradeReportTemplateCommentSetID = False, returnCommentSetID = False, returnCreatedTime = False, returnGradeReportTemplateCommentSetIDClonedFrom = False, returnGradeReportTemplateID = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every GradeReportTemplateCommentSet in the district.

    This function returns a dataframe of every GradeReportTemplateCommentSet in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeReportTemplateCommentSet/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeReportTemplateCommentSet/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getGradeReportTemplateCommentSet(GradeReportTemplateCommentSetID, EntityID = 1, returnGradeReportTemplateCommentSetID = False, returnCommentSetID = False, returnCreatedTime = False, returnGradeReportTemplateCommentSetIDClonedFrom = False, returnGradeReportTemplateID = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeReportTemplateCommentSet/" + str(GradeReportTemplateCommentSetID), verb = "get", return_params_list = return_params)

def modifyGradeReportTemplateCommentSet(GradeReportTemplateCommentSetID, EntityID = 1, setGradeReportTemplateCommentSetID = None, setCommentSetID = None, setCreatedTime = None, setGradeReportTemplateCommentSetIDClonedFrom = None, setGradeReportTemplateID = None, setModifiedTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnGradeReportTemplateCommentSetID = False, returnCommentSetID = False, returnCreatedTime = False, returnGradeReportTemplateCommentSetIDClonedFrom = False, returnGradeReportTemplateID = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeReportTemplateCommentSet/" + str(GradeReportTemplateCommentSetID), verb = "post", return_params_list = return_params, payload = payload_params)

def createGradeReportTemplateCommentSet(EntityID = 1, setGradeReportTemplateCommentSetID = None, setCommentSetID = None, setCreatedTime = None, setGradeReportTemplateCommentSetIDClonedFrom = None, setGradeReportTemplateID = None, setModifiedTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnGradeReportTemplateCommentSetID = False, returnCommentSetID = False, returnCreatedTime = False, returnGradeReportTemplateCommentSetIDClonedFrom = False, returnGradeReportTemplateID = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeReportTemplateCommentSet/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteGradeReportTemplateCommentSet(GradeReportTemplateCommentSetID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeReportTemplateCommentSet/" + str(GradeReportTemplateCommentSetID), verb = "delete")


def getEveryGradeReportTemplateEndorsement(searchConditions = [], EntityID = 1, returnGradeReportTemplateEndorsementID = False, returnCreatedTime = False, returnEndorsementID = False, returnGradeReportTemplateID = False, returnGradYearHigh = False, returnGradYearLow = False, returnModifiedTime = False, returnOrderNumber = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every GradeReportTemplateEndorsement in the district.

    This function returns a dataframe of every GradeReportTemplateEndorsement in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeReportTemplateEndorsement/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeReportTemplateEndorsement/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getGradeReportTemplateEndorsement(GradeReportTemplateEndorsementID, EntityID = 1, returnGradeReportTemplateEndorsementID = False, returnCreatedTime = False, returnEndorsementID = False, returnGradeReportTemplateID = False, returnGradYearHigh = False, returnGradYearLow = False, returnModifiedTime = False, returnOrderNumber = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeReportTemplateEndorsement/" + str(GradeReportTemplateEndorsementID), verb = "get", return_params_list = return_params)

def modifyGradeReportTemplateEndorsement(GradeReportTemplateEndorsementID, EntityID = 1, setGradeReportTemplateEndorsementID = None, setCreatedTime = None, setEndorsementID = None, setGradeReportTemplateID = None, setGradYearHigh = None, setGradYearLow = None, setModifiedTime = None, setOrderNumber = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnGradeReportTemplateEndorsementID = False, returnCreatedTime = False, returnEndorsementID = False, returnGradeReportTemplateID = False, returnGradYearHigh = False, returnGradYearLow = False, returnModifiedTime = False, returnOrderNumber = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeReportTemplateEndorsement/" + str(GradeReportTemplateEndorsementID), verb = "post", return_params_list = return_params, payload = payload_params)

def createGradeReportTemplateEndorsement(EntityID = 1, setGradeReportTemplateEndorsementID = None, setCreatedTime = None, setEndorsementID = None, setGradeReportTemplateID = None, setGradYearHigh = None, setGradYearLow = None, setModifiedTime = None, setOrderNumber = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnGradeReportTemplateEndorsementID = False, returnCreatedTime = False, returnEndorsementID = False, returnGradeReportTemplateID = False, returnGradYearHigh = False, returnGradYearLow = False, returnModifiedTime = False, returnOrderNumber = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeReportTemplateEndorsement/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteGradeReportTemplateEndorsement(GradeReportTemplateEndorsementID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeReportTemplateEndorsement/" + str(GradeReportTemplateEndorsementID), verb = "delete")


def getEveryGradeReportTemplateGPABucket(searchConditions = [], EntityID = 1, returnGradeReportTemplateGPABucketID = False, returnCreatedTime = False, returnGPABucketID = False, returnGradeReportTemplateGPABucketIDClonedFrom = False, returnGradeReportTemplateID = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every GradeReportTemplateGPABucket in the district.

    This function returns a dataframe of every GradeReportTemplateGPABucket in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeReportTemplateGPABucket/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeReportTemplateGPABucket/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getGradeReportTemplateGPABucket(GradeReportTemplateGPABucketID, EntityID = 1, returnGradeReportTemplateGPABucketID = False, returnCreatedTime = False, returnGPABucketID = False, returnGradeReportTemplateGPABucketIDClonedFrom = False, returnGradeReportTemplateID = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeReportTemplateGPABucket/" + str(GradeReportTemplateGPABucketID), verb = "get", return_params_list = return_params)

def modifyGradeReportTemplateGPABucket(GradeReportTemplateGPABucketID, EntityID = 1, setGradeReportTemplateGPABucketID = None, setCreatedTime = None, setGPABucketID = None, setGradeReportTemplateGPABucketIDClonedFrom = None, setGradeReportTemplateID = None, setModifiedTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnGradeReportTemplateGPABucketID = False, returnCreatedTime = False, returnGPABucketID = False, returnGradeReportTemplateGPABucketIDClonedFrom = False, returnGradeReportTemplateID = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeReportTemplateGPABucket/" + str(GradeReportTemplateGPABucketID), verb = "post", return_params_list = return_params, payload = payload_params)

def createGradeReportTemplateGPABucket(EntityID = 1, setGradeReportTemplateGPABucketID = None, setCreatedTime = None, setGPABucketID = None, setGradeReportTemplateGPABucketIDClonedFrom = None, setGradeReportTemplateID = None, setModifiedTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnGradeReportTemplateGPABucketID = False, returnCreatedTime = False, returnGPABucketID = False, returnGradeReportTemplateGPABucketIDClonedFrom = False, returnGradeReportTemplateID = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeReportTemplateGPABucket/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteGradeReportTemplateGPABucket(GradeReportTemplateGPABucketID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeReportTemplateGPABucket/" + str(GradeReportTemplateGPABucketID), verb = "delete")


def getEveryGradeReportTemplateGPAMethod(searchConditions = [], EntityID = 1, returnGradeReportTemplateGPAMethodID = False, returnCreatedTime = False, returnGPAMethodID = False, returnGradeReportTemplateGPAMethodIDClonedFrom = False, returnGradeReportTemplateID = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every GradeReportTemplateGPAMethod in the district.

    This function returns a dataframe of every GradeReportTemplateGPAMethod in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeReportTemplateGPAMethod/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeReportTemplateGPAMethod/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getGradeReportTemplateGPAMethod(GradeReportTemplateGPAMethodID, EntityID = 1, returnGradeReportTemplateGPAMethodID = False, returnCreatedTime = False, returnGPAMethodID = False, returnGradeReportTemplateGPAMethodIDClonedFrom = False, returnGradeReportTemplateID = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeReportTemplateGPAMethod/" + str(GradeReportTemplateGPAMethodID), verb = "get", return_params_list = return_params)

def modifyGradeReportTemplateGPAMethod(GradeReportTemplateGPAMethodID, EntityID = 1, setGradeReportTemplateGPAMethodID = None, setCreatedTime = None, setGPAMethodID = None, setGradeReportTemplateGPAMethodIDClonedFrom = None, setGradeReportTemplateID = None, setModifiedTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnGradeReportTemplateGPAMethodID = False, returnCreatedTime = False, returnGPAMethodID = False, returnGradeReportTemplateGPAMethodIDClonedFrom = False, returnGradeReportTemplateID = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeReportTemplateGPAMethod/" + str(GradeReportTemplateGPAMethodID), verb = "post", return_params_list = return_params, payload = payload_params)

def createGradeReportTemplateGPAMethod(EntityID = 1, setGradeReportTemplateGPAMethodID = None, setCreatedTime = None, setGPAMethodID = None, setGradeReportTemplateGPAMethodIDClonedFrom = None, setGradeReportTemplateID = None, setModifiedTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnGradeReportTemplateGPAMethodID = False, returnCreatedTime = False, returnGPAMethodID = False, returnGradeReportTemplateGPAMethodIDClonedFrom = False, returnGradeReportTemplateID = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeReportTemplateGPAMethod/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteGradeReportTemplateGPAMethod(GradeReportTemplateGPAMethodID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeReportTemplateGPAMethod/" + str(GradeReportTemplateGPAMethodID), verb = "delete")


def getEveryGradeReportTemplateGradeMark(searchConditions = [], EntityID = 1, returnGradeReportTemplateGradeMarkID = False, returnCreatedTime = False, returnGradeMarkID = False, returnGradeReportTemplateGradeMarkIDClonedFrom = False, returnGradeReportTemplateID = False, returnModifiedTime = False, returnType = False, returnTypeCode = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every GradeReportTemplateGradeMark in the district.

    This function returns a dataframe of every GradeReportTemplateGradeMark in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeReportTemplateGradeMark/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeReportTemplateGradeMark/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getGradeReportTemplateGradeMark(GradeReportTemplateGradeMarkID, EntityID = 1, returnGradeReportTemplateGradeMarkID = False, returnCreatedTime = False, returnGradeMarkID = False, returnGradeReportTemplateGradeMarkIDClonedFrom = False, returnGradeReportTemplateID = False, returnModifiedTime = False, returnType = False, returnTypeCode = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeReportTemplateGradeMark/" + str(GradeReportTemplateGradeMarkID), verb = "get", return_params_list = return_params)

def modifyGradeReportTemplateGradeMark(GradeReportTemplateGradeMarkID, EntityID = 1, setGradeReportTemplateGradeMarkID = None, setCreatedTime = None, setGradeMarkID = None, setGradeReportTemplateGradeMarkIDClonedFrom = None, setGradeReportTemplateID = None, setModifiedTime = None, setType = None, setTypeCode = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnGradeReportTemplateGradeMarkID = False, returnCreatedTime = False, returnGradeMarkID = False, returnGradeReportTemplateGradeMarkIDClonedFrom = False, returnGradeReportTemplateID = False, returnModifiedTime = False, returnType = False, returnTypeCode = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeReportTemplateGradeMark/" + str(GradeReportTemplateGradeMarkID), verb = "post", return_params_list = return_params, payload = payload_params)

def createGradeReportTemplateGradeMark(EntityID = 1, setGradeReportTemplateGradeMarkID = None, setCreatedTime = None, setGradeMarkID = None, setGradeReportTemplateGradeMarkIDClonedFrom = None, setGradeReportTemplateID = None, setModifiedTime = None, setType = None, setTypeCode = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnGradeReportTemplateGradeMarkID = False, returnCreatedTime = False, returnGradeMarkID = False, returnGradeReportTemplateGradeMarkIDClonedFrom = False, returnGradeReportTemplateID = False, returnModifiedTime = False, returnType = False, returnTypeCode = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeReportTemplateGradeMark/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteGradeReportTemplateGradeMark(GradeReportTemplateGradeMarkID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeReportTemplateGradeMark/" + str(GradeReportTemplateGradeMarkID), verb = "delete")


def getEveryGradeReportTemplateHeaderColumn(searchConditions = [], EntityID = 1, returnGradeReportTemplateHeaderColumnID = False, returnCreatedTime = False, returnFieldType = False, returnFieldTypeCode = False, returnFreeformText = False, returnGPABucketID = False, returnGPAMethodID = False, returnGradeReportTemplateHeaderColumnIDClonedFrom = False, returnGradeReportTemplateHeaderRowID = False, returnLabelOverride = False, returnModifiedTime = False, returnRankMethodID = False, returnSortNumber = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every GradeReportTemplateHeaderColumn in the district.

    This function returns a dataframe of every GradeReportTemplateHeaderColumn in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeReportTemplateHeaderColumn/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeReportTemplateHeaderColumn/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getGradeReportTemplateHeaderColumn(GradeReportTemplateHeaderColumnID, EntityID = 1, returnGradeReportTemplateHeaderColumnID = False, returnCreatedTime = False, returnFieldType = False, returnFieldTypeCode = False, returnFreeformText = False, returnGPABucketID = False, returnGPAMethodID = False, returnGradeReportTemplateHeaderColumnIDClonedFrom = False, returnGradeReportTemplateHeaderRowID = False, returnLabelOverride = False, returnModifiedTime = False, returnRankMethodID = False, returnSortNumber = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeReportTemplateHeaderColumn/" + str(GradeReportTemplateHeaderColumnID), verb = "get", return_params_list = return_params)

def modifyGradeReportTemplateHeaderColumn(GradeReportTemplateHeaderColumnID, EntityID = 1, setGradeReportTemplateHeaderColumnID = None, setCreatedTime = None, setFieldType = None, setFieldTypeCode = None, setFreeformText = None, setGPABucketID = None, setGPAMethodID = None, setGradeReportTemplateHeaderColumnIDClonedFrom = None, setGradeReportTemplateHeaderRowID = None, setLabelOverride = None, setModifiedTime = None, setRankMethodID = None, setSortNumber = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnGradeReportTemplateHeaderColumnID = False, returnCreatedTime = False, returnFieldType = False, returnFieldTypeCode = False, returnFreeformText = False, returnGPABucketID = False, returnGPAMethodID = False, returnGradeReportTemplateHeaderColumnIDClonedFrom = False, returnGradeReportTemplateHeaderRowID = False, returnLabelOverride = False, returnModifiedTime = False, returnRankMethodID = False, returnSortNumber = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeReportTemplateHeaderColumn/" + str(GradeReportTemplateHeaderColumnID), verb = "post", return_params_list = return_params, payload = payload_params)

def createGradeReportTemplateHeaderColumn(EntityID = 1, setGradeReportTemplateHeaderColumnID = None, setCreatedTime = None, setFieldType = None, setFieldTypeCode = None, setFreeformText = None, setGPABucketID = None, setGPAMethodID = None, setGradeReportTemplateHeaderColumnIDClonedFrom = None, setGradeReportTemplateHeaderRowID = None, setLabelOverride = None, setModifiedTime = None, setRankMethodID = None, setSortNumber = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnGradeReportTemplateHeaderColumnID = False, returnCreatedTime = False, returnFieldType = False, returnFieldTypeCode = False, returnFreeformText = False, returnGPABucketID = False, returnGPAMethodID = False, returnGradeReportTemplateHeaderColumnIDClonedFrom = False, returnGradeReportTemplateHeaderRowID = False, returnLabelOverride = False, returnModifiedTime = False, returnRankMethodID = False, returnSortNumber = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeReportTemplateHeaderColumn/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteGradeReportTemplateHeaderColumn(GradeReportTemplateHeaderColumnID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeReportTemplateHeaderColumn/" + str(GradeReportTemplateHeaderColumnID), verb = "delete")


def getEveryGradeReportTemplateHeaderRow(searchConditions = [], EntityID = 1, returnGradeReportTemplateHeaderRowID = False, returnColumnCount = False, returnCreatedTime = False, returnGradeReportTemplateHeaderRowIDClonedFrom = False, returnGradeReportTemplateID = False, returnModifiedTime = False, returnSortNumber = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every GradeReportTemplateHeaderRow in the district.

    This function returns a dataframe of every GradeReportTemplateHeaderRow in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeReportTemplateHeaderRow/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeReportTemplateHeaderRow/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getGradeReportTemplateHeaderRow(GradeReportTemplateHeaderRowID, EntityID = 1, returnGradeReportTemplateHeaderRowID = False, returnColumnCount = False, returnCreatedTime = False, returnGradeReportTemplateHeaderRowIDClonedFrom = False, returnGradeReportTemplateID = False, returnModifiedTime = False, returnSortNumber = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeReportTemplateHeaderRow/" + str(GradeReportTemplateHeaderRowID), verb = "get", return_params_list = return_params)

def modifyGradeReportTemplateHeaderRow(GradeReportTemplateHeaderRowID, EntityID = 1, setGradeReportTemplateHeaderRowID = None, setColumnCount = None, setCreatedTime = None, setGradeReportTemplateHeaderRowIDClonedFrom = None, setGradeReportTemplateID = None, setModifiedTime = None, setSortNumber = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnGradeReportTemplateHeaderRowID = False, returnColumnCount = False, returnCreatedTime = False, returnGradeReportTemplateHeaderRowIDClonedFrom = False, returnGradeReportTemplateID = False, returnModifiedTime = False, returnSortNumber = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeReportTemplateHeaderRow/" + str(GradeReportTemplateHeaderRowID), verb = "post", return_params_list = return_params, payload = payload_params)

def createGradeReportTemplateHeaderRow(EntityID = 1, setGradeReportTemplateHeaderRowID = None, setColumnCount = None, setCreatedTime = None, setGradeReportTemplateHeaderRowIDClonedFrom = None, setGradeReportTemplateID = None, setModifiedTime = None, setSortNumber = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnGradeReportTemplateHeaderRowID = False, returnColumnCount = False, returnCreatedTime = False, returnGradeReportTemplateHeaderRowIDClonedFrom = False, returnGradeReportTemplateID = False, returnModifiedTime = False, returnSortNumber = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeReportTemplateHeaderRow/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteGradeReportTemplateHeaderRow(GradeReportTemplateHeaderRowID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeReportTemplateHeaderRow/" + str(GradeReportTemplateHeaderRowID), verb = "delete")


def getEveryGradeReportTemplateHierarchyDepthSetting(searchConditions = [], EntityID = 1, returnGradeReportTemplateHierarchyDepthSettingID = False, returnBackgroundColor = False, returnCreatedTime = False, returnDepthLevel = False, returnGradeReportTemplateHierarchyDepthSettingIDClonedFrom = False, returnGradeReportTemplateID = False, returnModifiedTime = False, returnPrintBackgroundColor = False, returnTextColor = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every GradeReportTemplateHierarchyDepthSetting in the district.

    This function returns a dataframe of every GradeReportTemplateHierarchyDepthSetting in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeReportTemplateHierarchyDepthSetting/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeReportTemplateHierarchyDepthSetting/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getGradeReportTemplateHierarchyDepthSetting(GradeReportTemplateHierarchyDepthSettingID, EntityID = 1, returnGradeReportTemplateHierarchyDepthSettingID = False, returnBackgroundColor = False, returnCreatedTime = False, returnDepthLevel = False, returnGradeReportTemplateHierarchyDepthSettingIDClonedFrom = False, returnGradeReportTemplateID = False, returnModifiedTime = False, returnPrintBackgroundColor = False, returnTextColor = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeReportTemplateHierarchyDepthSetting/" + str(GradeReportTemplateHierarchyDepthSettingID), verb = "get", return_params_list = return_params)

def modifyGradeReportTemplateHierarchyDepthSetting(GradeReportTemplateHierarchyDepthSettingID, EntityID = 1, setGradeReportTemplateHierarchyDepthSettingID = None, setBackgroundColor = None, setCreatedTime = None, setDepthLevel = None, setGradeReportTemplateHierarchyDepthSettingIDClonedFrom = None, setGradeReportTemplateID = None, setModifiedTime = None, setPrintBackgroundColor = None, setTextColor = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnGradeReportTemplateHierarchyDepthSettingID = False, returnBackgroundColor = False, returnCreatedTime = False, returnDepthLevel = False, returnGradeReportTemplateHierarchyDepthSettingIDClonedFrom = False, returnGradeReportTemplateID = False, returnModifiedTime = False, returnPrintBackgroundColor = False, returnTextColor = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeReportTemplateHierarchyDepthSetting/" + str(GradeReportTemplateHierarchyDepthSettingID), verb = "post", return_params_list = return_params, payload = payload_params)

def createGradeReportTemplateHierarchyDepthSetting(EntityID = 1, setGradeReportTemplateHierarchyDepthSettingID = None, setBackgroundColor = None, setCreatedTime = None, setDepthLevel = None, setGradeReportTemplateHierarchyDepthSettingIDClonedFrom = None, setGradeReportTemplateID = None, setModifiedTime = None, setPrintBackgroundColor = None, setTextColor = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnGradeReportTemplateHierarchyDepthSettingID = False, returnBackgroundColor = False, returnCreatedTime = False, returnDepthLevel = False, returnGradeReportTemplateHierarchyDepthSettingIDClonedFrom = False, returnGradeReportTemplateID = False, returnModifiedTime = False, returnPrintBackgroundColor = False, returnTextColor = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeReportTemplateHierarchyDepthSetting/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteGradeReportTemplateHierarchyDepthSetting(GradeReportTemplateHierarchyDepthSettingID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeReportTemplateHierarchyDepthSetting/" + str(GradeReportTemplateHierarchyDepthSettingID), verb = "delete")


def getEveryGradeReportTemplateTestType(searchConditions = [], EntityID = 1, returnGradeReportTemplateTestTypeID = False, returnCreatedTime = False, returnFieldGUIDTestColumn1 = False, returnFieldGUIDTestColumn10 = False, returnFieldGUIDTestColumn2 = False, returnFieldGUIDTestColumn3 = False, returnFieldGUIDTestColumn4 = False, returnFieldGUIDTestColumn5 = False, returnFieldGUIDTestColumn6 = False, returnFieldGUIDTestColumn7 = False, returnFieldGUIDTestColumn8 = False, returnFieldGUIDTestColumn9 = False, returnGradeReportTemplateID = False, returnGradeReportTemplateTestTypeIDClonedFrom = False, returnModifiedTime = False, returnPrintHighestScoreOnly = False, returnSortNumber = False, returnTestCode = False, returnTestColumnHeaderOverride1 = False, returnTestColumnHeaderOverride10 = False, returnTestColumnHeaderOverride2 = False, returnTestColumnHeaderOverride3 = False, returnTestColumnHeaderOverride4 = False, returnTestColumnHeaderOverride5 = False, returnTestColumnHeaderOverride6 = False, returnTestColumnHeaderOverride7 = False, returnTestColumnHeaderOverride8 = False, returnTestColumnHeaderOverride9 = False, returnTestType = False, returnTestTypeCode = False, returnTestVersion = False, returnTestVersionCode = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every GradeReportTemplateTestType in the district.

    This function returns a dataframe of every GradeReportTemplateTestType in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeReportTemplateTestType/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeReportTemplateTestType/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getGradeReportTemplateTestType(GradeReportTemplateTestTypeID, EntityID = 1, returnGradeReportTemplateTestTypeID = False, returnCreatedTime = False, returnFieldGUIDTestColumn1 = False, returnFieldGUIDTestColumn10 = False, returnFieldGUIDTestColumn2 = False, returnFieldGUIDTestColumn3 = False, returnFieldGUIDTestColumn4 = False, returnFieldGUIDTestColumn5 = False, returnFieldGUIDTestColumn6 = False, returnFieldGUIDTestColumn7 = False, returnFieldGUIDTestColumn8 = False, returnFieldGUIDTestColumn9 = False, returnGradeReportTemplateID = False, returnGradeReportTemplateTestTypeIDClonedFrom = False, returnModifiedTime = False, returnPrintHighestScoreOnly = False, returnSortNumber = False, returnTestCode = False, returnTestColumnHeaderOverride1 = False, returnTestColumnHeaderOverride10 = False, returnTestColumnHeaderOverride2 = False, returnTestColumnHeaderOverride3 = False, returnTestColumnHeaderOverride4 = False, returnTestColumnHeaderOverride5 = False, returnTestColumnHeaderOverride6 = False, returnTestColumnHeaderOverride7 = False, returnTestColumnHeaderOverride8 = False, returnTestColumnHeaderOverride9 = False, returnTestType = False, returnTestTypeCode = False, returnTestVersion = False, returnTestVersionCode = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeReportTemplateTestType/" + str(GradeReportTemplateTestTypeID), verb = "get", return_params_list = return_params)

def modifyGradeReportTemplateTestType(GradeReportTemplateTestTypeID, EntityID = 1, setGradeReportTemplateTestTypeID = None, setCreatedTime = None, setFieldGUIDTestColumn1 = None, setFieldGUIDTestColumn10 = None, setFieldGUIDTestColumn2 = None, setFieldGUIDTestColumn3 = None, setFieldGUIDTestColumn4 = None, setFieldGUIDTestColumn5 = None, setFieldGUIDTestColumn6 = None, setFieldGUIDTestColumn7 = None, setFieldGUIDTestColumn8 = None, setFieldGUIDTestColumn9 = None, setGradeReportTemplateID = None, setGradeReportTemplateTestTypeIDClonedFrom = None, setModifiedTime = None, setPrintHighestScoreOnly = None, setSortNumber = None, setTestCode = None, setTestColumnHeaderOverride1 = None, setTestColumnHeaderOverride10 = None, setTestColumnHeaderOverride2 = None, setTestColumnHeaderOverride3 = None, setTestColumnHeaderOverride4 = None, setTestColumnHeaderOverride5 = None, setTestColumnHeaderOverride6 = None, setTestColumnHeaderOverride7 = None, setTestColumnHeaderOverride8 = None, setTestColumnHeaderOverride9 = None, setTestType = None, setTestTypeCode = None, setTestVersion = None, setTestVersionCode = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnGradeReportTemplateTestTypeID = False, returnCreatedTime = False, returnFieldGUIDTestColumn1 = False, returnFieldGUIDTestColumn10 = False, returnFieldGUIDTestColumn2 = False, returnFieldGUIDTestColumn3 = False, returnFieldGUIDTestColumn4 = False, returnFieldGUIDTestColumn5 = False, returnFieldGUIDTestColumn6 = False, returnFieldGUIDTestColumn7 = False, returnFieldGUIDTestColumn8 = False, returnFieldGUIDTestColumn9 = False, returnGradeReportTemplateID = False, returnGradeReportTemplateTestTypeIDClonedFrom = False, returnModifiedTime = False, returnPrintHighestScoreOnly = False, returnSortNumber = False, returnTestCode = False, returnTestColumnHeaderOverride1 = False, returnTestColumnHeaderOverride10 = False, returnTestColumnHeaderOverride2 = False, returnTestColumnHeaderOverride3 = False, returnTestColumnHeaderOverride4 = False, returnTestColumnHeaderOverride5 = False, returnTestColumnHeaderOverride6 = False, returnTestColumnHeaderOverride7 = False, returnTestColumnHeaderOverride8 = False, returnTestColumnHeaderOverride9 = False, returnTestType = False, returnTestTypeCode = False, returnTestVersion = False, returnTestVersionCode = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeReportTemplateTestType/" + str(GradeReportTemplateTestTypeID), verb = "post", return_params_list = return_params, payload = payload_params)

def createGradeReportTemplateTestType(EntityID = 1, setGradeReportTemplateTestTypeID = None, setCreatedTime = None, setFieldGUIDTestColumn1 = None, setFieldGUIDTestColumn10 = None, setFieldGUIDTestColumn2 = None, setFieldGUIDTestColumn3 = None, setFieldGUIDTestColumn4 = None, setFieldGUIDTestColumn5 = None, setFieldGUIDTestColumn6 = None, setFieldGUIDTestColumn7 = None, setFieldGUIDTestColumn8 = None, setFieldGUIDTestColumn9 = None, setGradeReportTemplateID = None, setGradeReportTemplateTestTypeIDClonedFrom = None, setModifiedTime = None, setPrintHighestScoreOnly = None, setSortNumber = None, setTestCode = None, setTestColumnHeaderOverride1 = None, setTestColumnHeaderOverride10 = None, setTestColumnHeaderOverride2 = None, setTestColumnHeaderOverride3 = None, setTestColumnHeaderOverride4 = None, setTestColumnHeaderOverride5 = None, setTestColumnHeaderOverride6 = None, setTestColumnHeaderOverride7 = None, setTestColumnHeaderOverride8 = None, setTestColumnHeaderOverride9 = None, setTestType = None, setTestTypeCode = None, setTestVersion = None, setTestVersionCode = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnGradeReportTemplateTestTypeID = False, returnCreatedTime = False, returnFieldGUIDTestColumn1 = False, returnFieldGUIDTestColumn10 = False, returnFieldGUIDTestColumn2 = False, returnFieldGUIDTestColumn3 = False, returnFieldGUIDTestColumn4 = False, returnFieldGUIDTestColumn5 = False, returnFieldGUIDTestColumn6 = False, returnFieldGUIDTestColumn7 = False, returnFieldGUIDTestColumn8 = False, returnFieldGUIDTestColumn9 = False, returnGradeReportTemplateID = False, returnGradeReportTemplateTestTypeIDClonedFrom = False, returnModifiedTime = False, returnPrintHighestScoreOnly = False, returnSortNumber = False, returnTestCode = False, returnTestColumnHeaderOverride1 = False, returnTestColumnHeaderOverride10 = False, returnTestColumnHeaderOverride2 = False, returnTestColumnHeaderOverride3 = False, returnTestColumnHeaderOverride4 = False, returnTestColumnHeaderOverride5 = False, returnTestColumnHeaderOverride6 = False, returnTestColumnHeaderOverride7 = False, returnTestColumnHeaderOverride8 = False, returnTestColumnHeaderOverride9 = False, returnTestType = False, returnTestTypeCode = False, returnTestVersion = False, returnTestVersionCode = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeReportTemplateTestType/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteGradeReportTemplateTestType(GradeReportTemplateTestTypeID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeReportTemplateTestType/" + str(GradeReportTemplateTestTypeID), verb = "delete")


def getEveryGradeReportTemplateVaccination(searchConditions = [], EntityID = 1, returnGradeReportTemplateVaccinationID = False, returnCreatedTime = False, returnGradeReportTemplateID = False, returnGradeReportTemplateVaccinationIDClonedFrom = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnVaccinationID = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every GradeReportTemplateVaccination in the district.

    This function returns a dataframe of every GradeReportTemplateVaccination in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeReportTemplateVaccination/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeReportTemplateVaccination/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getGradeReportTemplateVaccination(GradeReportTemplateVaccinationID, EntityID = 1, returnGradeReportTemplateVaccinationID = False, returnCreatedTime = False, returnGradeReportTemplateID = False, returnGradeReportTemplateVaccinationIDClonedFrom = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnVaccinationID = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeReportTemplateVaccination/" + str(GradeReportTemplateVaccinationID), verb = "get", return_params_list = return_params)

def modifyGradeReportTemplateVaccination(GradeReportTemplateVaccinationID, EntityID = 1, setGradeReportTemplateVaccinationID = None, setCreatedTime = None, setGradeReportTemplateID = None, setGradeReportTemplateVaccinationIDClonedFrom = None, setModifiedTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, setVaccinationID = None, returnGradeReportTemplateVaccinationID = False, returnCreatedTime = False, returnGradeReportTemplateID = False, returnGradeReportTemplateVaccinationIDClonedFrom = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnVaccinationID = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeReportTemplateVaccination/" + str(GradeReportTemplateVaccinationID), verb = "post", return_params_list = return_params, payload = payload_params)

def createGradeReportTemplateVaccination(EntityID = 1, setGradeReportTemplateVaccinationID = None, setCreatedTime = None, setGradeReportTemplateID = None, setGradeReportTemplateVaccinationIDClonedFrom = None, setModifiedTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, setVaccinationID = None, returnGradeReportTemplateVaccinationID = False, returnCreatedTime = False, returnGradeReportTemplateID = False, returnGradeReportTemplateVaccinationIDClonedFrom = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnVaccinationID = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeReportTemplateVaccination/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteGradeReportTemplateVaccination(GradeReportTemplateVaccinationID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradeReportTemplateVaccination/" + str(GradeReportTemplateVaccinationID), verb = "delete")


def getEveryGradingPeriod(searchConditions = [], EntityID = 1, returnGradingPeriodID = False, returnAfterSectionLengthEndLastGradingPeriod = False, returnBeforeSectionLengthStartFirstGradingPeriod = False, returnCalculatedEndDateWithExtension = False, returnClosedGradingPeriodGradeChangeID = False, returnClosedGradingPeriodGradeChangeIDForNotReviewedRequests = False, returnCompletedFieldText = False, returnCompletedText = False, returnCreatedTime = False, returnCurrentActiveStatus = False, returnDateOverrideTeacherGracePeriod = False, returnDateOverrideTeacherGracePeriodDisplay = False, returnDescription = False, returnDisplayAssignments = False, returnDisplayGradeBuckets = False, returnEndDate = False, returnEndDateCopy = False, returnEndDateWithRetainGradesNumberOfDays = False, returnEntityGroupKey = False, returnExtendedEndDateGreaterThanToday = False, returnExtensionDays = False, returnExtensionEndTime = False, returnGradeBucketLabels = False, returnGradingPeriodIDClonedFrom = False, returnGradingPeriodIDClonedTo = False, returnGradingPeriodSetID = False, returnIncludeMissingAssignments = False, returnIncludeMissingAssignmentsOrIsCurrentGradingPeriod = False, returnIsActiveOrExtended = False, returnIsCompleted = False, returnModifiedTime = False, returnNumber = False, returnNumberDescription = False, returnOptionsHeaderText = False, returnProgressReportGradingPeriodNumberDateDisplay = False, returnSectionIDForActiveStatus = False, returnSectionLengthID = False, returnStartDate = False, returnStartDateCopy = False, returnStatusDisplay = False, returnStatusDisplayWithExtensionDate = False, returnUniqueCode = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnWithinGradingPeriod = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every GradingPeriod in the district.

    This function returns a dataframe of every GradingPeriod in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradingPeriod/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradingPeriod/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getGradingPeriod(GradingPeriodID, EntityID = 1, returnGradingPeriodID = False, returnAfterSectionLengthEndLastGradingPeriod = False, returnBeforeSectionLengthStartFirstGradingPeriod = False, returnCalculatedEndDateWithExtension = False, returnClosedGradingPeriodGradeChangeID = False, returnClosedGradingPeriodGradeChangeIDForNotReviewedRequests = False, returnCompletedFieldText = False, returnCompletedText = False, returnCreatedTime = False, returnCurrentActiveStatus = False, returnDateOverrideTeacherGracePeriod = False, returnDateOverrideTeacherGracePeriodDisplay = False, returnDescription = False, returnDisplayAssignments = False, returnDisplayGradeBuckets = False, returnEndDate = False, returnEndDateCopy = False, returnEndDateWithRetainGradesNumberOfDays = False, returnEntityGroupKey = False, returnExtendedEndDateGreaterThanToday = False, returnExtensionDays = False, returnExtensionEndTime = False, returnGradeBucketLabels = False, returnGradingPeriodIDClonedFrom = False, returnGradingPeriodIDClonedTo = False, returnGradingPeriodSetID = False, returnIncludeMissingAssignments = False, returnIncludeMissingAssignmentsOrIsCurrentGradingPeriod = False, returnIsActiveOrExtended = False, returnIsCompleted = False, returnModifiedTime = False, returnNumber = False, returnNumberDescription = False, returnOptionsHeaderText = False, returnProgressReportGradingPeriodNumberDateDisplay = False, returnSectionIDForActiveStatus = False, returnSectionLengthID = False, returnStartDate = False, returnStartDateCopy = False, returnStatusDisplay = False, returnStatusDisplayWithExtensionDate = False, returnUniqueCode = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnWithinGradingPeriod = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradingPeriod/" + str(GradingPeriodID), verb = "get", return_params_list = return_params)

def modifyGradingPeriod(GradingPeriodID, EntityID = 1, setGradingPeriodID = None, setAfterSectionLengthEndLastGradingPeriod = None, setBeforeSectionLengthStartFirstGradingPeriod = None, setCalculatedEndDateWithExtension = None, setClosedGradingPeriodGradeChangeID = None, setClosedGradingPeriodGradeChangeIDForNotReviewedRequests = None, setCompletedFieldText = None, setCompletedText = None, setCreatedTime = None, setCurrentActiveStatus = None, setDateOverrideTeacherGracePeriod = None, setDateOverrideTeacherGracePeriodDisplay = None, setDescription = None, setDisplayAssignments = None, setDisplayGradeBuckets = None, setEndDate = None, setEndDateCopy = None, setEndDateWithRetainGradesNumberOfDays = None, setEntityGroupKey = None, setExtendedEndDateGreaterThanToday = None, setExtensionDays = None, setExtensionEndTime = None, setGradeBucketLabels = None, setGradingPeriodIDClonedFrom = None, setGradingPeriodIDClonedTo = None, setGradingPeriodSetID = None, setIncludeMissingAssignments = None, setIncludeMissingAssignmentsOrIsCurrentGradingPeriod = None, setIsActiveOrExtended = None, setIsCompleted = None, setModifiedTime = None, setNumber = None, setNumberDescription = None, setOptionsHeaderText = None, setProgressReportGradingPeriodNumberDateDisplay = None, setSectionIDForActiveStatus = None, setSectionLengthID = None, setStartDate = None, setStartDateCopy = None, setStatusDisplay = None, setStatusDisplayWithExtensionDate = None, setUniqueCode = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, setWithinGradingPeriod = None, returnGradingPeriodID = False, returnAfterSectionLengthEndLastGradingPeriod = False, returnBeforeSectionLengthStartFirstGradingPeriod = False, returnCalculatedEndDateWithExtension = False, returnClosedGradingPeriodGradeChangeID = False, returnClosedGradingPeriodGradeChangeIDForNotReviewedRequests = False, returnCompletedFieldText = False, returnCompletedText = False, returnCreatedTime = False, returnCurrentActiveStatus = False, returnDateOverrideTeacherGracePeriod = False, returnDateOverrideTeacherGracePeriodDisplay = False, returnDescription = False, returnDisplayAssignments = False, returnDisplayGradeBuckets = False, returnEndDate = False, returnEndDateCopy = False, returnEndDateWithRetainGradesNumberOfDays = False, returnEntityGroupKey = False, returnExtendedEndDateGreaterThanToday = False, returnExtensionDays = False, returnExtensionEndTime = False, returnGradeBucketLabels = False, returnGradingPeriodIDClonedFrom = False, returnGradingPeriodIDClonedTo = False, returnGradingPeriodSetID = False, returnIncludeMissingAssignments = False, returnIncludeMissingAssignmentsOrIsCurrentGradingPeriod = False, returnIsActiveOrExtended = False, returnIsCompleted = False, returnModifiedTime = False, returnNumber = False, returnNumberDescription = False, returnOptionsHeaderText = False, returnProgressReportGradingPeriodNumberDateDisplay = False, returnSectionIDForActiveStatus = False, returnSectionLengthID = False, returnStartDate = False, returnStartDateCopy = False, returnStatusDisplay = False, returnStatusDisplayWithExtensionDate = False, returnUniqueCode = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnWithinGradingPeriod = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradingPeriod/" + str(GradingPeriodID), verb = "post", return_params_list = return_params, payload = payload_params)

def createGradingPeriod(EntityID = 1, setGradingPeriodID = None, setAfterSectionLengthEndLastGradingPeriod = None, setBeforeSectionLengthStartFirstGradingPeriod = None, setCalculatedEndDateWithExtension = None, setClosedGradingPeriodGradeChangeID = None, setClosedGradingPeriodGradeChangeIDForNotReviewedRequests = None, setCompletedFieldText = None, setCompletedText = None, setCreatedTime = None, setCurrentActiveStatus = None, setDateOverrideTeacherGracePeriod = None, setDateOverrideTeacherGracePeriodDisplay = None, setDescription = None, setDisplayAssignments = None, setDisplayGradeBuckets = None, setEndDate = None, setEndDateCopy = None, setEndDateWithRetainGradesNumberOfDays = None, setEntityGroupKey = None, setExtendedEndDateGreaterThanToday = None, setExtensionDays = None, setExtensionEndTime = None, setGradeBucketLabels = None, setGradingPeriodIDClonedFrom = None, setGradingPeriodIDClonedTo = None, setGradingPeriodSetID = None, setIncludeMissingAssignments = None, setIncludeMissingAssignmentsOrIsCurrentGradingPeriod = None, setIsActiveOrExtended = None, setIsCompleted = None, setModifiedTime = None, setNumber = None, setNumberDescription = None, setOptionsHeaderText = None, setProgressReportGradingPeriodNumberDateDisplay = None, setSectionIDForActiveStatus = None, setSectionLengthID = None, setStartDate = None, setStartDateCopy = None, setStatusDisplay = None, setStatusDisplayWithExtensionDate = None, setUniqueCode = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, setWithinGradingPeriod = None, returnGradingPeriodID = False, returnAfterSectionLengthEndLastGradingPeriod = False, returnBeforeSectionLengthStartFirstGradingPeriod = False, returnCalculatedEndDateWithExtension = False, returnClosedGradingPeriodGradeChangeID = False, returnClosedGradingPeriodGradeChangeIDForNotReviewedRequests = False, returnCompletedFieldText = False, returnCompletedText = False, returnCreatedTime = False, returnCurrentActiveStatus = False, returnDateOverrideTeacherGracePeriod = False, returnDateOverrideTeacherGracePeriodDisplay = False, returnDescription = False, returnDisplayAssignments = False, returnDisplayGradeBuckets = False, returnEndDate = False, returnEndDateCopy = False, returnEndDateWithRetainGradesNumberOfDays = False, returnEntityGroupKey = False, returnExtendedEndDateGreaterThanToday = False, returnExtensionDays = False, returnExtensionEndTime = False, returnGradeBucketLabels = False, returnGradingPeriodIDClonedFrom = False, returnGradingPeriodIDClonedTo = False, returnGradingPeriodSetID = False, returnIncludeMissingAssignments = False, returnIncludeMissingAssignmentsOrIsCurrentGradingPeriod = False, returnIsActiveOrExtended = False, returnIsCompleted = False, returnModifiedTime = False, returnNumber = False, returnNumberDescription = False, returnOptionsHeaderText = False, returnProgressReportGradingPeriodNumberDateDisplay = False, returnSectionIDForActiveStatus = False, returnSectionLengthID = False, returnStartDate = False, returnStartDateCopy = False, returnStatusDisplay = False, returnStatusDisplayWithExtensionDate = False, returnUniqueCode = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnWithinGradingPeriod = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradingPeriod/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteGradingPeriod(GradingPeriodID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradingPeriod/" + str(GradingPeriodID), verb = "delete")


def getEveryGradingPeriodGradeBucket(searchConditions = [], EntityID = 1, returnGradingPeriodGradeBucketID = False, returnCreatedTime = False, returnEntityGroupKey = False, returnFactorBasedGPACountAs = False, returnGradeBucketID = False, returnGradeBucketLabelWithDates = False, returnGradingPeriodEndDateAddSnapshotGraceDays = False, returnGradingPeriodGradeBucketExistsInSpecifcEntity = False, returnGradingPeriodGradeBucketIDClonedFrom = False, returnGradingPeriodIDEnd = False, returnGradingPeriodIDStart = False, returnHasGradeBucketTypeCategories = False, returnIsAHistoricRecord = False, returnIsGradeBucketForETranscript = False, returnIsUpToDate = False, returnMaxExtraCredit = False, returnModifiedTime = False, returnNumberOfGradeBucketsToWeight = False, returnStateETranscriptSessionTypeID = False, returnStatus = False, returnUseMaxExtraCredit = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every GradingPeriodGradeBucket in the district.

    This function returns a dataframe of every GradingPeriodGradeBucket in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradingPeriodGradeBucket/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradingPeriodGradeBucket/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getGradingPeriodGradeBucket(GradingPeriodGradeBucketID, EntityID = 1, returnGradingPeriodGradeBucketID = False, returnCreatedTime = False, returnEntityGroupKey = False, returnFactorBasedGPACountAs = False, returnGradeBucketID = False, returnGradeBucketLabelWithDates = False, returnGradingPeriodEndDateAddSnapshotGraceDays = False, returnGradingPeriodGradeBucketExistsInSpecifcEntity = False, returnGradingPeriodGradeBucketIDClonedFrom = False, returnGradingPeriodIDEnd = False, returnGradingPeriodIDStart = False, returnHasGradeBucketTypeCategories = False, returnIsAHistoricRecord = False, returnIsGradeBucketForETranscript = False, returnIsUpToDate = False, returnMaxExtraCredit = False, returnModifiedTime = False, returnNumberOfGradeBucketsToWeight = False, returnStateETranscriptSessionTypeID = False, returnStatus = False, returnUseMaxExtraCredit = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradingPeriodGradeBucket/" + str(GradingPeriodGradeBucketID), verb = "get", return_params_list = return_params)

def modifyGradingPeriodGradeBucket(GradingPeriodGradeBucketID, EntityID = 1, setGradingPeriodGradeBucketID = None, setCreatedTime = None, setEntityGroupKey = None, setFactorBasedGPACountAs = None, setGradeBucketID = None, setGradeBucketLabelWithDates = None, setGradingPeriodEndDateAddSnapshotGraceDays = None, setGradingPeriodGradeBucketExistsInSpecifcEntity = None, setGradingPeriodGradeBucketIDClonedFrom = None, setGradingPeriodIDEnd = None, setGradingPeriodIDStart = None, setHasGradeBucketTypeCategories = None, setIsAHistoricRecord = None, setIsGradeBucketForETranscript = None, setIsUpToDate = None, setMaxExtraCredit = None, setModifiedTime = None, setNumberOfGradeBucketsToWeight = None, setStateETranscriptSessionTypeID = None, setStatus = None, setUseMaxExtraCredit = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnGradingPeriodGradeBucketID = False, returnCreatedTime = False, returnEntityGroupKey = False, returnFactorBasedGPACountAs = False, returnGradeBucketID = False, returnGradeBucketLabelWithDates = False, returnGradingPeriodEndDateAddSnapshotGraceDays = False, returnGradingPeriodGradeBucketExistsInSpecifcEntity = False, returnGradingPeriodGradeBucketIDClonedFrom = False, returnGradingPeriodIDEnd = False, returnGradingPeriodIDStart = False, returnHasGradeBucketTypeCategories = False, returnIsAHistoricRecord = False, returnIsGradeBucketForETranscript = False, returnIsUpToDate = False, returnMaxExtraCredit = False, returnModifiedTime = False, returnNumberOfGradeBucketsToWeight = False, returnStateETranscriptSessionTypeID = False, returnStatus = False, returnUseMaxExtraCredit = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradingPeriodGradeBucket/" + str(GradingPeriodGradeBucketID), verb = "post", return_params_list = return_params, payload = payload_params)

def createGradingPeriodGradeBucket(EntityID = 1, setGradingPeriodGradeBucketID = None, setCreatedTime = None, setEntityGroupKey = None, setFactorBasedGPACountAs = None, setGradeBucketID = None, setGradeBucketLabelWithDates = None, setGradingPeriodEndDateAddSnapshotGraceDays = None, setGradingPeriodGradeBucketExistsInSpecifcEntity = None, setGradingPeriodGradeBucketIDClonedFrom = None, setGradingPeriodIDEnd = None, setGradingPeriodIDStart = None, setHasGradeBucketTypeCategories = None, setIsAHistoricRecord = None, setIsGradeBucketForETranscript = None, setIsUpToDate = None, setMaxExtraCredit = None, setModifiedTime = None, setNumberOfGradeBucketsToWeight = None, setStateETranscriptSessionTypeID = None, setStatus = None, setUseMaxExtraCredit = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnGradingPeriodGradeBucketID = False, returnCreatedTime = False, returnEntityGroupKey = False, returnFactorBasedGPACountAs = False, returnGradeBucketID = False, returnGradeBucketLabelWithDates = False, returnGradingPeriodEndDateAddSnapshotGraceDays = False, returnGradingPeriodGradeBucketExistsInSpecifcEntity = False, returnGradingPeriodGradeBucketIDClonedFrom = False, returnGradingPeriodIDEnd = False, returnGradingPeriodIDStart = False, returnHasGradeBucketTypeCategories = False, returnIsAHistoricRecord = False, returnIsGradeBucketForETranscript = False, returnIsUpToDate = False, returnMaxExtraCredit = False, returnModifiedTime = False, returnNumberOfGradeBucketsToWeight = False, returnStateETranscriptSessionTypeID = False, returnStatus = False, returnUseMaxExtraCredit = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradingPeriodGradeBucket/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteGradingPeriodGradeBucket(GradingPeriodGradeBucketID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradingPeriodGradeBucket/" + str(GradingPeriodGradeBucketID), verb = "delete")


def getEveryGradingPeriodSet(searchConditions = [], EntityID = 1, returnGradingPeriodSetID = False, returnCode = False, returnCodeDescription = False, returnCourseLengthID = False, returnCreatedTime = False, returnDescription = False, returnEntityGroupKey = False, returnGradingPeriodSetIDClonedFrom = False, returnGradingPeriodSetIDClonedTo = False, returnIsDefault = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every GradingPeriodSet in the district.

    This function returns a dataframe of every GradingPeriodSet in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradingPeriodSet/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradingPeriodSet/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getGradingPeriodSet(GradingPeriodSetID, EntityID = 1, returnGradingPeriodSetID = False, returnCode = False, returnCodeDescription = False, returnCourseLengthID = False, returnCreatedTime = False, returnDescription = False, returnEntityGroupKey = False, returnGradingPeriodSetIDClonedFrom = False, returnGradingPeriodSetIDClonedTo = False, returnIsDefault = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradingPeriodSet/" + str(GradingPeriodSetID), verb = "get", return_params_list = return_params)

def modifyGradingPeriodSet(GradingPeriodSetID, EntityID = 1, setGradingPeriodSetID = None, setCode = None, setCodeDescription = None, setCourseLengthID = None, setCreatedTime = None, setDescription = None, setEntityGroupKey = None, setGradingPeriodSetIDClonedFrom = None, setGradingPeriodSetIDClonedTo = None, setIsDefault = None, setModifiedTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnGradingPeriodSetID = False, returnCode = False, returnCodeDescription = False, returnCourseLengthID = False, returnCreatedTime = False, returnDescription = False, returnEntityGroupKey = False, returnGradingPeriodSetIDClonedFrom = False, returnGradingPeriodSetIDClonedTo = False, returnIsDefault = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradingPeriodSet/" + str(GradingPeriodSetID), verb = "post", return_params_list = return_params, payload = payload_params)

def createGradingPeriodSet(EntityID = 1, setGradingPeriodSetID = None, setCode = None, setCodeDescription = None, setCourseLengthID = None, setCreatedTime = None, setDescription = None, setEntityGroupKey = None, setGradingPeriodSetIDClonedFrom = None, setGradingPeriodSetIDClonedTo = None, setIsDefault = None, setModifiedTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnGradingPeriodSetID = False, returnCode = False, returnCodeDescription = False, returnCourseLengthID = False, returnCreatedTime = False, returnDescription = False, returnEntityGroupKey = False, returnGradingPeriodSetIDClonedFrom = False, returnGradingPeriodSetIDClonedTo = False, returnIsDefault = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradingPeriodSet/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteGradingPeriodSet(GradingPeriodSetID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradingPeriodSet/" + str(GradingPeriodSetID), verb = "delete")


def getEveryGradReqRankGPACourseType(searchConditions = [], EntityID = 1, returnGradReqRankGPACourseTypeID = False, returnCourseTypeID = False, returnCreatedTime = False, returnGradReqRankGPAMethodEntityID = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every GradReqRankGPACourseType in the district.

    This function returns a dataframe of every GradReqRankGPACourseType in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradReqRankGPACourseType/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradReqRankGPACourseType/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getGradReqRankGPACourseType(GradReqRankGPACourseTypeID, EntityID = 1, returnGradReqRankGPACourseTypeID = False, returnCourseTypeID = False, returnCreatedTime = False, returnGradReqRankGPAMethodEntityID = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradReqRankGPACourseType/" + str(GradReqRankGPACourseTypeID), verb = "get", return_params_list = return_params)

def modifyGradReqRankGPACourseType(GradReqRankGPACourseTypeID, EntityID = 1, setGradReqRankGPACourseTypeID = None, setCourseTypeID = None, setCreatedTime = None, setGradReqRankGPAMethodEntityID = None, setModifiedTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnGradReqRankGPACourseTypeID = False, returnCourseTypeID = False, returnCreatedTime = False, returnGradReqRankGPAMethodEntityID = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradReqRankGPACourseType/" + str(GradReqRankGPACourseTypeID), verb = "post", return_params_list = return_params, payload = payload_params)

def createGradReqRankGPACourseType(EntityID = 1, setGradReqRankGPACourseTypeID = None, setCourseTypeID = None, setCreatedTime = None, setGradReqRankGPAMethodEntityID = None, setModifiedTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnGradReqRankGPACourseTypeID = False, returnCourseTypeID = False, returnCreatedTime = False, returnGradReqRankGPAMethodEntityID = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradReqRankGPACourseType/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteGradReqRankGPACourseType(GradReqRankGPACourseTypeID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradReqRankGPACourseType/" + str(GradReqRankGPACourseTypeID), verb = "delete")


def getEveryGradReqRankGPAMethodEntity(searchConditions = [], EntityID = 1, returnGradReqRankGPAMethodEntityID = False, returnCreatedTime = False, returnGPAMethodEntityID = False, returnGradeBucketFlagIDLocalCredit = False, returnGradeBucketIDTermOne = False, returnGradeBucketIDTermTwo = False, returnGradPlanSetting = False, returnGradPlanSettingCode = False, returnModifiedTime = False, returnPlanID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every GradReqRankGPAMethodEntity in the district.

    This function returns a dataframe of every GradReqRankGPAMethodEntity in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradReqRankGPAMethodEntity/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradReqRankGPAMethodEntity/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getGradReqRankGPAMethodEntity(GradReqRankGPAMethodEntityID, EntityID = 1, returnGradReqRankGPAMethodEntityID = False, returnCreatedTime = False, returnGPAMethodEntityID = False, returnGradeBucketFlagIDLocalCredit = False, returnGradeBucketIDTermOne = False, returnGradeBucketIDTermTwo = False, returnGradPlanSetting = False, returnGradPlanSettingCode = False, returnModifiedTime = False, returnPlanID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradReqRankGPAMethodEntity/" + str(GradReqRankGPAMethodEntityID), verb = "get", return_params_list = return_params)

def modifyGradReqRankGPAMethodEntity(GradReqRankGPAMethodEntityID, EntityID = 1, setGradReqRankGPAMethodEntityID = None, setCreatedTime = None, setGPAMethodEntityID = None, setGradeBucketFlagIDLocalCredit = None, setGradeBucketIDTermOne = None, setGradeBucketIDTermTwo = None, setGradPlanSetting = None, setGradPlanSettingCode = None, setModifiedTime = None, setPlanID = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnGradReqRankGPAMethodEntityID = False, returnCreatedTime = False, returnGPAMethodEntityID = False, returnGradeBucketFlagIDLocalCredit = False, returnGradeBucketIDTermOne = False, returnGradeBucketIDTermTwo = False, returnGradPlanSetting = False, returnGradPlanSettingCode = False, returnModifiedTime = False, returnPlanID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradReqRankGPAMethodEntity/" + str(GradReqRankGPAMethodEntityID), verb = "post", return_params_list = return_params, payload = payload_params)

def createGradReqRankGPAMethodEntity(EntityID = 1, setGradReqRankGPAMethodEntityID = None, setCreatedTime = None, setGPAMethodEntityID = None, setGradeBucketFlagIDLocalCredit = None, setGradeBucketIDTermOne = None, setGradeBucketIDTermTwo = None, setGradPlanSetting = None, setGradPlanSettingCode = None, setModifiedTime = None, setPlanID = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnGradReqRankGPAMethodEntityID = False, returnCreatedTime = False, returnGPAMethodEntityID = False, returnGradeBucketFlagIDLocalCredit = False, returnGradeBucketIDTermOne = False, returnGradeBucketIDTermTwo = False, returnGradPlanSetting = False, returnGradPlanSettingCode = False, returnModifiedTime = False, returnPlanID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradReqRankGPAMethodEntity/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteGradReqRankGPAMethodEntity(GradReqRankGPAMethodEntityID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradReqRankGPAMethodEntity/" + str(GradReqRankGPAMethodEntityID), verb = "delete")


def getEveryGradReqRankHighSchoolGradeLevel(searchConditions = [], EntityID = 1, returnGradReqRankHighSchoolGradeLevelID = False, returnCreatedTime = False, returnGPAMethodID = False, returnGradeLevelID = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every GradReqRankHighSchoolGradeLevel in the district.

    This function returns a dataframe of every GradReqRankHighSchoolGradeLevel in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradReqRankHighSchoolGradeLevel/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradReqRankHighSchoolGradeLevel/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getGradReqRankHighSchoolGradeLevel(GradReqRankHighSchoolGradeLevelID, EntityID = 1, returnGradReqRankHighSchoolGradeLevelID = False, returnCreatedTime = False, returnGPAMethodID = False, returnGradeLevelID = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradReqRankHighSchoolGradeLevel/" + str(GradReqRankHighSchoolGradeLevelID), verb = "get", return_params_list = return_params)

def modifyGradReqRankHighSchoolGradeLevel(GradReqRankHighSchoolGradeLevelID, EntityID = 1, setGradReqRankHighSchoolGradeLevelID = None, setCreatedTime = None, setGPAMethodID = None, setGradeLevelID = None, setModifiedTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnGradReqRankHighSchoolGradeLevelID = False, returnCreatedTime = False, returnGPAMethodID = False, returnGradeLevelID = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradReqRankHighSchoolGradeLevel/" + str(GradReqRankHighSchoolGradeLevelID), verb = "post", return_params_list = return_params, payload = payload_params)

def createGradReqRankHighSchoolGradeLevel(EntityID = 1, setGradReqRankHighSchoolGradeLevelID = None, setCreatedTime = None, setGPAMethodID = None, setGradeLevelID = None, setModifiedTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnGradReqRankHighSchoolGradeLevelID = False, returnCreatedTime = False, returnGPAMethodID = False, returnGradeLevelID = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradReqRankHighSchoolGradeLevel/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteGradReqRankHighSchoolGradeLevel(GradReqRankHighSchoolGradeLevelID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradReqRankHighSchoolGradeLevel/" + str(GradReqRankHighSchoolGradeLevelID), verb = "delete")


def getEveryGradReqRankSchoolYearIncludeLocalCredit(searchConditions = [], EntityID = 1, returnGradReqRankSchoolYearIncludeLocalCreditID = False, returnCreatedTime = False, returnGPAMethodID = False, returnModifiedTime = False, returnSchoolYearID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every GradReqRankSchoolYearIncludeLocalCredit in the district.

    This function returns a dataframe of every GradReqRankSchoolYearIncludeLocalCredit in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradReqRankSchoolYearIncludeLocalCredit/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradReqRankSchoolYearIncludeLocalCredit/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getGradReqRankSchoolYearIncludeLocalCredit(GradReqRankSchoolYearIncludeLocalCreditID, EntityID = 1, returnGradReqRankSchoolYearIncludeLocalCreditID = False, returnCreatedTime = False, returnGPAMethodID = False, returnModifiedTime = False, returnSchoolYearID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradReqRankSchoolYearIncludeLocalCredit/" + str(GradReqRankSchoolYearIncludeLocalCreditID), verb = "get", return_params_list = return_params)

def modifyGradReqRankSchoolYearIncludeLocalCredit(GradReqRankSchoolYearIncludeLocalCreditID, EntityID = 1, setGradReqRankSchoolYearIncludeLocalCreditID = None, setCreatedTime = None, setGPAMethodID = None, setModifiedTime = None, setSchoolYearID = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnGradReqRankSchoolYearIncludeLocalCreditID = False, returnCreatedTime = False, returnGPAMethodID = False, returnModifiedTime = False, returnSchoolYearID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradReqRankSchoolYearIncludeLocalCredit/" + str(GradReqRankSchoolYearIncludeLocalCreditID), verb = "post", return_params_list = return_params, payload = payload_params)

def createGradReqRankSchoolYearIncludeLocalCredit(EntityID = 1, setGradReqRankSchoolYearIncludeLocalCreditID = None, setCreatedTime = None, setGPAMethodID = None, setModifiedTime = None, setSchoolYearID = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnGradReqRankSchoolYearIncludeLocalCreditID = False, returnCreatedTime = False, returnGPAMethodID = False, returnModifiedTime = False, returnSchoolYearID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradReqRankSchoolYearIncludeLocalCredit/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteGradReqRankSchoolYearIncludeLocalCredit(GradReqRankSchoolYearIncludeLocalCreditID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradReqRankSchoolYearIncludeLocalCredit/" + str(GradReqRankSchoolYearIncludeLocalCreditID), verb = "delete")


def getEveryGradReqSubjectType(searchConditions = [], EntityID = 1, returnGradReqSubjectTypeID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictID = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every GradReqSubjectType in the district.

    This function returns a dataframe of every GradReqSubjectType in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradReqSubjectType/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradReqSubjectType/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getGradReqSubjectType(GradReqSubjectTypeID, EntityID = 1, returnGradReqSubjectTypeID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictID = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradReqSubjectType/" + str(GradReqSubjectTypeID), verb = "get", return_params_list = return_params)

def modifyGradReqSubjectType(GradReqSubjectTypeID, EntityID = 1, setGradReqSubjectTypeID = None, setCode = None, setCodeDescription = None, setCreatedTime = None, setDescription = None, setDistrictID = None, setModifiedTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnGradReqSubjectTypeID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictID = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradReqSubjectType/" + str(GradReqSubjectTypeID), verb = "post", return_params_list = return_params, payload = payload_params)

def createGradReqSubjectType(EntityID = 1, setGradReqSubjectTypeID = None, setCode = None, setCodeDescription = None, setCreatedTime = None, setDescription = None, setDistrictID = None, setModifiedTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnGradReqSubjectTypeID = False, returnCode = False, returnCodeDescription = False, returnCreatedTime = False, returnDescription = False, returnDistrictID = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradReqSubjectType/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteGradReqSubjectType(GradReqSubjectTypeID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/GradReqSubjectType/" + str(GradReqSubjectTypeID), verb = "delete")


def getEveryHonorRollRuleGPA(searchConditions = [], EntityID = 1, returnHonorRollRuleGPAID = False, returnCreatedTime = False, returnEntityGroupKey = False, returnEntityID = False, returnGPABucketID = False, returnGPAMethodID = False, returnGPAType = False, returnGPATypeCode = False, returnHonorRollRuleGPAIDClonedFrom = False, returnHonorRollRunLevelRuleID = False, returnMaximumGPA = False, returnMinimumGPA = False, returnModifiedTime = False, returnSchoolYearID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every HonorRollRuleGPA in the district.

    This function returns a dataframe of every HonorRollRuleGPA in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/HonorRollRuleGPA/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/HonorRollRuleGPA/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getHonorRollRuleGPA(HonorRollRuleGPAID, EntityID = 1, returnHonorRollRuleGPAID = False, returnCreatedTime = False, returnEntityGroupKey = False, returnEntityID = False, returnGPABucketID = False, returnGPAMethodID = False, returnGPAType = False, returnGPATypeCode = False, returnHonorRollRuleGPAIDClonedFrom = False, returnHonorRollRunLevelRuleID = False, returnMaximumGPA = False, returnMinimumGPA = False, returnModifiedTime = False, returnSchoolYearID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/HonorRollRuleGPA/" + str(HonorRollRuleGPAID), verb = "get", return_params_list = return_params)

def modifyHonorRollRuleGPA(HonorRollRuleGPAID, EntityID = 1, setHonorRollRuleGPAID = None, setCreatedTime = None, setEntityGroupKey = None, setEntityID = None, setGPABucketID = None, setGPAMethodID = None, setGPAType = None, setGPATypeCode = None, setHonorRollRuleGPAIDClonedFrom = None, setHonorRollRunLevelRuleID = None, setMaximumGPA = None, setMinimumGPA = None, setModifiedTime = None, setSchoolYearID = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnHonorRollRuleGPAID = False, returnCreatedTime = False, returnEntityGroupKey = False, returnEntityID = False, returnGPABucketID = False, returnGPAMethodID = False, returnGPAType = False, returnGPATypeCode = False, returnHonorRollRuleGPAIDClonedFrom = False, returnHonorRollRunLevelRuleID = False, returnMaximumGPA = False, returnMinimumGPA = False, returnModifiedTime = False, returnSchoolYearID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/HonorRollRuleGPA/" + str(HonorRollRuleGPAID), verb = "post", return_params_list = return_params, payload = payload_params)

def createHonorRollRuleGPA(EntityID = 1, setHonorRollRuleGPAID = None, setCreatedTime = None, setEntityGroupKey = None, setEntityID = None, setGPABucketID = None, setGPAMethodID = None, setGPAType = None, setGPATypeCode = None, setHonorRollRuleGPAIDClonedFrom = None, setHonorRollRunLevelRuleID = None, setMaximumGPA = None, setMinimumGPA = None, setModifiedTime = None, setSchoolYearID = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnHonorRollRuleGPAID = False, returnCreatedTime = False, returnEntityGroupKey = False, returnEntityID = False, returnGPABucketID = False, returnGPAMethodID = False, returnGPAType = False, returnGPATypeCode = False, returnHonorRollRuleGPAIDClonedFrom = False, returnHonorRollRunLevelRuleID = False, returnMaximumGPA = False, returnMinimumGPA = False, returnModifiedTime = False, returnSchoolYearID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/HonorRollRuleGPA/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteHonorRollRuleGPA(HonorRollRuleGPAID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/HonorRollRuleGPA/" + str(HonorRollRuleGPAID), verb = "delete")


def getEveryHonorRollRuleGradeMark(searchConditions = [], EntityID = 1, returnHonorRollRuleGradeMarkID = False, returnAllowException = False, returnCourseStandardFilterXML = False, returnCreatedTime = False, returnEntityGroupKey = False, returnEntityID = False, returnExclusionThreshold = False, returnHonorRollRuleGradeMarkIDClonedFrom = False, returnHonorRollRunLevelRuleID = False, returnInclusionType = False, returnInclusionTypeCode = False, returnModifiedTime = False, returnSchoolYearID = False, returnTotalAllowableExceptions = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every HonorRollRuleGradeMark in the district.

    This function returns a dataframe of every HonorRollRuleGradeMark in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/HonorRollRuleGradeMark/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/HonorRollRuleGradeMark/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getHonorRollRuleGradeMark(HonorRollRuleGradeMarkID, EntityID = 1, returnHonorRollRuleGradeMarkID = False, returnAllowException = False, returnCourseStandardFilterXML = False, returnCreatedTime = False, returnEntityGroupKey = False, returnEntityID = False, returnExclusionThreshold = False, returnHonorRollRuleGradeMarkIDClonedFrom = False, returnHonorRollRunLevelRuleID = False, returnInclusionType = False, returnInclusionTypeCode = False, returnModifiedTime = False, returnSchoolYearID = False, returnTotalAllowableExceptions = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/HonorRollRuleGradeMark/" + str(HonorRollRuleGradeMarkID), verb = "get", return_params_list = return_params)

def modifyHonorRollRuleGradeMark(HonorRollRuleGradeMarkID, EntityID = 1, setHonorRollRuleGradeMarkID = None, setAllowException = None, setCourseStandardFilterXML = None, setCreatedTime = None, setEntityGroupKey = None, setEntityID = None, setExclusionThreshold = None, setHonorRollRuleGradeMarkIDClonedFrom = None, setHonorRollRunLevelRuleID = None, setInclusionType = None, setInclusionTypeCode = None, setModifiedTime = None, setSchoolYearID = None, setTotalAllowableExceptions = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnHonorRollRuleGradeMarkID = False, returnAllowException = False, returnCourseStandardFilterXML = False, returnCreatedTime = False, returnEntityGroupKey = False, returnEntityID = False, returnExclusionThreshold = False, returnHonorRollRuleGradeMarkIDClonedFrom = False, returnHonorRollRunLevelRuleID = False, returnInclusionType = False, returnInclusionTypeCode = False, returnModifiedTime = False, returnSchoolYearID = False, returnTotalAllowableExceptions = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/HonorRollRuleGradeMark/" + str(HonorRollRuleGradeMarkID), verb = "post", return_params_list = return_params, payload = payload_params)

def createHonorRollRuleGradeMark(EntityID = 1, setHonorRollRuleGradeMarkID = None, setAllowException = None, setCourseStandardFilterXML = None, setCreatedTime = None, setEntityGroupKey = None, setEntityID = None, setExclusionThreshold = None, setHonorRollRuleGradeMarkIDClonedFrom = None, setHonorRollRunLevelRuleID = None, setInclusionType = None, setInclusionTypeCode = None, setModifiedTime = None, setSchoolYearID = None, setTotalAllowableExceptions = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnHonorRollRuleGradeMarkID = False, returnAllowException = False, returnCourseStandardFilterXML = False, returnCreatedTime = False, returnEntityGroupKey = False, returnEntityID = False, returnExclusionThreshold = False, returnHonorRollRuleGradeMarkIDClonedFrom = False, returnHonorRollRunLevelRuleID = False, returnInclusionType = False, returnInclusionTypeCode = False, returnModifiedTime = False, returnSchoolYearID = False, returnTotalAllowableExceptions = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/HonorRollRuleGradeMark/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteHonorRollRuleGradeMark(HonorRollRuleGradeMarkID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/HonorRollRuleGradeMark/" + str(HonorRollRuleGradeMarkID), verb = "delete")


def getEveryHonorRollRuleGradeMarkGradeBucket(searchConditions = [], EntityID = 1, returnHonorRollRuleGradeMarkGradeBucketID = False, returnCreatedTime = False, returnEntityGroupKey = False, returnEntityID = False, returnGradeBucketID = False, returnHonorRollRuleGradeMarkGradeBucketIDClonedFrom = False, returnHonorRollRuleGradeMarkID = False, returnModifiedTime = False, returnSchoolYearID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every HonorRollRuleGradeMarkGradeBucket in the district.

    This function returns a dataframe of every HonorRollRuleGradeMarkGradeBucket in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/HonorRollRuleGradeMarkGradeBucket/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/HonorRollRuleGradeMarkGradeBucket/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getHonorRollRuleGradeMarkGradeBucket(HonorRollRuleGradeMarkGradeBucketID, EntityID = 1, returnHonorRollRuleGradeMarkGradeBucketID = False, returnCreatedTime = False, returnEntityGroupKey = False, returnEntityID = False, returnGradeBucketID = False, returnHonorRollRuleGradeMarkGradeBucketIDClonedFrom = False, returnHonorRollRuleGradeMarkID = False, returnModifiedTime = False, returnSchoolYearID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/HonorRollRuleGradeMarkGradeBucket/" + str(HonorRollRuleGradeMarkGradeBucketID), verb = "get", return_params_list = return_params)

def modifyHonorRollRuleGradeMarkGradeBucket(HonorRollRuleGradeMarkGradeBucketID, EntityID = 1, setHonorRollRuleGradeMarkGradeBucketID = None, setCreatedTime = None, setEntityGroupKey = None, setEntityID = None, setGradeBucketID = None, setHonorRollRuleGradeMarkGradeBucketIDClonedFrom = None, setHonorRollRuleGradeMarkID = None, setModifiedTime = None, setSchoolYearID = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnHonorRollRuleGradeMarkGradeBucketID = False, returnCreatedTime = False, returnEntityGroupKey = False, returnEntityID = False, returnGradeBucketID = False, returnHonorRollRuleGradeMarkGradeBucketIDClonedFrom = False, returnHonorRollRuleGradeMarkID = False, returnModifiedTime = False, returnSchoolYearID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/HonorRollRuleGradeMarkGradeBucket/" + str(HonorRollRuleGradeMarkGradeBucketID), verb = "post", return_params_list = return_params, payload = payload_params)

def createHonorRollRuleGradeMarkGradeBucket(EntityID = 1, setHonorRollRuleGradeMarkGradeBucketID = None, setCreatedTime = None, setEntityGroupKey = None, setEntityID = None, setGradeBucketID = None, setHonorRollRuleGradeMarkGradeBucketIDClonedFrom = None, setHonorRollRuleGradeMarkID = None, setModifiedTime = None, setSchoolYearID = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnHonorRollRuleGradeMarkGradeBucketID = False, returnCreatedTime = False, returnEntityGroupKey = False, returnEntityID = False, returnGradeBucketID = False, returnHonorRollRuleGradeMarkGradeBucketIDClonedFrom = False, returnHonorRollRuleGradeMarkID = False, returnModifiedTime = False, returnSchoolYearID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/HonorRollRuleGradeMarkGradeBucket/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteHonorRollRuleGradeMarkGradeBucket(HonorRollRuleGradeMarkGradeBucketID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/HonorRollRuleGradeMarkGradeBucket/" + str(HonorRollRuleGradeMarkGradeBucketID), verb = "delete")


def getEveryHonorRollRuleGradeMarkGradeMark(searchConditions = [], EntityID = 1, returnHonorRollRuleGradeMarkGradeMarkID = False, returnCreatedTime = False, returnEntityGroupKey = False, returnEntityID = False, returnGradeMarkID = False, returnHonorRollRuleGradeMarkGradeMarkIDClonedFrom = False, returnHonorRollRuleGradeMarkID = False, returnIsException = False, returnModifiedTime = False, returnSchoolYearID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every HonorRollRuleGradeMarkGradeMark in the district.

    This function returns a dataframe of every HonorRollRuleGradeMarkGradeMark in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/HonorRollRuleGradeMarkGradeMark/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/HonorRollRuleGradeMarkGradeMark/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getHonorRollRuleGradeMarkGradeMark(HonorRollRuleGradeMarkGradeMarkID, EntityID = 1, returnHonorRollRuleGradeMarkGradeMarkID = False, returnCreatedTime = False, returnEntityGroupKey = False, returnEntityID = False, returnGradeMarkID = False, returnHonorRollRuleGradeMarkGradeMarkIDClonedFrom = False, returnHonorRollRuleGradeMarkID = False, returnIsException = False, returnModifiedTime = False, returnSchoolYearID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/HonorRollRuleGradeMarkGradeMark/" + str(HonorRollRuleGradeMarkGradeMarkID), verb = "get", return_params_list = return_params)

def modifyHonorRollRuleGradeMarkGradeMark(HonorRollRuleGradeMarkGradeMarkID, EntityID = 1, setHonorRollRuleGradeMarkGradeMarkID = None, setCreatedTime = None, setEntityGroupKey = None, setEntityID = None, setGradeMarkID = None, setHonorRollRuleGradeMarkGradeMarkIDClonedFrom = None, setHonorRollRuleGradeMarkID = None, setIsException = None, setModifiedTime = None, setSchoolYearID = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnHonorRollRuleGradeMarkGradeMarkID = False, returnCreatedTime = False, returnEntityGroupKey = False, returnEntityID = False, returnGradeMarkID = False, returnHonorRollRuleGradeMarkGradeMarkIDClonedFrom = False, returnHonorRollRuleGradeMarkID = False, returnIsException = False, returnModifiedTime = False, returnSchoolYearID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/HonorRollRuleGradeMarkGradeMark/" + str(HonorRollRuleGradeMarkGradeMarkID), verb = "post", return_params_list = return_params, payload = payload_params)

def createHonorRollRuleGradeMarkGradeMark(EntityID = 1, setHonorRollRuleGradeMarkGradeMarkID = None, setCreatedTime = None, setEntityGroupKey = None, setEntityID = None, setGradeMarkID = None, setHonorRollRuleGradeMarkGradeMarkIDClonedFrom = None, setHonorRollRuleGradeMarkID = None, setIsException = None, setModifiedTime = None, setSchoolYearID = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnHonorRollRuleGradeMarkGradeMarkID = False, returnCreatedTime = False, returnEntityGroupKey = False, returnEntityID = False, returnGradeMarkID = False, returnHonorRollRuleGradeMarkGradeMarkIDClonedFrom = False, returnHonorRollRuleGradeMarkID = False, returnIsException = False, returnModifiedTime = False, returnSchoolYearID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/HonorRollRuleGradeMarkGradeMark/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteHonorRollRuleGradeMarkGradeMark(HonorRollRuleGradeMarkGradeMarkID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/HonorRollRuleGradeMarkGradeMark/" + str(HonorRollRuleGradeMarkGradeMarkID), verb = "delete")


def getEveryHonorRollRulePriorHonorRoll(searchConditions = [], EntityID = 1, returnHonorRollRulePriorHonorRollID = False, returnCreatedTime = False, returnEntityGroupKey = False, returnEntityID = False, returnHonorRollLevelTotal = False, returnHonorRollRulePriorHonorRollIDClonedFrom = False, returnHonorRollRunLevelRuleID = False, returnModifiedTime = False, returnSchoolYearID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every HonorRollRulePriorHonorRoll in the district.

    This function returns a dataframe of every HonorRollRulePriorHonorRoll in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/HonorRollRulePriorHonorRoll/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/HonorRollRulePriorHonorRoll/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getHonorRollRulePriorHonorRoll(HonorRollRulePriorHonorRollID, EntityID = 1, returnHonorRollRulePriorHonorRollID = False, returnCreatedTime = False, returnEntityGroupKey = False, returnEntityID = False, returnHonorRollLevelTotal = False, returnHonorRollRulePriorHonorRollIDClonedFrom = False, returnHonorRollRunLevelRuleID = False, returnModifiedTime = False, returnSchoolYearID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/HonorRollRulePriorHonorRoll/" + str(HonorRollRulePriorHonorRollID), verb = "get", return_params_list = return_params)

def modifyHonorRollRulePriorHonorRoll(HonorRollRulePriorHonorRollID, EntityID = 1, setHonorRollRulePriorHonorRollID = None, setCreatedTime = None, setEntityGroupKey = None, setEntityID = None, setHonorRollLevelTotal = None, setHonorRollRulePriorHonorRollIDClonedFrom = None, setHonorRollRunLevelRuleID = None, setModifiedTime = None, setSchoolYearID = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnHonorRollRulePriorHonorRollID = False, returnCreatedTime = False, returnEntityGroupKey = False, returnEntityID = False, returnHonorRollLevelTotal = False, returnHonorRollRulePriorHonorRollIDClonedFrom = False, returnHonorRollRunLevelRuleID = False, returnModifiedTime = False, returnSchoolYearID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/HonorRollRulePriorHonorRoll/" + str(HonorRollRulePriorHonorRollID), verb = "post", return_params_list = return_params, payload = payload_params)

def createHonorRollRulePriorHonorRoll(EntityID = 1, setHonorRollRulePriorHonorRollID = None, setCreatedTime = None, setEntityGroupKey = None, setEntityID = None, setHonorRollLevelTotal = None, setHonorRollRulePriorHonorRollIDClonedFrom = None, setHonorRollRunLevelRuleID = None, setModifiedTime = None, setSchoolYearID = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnHonorRollRulePriorHonorRollID = False, returnCreatedTime = False, returnEntityGroupKey = False, returnEntityID = False, returnHonorRollLevelTotal = False, returnHonorRollRulePriorHonorRollIDClonedFrom = False, returnHonorRollRunLevelRuleID = False, returnModifiedTime = False, returnSchoolYearID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/HonorRollRulePriorHonorRoll/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteHonorRollRulePriorHonorRoll(HonorRollRulePriorHonorRollID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/HonorRollRulePriorHonorRoll/" + str(HonorRollRulePriorHonorRollID), verb = "delete")


def getEveryHonorRollRulePriorHonorRollLevel(searchConditions = [], EntityID = 1, returnHonorRollRulePriorHonorRollLevelID = False, returnCreatedTime = False, returnEntityGroupKey = False, returnEntityID = False, returnHonorRollRulePriorHonorRollID = False, returnHonorRollRulePriorHonorRollLevelIDClonedFrom = False, returnHonorRollRunLevelHistoryID = False, returnModifiedTime = False, returnSchoolYearID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every HonorRollRulePriorHonorRollLevel in the district.

    This function returns a dataframe of every HonorRollRulePriorHonorRollLevel in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/HonorRollRulePriorHonorRollLevel/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/HonorRollRulePriorHonorRollLevel/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getHonorRollRulePriorHonorRollLevel(HonorRollRulePriorHonorRollLevelID, EntityID = 1, returnHonorRollRulePriorHonorRollLevelID = False, returnCreatedTime = False, returnEntityGroupKey = False, returnEntityID = False, returnHonorRollRulePriorHonorRollID = False, returnHonorRollRulePriorHonorRollLevelIDClonedFrom = False, returnHonorRollRunLevelHistoryID = False, returnModifiedTime = False, returnSchoolYearID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/HonorRollRulePriorHonorRollLevel/" + str(HonorRollRulePriorHonorRollLevelID), verb = "get", return_params_list = return_params)

def modifyHonorRollRulePriorHonorRollLevel(HonorRollRulePriorHonorRollLevelID, EntityID = 1, setHonorRollRulePriorHonorRollLevelID = None, setCreatedTime = None, setEntityGroupKey = None, setEntityID = None, setHonorRollRulePriorHonorRollID = None, setHonorRollRulePriorHonorRollLevelIDClonedFrom = None, setHonorRollRunLevelHistoryID = None, setModifiedTime = None, setSchoolYearID = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnHonorRollRulePriorHonorRollLevelID = False, returnCreatedTime = False, returnEntityGroupKey = False, returnEntityID = False, returnHonorRollRulePriorHonorRollID = False, returnHonorRollRulePriorHonorRollLevelIDClonedFrom = False, returnHonorRollRunLevelHistoryID = False, returnModifiedTime = False, returnSchoolYearID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/HonorRollRulePriorHonorRollLevel/" + str(HonorRollRulePriorHonorRollLevelID), verb = "post", return_params_list = return_params, payload = payload_params)

def createHonorRollRulePriorHonorRollLevel(EntityID = 1, setHonorRollRulePriorHonorRollLevelID = None, setCreatedTime = None, setEntityGroupKey = None, setEntityID = None, setHonorRollRulePriorHonorRollID = None, setHonorRollRulePriorHonorRollLevelIDClonedFrom = None, setHonorRollRunLevelHistoryID = None, setModifiedTime = None, setSchoolYearID = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnHonorRollRulePriorHonorRollLevelID = False, returnCreatedTime = False, returnEntityGroupKey = False, returnEntityID = False, returnHonorRollRulePriorHonorRollID = False, returnHonorRollRulePriorHonorRollLevelIDClonedFrom = False, returnHonorRollRunLevelHistoryID = False, returnModifiedTime = False, returnSchoolYearID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/HonorRollRulePriorHonorRollLevel/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteHonorRollRulePriorHonorRollLevel(HonorRollRulePriorHonorRollLevelID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/HonorRollRulePriorHonorRollLevel/" + str(HonorRollRulePriorHonorRollLevelID), verb = "delete")


def getEveryHonorRollRun(searchConditions = [], EntityID = 1, returnHonorRollRunID = False, returnAllowMultipleHonorRollLevels = False, returnContainsGPARule = False, returnCreatedTime = False, returnDisplayGPAForHonorRoll = False, returnEntityGroupKey = False, returnEntityID = False, returnGPABucketIDToDisplay = False, returnGPAMethodIDToDisplay = False, returnGPATypeToDisplay = False, returnGPATypeToDisplayCode = False, returnHonorRollRunIDClonedFrom = False, returnIsActive = False, returnModifiedTime = False, returnName = False, returnSchoolYearID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every HonorRollRun in the district.

    This function returns a dataframe of every HonorRollRun in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/HonorRollRun/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/HonorRollRun/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getHonorRollRun(HonorRollRunID, EntityID = 1, returnHonorRollRunID = False, returnAllowMultipleHonorRollLevels = False, returnContainsGPARule = False, returnCreatedTime = False, returnDisplayGPAForHonorRoll = False, returnEntityGroupKey = False, returnEntityID = False, returnGPABucketIDToDisplay = False, returnGPAMethodIDToDisplay = False, returnGPATypeToDisplay = False, returnGPATypeToDisplayCode = False, returnHonorRollRunIDClonedFrom = False, returnIsActive = False, returnModifiedTime = False, returnName = False, returnSchoolYearID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/HonorRollRun/" + str(HonorRollRunID), verb = "get", return_params_list = return_params)

def modifyHonorRollRun(HonorRollRunID, EntityID = 1, setHonorRollRunID = None, setAllowMultipleHonorRollLevels = None, setContainsGPARule = None, setCreatedTime = None, setDisplayGPAForHonorRoll = None, setEntityGroupKey = None, setEntityID = None, setGPABucketIDToDisplay = None, setGPAMethodIDToDisplay = None, setGPATypeToDisplay = None, setGPATypeToDisplayCode = None, setHonorRollRunIDClonedFrom = None, setIsActive = None, setModifiedTime = None, setName = None, setSchoolYearID = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnHonorRollRunID = False, returnAllowMultipleHonorRollLevels = False, returnContainsGPARule = False, returnCreatedTime = False, returnDisplayGPAForHonorRoll = False, returnEntityGroupKey = False, returnEntityID = False, returnGPABucketIDToDisplay = False, returnGPAMethodIDToDisplay = False, returnGPATypeToDisplay = False, returnGPATypeToDisplayCode = False, returnHonorRollRunIDClonedFrom = False, returnIsActive = False, returnModifiedTime = False, returnName = False, returnSchoolYearID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/HonorRollRun/" + str(HonorRollRunID), verb = "post", return_params_list = return_params, payload = payload_params)

def createHonorRollRun(EntityID = 1, setHonorRollRunID = None, setAllowMultipleHonorRollLevels = None, setContainsGPARule = None, setCreatedTime = None, setDisplayGPAForHonorRoll = None, setEntityGroupKey = None, setEntityID = None, setGPABucketIDToDisplay = None, setGPAMethodIDToDisplay = None, setGPATypeToDisplay = None, setGPATypeToDisplayCode = None, setHonorRollRunIDClonedFrom = None, setIsActive = None, setModifiedTime = None, setName = None, setSchoolYearID = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnHonorRollRunID = False, returnAllowMultipleHonorRollLevels = False, returnContainsGPARule = False, returnCreatedTime = False, returnDisplayGPAForHonorRoll = False, returnEntityGroupKey = False, returnEntityID = False, returnGPABucketIDToDisplay = False, returnGPAMethodIDToDisplay = False, returnGPATypeToDisplay = False, returnGPATypeToDisplayCode = False, returnHonorRollRunIDClonedFrom = False, returnIsActive = False, returnModifiedTime = False, returnName = False, returnSchoolYearID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/HonorRollRun/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteHonorRollRun(HonorRollRunID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/HonorRollRun/" + str(HonorRollRunID), verb = "delete")


def getEveryHonorRollRunHistory(searchConditions = [], EntityID = 1, returnHonorRollRunHistoryID = False, returnCalculation = False, returnCalculationCode = False, returnCreatedTime = False, returnDate = False, returnDescription = False, returnGPAAsOfDate = False, returnHonorRollRunID = False, returnModifiedTime = False, returnNameDescription = False, returnStudentFilterParameter = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every HonorRollRunHistory in the district.

    This function returns a dataframe of every HonorRollRunHistory in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/HonorRollRunHistory/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/HonorRollRunHistory/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getHonorRollRunHistory(HonorRollRunHistoryID, EntityID = 1, returnHonorRollRunHistoryID = False, returnCalculation = False, returnCalculationCode = False, returnCreatedTime = False, returnDate = False, returnDescription = False, returnGPAAsOfDate = False, returnHonorRollRunID = False, returnModifiedTime = False, returnNameDescription = False, returnStudentFilterParameter = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/HonorRollRunHistory/" + str(HonorRollRunHistoryID), verb = "get", return_params_list = return_params)

def modifyHonorRollRunHistory(HonorRollRunHistoryID, EntityID = 1, setHonorRollRunHistoryID = None, setCalculation = None, setCalculationCode = None, setCreatedTime = None, setDate = None, setDescription = None, setGPAAsOfDate = None, setHonorRollRunID = None, setModifiedTime = None, setNameDescription = None, setStudentFilterParameter = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnHonorRollRunHistoryID = False, returnCalculation = False, returnCalculationCode = False, returnCreatedTime = False, returnDate = False, returnDescription = False, returnGPAAsOfDate = False, returnHonorRollRunID = False, returnModifiedTime = False, returnNameDescription = False, returnStudentFilterParameter = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/HonorRollRunHistory/" + str(HonorRollRunHistoryID), verb = "post", return_params_list = return_params, payload = payload_params)

def createHonorRollRunHistory(EntityID = 1, setHonorRollRunHistoryID = None, setCalculation = None, setCalculationCode = None, setCreatedTime = None, setDate = None, setDescription = None, setGPAAsOfDate = None, setHonorRollRunID = None, setModifiedTime = None, setNameDescription = None, setStudentFilterParameter = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnHonorRollRunHistoryID = False, returnCalculation = False, returnCalculationCode = False, returnCreatedTime = False, returnDate = False, returnDescription = False, returnGPAAsOfDate = False, returnHonorRollRunID = False, returnModifiedTime = False, returnNameDescription = False, returnStudentFilterParameter = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/HonorRollRunHistory/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteHonorRollRunHistory(HonorRollRunHistoryID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/HonorRollRunHistory/" + str(HonorRollRunHistoryID), verb = "delete")


def getEveryHonorRollRunLevel(searchConditions = [], EntityID = 1, returnHonorRollRunLevelID = False, returnCreatedTime = False, returnEntityGroupKey = False, returnEntityID = False, returnHonorRollRunID = False, returnHonorRollRunLevelIDClonedFrom = False, returnHonorRollRunNameName = False, returnModifiedTime = False, returnName = False, returnOrder = False, returnRulesParameterDescription = False, returnSchoolYearID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every HonorRollRunLevel in the district.

    This function returns a dataframe of every HonorRollRunLevel in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/HonorRollRunLevel/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/HonorRollRunLevel/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getHonorRollRunLevel(HonorRollRunLevelID, EntityID = 1, returnHonorRollRunLevelID = False, returnCreatedTime = False, returnEntityGroupKey = False, returnEntityID = False, returnHonorRollRunID = False, returnHonorRollRunLevelIDClonedFrom = False, returnHonorRollRunNameName = False, returnModifiedTime = False, returnName = False, returnOrder = False, returnRulesParameterDescription = False, returnSchoolYearID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/HonorRollRunLevel/" + str(HonorRollRunLevelID), verb = "get", return_params_list = return_params)

def modifyHonorRollRunLevel(HonorRollRunLevelID, EntityID = 1, setHonorRollRunLevelID = None, setCreatedTime = None, setEntityGroupKey = None, setEntityID = None, setHonorRollRunID = None, setHonorRollRunLevelIDClonedFrom = None, setHonorRollRunNameName = None, setModifiedTime = None, setName = None, setOrder = None, setRulesParameterDescription = None, setSchoolYearID = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnHonorRollRunLevelID = False, returnCreatedTime = False, returnEntityGroupKey = False, returnEntityID = False, returnHonorRollRunID = False, returnHonorRollRunLevelIDClonedFrom = False, returnHonorRollRunNameName = False, returnModifiedTime = False, returnName = False, returnOrder = False, returnRulesParameterDescription = False, returnSchoolYearID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/HonorRollRunLevel/" + str(HonorRollRunLevelID), verb = "post", return_params_list = return_params, payload = payload_params)

def createHonorRollRunLevel(EntityID = 1, setHonorRollRunLevelID = None, setCreatedTime = None, setEntityGroupKey = None, setEntityID = None, setHonorRollRunID = None, setHonorRollRunLevelIDClonedFrom = None, setHonorRollRunNameName = None, setModifiedTime = None, setName = None, setOrder = None, setRulesParameterDescription = None, setSchoolYearID = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnHonorRollRunLevelID = False, returnCreatedTime = False, returnEntityGroupKey = False, returnEntityID = False, returnHonorRollRunID = False, returnHonorRollRunLevelIDClonedFrom = False, returnHonorRollRunNameName = False, returnModifiedTime = False, returnName = False, returnOrder = False, returnRulesParameterDescription = False, returnSchoolYearID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/HonorRollRunLevel/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteHonorRollRunLevel(HonorRollRunLevelID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/HonorRollRunLevel/" + str(HonorRollRunLevelID), verb = "delete")


def getEveryHonorRollRunLevelHistory(searchConditions = [], EntityID = 1, returnHonorRollRunLevelHistoryID = False, returnCreatedTime = False, returnEntitySchoolYearHonorRollRunLevelName = False, returnHonorRollRunHistoryID = False, returnHonorRollRunLevelID = False, returnModifiedTime = False, returnParameterDescription = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every HonorRollRunLevelHistory in the district.

    This function returns a dataframe of every HonorRollRunLevelHistory in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/HonorRollRunLevelHistory/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/HonorRollRunLevelHistory/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getHonorRollRunLevelHistory(HonorRollRunLevelHistoryID, EntityID = 1, returnHonorRollRunLevelHistoryID = False, returnCreatedTime = False, returnEntitySchoolYearHonorRollRunLevelName = False, returnHonorRollRunHistoryID = False, returnHonorRollRunLevelID = False, returnModifiedTime = False, returnParameterDescription = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/HonorRollRunLevelHistory/" + str(HonorRollRunLevelHistoryID), verb = "get", return_params_list = return_params)

def modifyHonorRollRunLevelHistory(HonorRollRunLevelHistoryID, EntityID = 1, setHonorRollRunLevelHistoryID = None, setCreatedTime = None, setEntitySchoolYearHonorRollRunLevelName = None, setHonorRollRunHistoryID = None, setHonorRollRunLevelID = None, setModifiedTime = None, setParameterDescription = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnHonorRollRunLevelHistoryID = False, returnCreatedTime = False, returnEntitySchoolYearHonorRollRunLevelName = False, returnHonorRollRunHistoryID = False, returnHonorRollRunLevelID = False, returnModifiedTime = False, returnParameterDescription = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/HonorRollRunLevelHistory/" + str(HonorRollRunLevelHistoryID), verb = "post", return_params_list = return_params, payload = payload_params)

def createHonorRollRunLevelHistory(EntityID = 1, setHonorRollRunLevelHistoryID = None, setCreatedTime = None, setEntitySchoolYearHonorRollRunLevelName = None, setHonorRollRunHistoryID = None, setHonorRollRunLevelID = None, setModifiedTime = None, setParameterDescription = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnHonorRollRunLevelHistoryID = False, returnCreatedTime = False, returnEntitySchoolYearHonorRollRunLevelName = False, returnHonorRollRunHistoryID = False, returnHonorRollRunLevelID = False, returnModifiedTime = False, returnParameterDescription = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/HonorRollRunLevelHistory/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteHonorRollRunLevelHistory(HonorRollRunLevelHistoryID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/HonorRollRunLevelHistory/" + str(HonorRollRunLevelHistoryID), verb = "delete")


def getEveryHonorRollRunLevelRule(searchConditions = [], EntityID = 1, returnHonorRollRunLevelRuleID = False, returnCreatedTime = False, returnEntityGroupKey = False, returnEntityID = False, returnHonorRollRunLevelID = False, returnHonorRollRunLevelRuleIDClonedFrom = False, returnModifiedTime = False, returnOrder = False, returnParameterDescription = False, returnRuleType = False, returnRuleTypeCode = False, returnSchoolYearID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every HonorRollRunLevelRule in the district.

    This function returns a dataframe of every HonorRollRunLevelRule in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/HonorRollRunLevelRule/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/HonorRollRunLevelRule/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getHonorRollRunLevelRule(HonorRollRunLevelRuleID, EntityID = 1, returnHonorRollRunLevelRuleID = False, returnCreatedTime = False, returnEntityGroupKey = False, returnEntityID = False, returnHonorRollRunLevelID = False, returnHonorRollRunLevelRuleIDClonedFrom = False, returnModifiedTime = False, returnOrder = False, returnParameterDescription = False, returnRuleType = False, returnRuleTypeCode = False, returnSchoolYearID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/HonorRollRunLevelRule/" + str(HonorRollRunLevelRuleID), verb = "get", return_params_list = return_params)

def modifyHonorRollRunLevelRule(HonorRollRunLevelRuleID, EntityID = 1, setHonorRollRunLevelRuleID = None, setCreatedTime = None, setEntityGroupKey = None, setEntityID = None, setHonorRollRunLevelID = None, setHonorRollRunLevelRuleIDClonedFrom = None, setModifiedTime = None, setOrder = None, setParameterDescription = None, setRuleType = None, setRuleTypeCode = None, setSchoolYearID = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnHonorRollRunLevelRuleID = False, returnCreatedTime = False, returnEntityGroupKey = False, returnEntityID = False, returnHonorRollRunLevelID = False, returnHonorRollRunLevelRuleIDClonedFrom = False, returnModifiedTime = False, returnOrder = False, returnParameterDescription = False, returnRuleType = False, returnRuleTypeCode = False, returnSchoolYearID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/HonorRollRunLevelRule/" + str(HonorRollRunLevelRuleID), verb = "post", return_params_list = return_params, payload = payload_params)

def createHonorRollRunLevelRule(EntityID = 1, setHonorRollRunLevelRuleID = None, setCreatedTime = None, setEntityGroupKey = None, setEntityID = None, setHonorRollRunLevelID = None, setHonorRollRunLevelRuleIDClonedFrom = None, setModifiedTime = None, setOrder = None, setParameterDescription = None, setRuleType = None, setRuleTypeCode = None, setSchoolYearID = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnHonorRollRunLevelRuleID = False, returnCreatedTime = False, returnEntityGroupKey = False, returnEntityID = False, returnHonorRollRunLevelID = False, returnHonorRollRunLevelRuleIDClonedFrom = False, returnModifiedTime = False, returnOrder = False, returnParameterDescription = False, returnRuleType = False, returnRuleTypeCode = False, returnSchoolYearID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/HonorRollRunLevelRule/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteHonorRollRunLevelRule(HonorRollRunLevelRuleID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/HonorRollRunLevelRule/" + str(HonorRollRunLevelRuleID), verb = "delete")


def getEveryPointSet(searchConditions = [], EntityID = 1, returnPointSetID = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnModifiedTime = False, returnName = False, returnNameDescription = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every PointSet in the district.

    This function returns a dataframe of every PointSet in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/PointSet/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/PointSet/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getPointSet(PointSetID, EntityID = 1, returnPointSetID = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnModifiedTime = False, returnName = False, returnNameDescription = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/PointSet/" + str(PointSetID), verb = "get", return_params_list = return_params)

def modifyPointSet(PointSetID, EntityID = 1, setPointSetID = None, setCreatedTime = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setModifiedTime = None, setName = None, setNameDescription = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnPointSetID = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnModifiedTime = False, returnName = False, returnNameDescription = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/PointSet/" + str(PointSetID), verb = "post", return_params_list = return_params, payload = payload_params)

def createPointSet(EntityID = 1, setPointSetID = None, setCreatedTime = None, setDescription = None, setDistrictGroupKey = None, setDistrictID = None, setModifiedTime = None, setName = None, setNameDescription = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnPointSetID = False, returnCreatedTime = False, returnDescription = False, returnDistrictGroupKey = False, returnDistrictID = False, returnModifiedTime = False, returnName = False, returnNameDescription = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/PointSet/", verb = "put", return_params_list = return_params, payload = payload_params)

def deletePointSet(PointSetID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/PointSet/" + str(PointSetID), verb = "delete")


def getEveryPointSetEntity(searchConditions = [], EntityID = 1, returnPointSetEntityID = False, returnApplyFactorBasedAddOn = False, returnCreatedTime = False, returnDisplayOrder = False, returnEntityGroupKey = False, returnEntityID = False, returnIsDefault = False, returnIsWeighted = False, returnModifiedTime = False, returnPointSetEntityIDClonedFrom = False, returnPointSetID = False, returnSchoolYearID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every PointSetEntity in the district.

    This function returns a dataframe of every PointSetEntity in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/PointSetEntity/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/PointSetEntity/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getPointSetEntity(PointSetEntityID, EntityID = 1, returnPointSetEntityID = False, returnApplyFactorBasedAddOn = False, returnCreatedTime = False, returnDisplayOrder = False, returnEntityGroupKey = False, returnEntityID = False, returnIsDefault = False, returnIsWeighted = False, returnModifiedTime = False, returnPointSetEntityIDClonedFrom = False, returnPointSetID = False, returnSchoolYearID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/PointSetEntity/" + str(PointSetEntityID), verb = "get", return_params_list = return_params)

def modifyPointSetEntity(PointSetEntityID, EntityID = 1, setPointSetEntityID = None, setApplyFactorBasedAddOn = None, setCreatedTime = None, setDisplayOrder = None, setEntityGroupKey = None, setEntityID = None, setIsDefault = None, setIsWeighted = None, setModifiedTime = None, setPointSetEntityIDClonedFrom = None, setPointSetID = None, setSchoolYearID = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnPointSetEntityID = False, returnApplyFactorBasedAddOn = False, returnCreatedTime = False, returnDisplayOrder = False, returnEntityGroupKey = False, returnEntityID = False, returnIsDefault = False, returnIsWeighted = False, returnModifiedTime = False, returnPointSetEntityIDClonedFrom = False, returnPointSetID = False, returnSchoolYearID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/PointSetEntity/" + str(PointSetEntityID), verb = "post", return_params_list = return_params, payload = payload_params)

def createPointSetEntity(EntityID = 1, setPointSetEntityID = None, setApplyFactorBasedAddOn = None, setCreatedTime = None, setDisplayOrder = None, setEntityGroupKey = None, setEntityID = None, setIsDefault = None, setIsWeighted = None, setModifiedTime = None, setPointSetEntityIDClonedFrom = None, setPointSetID = None, setSchoolYearID = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnPointSetEntityID = False, returnApplyFactorBasedAddOn = False, returnCreatedTime = False, returnDisplayOrder = False, returnEntityGroupKey = False, returnEntityID = False, returnIsDefault = False, returnIsWeighted = False, returnModifiedTime = False, returnPointSetEntityIDClonedFrom = False, returnPointSetID = False, returnSchoolYearID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/PointSetEntity/", verb = "put", return_params_list = return_params, payload = payload_params)

def deletePointSetEntity(PointSetEntityID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/PointSetEntity/" + str(PointSetEntityID), verb = "delete")


def getEveryQueuedGPACalculation(searchConditions = [], EntityID = 1, returnQueuedGPACalculationID = False, returnCreatedTime = False, returnEndTime = False, returnEntityID = False, returnHostName = False, returnModifiedTime = False, returnProcessID = False, returnSchoolYearID = False, returnSkipCredits = False, returnSourcePrimaryKey = False, returnSourceType = False, returnSourceTypeCode = False, returnStartTime = False, returnStatus = False, returnStatusCode = False, returnThreadName = False, returnUserIDCreatedBy = False, returnUserIDImpersonator = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every QueuedGPACalculation in the district.

    This function returns a dataframe of every QueuedGPACalculation in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/QueuedGPACalculation/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/QueuedGPACalculation/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getQueuedGPACalculation(QueuedGPACalculationID, EntityID = 1, returnQueuedGPACalculationID = False, returnCreatedTime = False, returnEndTime = False, returnEntityID = False, returnHostName = False, returnModifiedTime = False, returnProcessID = False, returnSchoolYearID = False, returnSkipCredits = False, returnSourcePrimaryKey = False, returnSourceType = False, returnSourceTypeCode = False, returnStartTime = False, returnStatus = False, returnStatusCode = False, returnThreadName = False, returnUserIDCreatedBy = False, returnUserIDImpersonator = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/QueuedGPACalculation/" + str(QueuedGPACalculationID), verb = "get", return_params_list = return_params)

def modifyQueuedGPACalculation(QueuedGPACalculationID, EntityID = 1, setQueuedGPACalculationID = None, setCreatedTime = None, setEndTime = None, setEntityID = None, setHostName = None, setModifiedTime = None, setProcessID = None, setSchoolYearID = None, setSkipCredits = None, setSourcePrimaryKey = None, setSourceType = None, setSourceTypeCode = None, setStartTime = None, setStatus = None, setStatusCode = None, setThreadName = None, setUserIDCreatedBy = None, setUserIDImpersonator = None, setUserIDModifiedBy = None, returnQueuedGPACalculationID = False, returnCreatedTime = False, returnEndTime = False, returnEntityID = False, returnHostName = False, returnModifiedTime = False, returnProcessID = False, returnSchoolYearID = False, returnSkipCredits = False, returnSourcePrimaryKey = False, returnSourceType = False, returnSourceTypeCode = False, returnStartTime = False, returnStatus = False, returnStatusCode = False, returnThreadName = False, returnUserIDCreatedBy = False, returnUserIDImpersonator = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/QueuedGPACalculation/" + str(QueuedGPACalculationID), verb = "post", return_params_list = return_params, payload = payload_params)

def createQueuedGPACalculation(EntityID = 1, setQueuedGPACalculationID = None, setCreatedTime = None, setEndTime = None, setEntityID = None, setHostName = None, setModifiedTime = None, setProcessID = None, setSchoolYearID = None, setSkipCredits = None, setSourcePrimaryKey = None, setSourceType = None, setSourceTypeCode = None, setStartTime = None, setStatus = None, setStatusCode = None, setThreadName = None, setUserIDCreatedBy = None, setUserIDImpersonator = None, setUserIDModifiedBy = None, returnQueuedGPACalculationID = False, returnCreatedTime = False, returnEndTime = False, returnEntityID = False, returnHostName = False, returnModifiedTime = False, returnProcessID = False, returnSchoolYearID = False, returnSkipCredits = False, returnSourcePrimaryKey = False, returnSourceType = False, returnSourceTypeCode = False, returnStartTime = False, returnStatus = False, returnStatusCode = False, returnThreadName = False, returnUserIDCreatedBy = False, returnUserIDImpersonator = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/QueuedGPACalculation/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteQueuedGPACalculation(QueuedGPACalculationID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/QueuedGPACalculation/" + str(QueuedGPACalculationID), verb = "delete")


def getEveryRankMethod(searchConditions = [], EntityID = 1, returnRankMethodID = False, returnCreatedTime = False, returnDistrictGroupKey = False, returnGPABucketID = False, returnGPAMethodID = False, returnGPAType = False, returnGPATypeCode = False, returnIncludeNonRankedStudents = False, returnIsActive = False, returnModifiedTime = False, returnName = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnValueRangeHigh = False, returnValueRangeLow = False, returnValueRangeType = False, returnValueRangeTypeCode = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every RankMethod in the district.

    This function returns a dataframe of every RankMethod in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/RankMethod/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/RankMethod/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getRankMethod(RankMethodID, EntityID = 1, returnRankMethodID = False, returnCreatedTime = False, returnDistrictGroupKey = False, returnGPABucketID = False, returnGPAMethodID = False, returnGPAType = False, returnGPATypeCode = False, returnIncludeNonRankedStudents = False, returnIsActive = False, returnModifiedTime = False, returnName = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnValueRangeHigh = False, returnValueRangeLow = False, returnValueRangeType = False, returnValueRangeTypeCode = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/RankMethod/" + str(RankMethodID), verb = "get", return_params_list = return_params)

def modifyRankMethod(RankMethodID, EntityID = 1, setRankMethodID = None, setCreatedTime = None, setDistrictGroupKey = None, setGPABucketID = None, setGPAMethodID = None, setGPAType = None, setGPATypeCode = None, setIncludeNonRankedStudents = None, setIsActive = None, setModifiedTime = None, setName = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, setValueRangeHigh = None, setValueRangeLow = None, setValueRangeType = None, setValueRangeTypeCode = None, returnRankMethodID = False, returnCreatedTime = False, returnDistrictGroupKey = False, returnGPABucketID = False, returnGPAMethodID = False, returnGPAType = False, returnGPATypeCode = False, returnIncludeNonRankedStudents = False, returnIsActive = False, returnModifiedTime = False, returnName = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnValueRangeHigh = False, returnValueRangeLow = False, returnValueRangeType = False, returnValueRangeTypeCode = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/RankMethod/" + str(RankMethodID), verb = "post", return_params_list = return_params, payload = payload_params)

def createRankMethod(EntityID = 1, setRankMethodID = None, setCreatedTime = None, setDistrictGroupKey = None, setGPABucketID = None, setGPAMethodID = None, setGPAType = None, setGPATypeCode = None, setIncludeNonRankedStudents = None, setIsActive = None, setModifiedTime = None, setName = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, setValueRangeHigh = None, setValueRangeLow = None, setValueRangeType = None, setValueRangeTypeCode = None, returnRankMethodID = False, returnCreatedTime = False, returnDistrictGroupKey = False, returnGPABucketID = False, returnGPAMethodID = False, returnGPAType = False, returnGPATypeCode = False, returnIncludeNonRankedStudents = False, returnIsActive = False, returnModifiedTime = False, returnName = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnValueRangeHigh = False, returnValueRangeLow = False, returnValueRangeType = False, returnValueRangeTypeCode = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/RankMethod/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteRankMethod(RankMethodID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/RankMethod/" + str(RankMethodID), verb = "delete")


def getEveryRankRunHistory(searchConditions = [], EntityID = 1, returnRankRunHistoryID = False, returnCalculation = False, returnCalculationCode = False, returnCreatedTime = False, returnDate = False, returnDescription = False, returnEntityID = False, returnFriendlyParameterDescription = False, returnFullGroupingDescription = False, returnGPAAsOfDate = False, returnGradeLevelIDCohort = False, returnModifiedTime = False, returnParameterDescription = False, returnRankMethodID = False, returnSchoolYearID = False, returnStudentGroup = False, returnStudentGroupCode = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every RankRunHistory in the district.

    This function returns a dataframe of every RankRunHistory in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/RankRunHistory/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/RankRunHistory/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getRankRunHistory(RankRunHistoryID, EntityID = 1, returnRankRunHistoryID = False, returnCalculation = False, returnCalculationCode = False, returnCreatedTime = False, returnDate = False, returnDescription = False, returnEntityID = False, returnFriendlyParameterDescription = False, returnFullGroupingDescription = False, returnGPAAsOfDate = False, returnGradeLevelIDCohort = False, returnModifiedTime = False, returnParameterDescription = False, returnRankMethodID = False, returnSchoolYearID = False, returnStudentGroup = False, returnStudentGroupCode = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/RankRunHistory/" + str(RankRunHistoryID), verb = "get", return_params_list = return_params)

def modifyRankRunHistory(RankRunHistoryID, EntityID = 1, setRankRunHistoryID = None, setCalculation = None, setCalculationCode = None, setCreatedTime = None, setDate = None, setDescription = None, setEntityID = None, setFriendlyParameterDescription = None, setFullGroupingDescription = None, setGPAAsOfDate = None, setGradeLevelIDCohort = None, setModifiedTime = None, setParameterDescription = None, setRankMethodID = None, setSchoolYearID = None, setStudentGroup = None, setStudentGroupCode = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnRankRunHistoryID = False, returnCalculation = False, returnCalculationCode = False, returnCreatedTime = False, returnDate = False, returnDescription = False, returnEntityID = False, returnFriendlyParameterDescription = False, returnFullGroupingDescription = False, returnGPAAsOfDate = False, returnGradeLevelIDCohort = False, returnModifiedTime = False, returnParameterDescription = False, returnRankMethodID = False, returnSchoolYearID = False, returnStudentGroup = False, returnStudentGroupCode = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/RankRunHistory/" + str(RankRunHistoryID), verb = "post", return_params_list = return_params, payload = payload_params)

def createRankRunHistory(EntityID = 1, setRankRunHistoryID = None, setCalculation = None, setCalculationCode = None, setCreatedTime = None, setDate = None, setDescription = None, setEntityID = None, setFriendlyParameterDescription = None, setFullGroupingDescription = None, setGPAAsOfDate = None, setGradeLevelIDCohort = None, setModifiedTime = None, setParameterDescription = None, setRankMethodID = None, setSchoolYearID = None, setStudentGroup = None, setStudentGroupCode = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnRankRunHistoryID = False, returnCalculation = False, returnCalculationCode = False, returnCreatedTime = False, returnDate = False, returnDescription = False, returnEntityID = False, returnFriendlyParameterDescription = False, returnFullGroupingDescription = False, returnGPAAsOfDate = False, returnGradeLevelIDCohort = False, returnModifiedTime = False, returnParameterDescription = False, returnRankMethodID = False, returnSchoolYearID = False, returnStudentGroup = False, returnStudentGroupCode = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/RankRunHistory/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteRankRunHistory(RankRunHistoryID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/RankRunHistory/" + str(RankRunHistoryID), verb = "delete")


def getEverySectionLengthGPABucket(searchConditions = [], EntityID = 1, returnSectionLengthGPABucketID = False, returnCreatedTime = False, returnEntityGroupKey = False, returnGPABucketEntityID = False, returnIsUpToDate = False, returnModifiedTime = False, returnSectionLengthGPABucketIDClonedFrom = False, returnSectionLengthID = False, returnStatus = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every SectionLengthGPABucket in the district.

    This function returns a dataframe of every SectionLengthGPABucket in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/SectionLengthGPABucket/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/SectionLengthGPABucket/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getSectionLengthGPABucket(SectionLengthGPABucketID, EntityID = 1, returnSectionLengthGPABucketID = False, returnCreatedTime = False, returnEntityGroupKey = False, returnGPABucketEntityID = False, returnIsUpToDate = False, returnModifiedTime = False, returnSectionLengthGPABucketIDClonedFrom = False, returnSectionLengthID = False, returnStatus = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/SectionLengthGPABucket/" + str(SectionLengthGPABucketID), verb = "get", return_params_list = return_params)

def modifySectionLengthGPABucket(SectionLengthGPABucketID, EntityID = 1, setSectionLengthGPABucketID = None, setCreatedTime = None, setEntityGroupKey = None, setGPABucketEntityID = None, setIsUpToDate = None, setModifiedTime = None, setSectionLengthGPABucketIDClonedFrom = None, setSectionLengthID = None, setStatus = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnSectionLengthGPABucketID = False, returnCreatedTime = False, returnEntityGroupKey = False, returnGPABucketEntityID = False, returnIsUpToDate = False, returnModifiedTime = False, returnSectionLengthGPABucketIDClonedFrom = False, returnSectionLengthID = False, returnStatus = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/SectionLengthGPABucket/" + str(SectionLengthGPABucketID), verb = "post", return_params_list = return_params, payload = payload_params)

def createSectionLengthGPABucket(EntityID = 1, setSectionLengthGPABucketID = None, setCreatedTime = None, setEntityGroupKey = None, setGPABucketEntityID = None, setIsUpToDate = None, setModifiedTime = None, setSectionLengthGPABucketIDClonedFrom = None, setSectionLengthID = None, setStatus = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnSectionLengthGPABucketID = False, returnCreatedTime = False, returnEntityGroupKey = False, returnGPABucketEntityID = False, returnIsUpToDate = False, returnModifiedTime = False, returnSectionLengthGPABucketIDClonedFrom = False, returnSectionLengthID = False, returnStatus = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/SectionLengthGPABucket/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteSectionLengthGPABucket(SectionLengthGPABucketID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/SectionLengthGPABucket/" + str(SectionLengthGPABucketID), verb = "delete")


def getEveryStudentCommentBucket(searchConditions = [], EntityID = 1, returnStudentCommentBucketID = False, returnCommentBucketID = False, returnCommentCodeID = False, returnCreatedTime = False, returnGradingPeriodID = False, returnModifiedTime = False, returnStudentSectionID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every StudentCommentBucket in the district.

    This function returns a dataframe of every StudentCommentBucket in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/StudentCommentBucket/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/StudentCommentBucket/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getStudentCommentBucket(StudentCommentBucketID, EntityID = 1, returnStudentCommentBucketID = False, returnCommentBucketID = False, returnCommentCodeID = False, returnCreatedTime = False, returnGradingPeriodID = False, returnModifiedTime = False, returnStudentSectionID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/StudentCommentBucket/" + str(StudentCommentBucketID), verb = "get", return_params_list = return_params)

def modifyStudentCommentBucket(StudentCommentBucketID, EntityID = 1, setStudentCommentBucketID = None, setCommentBucketID = None, setCommentCodeID = None, setCreatedTime = None, setGradingPeriodID = None, setModifiedTime = None, setStudentSectionID = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnStudentCommentBucketID = False, returnCommentBucketID = False, returnCommentCodeID = False, returnCreatedTime = False, returnGradingPeriodID = False, returnModifiedTime = False, returnStudentSectionID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/StudentCommentBucket/" + str(StudentCommentBucketID), verb = "post", return_params_list = return_params, payload = payload_params)

def createStudentCommentBucket(EntityID = 1, setStudentCommentBucketID = None, setCommentBucketID = None, setCommentCodeID = None, setCreatedTime = None, setGradingPeriodID = None, setModifiedTime = None, setStudentSectionID = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnStudentCommentBucketID = False, returnCommentBucketID = False, returnCommentCodeID = False, returnCreatedTime = False, returnGradingPeriodID = False, returnModifiedTime = False, returnStudentSectionID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/StudentCommentBucket/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteStudentCommentBucket(StudentCommentBucketID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/StudentCommentBucket/" + str(StudentCommentBucketID), verb = "delete")


def getEveryStudentEarnedCreditsBucket(searchConditions = [], EntityID = 1, returnStudentEarnedCreditsBucketID = False, returnCreatedTime = False, returnEarnedCredits = False, returnEarnedCreditsAllEntered = False, returnEarnedCreditsAttempted = False, returnEarnedCreditsAttemptedAllEntered = False, returnEarnedCreditsAttemptedCompleted = False, returnEarnedCreditsAttemptedDefault = False, returnEarnedCreditsCompleted = False, returnEarnedCreditsDefault = False, returnEarnedCreditsMethodID = False, returnEarnedCreditsPossible = False, returnEarnedCreditsPossibleAllEntered = False, returnEarnedCreditsPossibleCompleted = False, returnEarnedCreditsPossibleDefault = False, returnEntityID = False, returnFailedCredits = False, returnFailedCreditsAllEntered = False, returnFailedCreditsCompleted = False, returnFailedCreditsDefault = False, returnModifiedTime = False, returnSchoolYearID = False, returnStudentEarnedCreditsBucketGroupID = False, returnStudentGradeBucketID = False, returnStudentID = False, returnStudentSectionEarnedCreditsBucketGroupID = False, returnStudentSectionID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every StudentEarnedCreditsBucket in the district.

    This function returns a dataframe of every StudentEarnedCreditsBucket in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/StudentEarnedCreditsBucket/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/StudentEarnedCreditsBucket/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getStudentEarnedCreditsBucket(StudentEarnedCreditsBucketID, EntityID = 1, returnStudentEarnedCreditsBucketID = False, returnCreatedTime = False, returnEarnedCredits = False, returnEarnedCreditsAllEntered = False, returnEarnedCreditsAttempted = False, returnEarnedCreditsAttemptedAllEntered = False, returnEarnedCreditsAttemptedCompleted = False, returnEarnedCreditsAttemptedDefault = False, returnEarnedCreditsCompleted = False, returnEarnedCreditsDefault = False, returnEarnedCreditsMethodID = False, returnEarnedCreditsPossible = False, returnEarnedCreditsPossibleAllEntered = False, returnEarnedCreditsPossibleCompleted = False, returnEarnedCreditsPossibleDefault = False, returnEntityID = False, returnFailedCredits = False, returnFailedCreditsAllEntered = False, returnFailedCreditsCompleted = False, returnFailedCreditsDefault = False, returnModifiedTime = False, returnSchoolYearID = False, returnStudentEarnedCreditsBucketGroupID = False, returnStudentGradeBucketID = False, returnStudentID = False, returnStudentSectionEarnedCreditsBucketGroupID = False, returnStudentSectionID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/StudentEarnedCreditsBucket/" + str(StudentEarnedCreditsBucketID), verb = "get", return_params_list = return_params)

def modifyStudentEarnedCreditsBucket(StudentEarnedCreditsBucketID, EntityID = 1, setStudentEarnedCreditsBucketID = None, setCreatedTime = None, setEarnedCredits = None, setEarnedCreditsAllEntered = None, setEarnedCreditsAttempted = None, setEarnedCreditsAttemptedAllEntered = None, setEarnedCreditsAttemptedCompleted = None, setEarnedCreditsAttemptedDefault = None, setEarnedCreditsCompleted = None, setEarnedCreditsDefault = None, setEarnedCreditsMethodID = None, setEarnedCreditsPossible = None, setEarnedCreditsPossibleAllEntered = None, setEarnedCreditsPossibleCompleted = None, setEarnedCreditsPossibleDefault = None, setEntityID = None, setFailedCredits = None, setFailedCreditsAllEntered = None, setFailedCreditsCompleted = None, setFailedCreditsDefault = None, setModifiedTime = None, setSchoolYearID = None, setStudentEarnedCreditsBucketGroupID = None, setStudentGradeBucketID = None, setStudentID = None, setStudentSectionEarnedCreditsBucketGroupID = None, setStudentSectionID = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnStudentEarnedCreditsBucketID = False, returnCreatedTime = False, returnEarnedCredits = False, returnEarnedCreditsAllEntered = False, returnEarnedCreditsAttempted = False, returnEarnedCreditsAttemptedAllEntered = False, returnEarnedCreditsAttemptedCompleted = False, returnEarnedCreditsAttemptedDefault = False, returnEarnedCreditsCompleted = False, returnEarnedCreditsDefault = False, returnEarnedCreditsMethodID = False, returnEarnedCreditsPossible = False, returnEarnedCreditsPossibleAllEntered = False, returnEarnedCreditsPossibleCompleted = False, returnEarnedCreditsPossibleDefault = False, returnEntityID = False, returnFailedCredits = False, returnFailedCreditsAllEntered = False, returnFailedCreditsCompleted = False, returnFailedCreditsDefault = False, returnModifiedTime = False, returnSchoolYearID = False, returnStudentEarnedCreditsBucketGroupID = False, returnStudentGradeBucketID = False, returnStudentID = False, returnStudentSectionEarnedCreditsBucketGroupID = False, returnStudentSectionID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/StudentEarnedCreditsBucket/" + str(StudentEarnedCreditsBucketID), verb = "post", return_params_list = return_params, payload = payload_params)

def createStudentEarnedCreditsBucket(EntityID = 1, setStudentEarnedCreditsBucketID = None, setCreatedTime = None, setEarnedCredits = None, setEarnedCreditsAllEntered = None, setEarnedCreditsAttempted = None, setEarnedCreditsAttemptedAllEntered = None, setEarnedCreditsAttemptedCompleted = None, setEarnedCreditsAttemptedDefault = None, setEarnedCreditsCompleted = None, setEarnedCreditsDefault = None, setEarnedCreditsMethodID = None, setEarnedCreditsPossible = None, setEarnedCreditsPossibleAllEntered = None, setEarnedCreditsPossibleCompleted = None, setEarnedCreditsPossibleDefault = None, setEntityID = None, setFailedCredits = None, setFailedCreditsAllEntered = None, setFailedCreditsCompleted = None, setFailedCreditsDefault = None, setModifiedTime = None, setSchoolYearID = None, setStudentEarnedCreditsBucketGroupID = None, setStudentGradeBucketID = None, setStudentID = None, setStudentSectionEarnedCreditsBucketGroupID = None, setStudentSectionID = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnStudentEarnedCreditsBucketID = False, returnCreatedTime = False, returnEarnedCredits = False, returnEarnedCreditsAllEntered = False, returnEarnedCreditsAttempted = False, returnEarnedCreditsAttemptedAllEntered = False, returnEarnedCreditsAttemptedCompleted = False, returnEarnedCreditsAttemptedDefault = False, returnEarnedCreditsCompleted = False, returnEarnedCreditsDefault = False, returnEarnedCreditsMethodID = False, returnEarnedCreditsPossible = False, returnEarnedCreditsPossibleAllEntered = False, returnEarnedCreditsPossibleCompleted = False, returnEarnedCreditsPossibleDefault = False, returnEntityID = False, returnFailedCredits = False, returnFailedCreditsAllEntered = False, returnFailedCreditsCompleted = False, returnFailedCreditsDefault = False, returnModifiedTime = False, returnSchoolYearID = False, returnStudentEarnedCreditsBucketGroupID = False, returnStudentGradeBucketID = False, returnStudentID = False, returnStudentSectionEarnedCreditsBucketGroupID = False, returnStudentSectionID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/StudentEarnedCreditsBucket/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteStudentEarnedCreditsBucket(StudentEarnedCreditsBucketID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/StudentEarnedCreditsBucket/" + str(StudentEarnedCreditsBucketID), verb = "delete")


def getEveryStudentEarnedCreditsBucketGroup(searchConditions = [], EntityID = 1, returnStudentEarnedCreditsBucketGroupID = False, returnCreatedTime = False, returnEarnedCreditsAllEntered = False, returnEarnedCreditsAttemptedAllEntered = False, returnEarnedCreditsAttemptedCompleted = False, returnEarnedCreditsAttemptedDefault = False, returnEarnedCreditsCompleted = False, returnEarnedCreditsDefault = False, returnEarnedCreditsMethodID = False, returnEarnedCreditsPossibleAllEntered = False, returnEarnedCreditsPossibleCompleted = False, returnEarnedCreditsPossibleDefault = False, returnFailedCreditsAllEntered = False, returnFailedCreditsCompleted = False, returnFailedCreditsDefault = False, returnModifiedTime = False, returnStudentID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every StudentEarnedCreditsBucketGroup in the district.

    This function returns a dataframe of every StudentEarnedCreditsBucketGroup in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/StudentEarnedCreditsBucketGroup/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/StudentEarnedCreditsBucketGroup/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getStudentEarnedCreditsBucketGroup(StudentEarnedCreditsBucketGroupID, EntityID = 1, returnStudentEarnedCreditsBucketGroupID = False, returnCreatedTime = False, returnEarnedCreditsAllEntered = False, returnEarnedCreditsAttemptedAllEntered = False, returnEarnedCreditsAttemptedCompleted = False, returnEarnedCreditsAttemptedDefault = False, returnEarnedCreditsCompleted = False, returnEarnedCreditsDefault = False, returnEarnedCreditsMethodID = False, returnEarnedCreditsPossibleAllEntered = False, returnEarnedCreditsPossibleCompleted = False, returnEarnedCreditsPossibleDefault = False, returnFailedCreditsAllEntered = False, returnFailedCreditsCompleted = False, returnFailedCreditsDefault = False, returnModifiedTime = False, returnStudentID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/StudentEarnedCreditsBucketGroup/" + str(StudentEarnedCreditsBucketGroupID), verb = "get", return_params_list = return_params)

def modifyStudentEarnedCreditsBucketGroup(StudentEarnedCreditsBucketGroupID, EntityID = 1, setStudentEarnedCreditsBucketGroupID = None, setCreatedTime = None, setEarnedCreditsAllEntered = None, setEarnedCreditsAttemptedAllEntered = None, setEarnedCreditsAttemptedCompleted = None, setEarnedCreditsAttemptedDefault = None, setEarnedCreditsCompleted = None, setEarnedCreditsDefault = None, setEarnedCreditsMethodID = None, setEarnedCreditsPossibleAllEntered = None, setEarnedCreditsPossibleCompleted = None, setEarnedCreditsPossibleDefault = None, setFailedCreditsAllEntered = None, setFailedCreditsCompleted = None, setFailedCreditsDefault = None, setModifiedTime = None, setStudentID = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnStudentEarnedCreditsBucketGroupID = False, returnCreatedTime = False, returnEarnedCreditsAllEntered = False, returnEarnedCreditsAttemptedAllEntered = False, returnEarnedCreditsAttemptedCompleted = False, returnEarnedCreditsAttemptedDefault = False, returnEarnedCreditsCompleted = False, returnEarnedCreditsDefault = False, returnEarnedCreditsMethodID = False, returnEarnedCreditsPossibleAllEntered = False, returnEarnedCreditsPossibleCompleted = False, returnEarnedCreditsPossibleDefault = False, returnFailedCreditsAllEntered = False, returnFailedCreditsCompleted = False, returnFailedCreditsDefault = False, returnModifiedTime = False, returnStudentID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/StudentEarnedCreditsBucketGroup/" + str(StudentEarnedCreditsBucketGroupID), verb = "post", return_params_list = return_params, payload = payload_params)

def createStudentEarnedCreditsBucketGroup(EntityID = 1, setStudentEarnedCreditsBucketGroupID = None, setCreatedTime = None, setEarnedCreditsAllEntered = None, setEarnedCreditsAttemptedAllEntered = None, setEarnedCreditsAttemptedCompleted = None, setEarnedCreditsAttemptedDefault = None, setEarnedCreditsCompleted = None, setEarnedCreditsDefault = None, setEarnedCreditsMethodID = None, setEarnedCreditsPossibleAllEntered = None, setEarnedCreditsPossibleCompleted = None, setEarnedCreditsPossibleDefault = None, setFailedCreditsAllEntered = None, setFailedCreditsCompleted = None, setFailedCreditsDefault = None, setModifiedTime = None, setStudentID = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnStudentEarnedCreditsBucketGroupID = False, returnCreatedTime = False, returnEarnedCreditsAllEntered = False, returnEarnedCreditsAttemptedAllEntered = False, returnEarnedCreditsAttemptedCompleted = False, returnEarnedCreditsAttemptedDefault = False, returnEarnedCreditsCompleted = False, returnEarnedCreditsDefault = False, returnEarnedCreditsMethodID = False, returnEarnedCreditsPossibleAllEntered = False, returnEarnedCreditsPossibleCompleted = False, returnEarnedCreditsPossibleDefault = False, returnFailedCreditsAllEntered = False, returnFailedCreditsCompleted = False, returnFailedCreditsDefault = False, returnModifiedTime = False, returnStudentID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/StudentEarnedCreditsBucketGroup/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteStudentEarnedCreditsBucketGroup(StudentEarnedCreditsBucketGroupID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/StudentEarnedCreditsBucketGroup/" + str(StudentEarnedCreditsBucketGroupID), verb = "delete")


def getEveryStudentFreeFormCommentBucket(searchConditions = [], EntityID = 1, returnStudentFreeFormCommentBucketID = False, returnComment = False, returnCreatedTime = False, returnGradingPeriodID = False, returnModifiedTime = False, returnStudentSectionID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every StudentFreeFormCommentBucket in the district.

    This function returns a dataframe of every StudentFreeFormCommentBucket in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/StudentFreeFormCommentBucket/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/StudentFreeFormCommentBucket/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getStudentFreeFormCommentBucket(StudentFreeFormCommentBucketID, EntityID = 1, returnStudentFreeFormCommentBucketID = False, returnComment = False, returnCreatedTime = False, returnGradingPeriodID = False, returnModifiedTime = False, returnStudentSectionID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/StudentFreeFormCommentBucket/" + str(StudentFreeFormCommentBucketID), verb = "get", return_params_list = return_params)

def modifyStudentFreeFormCommentBucket(StudentFreeFormCommentBucketID, EntityID = 1, setStudentFreeFormCommentBucketID = None, setComment = None, setCreatedTime = None, setGradingPeriodID = None, setModifiedTime = None, setStudentSectionID = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnStudentFreeFormCommentBucketID = False, returnComment = False, returnCreatedTime = False, returnGradingPeriodID = False, returnModifiedTime = False, returnStudentSectionID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/StudentFreeFormCommentBucket/" + str(StudentFreeFormCommentBucketID), verb = "post", return_params_list = return_params, payload = payload_params)

def createStudentFreeFormCommentBucket(EntityID = 1, setStudentFreeFormCommentBucketID = None, setComment = None, setCreatedTime = None, setGradingPeriodID = None, setModifiedTime = None, setStudentSectionID = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnStudentFreeFormCommentBucketID = False, returnComment = False, returnCreatedTime = False, returnGradingPeriodID = False, returnModifiedTime = False, returnStudentSectionID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/StudentFreeFormCommentBucket/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteStudentFreeFormCommentBucket(StudentFreeFormCommentBucketID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/StudentFreeFormCommentBucket/" + str(StudentFreeFormCommentBucketID), verb = "delete")


def getEveryStudentGPABucket(searchConditions = [], EntityID = 1, returnStudentGPABucketID = False, returnBonusGPAPoints = False, returnCreatedTime = False, returnDisplayGPACredits = False, returnDisplayGPAPoints = False, returnEntityID = False, returnGPACredits = False, returnGPAPoints = False, returnGPAWithBonus = False, returnGradReqRankGPAStatus = False, returnGradReqRankGPAStatusCode = False, returnHasAllGradesRequiredForGPACalculation = False, returnModifiedTime = False, returnPointsAndCreditsMultiplier = False, returnSchoolYearID = False, returnStudentGradeBucketID = False, returnStudentSectionGPABucketGroupID = False, returnUseOverride = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every StudentGPABucket in the district.

    This function returns a dataframe of every StudentGPABucket in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/StudentGPABucket/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/StudentGPABucket/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getStudentGPABucket(StudentGPABucketID, EntityID = 1, returnStudentGPABucketID = False, returnBonusGPAPoints = False, returnCreatedTime = False, returnDisplayGPACredits = False, returnDisplayGPAPoints = False, returnEntityID = False, returnGPACredits = False, returnGPAPoints = False, returnGPAWithBonus = False, returnGradReqRankGPAStatus = False, returnGradReqRankGPAStatusCode = False, returnHasAllGradesRequiredForGPACalculation = False, returnModifiedTime = False, returnPointsAndCreditsMultiplier = False, returnSchoolYearID = False, returnStudentGradeBucketID = False, returnStudentSectionGPABucketGroupID = False, returnUseOverride = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/StudentGPABucket/" + str(StudentGPABucketID), verb = "get", return_params_list = return_params)

def modifyStudentGPABucket(StudentGPABucketID, EntityID = 1, setStudentGPABucketID = None, setBonusGPAPoints = None, setCreatedTime = None, setDisplayGPACredits = None, setDisplayGPAPoints = None, setEntityID = None, setGPACredits = None, setGPAPoints = None, setGPAWithBonus = None, setGradReqRankGPAStatus = None, setGradReqRankGPAStatusCode = None, setHasAllGradesRequiredForGPACalculation = None, setModifiedTime = None, setPointsAndCreditsMultiplier = None, setSchoolYearID = None, setStudentGradeBucketID = None, setStudentSectionGPABucketGroupID = None, setUseOverride = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnStudentGPABucketID = False, returnBonusGPAPoints = False, returnCreatedTime = False, returnDisplayGPACredits = False, returnDisplayGPAPoints = False, returnEntityID = False, returnGPACredits = False, returnGPAPoints = False, returnGPAWithBonus = False, returnGradReqRankGPAStatus = False, returnGradReqRankGPAStatusCode = False, returnHasAllGradesRequiredForGPACalculation = False, returnModifiedTime = False, returnPointsAndCreditsMultiplier = False, returnSchoolYearID = False, returnStudentGradeBucketID = False, returnStudentSectionGPABucketGroupID = False, returnUseOverride = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/StudentGPABucket/" + str(StudentGPABucketID), verb = "post", return_params_list = return_params, payload = payload_params)

def createStudentGPABucket(EntityID = 1, setStudentGPABucketID = None, setBonusGPAPoints = None, setCreatedTime = None, setDisplayGPACredits = None, setDisplayGPAPoints = None, setEntityID = None, setGPACredits = None, setGPAPoints = None, setGPAWithBonus = None, setGradReqRankGPAStatus = None, setGradReqRankGPAStatusCode = None, setHasAllGradesRequiredForGPACalculation = None, setModifiedTime = None, setPointsAndCreditsMultiplier = None, setSchoolYearID = None, setStudentGradeBucketID = None, setStudentSectionGPABucketGroupID = None, setUseOverride = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnStudentGPABucketID = False, returnBonusGPAPoints = False, returnCreatedTime = False, returnDisplayGPACredits = False, returnDisplayGPAPoints = False, returnEntityID = False, returnGPACredits = False, returnGPAPoints = False, returnGPAWithBonus = False, returnGradReqRankGPAStatus = False, returnGradReqRankGPAStatusCode = False, returnHasAllGradesRequiredForGPACalculation = False, returnModifiedTime = False, returnPointsAndCreditsMultiplier = False, returnSchoolYearID = False, returnStudentGradeBucketID = False, returnStudentSectionGPABucketGroupID = False, returnUseOverride = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/StudentGPABucket/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteStudentGPABucket(StudentGPABucketID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/StudentGPABucket/" + str(StudentGPABucketID), verb = "delete")


def getEveryStudentGPABucketGroup(searchConditions = [], EntityID = 1, returnStudentGPABucketGroupID = False, returnBonusGPA = False, returnBonusGPAWithoutRounding = False, returnCreatedTime = False, returnCurrentDefaultDistrictID = False, returnEarnedCredits = False, returnElectiveBonusGPA = False, returnElectiveFactor = False, returnElectiveGPACredits = False, returnElectiveGPAPoints = False, returnFactorBonusGPA = False, returnFactorBonusGPAWithoutRounding = False, returnFailedCredits = False, returnFinalGPARoundingDecimals = False, returnGPA = False, returnGPABucketID = False, returnGPACalculationRoundingDecimals = False, returnGPACredits = False, returnGPACreditsWithoutRounding = False, returnGPAMethodID = False, returnGPAPoints = False, returnGPAPointsWithoutRounding = False, returnGPAWithBonus = False, returnGPAWithFactorBonus = False, returnGradReqRankGPABreakdown = False, returnModifiedTime = False, returnRequiredBonusGPA = False, returnRequiredGPACredits = False, returnRequiredGPAPoints = False, returnSchoolYearID = False, returnStudentID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every StudentGPABucketGroup in the district.

    This function returns a dataframe of every StudentGPABucketGroup in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/StudentGPABucketGroup/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/StudentGPABucketGroup/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getStudentGPABucketGroup(StudentGPABucketGroupID, EntityID = 1, returnStudentGPABucketGroupID = False, returnBonusGPA = False, returnBonusGPAWithoutRounding = False, returnCreatedTime = False, returnCurrentDefaultDistrictID = False, returnEarnedCredits = False, returnElectiveBonusGPA = False, returnElectiveFactor = False, returnElectiveGPACredits = False, returnElectiveGPAPoints = False, returnFactorBonusGPA = False, returnFactorBonusGPAWithoutRounding = False, returnFailedCredits = False, returnFinalGPARoundingDecimals = False, returnGPA = False, returnGPABucketID = False, returnGPACalculationRoundingDecimals = False, returnGPACredits = False, returnGPACreditsWithoutRounding = False, returnGPAMethodID = False, returnGPAPoints = False, returnGPAPointsWithoutRounding = False, returnGPAWithBonus = False, returnGPAWithFactorBonus = False, returnGradReqRankGPABreakdown = False, returnModifiedTime = False, returnRequiredBonusGPA = False, returnRequiredGPACredits = False, returnRequiredGPAPoints = False, returnSchoolYearID = False, returnStudentID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/StudentGPABucketGroup/" + str(StudentGPABucketGroupID), verb = "get", return_params_list = return_params)

def modifyStudentGPABucketGroup(StudentGPABucketGroupID, EntityID = 1, setStudentGPABucketGroupID = None, setBonusGPA = None, setBonusGPAWithoutRounding = None, setCreatedTime = None, setCurrentDefaultDistrictID = None, setEarnedCredits = None, setElectiveBonusGPA = None, setElectiveFactor = None, setElectiveGPACredits = None, setElectiveGPAPoints = None, setFactorBonusGPA = None, setFactorBonusGPAWithoutRounding = None, setFailedCredits = None, setFinalGPARoundingDecimals = None, setGPA = None, setGPABucketID = None, setGPACalculationRoundingDecimals = None, setGPACredits = None, setGPACreditsWithoutRounding = None, setGPAMethodID = None, setGPAPoints = None, setGPAPointsWithoutRounding = None, setGPAWithBonus = None, setGPAWithFactorBonus = None, setGradReqRankGPABreakdown = None, setModifiedTime = None, setRequiredBonusGPA = None, setRequiredGPACredits = None, setRequiredGPAPoints = None, setSchoolYearID = None, setStudentID = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnStudentGPABucketGroupID = False, returnBonusGPA = False, returnBonusGPAWithoutRounding = False, returnCreatedTime = False, returnCurrentDefaultDistrictID = False, returnEarnedCredits = False, returnElectiveBonusGPA = False, returnElectiveFactor = False, returnElectiveGPACredits = False, returnElectiveGPAPoints = False, returnFactorBonusGPA = False, returnFactorBonusGPAWithoutRounding = False, returnFailedCredits = False, returnFinalGPARoundingDecimals = False, returnGPA = False, returnGPABucketID = False, returnGPACalculationRoundingDecimals = False, returnGPACredits = False, returnGPACreditsWithoutRounding = False, returnGPAMethodID = False, returnGPAPoints = False, returnGPAPointsWithoutRounding = False, returnGPAWithBonus = False, returnGPAWithFactorBonus = False, returnGradReqRankGPABreakdown = False, returnModifiedTime = False, returnRequiredBonusGPA = False, returnRequiredGPACredits = False, returnRequiredGPAPoints = False, returnSchoolYearID = False, returnStudentID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/StudentGPABucketGroup/" + str(StudentGPABucketGroupID), verb = "post", return_params_list = return_params, payload = payload_params)

def createStudentGPABucketGroup(EntityID = 1, setStudentGPABucketGroupID = None, setBonusGPA = None, setBonusGPAWithoutRounding = None, setCreatedTime = None, setCurrentDefaultDistrictID = None, setEarnedCredits = None, setElectiveBonusGPA = None, setElectiveFactor = None, setElectiveGPACredits = None, setElectiveGPAPoints = None, setFactorBonusGPA = None, setFactorBonusGPAWithoutRounding = None, setFailedCredits = None, setFinalGPARoundingDecimals = None, setGPA = None, setGPABucketID = None, setGPACalculationRoundingDecimals = None, setGPACredits = None, setGPACreditsWithoutRounding = None, setGPAMethodID = None, setGPAPoints = None, setGPAPointsWithoutRounding = None, setGPAWithBonus = None, setGPAWithFactorBonus = None, setGradReqRankGPABreakdown = None, setModifiedTime = None, setRequiredBonusGPA = None, setRequiredGPACredits = None, setRequiredGPAPoints = None, setSchoolYearID = None, setStudentID = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnStudentGPABucketGroupID = False, returnBonusGPA = False, returnBonusGPAWithoutRounding = False, returnCreatedTime = False, returnCurrentDefaultDistrictID = False, returnEarnedCredits = False, returnElectiveBonusGPA = False, returnElectiveFactor = False, returnElectiveGPACredits = False, returnElectiveGPAPoints = False, returnFactorBonusGPA = False, returnFactorBonusGPAWithoutRounding = False, returnFailedCredits = False, returnFinalGPARoundingDecimals = False, returnGPA = False, returnGPABucketID = False, returnGPACalculationRoundingDecimals = False, returnGPACredits = False, returnGPACreditsWithoutRounding = False, returnGPAMethodID = False, returnGPAPoints = False, returnGPAPointsWithoutRounding = False, returnGPAWithBonus = False, returnGPAWithFactorBonus = False, returnGradReqRankGPABreakdown = False, returnModifiedTime = False, returnRequiredBonusGPA = False, returnRequiredGPACredits = False, returnRequiredGPAPoints = False, returnSchoolYearID = False, returnStudentID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/StudentGPABucketGroup/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteStudentGPABucketGroup(StudentGPABucketGroupID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/StudentGPABucketGroup/" + str(StudentGPABucketGroupID), verb = "delete")


def getEveryStudentGradeBucket(searchConditions = [], EntityID = 1, returnStudentGradeBucketID = False, returnAbsentCount = False, returnCalculatedCalculationTypeCode = False, returnCalculatedClosedGradingPeriodGradeChangeStatus = False, returnCalculatedClosedGradingPeriodGradeChangeStatusCode = False, returnCalculatedPoints = False, returnClosedGradingPeriodGradeChangeStatus = False, returnClosedGradingPeriodGradeChangeStatusCode = False, returnCompleteByTeacher = False, returnCompleteByTeacherCode = False, returnCompletionDate = False, returnCompletionDateOverride = False, returnConfigEarnedCredits = False, returnConfigFailedCredits = False, returnCreatedTime = False, returnDoNotPost = False, returnEarnedCreditAttempted = False, returnEarnedCredits = False, returnEarnedCreditsPossible = False, returnEarnedPoints = False, returnEntityID = False, returnExcusedCount = False, returnFailedCredits = False, returnGradeMarkID = False, returnGradeMarkIDOutOfDistrictTransferWithdraw = False, returnGradeMarkIDOverride = False, returnGradeMarkIDToApply = False, returnGradeMarkIDToUse = False, returnGradeMarkIDToUseIgnoreDoNotPost = False, returnGradeMarkOverrideComment = False, returnGradeMarkToUse = False, returnGradeMarkToUseExists = False, returnGradeMarkToUseIgnoreDoNotPost = False, returnGradingPeriodEndDateHasPassed = False, returnGradingPeriodGradeBucketID = False, returnHasAcademicStandardGrades = False, returnHasAssignments = False, returnHasGrade = False, returnHasStudentSectionGradingScaleGradeBucket = False, returnHasStudentSectionLinkConflict = False, returnHasSubjectGrades = False, returnHasUnscoredRequiredFeederBucket = False, returnIsAdminOverride = False, returnIsComplete = False, returnIsTransferBucket = False, returnIsUnused = False, returnIsUsingPointsBasedScale = False, returnIsWeightedOnByEnrolledInBucket = False, returnModifiedTime = False, returnNoGradebookOrAdminOverride = False, returnNoGradebookOverride = False, returnOtherCount = False, returnOverrideComment = False, returnPercent = False, returnPercentAdjustment = False, returnPercentAdjustmentComment = False, returnPercentHasChangedWithinSpecifiedAmountOfTime = False, returnPercentWithAdjustment = False, returnPercentWithAdjustmentFormatted = False, returnPercentWithAdjustmentIgnoreMinimum = False, returnPercentWithAdjustmentNoCap = False, returnPercentWithAdjustmentWithGradeMarkToUse = False, returnPercentWithAdjustmentWithGradeMarkToUseIgnoreDoNotPost = False, returnPercentWithAdjustmentWithGradeMarkToUseNoCap = False, returnPercentWithGradeMarkIgnoreDoNotPost = False, returnPossiblePoints = False, returnReportCardGradeMarkToUse = False, returnSchoolYearID = False, returnSectionID = False, returnStartingPercent = False, returnStudentCommentBucketCount = False, returnStudentFreeFormCommentBucketCount = False, returnStudentGradeBucketFlag = False, returnStudentGradeBucketStatus = False, returnStudentSectionID = False, returnTardyCount = False, returnUnexcusedCount = False, returnUseCompletionDateOverride = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnWeightPercentForGradeBucket = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every StudentGradeBucket in the district.

    This function returns a dataframe of every StudentGradeBucket in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/StudentGradeBucket/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/StudentGradeBucket/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getStudentGradeBucket(StudentGradeBucketID, EntityID = 1, returnStudentGradeBucketID = False, returnAbsentCount = False, returnCalculatedCalculationTypeCode = False, returnCalculatedClosedGradingPeriodGradeChangeStatus = False, returnCalculatedClosedGradingPeriodGradeChangeStatusCode = False, returnCalculatedPoints = False, returnClosedGradingPeriodGradeChangeStatus = False, returnClosedGradingPeriodGradeChangeStatusCode = False, returnCompleteByTeacher = False, returnCompleteByTeacherCode = False, returnCompletionDate = False, returnCompletionDateOverride = False, returnConfigEarnedCredits = False, returnConfigFailedCredits = False, returnCreatedTime = False, returnDoNotPost = False, returnEarnedCreditAttempted = False, returnEarnedCredits = False, returnEarnedCreditsPossible = False, returnEarnedPoints = False, returnEntityID = False, returnExcusedCount = False, returnFailedCredits = False, returnGradeMarkID = False, returnGradeMarkIDOutOfDistrictTransferWithdraw = False, returnGradeMarkIDOverride = False, returnGradeMarkIDToApply = False, returnGradeMarkIDToUse = False, returnGradeMarkIDToUseIgnoreDoNotPost = False, returnGradeMarkOverrideComment = False, returnGradeMarkToUse = False, returnGradeMarkToUseExists = False, returnGradeMarkToUseIgnoreDoNotPost = False, returnGradingPeriodEndDateHasPassed = False, returnGradingPeriodGradeBucketID = False, returnHasAcademicStandardGrades = False, returnHasAssignments = False, returnHasGrade = False, returnHasStudentSectionGradingScaleGradeBucket = False, returnHasStudentSectionLinkConflict = False, returnHasSubjectGrades = False, returnHasUnscoredRequiredFeederBucket = False, returnIsAdminOverride = False, returnIsComplete = False, returnIsTransferBucket = False, returnIsUnused = False, returnIsUsingPointsBasedScale = False, returnIsWeightedOnByEnrolledInBucket = False, returnModifiedTime = False, returnNoGradebookOrAdminOverride = False, returnNoGradebookOverride = False, returnOtherCount = False, returnOverrideComment = False, returnPercent = False, returnPercentAdjustment = False, returnPercentAdjustmentComment = False, returnPercentHasChangedWithinSpecifiedAmountOfTime = False, returnPercentWithAdjustment = False, returnPercentWithAdjustmentFormatted = False, returnPercentWithAdjustmentIgnoreMinimum = False, returnPercentWithAdjustmentNoCap = False, returnPercentWithAdjustmentWithGradeMarkToUse = False, returnPercentWithAdjustmentWithGradeMarkToUseIgnoreDoNotPost = False, returnPercentWithAdjustmentWithGradeMarkToUseNoCap = False, returnPercentWithGradeMarkIgnoreDoNotPost = False, returnPossiblePoints = False, returnReportCardGradeMarkToUse = False, returnSchoolYearID = False, returnSectionID = False, returnStartingPercent = False, returnStudentCommentBucketCount = False, returnStudentFreeFormCommentBucketCount = False, returnStudentGradeBucketFlag = False, returnStudentGradeBucketStatus = False, returnStudentSectionID = False, returnTardyCount = False, returnUnexcusedCount = False, returnUseCompletionDateOverride = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnWeightPercentForGradeBucket = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/StudentGradeBucket/" + str(StudentGradeBucketID), verb = "get", return_params_list = return_params)

def modifyStudentGradeBucket(StudentGradeBucketID, EntityID = 1, setStudentGradeBucketID = None, setAbsentCount = None, setCalculatedCalculationTypeCode = None, setCalculatedClosedGradingPeriodGradeChangeStatus = None, setCalculatedClosedGradingPeriodGradeChangeStatusCode = None, setCalculatedPoints = None, setClosedGradingPeriodGradeChangeStatus = None, setClosedGradingPeriodGradeChangeStatusCode = None, setCompleteByTeacher = None, setCompleteByTeacherCode = None, setCompletionDate = None, setCompletionDateOverride = None, setConfigEarnedCredits = None, setConfigFailedCredits = None, setCreatedTime = None, setDoNotPost = None, setEarnedCreditAttempted = None, setEarnedCredits = None, setEarnedCreditsPossible = None, setEarnedPoints = None, setEntityID = None, setExcusedCount = None, setFailedCredits = None, setGradeMarkID = None, setGradeMarkIDOutOfDistrictTransferWithdraw = None, setGradeMarkIDOverride = None, setGradeMarkIDToApply = None, setGradeMarkIDToUse = None, setGradeMarkIDToUseIgnoreDoNotPost = None, setGradeMarkOverrideComment = None, setGradeMarkToUse = None, setGradeMarkToUseExists = None, setGradeMarkToUseIgnoreDoNotPost = None, setGradingPeriodEndDateHasPassed = None, setGradingPeriodGradeBucketID = None, setHasAcademicStandardGrades = None, setHasAssignments = None, setHasGrade = None, setHasStudentSectionGradingScaleGradeBucket = None, setHasStudentSectionLinkConflict = None, setHasSubjectGrades = None, setHasUnscoredRequiredFeederBucket = None, setIsAdminOverride = None, setIsComplete = None, setIsTransferBucket = None, setIsUnused = None, setIsUsingPointsBasedScale = None, setIsWeightedOnByEnrolledInBucket = None, setModifiedTime = None, setNoGradebookOrAdminOverride = None, setNoGradebookOverride = None, setOtherCount = None, setOverrideComment = None, setPercent = None, setPercentAdjustment = None, setPercentAdjustmentComment = None, setPercentHasChangedWithinSpecifiedAmountOfTime = None, setPercentWithAdjustment = None, setPercentWithAdjustmentFormatted = None, setPercentWithAdjustmentIgnoreMinimum = None, setPercentWithAdjustmentNoCap = None, setPercentWithAdjustmentWithGradeMarkToUse = None, setPercentWithAdjustmentWithGradeMarkToUseIgnoreDoNotPost = None, setPercentWithAdjustmentWithGradeMarkToUseNoCap = None, setPercentWithGradeMarkIgnoreDoNotPost = None, setPossiblePoints = None, setReportCardGradeMarkToUse = None, setSchoolYearID = None, setSectionID = None, setStartingPercent = None, setStudentCommentBucketCount = None, setStudentFreeFormCommentBucketCount = None, setStudentGradeBucketFlag = None, setStudentGradeBucketStatus = None, setStudentSectionID = None, setTardyCount = None, setUnexcusedCount = None, setUseCompletionDateOverride = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, setWeightPercentForGradeBucket = None, returnStudentGradeBucketID = False, returnAbsentCount = False, returnCalculatedCalculationTypeCode = False, returnCalculatedClosedGradingPeriodGradeChangeStatus = False, returnCalculatedClosedGradingPeriodGradeChangeStatusCode = False, returnCalculatedPoints = False, returnClosedGradingPeriodGradeChangeStatus = False, returnClosedGradingPeriodGradeChangeStatusCode = False, returnCompleteByTeacher = False, returnCompleteByTeacherCode = False, returnCompletionDate = False, returnCompletionDateOverride = False, returnConfigEarnedCredits = False, returnConfigFailedCredits = False, returnCreatedTime = False, returnDoNotPost = False, returnEarnedCreditAttempted = False, returnEarnedCredits = False, returnEarnedCreditsPossible = False, returnEarnedPoints = False, returnEntityID = False, returnExcusedCount = False, returnFailedCredits = False, returnGradeMarkID = False, returnGradeMarkIDOutOfDistrictTransferWithdraw = False, returnGradeMarkIDOverride = False, returnGradeMarkIDToApply = False, returnGradeMarkIDToUse = False, returnGradeMarkIDToUseIgnoreDoNotPost = False, returnGradeMarkOverrideComment = False, returnGradeMarkToUse = False, returnGradeMarkToUseExists = False, returnGradeMarkToUseIgnoreDoNotPost = False, returnGradingPeriodEndDateHasPassed = False, returnGradingPeriodGradeBucketID = False, returnHasAcademicStandardGrades = False, returnHasAssignments = False, returnHasGrade = False, returnHasStudentSectionGradingScaleGradeBucket = False, returnHasStudentSectionLinkConflict = False, returnHasSubjectGrades = False, returnHasUnscoredRequiredFeederBucket = False, returnIsAdminOverride = False, returnIsComplete = False, returnIsTransferBucket = False, returnIsUnused = False, returnIsUsingPointsBasedScale = False, returnIsWeightedOnByEnrolledInBucket = False, returnModifiedTime = False, returnNoGradebookOrAdminOverride = False, returnNoGradebookOverride = False, returnOtherCount = False, returnOverrideComment = False, returnPercent = False, returnPercentAdjustment = False, returnPercentAdjustmentComment = False, returnPercentHasChangedWithinSpecifiedAmountOfTime = False, returnPercentWithAdjustment = False, returnPercentWithAdjustmentFormatted = False, returnPercentWithAdjustmentIgnoreMinimum = False, returnPercentWithAdjustmentNoCap = False, returnPercentWithAdjustmentWithGradeMarkToUse = False, returnPercentWithAdjustmentWithGradeMarkToUseIgnoreDoNotPost = False, returnPercentWithAdjustmentWithGradeMarkToUseNoCap = False, returnPercentWithGradeMarkIgnoreDoNotPost = False, returnPossiblePoints = False, returnReportCardGradeMarkToUse = False, returnSchoolYearID = False, returnSectionID = False, returnStartingPercent = False, returnStudentCommentBucketCount = False, returnStudentFreeFormCommentBucketCount = False, returnStudentGradeBucketFlag = False, returnStudentGradeBucketStatus = False, returnStudentSectionID = False, returnTardyCount = False, returnUnexcusedCount = False, returnUseCompletionDateOverride = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnWeightPercentForGradeBucket = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/StudentGradeBucket/" + str(StudentGradeBucketID), verb = "post", return_params_list = return_params, payload = payload_params)

def createStudentGradeBucket(EntityID = 1, setStudentGradeBucketID = None, setAbsentCount = None, setCalculatedCalculationTypeCode = None, setCalculatedClosedGradingPeriodGradeChangeStatus = None, setCalculatedClosedGradingPeriodGradeChangeStatusCode = None, setCalculatedPoints = None, setClosedGradingPeriodGradeChangeStatus = None, setClosedGradingPeriodGradeChangeStatusCode = None, setCompleteByTeacher = None, setCompleteByTeacherCode = None, setCompletionDate = None, setCompletionDateOverride = None, setConfigEarnedCredits = None, setConfigFailedCredits = None, setCreatedTime = None, setDoNotPost = None, setEarnedCreditAttempted = None, setEarnedCredits = None, setEarnedCreditsPossible = None, setEarnedPoints = None, setEntityID = None, setExcusedCount = None, setFailedCredits = None, setGradeMarkID = None, setGradeMarkIDOutOfDistrictTransferWithdraw = None, setGradeMarkIDOverride = None, setGradeMarkIDToApply = None, setGradeMarkIDToUse = None, setGradeMarkIDToUseIgnoreDoNotPost = None, setGradeMarkOverrideComment = None, setGradeMarkToUse = None, setGradeMarkToUseExists = None, setGradeMarkToUseIgnoreDoNotPost = None, setGradingPeriodEndDateHasPassed = None, setGradingPeriodGradeBucketID = None, setHasAcademicStandardGrades = None, setHasAssignments = None, setHasGrade = None, setHasStudentSectionGradingScaleGradeBucket = None, setHasStudentSectionLinkConflict = None, setHasSubjectGrades = None, setHasUnscoredRequiredFeederBucket = None, setIsAdminOverride = None, setIsComplete = None, setIsTransferBucket = None, setIsUnused = None, setIsUsingPointsBasedScale = None, setIsWeightedOnByEnrolledInBucket = None, setModifiedTime = None, setNoGradebookOrAdminOverride = None, setNoGradebookOverride = None, setOtherCount = None, setOverrideComment = None, setPercent = None, setPercentAdjustment = None, setPercentAdjustmentComment = None, setPercentHasChangedWithinSpecifiedAmountOfTime = None, setPercentWithAdjustment = None, setPercentWithAdjustmentFormatted = None, setPercentWithAdjustmentIgnoreMinimum = None, setPercentWithAdjustmentNoCap = None, setPercentWithAdjustmentWithGradeMarkToUse = None, setPercentWithAdjustmentWithGradeMarkToUseIgnoreDoNotPost = None, setPercentWithAdjustmentWithGradeMarkToUseNoCap = None, setPercentWithGradeMarkIgnoreDoNotPost = None, setPossiblePoints = None, setReportCardGradeMarkToUse = None, setSchoolYearID = None, setSectionID = None, setStartingPercent = None, setStudentCommentBucketCount = None, setStudentFreeFormCommentBucketCount = None, setStudentGradeBucketFlag = None, setStudentGradeBucketStatus = None, setStudentSectionID = None, setTardyCount = None, setUnexcusedCount = None, setUseCompletionDateOverride = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, setWeightPercentForGradeBucket = None, returnStudentGradeBucketID = False, returnAbsentCount = False, returnCalculatedCalculationTypeCode = False, returnCalculatedClosedGradingPeriodGradeChangeStatus = False, returnCalculatedClosedGradingPeriodGradeChangeStatusCode = False, returnCalculatedPoints = False, returnClosedGradingPeriodGradeChangeStatus = False, returnClosedGradingPeriodGradeChangeStatusCode = False, returnCompleteByTeacher = False, returnCompleteByTeacherCode = False, returnCompletionDate = False, returnCompletionDateOverride = False, returnConfigEarnedCredits = False, returnConfigFailedCredits = False, returnCreatedTime = False, returnDoNotPost = False, returnEarnedCreditAttempted = False, returnEarnedCredits = False, returnEarnedCreditsPossible = False, returnEarnedPoints = False, returnEntityID = False, returnExcusedCount = False, returnFailedCredits = False, returnGradeMarkID = False, returnGradeMarkIDOutOfDistrictTransferWithdraw = False, returnGradeMarkIDOverride = False, returnGradeMarkIDToApply = False, returnGradeMarkIDToUse = False, returnGradeMarkIDToUseIgnoreDoNotPost = False, returnGradeMarkOverrideComment = False, returnGradeMarkToUse = False, returnGradeMarkToUseExists = False, returnGradeMarkToUseIgnoreDoNotPost = False, returnGradingPeriodEndDateHasPassed = False, returnGradingPeriodGradeBucketID = False, returnHasAcademicStandardGrades = False, returnHasAssignments = False, returnHasGrade = False, returnHasStudentSectionGradingScaleGradeBucket = False, returnHasStudentSectionLinkConflict = False, returnHasSubjectGrades = False, returnHasUnscoredRequiredFeederBucket = False, returnIsAdminOverride = False, returnIsComplete = False, returnIsTransferBucket = False, returnIsUnused = False, returnIsUsingPointsBasedScale = False, returnIsWeightedOnByEnrolledInBucket = False, returnModifiedTime = False, returnNoGradebookOrAdminOverride = False, returnNoGradebookOverride = False, returnOtherCount = False, returnOverrideComment = False, returnPercent = False, returnPercentAdjustment = False, returnPercentAdjustmentComment = False, returnPercentHasChangedWithinSpecifiedAmountOfTime = False, returnPercentWithAdjustment = False, returnPercentWithAdjustmentFormatted = False, returnPercentWithAdjustmentIgnoreMinimum = False, returnPercentWithAdjustmentNoCap = False, returnPercentWithAdjustmentWithGradeMarkToUse = False, returnPercentWithAdjustmentWithGradeMarkToUseIgnoreDoNotPost = False, returnPercentWithAdjustmentWithGradeMarkToUseNoCap = False, returnPercentWithGradeMarkIgnoreDoNotPost = False, returnPossiblePoints = False, returnReportCardGradeMarkToUse = False, returnSchoolYearID = False, returnSectionID = False, returnStartingPercent = False, returnStudentCommentBucketCount = False, returnStudentFreeFormCommentBucketCount = False, returnStudentGradeBucketFlag = False, returnStudentGradeBucketStatus = False, returnStudentSectionID = False, returnTardyCount = False, returnUnexcusedCount = False, returnUseCompletionDateOverride = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnWeightPercentForGradeBucket = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/StudentGradeBucket/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteStudentGradeBucket(StudentGradeBucketID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/StudentGradeBucket/" + str(StudentGradeBucketID), verb = "delete")


def getEveryStudentGradeBucketFlag(searchConditions = [], EntityID = 1, returnStudentGradeBucketFlagID = False, returnCreatedTime = False, returnGradeBucketFlagID = False, returnIsManual = False, returnModifiedTime = False, returnStudentGradeBucketID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnAPIOptionFlags = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every StudentGradeBucketFlag in the district.

    This function returns a dataframe of every StudentGradeBucketFlag in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/StudentGradeBucketFlag/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/StudentGradeBucketFlag/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getStudentGradeBucketFlag(StudentGradeBucketFlagID, EntityID = 1, returnStudentGradeBucketFlagID = False, returnCreatedTime = False, returnGradeBucketFlagID = False, returnIsManual = False, returnModifiedTime = False, returnStudentGradeBucketID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnAPIOptionFlags = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/StudentGradeBucketFlag/" + str(StudentGradeBucketFlagID), verb = "get", return_params_list = return_params)

def modifyStudentGradeBucketFlag(StudentGradeBucketFlagID, EntityID = 1, setStudentGradeBucketFlagID = None, setCreatedTime = None, setGradeBucketFlagID = None, setIsManual = None, setModifiedTime = None, setStudentGradeBucketID = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, setAPIOptionFlags = None, returnStudentGradeBucketFlagID = False, returnCreatedTime = False, returnGradeBucketFlagID = False, returnIsManual = False, returnModifiedTime = False, returnStudentGradeBucketID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnAPIOptionFlags = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/StudentGradeBucketFlag/" + str(StudentGradeBucketFlagID), verb = "post", return_params_list = return_params, payload = payload_params)

def createStudentGradeBucketFlag(EntityID = 1, setStudentGradeBucketFlagID = None, setCreatedTime = None, setGradeBucketFlagID = None, setIsManual = None, setModifiedTime = None, setStudentGradeBucketID = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, setAPIOptionFlags = None, returnStudentGradeBucketFlagID = False, returnCreatedTime = False, returnGradeBucketFlagID = False, returnIsManual = False, returnModifiedTime = False, returnStudentGradeBucketID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnAPIOptionFlags = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/StudentGradeBucketFlag/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteStudentGradeBucketFlag(StudentGradeBucketFlagID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/StudentGradeBucketFlag/" + str(StudentGradeBucketFlagID), verb = "delete")


def getEveryStudentHonorRollRunLevel(searchConditions = [], EntityID = 1, returnStudentHonorRollRunLevelID = False, returnCreatedTime = False, returnGPAValue = False, returnHonorRollRunLevelHistoryID = False, returnModifiedTime = False, returnStudentID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every StudentHonorRollRunLevel in the district.

    This function returns a dataframe of every StudentHonorRollRunLevel in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/StudentHonorRollRunLevel/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/StudentHonorRollRunLevel/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getStudentHonorRollRunLevel(StudentHonorRollRunLevelID, EntityID = 1, returnStudentHonorRollRunLevelID = False, returnCreatedTime = False, returnGPAValue = False, returnHonorRollRunLevelHistoryID = False, returnModifiedTime = False, returnStudentID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/StudentHonorRollRunLevel/" + str(StudentHonorRollRunLevelID), verb = "get", return_params_list = return_params)

def modifyStudentHonorRollRunLevel(StudentHonorRollRunLevelID, EntityID = 1, setStudentHonorRollRunLevelID = None, setCreatedTime = None, setGPAValue = None, setHonorRollRunLevelHistoryID = None, setModifiedTime = None, setStudentID = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnStudentHonorRollRunLevelID = False, returnCreatedTime = False, returnGPAValue = False, returnHonorRollRunLevelHistoryID = False, returnModifiedTime = False, returnStudentID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/StudentHonorRollRunLevel/" + str(StudentHonorRollRunLevelID), verb = "post", return_params_list = return_params, payload = payload_params)

def createStudentHonorRollRunLevel(EntityID = 1, setStudentHonorRollRunLevelID = None, setCreatedTime = None, setGPAValue = None, setHonorRollRunLevelHistoryID = None, setModifiedTime = None, setStudentID = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnStudentHonorRollRunLevelID = False, returnCreatedTime = False, returnGPAValue = False, returnHonorRollRunLevelHistoryID = False, returnModifiedTime = False, returnStudentID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/StudentHonorRollRunLevel/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteStudentHonorRollRunLevel(StudentHonorRollRunLevelID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/StudentHonorRollRunLevel/" + str(StudentHonorRollRunLevelID), verb = "delete")


def getEveryStudentRank(searchConditions = [], EntityID = 1, returnStudentRankID = False, returnCreatedTime = False, returnDisplayRank = False, returnIsManualRank = False, returnIsProspectiveRank = False, returnModifiedTime = False, returnNumberInRank = False, returnNumberOutOf = False, returnRankRunHistoryID = False, returnSchoolYearIDCohort = False, returnStudentID = False, returnUseOverride = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnValue = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every StudentRank in the district.

    This function returns a dataframe of every StudentRank in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/StudentRank/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/StudentRank/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getStudentRank(StudentRankID, EntityID = 1, returnStudentRankID = False, returnCreatedTime = False, returnDisplayRank = False, returnIsManualRank = False, returnIsProspectiveRank = False, returnModifiedTime = False, returnNumberInRank = False, returnNumberOutOf = False, returnRankRunHistoryID = False, returnSchoolYearIDCohort = False, returnStudentID = False, returnUseOverride = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnValue = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/StudentRank/" + str(StudentRankID), verb = "get", return_params_list = return_params)

def modifyStudentRank(StudentRankID, EntityID = 1, setStudentRankID = None, setCreatedTime = None, setDisplayRank = None, setIsManualRank = None, setIsProspectiveRank = None, setModifiedTime = None, setNumberInRank = None, setNumberOutOf = None, setRankRunHistoryID = None, setSchoolYearIDCohort = None, setStudentID = None, setUseOverride = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, setValue = None, returnStudentRankID = False, returnCreatedTime = False, returnDisplayRank = False, returnIsManualRank = False, returnIsProspectiveRank = False, returnModifiedTime = False, returnNumberInRank = False, returnNumberOutOf = False, returnRankRunHistoryID = False, returnSchoolYearIDCohort = False, returnStudentID = False, returnUseOverride = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnValue = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/StudentRank/" + str(StudentRankID), verb = "post", return_params_list = return_params, payload = payload_params)

def createStudentRank(EntityID = 1, setStudentRankID = None, setCreatedTime = None, setDisplayRank = None, setIsManualRank = None, setIsProspectiveRank = None, setModifiedTime = None, setNumberInRank = None, setNumberOutOf = None, setRankRunHistoryID = None, setSchoolYearIDCohort = None, setStudentID = None, setUseOverride = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, setValue = None, returnStudentRankID = False, returnCreatedTime = False, returnDisplayRank = False, returnIsManualRank = False, returnIsProspectiveRank = False, returnModifiedTime = False, returnNumberInRank = False, returnNumberOutOf = False, returnRankRunHistoryID = False, returnSchoolYearIDCohort = False, returnStudentID = False, returnUseOverride = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnValue = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/StudentRank/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteStudentRank(StudentRankID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/StudentRank/" + str(StudentRankID), verb = "delete")


def getEveryStudentSectionEarnedCreditsBucketGroup(searchConditions = [], EntityID = 1, returnStudentSectionEarnedCreditsBucketGroupID = False, returnCreatedTime = False, returnEarnedCreditsAllEntered = False, returnEarnedCreditsAttemptedAllEntered = False, returnEarnedCreditsAttemptedCompleted = False, returnEarnedCreditsAttemptedDefault = False, returnEarnedCreditsCompleted = False, returnEarnedCreditsDefault = False, returnEarnedCreditsMethodID = False, returnEarnedCreditsPossibleAllEntered = False, returnEarnedCreditsPossibleCompleted = False, returnEarnedCreditsPossibleDefault = False, returnEntityID = False, returnFailedCreditsAllEntered = False, returnFailedCreditsCompleted = False, returnFailedCreditsDefault = False, returnModifiedTime = False, returnSchoolYearID = False, returnStudentEarnedCreditsBucketGroupID = False, returnStudentID = False, returnStudentSectionID = False, returnTotalEarnedCreditsOverride = False, returnTotalFailedCreditsOverride = False, returnUseEarnedCreditsTotalOverride = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every StudentSectionEarnedCreditsBucketGroup in the district.

    This function returns a dataframe of every StudentSectionEarnedCreditsBucketGroup in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/StudentSectionEarnedCreditsBucketGroup/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/StudentSectionEarnedCreditsBucketGroup/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getStudentSectionEarnedCreditsBucketGroup(StudentSectionEarnedCreditsBucketGroupID, EntityID = 1, returnStudentSectionEarnedCreditsBucketGroupID = False, returnCreatedTime = False, returnEarnedCreditsAllEntered = False, returnEarnedCreditsAttemptedAllEntered = False, returnEarnedCreditsAttemptedCompleted = False, returnEarnedCreditsAttemptedDefault = False, returnEarnedCreditsCompleted = False, returnEarnedCreditsDefault = False, returnEarnedCreditsMethodID = False, returnEarnedCreditsPossibleAllEntered = False, returnEarnedCreditsPossibleCompleted = False, returnEarnedCreditsPossibleDefault = False, returnEntityID = False, returnFailedCreditsAllEntered = False, returnFailedCreditsCompleted = False, returnFailedCreditsDefault = False, returnModifiedTime = False, returnSchoolYearID = False, returnStudentEarnedCreditsBucketGroupID = False, returnStudentID = False, returnStudentSectionID = False, returnTotalEarnedCreditsOverride = False, returnTotalFailedCreditsOverride = False, returnUseEarnedCreditsTotalOverride = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/StudentSectionEarnedCreditsBucketGroup/" + str(StudentSectionEarnedCreditsBucketGroupID), verb = "get", return_params_list = return_params)

def modifyStudentSectionEarnedCreditsBucketGroup(StudentSectionEarnedCreditsBucketGroupID, EntityID = 1, setStudentSectionEarnedCreditsBucketGroupID = None, setCreatedTime = None, setEarnedCreditsAllEntered = None, setEarnedCreditsAttemptedAllEntered = None, setEarnedCreditsAttemptedCompleted = None, setEarnedCreditsAttemptedDefault = None, setEarnedCreditsCompleted = None, setEarnedCreditsDefault = None, setEarnedCreditsMethodID = None, setEarnedCreditsPossibleAllEntered = None, setEarnedCreditsPossibleCompleted = None, setEarnedCreditsPossibleDefault = None, setEntityID = None, setFailedCreditsAllEntered = None, setFailedCreditsCompleted = None, setFailedCreditsDefault = None, setModifiedTime = None, setSchoolYearID = None, setStudentEarnedCreditsBucketGroupID = None, setStudentID = None, setStudentSectionID = None, setTotalEarnedCreditsOverride = None, setTotalFailedCreditsOverride = None, setUseEarnedCreditsTotalOverride = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnStudentSectionEarnedCreditsBucketGroupID = False, returnCreatedTime = False, returnEarnedCreditsAllEntered = False, returnEarnedCreditsAttemptedAllEntered = False, returnEarnedCreditsAttemptedCompleted = False, returnEarnedCreditsAttemptedDefault = False, returnEarnedCreditsCompleted = False, returnEarnedCreditsDefault = False, returnEarnedCreditsMethodID = False, returnEarnedCreditsPossibleAllEntered = False, returnEarnedCreditsPossibleCompleted = False, returnEarnedCreditsPossibleDefault = False, returnEntityID = False, returnFailedCreditsAllEntered = False, returnFailedCreditsCompleted = False, returnFailedCreditsDefault = False, returnModifiedTime = False, returnSchoolYearID = False, returnStudentEarnedCreditsBucketGroupID = False, returnStudentID = False, returnStudentSectionID = False, returnTotalEarnedCreditsOverride = False, returnTotalFailedCreditsOverride = False, returnUseEarnedCreditsTotalOverride = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/StudentSectionEarnedCreditsBucketGroup/" + str(StudentSectionEarnedCreditsBucketGroupID), verb = "post", return_params_list = return_params, payload = payload_params)

def createStudentSectionEarnedCreditsBucketGroup(EntityID = 1, setStudentSectionEarnedCreditsBucketGroupID = None, setCreatedTime = None, setEarnedCreditsAllEntered = None, setEarnedCreditsAttemptedAllEntered = None, setEarnedCreditsAttemptedCompleted = None, setEarnedCreditsAttemptedDefault = None, setEarnedCreditsCompleted = None, setEarnedCreditsDefault = None, setEarnedCreditsMethodID = None, setEarnedCreditsPossibleAllEntered = None, setEarnedCreditsPossibleCompleted = None, setEarnedCreditsPossibleDefault = None, setEntityID = None, setFailedCreditsAllEntered = None, setFailedCreditsCompleted = None, setFailedCreditsDefault = None, setModifiedTime = None, setSchoolYearID = None, setStudentEarnedCreditsBucketGroupID = None, setStudentID = None, setStudentSectionID = None, setTotalEarnedCreditsOverride = None, setTotalFailedCreditsOverride = None, setUseEarnedCreditsTotalOverride = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnStudentSectionEarnedCreditsBucketGroupID = False, returnCreatedTime = False, returnEarnedCreditsAllEntered = False, returnEarnedCreditsAttemptedAllEntered = False, returnEarnedCreditsAttemptedCompleted = False, returnEarnedCreditsAttemptedDefault = False, returnEarnedCreditsCompleted = False, returnEarnedCreditsDefault = False, returnEarnedCreditsMethodID = False, returnEarnedCreditsPossibleAllEntered = False, returnEarnedCreditsPossibleCompleted = False, returnEarnedCreditsPossibleDefault = False, returnEntityID = False, returnFailedCreditsAllEntered = False, returnFailedCreditsCompleted = False, returnFailedCreditsDefault = False, returnModifiedTime = False, returnSchoolYearID = False, returnStudentEarnedCreditsBucketGroupID = False, returnStudentID = False, returnStudentSectionID = False, returnTotalEarnedCreditsOverride = False, returnTotalFailedCreditsOverride = False, returnUseEarnedCreditsTotalOverride = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/StudentSectionEarnedCreditsBucketGroup/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteStudentSectionEarnedCreditsBucketGroup(StudentSectionEarnedCreditsBucketGroupID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/StudentSectionEarnedCreditsBucketGroup/" + str(StudentSectionEarnedCreditsBucketGroupID), verb = "delete")


def getEveryStudentSectionEarnedCreditsMethod(searchConditions = [], EntityID = 1, returnStudentSectionEarnedCreditsMethodID = False, returnCreatedTime = False, returnEarnedCreditsMethodEntityID = False, returnEarnedCreditsOverride = False, returnModifiedTime = False, returnStudentSectionID = False, returnUseOverride = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every StudentSectionEarnedCreditsMethod in the district.

    This function returns a dataframe of every StudentSectionEarnedCreditsMethod in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/StudentSectionEarnedCreditsMethod/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/StudentSectionEarnedCreditsMethod/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getStudentSectionEarnedCreditsMethod(StudentSectionEarnedCreditsMethodID, EntityID = 1, returnStudentSectionEarnedCreditsMethodID = False, returnCreatedTime = False, returnEarnedCreditsMethodEntityID = False, returnEarnedCreditsOverride = False, returnModifiedTime = False, returnStudentSectionID = False, returnUseOverride = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/StudentSectionEarnedCreditsMethod/" + str(StudentSectionEarnedCreditsMethodID), verb = "get", return_params_list = return_params)

def modifyStudentSectionEarnedCreditsMethod(StudentSectionEarnedCreditsMethodID, EntityID = 1, setStudentSectionEarnedCreditsMethodID = None, setCreatedTime = None, setEarnedCreditsMethodEntityID = None, setEarnedCreditsOverride = None, setModifiedTime = None, setStudentSectionID = None, setUseOverride = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnStudentSectionEarnedCreditsMethodID = False, returnCreatedTime = False, returnEarnedCreditsMethodEntityID = False, returnEarnedCreditsOverride = False, returnModifiedTime = False, returnStudentSectionID = False, returnUseOverride = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/StudentSectionEarnedCreditsMethod/" + str(StudentSectionEarnedCreditsMethodID), verb = "post", return_params_list = return_params, payload = payload_params)

def createStudentSectionEarnedCreditsMethod(EntityID = 1, setStudentSectionEarnedCreditsMethodID = None, setCreatedTime = None, setEarnedCreditsMethodEntityID = None, setEarnedCreditsOverride = None, setModifiedTime = None, setStudentSectionID = None, setUseOverride = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnStudentSectionEarnedCreditsMethodID = False, returnCreatedTime = False, returnEarnedCreditsMethodEntityID = False, returnEarnedCreditsOverride = False, returnModifiedTime = False, returnStudentSectionID = False, returnUseOverride = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/StudentSectionEarnedCreditsMethod/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteStudentSectionEarnedCreditsMethod(StudentSectionEarnedCreditsMethodID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/StudentSectionEarnedCreditsMethod/" + str(StudentSectionEarnedCreditsMethodID), verb = "delete")


def getEveryStudentSectionGPABucketGroup(searchConditions = [], EntityID = 1, returnStudentSectionGPABucketGroupID = False, returnBonusGPA = False, returnCreatedTime = False, returnElectiveBonusGPA = False, returnElectiveGPACredits = False, returnElectiveGPAPoints = False, returnEntityID = False, returnFactorBasedGPACountTotal = False, returnGPACredits = False, returnGPAPoints = False, returnIsGPAElective = False, returnModifiedTime = False, returnRequiredBonusGPA = False, returnRequiredGPACredits = False, returnRequiredGPAPoints = False, returnSchoolYearID = False, returnStudentGPABucketGroupID = False, returnStudentSectionID = False, returnTotalAddOnPoints = False, returnTotalGPACredits = False, returnTotalGPAPoints = False, returnUseGPATotalOverride = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every StudentSectionGPABucketGroup in the district.

    This function returns a dataframe of every StudentSectionGPABucketGroup in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/StudentSectionGPABucketGroup/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/StudentSectionGPABucketGroup/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getStudentSectionGPABucketGroup(StudentSectionGPABucketGroupID, EntityID = 1, returnStudentSectionGPABucketGroupID = False, returnBonusGPA = False, returnCreatedTime = False, returnElectiveBonusGPA = False, returnElectiveGPACredits = False, returnElectiveGPAPoints = False, returnEntityID = False, returnFactorBasedGPACountTotal = False, returnGPACredits = False, returnGPAPoints = False, returnIsGPAElective = False, returnModifiedTime = False, returnRequiredBonusGPA = False, returnRequiredGPACredits = False, returnRequiredGPAPoints = False, returnSchoolYearID = False, returnStudentGPABucketGroupID = False, returnStudentSectionID = False, returnTotalAddOnPoints = False, returnTotalGPACredits = False, returnTotalGPAPoints = False, returnUseGPATotalOverride = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/StudentSectionGPABucketGroup/" + str(StudentSectionGPABucketGroupID), verb = "get", return_params_list = return_params)

def modifyStudentSectionGPABucketGroup(StudentSectionGPABucketGroupID, EntityID = 1, setStudentSectionGPABucketGroupID = None, setBonusGPA = None, setCreatedTime = None, setElectiveBonusGPA = None, setElectiveGPACredits = None, setElectiveGPAPoints = None, setEntityID = None, setFactorBasedGPACountTotal = None, setGPACredits = None, setGPAPoints = None, setIsGPAElective = None, setModifiedTime = None, setRequiredBonusGPA = None, setRequiredGPACredits = None, setRequiredGPAPoints = None, setSchoolYearID = None, setStudentGPABucketGroupID = None, setStudentSectionID = None, setTotalAddOnPoints = None, setTotalGPACredits = None, setTotalGPAPoints = None, setUseGPATotalOverride = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnStudentSectionGPABucketGroupID = False, returnBonusGPA = False, returnCreatedTime = False, returnElectiveBonusGPA = False, returnElectiveGPACredits = False, returnElectiveGPAPoints = False, returnEntityID = False, returnFactorBasedGPACountTotal = False, returnGPACredits = False, returnGPAPoints = False, returnIsGPAElective = False, returnModifiedTime = False, returnRequiredBonusGPA = False, returnRequiredGPACredits = False, returnRequiredGPAPoints = False, returnSchoolYearID = False, returnStudentGPABucketGroupID = False, returnStudentSectionID = False, returnTotalAddOnPoints = False, returnTotalGPACredits = False, returnTotalGPAPoints = False, returnUseGPATotalOverride = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/StudentSectionGPABucketGroup/" + str(StudentSectionGPABucketGroupID), verb = "post", return_params_list = return_params, payload = payload_params)

def createStudentSectionGPABucketGroup(EntityID = 1, setStudentSectionGPABucketGroupID = None, setBonusGPA = None, setCreatedTime = None, setElectiveBonusGPA = None, setElectiveGPACredits = None, setElectiveGPAPoints = None, setEntityID = None, setFactorBasedGPACountTotal = None, setGPACredits = None, setGPAPoints = None, setIsGPAElective = None, setModifiedTime = None, setRequiredBonusGPA = None, setRequiredGPACredits = None, setRequiredGPAPoints = None, setSchoolYearID = None, setStudentGPABucketGroupID = None, setStudentSectionID = None, setTotalAddOnPoints = None, setTotalGPACredits = None, setTotalGPAPoints = None, setUseGPATotalOverride = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnStudentSectionGPABucketGroupID = False, returnBonusGPA = False, returnCreatedTime = False, returnElectiveBonusGPA = False, returnElectiveGPACredits = False, returnElectiveGPAPoints = False, returnEntityID = False, returnFactorBasedGPACountTotal = False, returnGPACredits = False, returnGPAPoints = False, returnIsGPAElective = False, returnModifiedTime = False, returnRequiredBonusGPA = False, returnRequiredGPACredits = False, returnRequiredGPAPoints = False, returnSchoolYearID = False, returnStudentGPABucketGroupID = False, returnStudentSectionID = False, returnTotalAddOnPoints = False, returnTotalGPACredits = False, returnTotalGPAPoints = False, returnUseGPATotalOverride = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/StudentSectionGPABucketGroup/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteStudentSectionGPABucketGroup(StudentSectionGPABucketGroupID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/StudentSectionGPABucketGroup/" + str(StudentSectionGPABucketGroupID), verb = "delete")


def getEveryStudentSectionGPAMethod(searchConditions = [], EntityID = 1, returnStudentSectionGPAMethodID = False, returnCreatedTime = False, returnCumulativeGPACredits = False, returnCumulativeGPAPoints = False, returnGPACredits = False, returnGPAMethodEntityID = False, returnModifiedTime = False, returnPointSetEntityID = False, returnStudentSectionID = False, returnUseOverride = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every StudentSectionGPAMethod in the district.

    This function returns a dataframe of every StudentSectionGPAMethod in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/StudentSectionGPAMethod/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/StudentSectionGPAMethod/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getStudentSectionGPAMethod(StudentSectionGPAMethodID, EntityID = 1, returnStudentSectionGPAMethodID = False, returnCreatedTime = False, returnCumulativeGPACredits = False, returnCumulativeGPAPoints = False, returnGPACredits = False, returnGPAMethodEntityID = False, returnModifiedTime = False, returnPointSetEntityID = False, returnStudentSectionID = False, returnUseOverride = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/StudentSectionGPAMethod/" + str(StudentSectionGPAMethodID), verb = "get", return_params_list = return_params)

def modifyStudentSectionGPAMethod(StudentSectionGPAMethodID, EntityID = 1, setStudentSectionGPAMethodID = None, setCreatedTime = None, setCumulativeGPACredits = None, setCumulativeGPAPoints = None, setGPACredits = None, setGPAMethodEntityID = None, setModifiedTime = None, setPointSetEntityID = None, setStudentSectionID = None, setUseOverride = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnStudentSectionGPAMethodID = False, returnCreatedTime = False, returnCumulativeGPACredits = False, returnCumulativeGPAPoints = False, returnGPACredits = False, returnGPAMethodEntityID = False, returnModifiedTime = False, returnPointSetEntityID = False, returnStudentSectionID = False, returnUseOverride = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/StudentSectionGPAMethod/" + str(StudentSectionGPAMethodID), verb = "post", return_params_list = return_params, payload = payload_params)

def createStudentSectionGPAMethod(EntityID = 1, setStudentSectionGPAMethodID = None, setCreatedTime = None, setCumulativeGPACredits = None, setCumulativeGPAPoints = None, setGPACredits = None, setGPAMethodEntityID = None, setModifiedTime = None, setPointSetEntityID = None, setStudentSectionID = None, setUseOverride = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnStudentSectionGPAMethodID = False, returnCreatedTime = False, returnCumulativeGPACredits = False, returnCumulativeGPAPoints = False, returnGPACredits = False, returnGPAMethodEntityID = False, returnModifiedTime = False, returnPointSetEntityID = False, returnStudentSectionID = False, returnUseOverride = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/StudentSectionGPAMethod/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteStudentSectionGPAMethod(StudentSectionGPAMethodID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/StudentSectionGPAMethod/" + str(StudentSectionGPAMethodID), verb = "delete")


def getEveryTempFactorBasedAddOn(searchConditions = [], EntityID = 1, returnTempFactorBasedAddOnID = False, returnCreatedTime = False, returnFactor = False, returnGPABucketEntityDisplayName = False, returnGradeReferenceDisplayName = False, returnGradingEndDateCutoffForCumulative = False, returnModifiedTime = False, returnOriginalGradingEndDateCutoffForCumulative = False, returnTempFactorBasedAddOnClonedFromID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every TempFactorBasedAddOn in the district.

    This function returns a dataframe of every TempFactorBasedAddOn in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/TempFactorBasedAddOn/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/TempFactorBasedAddOn/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getTempFactorBasedAddOn(TempFactorBasedAddOnID, EntityID = 1, returnTempFactorBasedAddOnID = False, returnCreatedTime = False, returnFactor = False, returnGPABucketEntityDisplayName = False, returnGradeReferenceDisplayName = False, returnGradingEndDateCutoffForCumulative = False, returnModifiedTime = False, returnOriginalGradingEndDateCutoffForCumulative = False, returnTempFactorBasedAddOnClonedFromID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/TempFactorBasedAddOn/" + str(TempFactorBasedAddOnID), verb = "get", return_params_list = return_params)

def modifyTempFactorBasedAddOn(TempFactorBasedAddOnID, EntityID = 1, setTempFactorBasedAddOnID = None, setCreatedTime = None, setFactor = None, setGPABucketEntityDisplayName = None, setGradeReferenceDisplayName = None, setGradingEndDateCutoffForCumulative = None, setModifiedTime = None, setOriginalGradingEndDateCutoffForCumulative = None, setTempFactorBasedAddOnClonedFromID = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnTempFactorBasedAddOnID = False, returnCreatedTime = False, returnFactor = False, returnGPABucketEntityDisplayName = False, returnGradeReferenceDisplayName = False, returnGradingEndDateCutoffForCumulative = False, returnModifiedTime = False, returnOriginalGradingEndDateCutoffForCumulative = False, returnTempFactorBasedAddOnClonedFromID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/TempFactorBasedAddOn/" + str(TempFactorBasedAddOnID), verb = "post", return_params_list = return_params, payload = payload_params)

def createTempFactorBasedAddOn(EntityID = 1, setTempFactorBasedAddOnID = None, setCreatedTime = None, setFactor = None, setGPABucketEntityDisplayName = None, setGradeReferenceDisplayName = None, setGradingEndDateCutoffForCumulative = None, setModifiedTime = None, setOriginalGradingEndDateCutoffForCumulative = None, setTempFactorBasedAddOnClonedFromID = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnTempFactorBasedAddOnID = False, returnCreatedTime = False, returnFactor = False, returnGPABucketEntityDisplayName = False, returnGradeReferenceDisplayName = False, returnGradingEndDateCutoffForCumulative = False, returnModifiedTime = False, returnOriginalGradingEndDateCutoffForCumulative = False, returnTempFactorBasedAddOnClonedFromID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/TempFactorBasedAddOn/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteTempFactorBasedAddOn(TempFactorBasedAddOnID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/TempFactorBasedAddOn/" + str(TempFactorBasedAddOnID), verb = "delete")


def getEveryTempFailedGradingPeriod(searchConditions = [], EntityID = 1, returnTempFailedGradingPeriodID = False, returnCourseLengthCode = False, returnCreatedTime = False, returnDescription = False, returnEndDate = False, returnGradingPeriodID = False, returnGradingPeriodSetCode = False, returnGradingPeriodSetCodeDescription = False, returnGradingPeriodSetID = False, returnIsUpdated = False, returnModifiedTime = False, returnNote = False, returnNumber = False, returnOriginalEndDate = False, returnOriginalStartDate = False, returnProcessAction = False, returnProcessActionCode = False, returnSectionLengthCode = False, returnSectionLengthCodeDescription = False, returnSectionLengthEndDate = False, returnSectionLengthID = False, returnSectionLengthStartDate = False, returnStartDate = False, returnTempGradingPeriodID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every TempFailedGradingPeriod in the district.

    This function returns a dataframe of every TempFailedGradingPeriod in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/TempFailedGradingPeriod/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/TempFailedGradingPeriod/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getTempFailedGradingPeriod(TempFailedGradingPeriodID, EntityID = 1, returnTempFailedGradingPeriodID = False, returnCourseLengthCode = False, returnCreatedTime = False, returnDescription = False, returnEndDate = False, returnGradingPeriodID = False, returnGradingPeriodSetCode = False, returnGradingPeriodSetCodeDescription = False, returnGradingPeriodSetID = False, returnIsUpdated = False, returnModifiedTime = False, returnNote = False, returnNumber = False, returnOriginalEndDate = False, returnOriginalStartDate = False, returnProcessAction = False, returnProcessActionCode = False, returnSectionLengthCode = False, returnSectionLengthCodeDescription = False, returnSectionLengthEndDate = False, returnSectionLengthID = False, returnSectionLengthStartDate = False, returnStartDate = False, returnTempGradingPeriodID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/TempFailedGradingPeriod/" + str(TempFailedGradingPeriodID), verb = "get", return_params_list = return_params)

def modifyTempFailedGradingPeriod(TempFailedGradingPeriodID, EntityID = 1, setTempFailedGradingPeriodID = None, setCourseLengthCode = None, setCreatedTime = None, setDescription = None, setEndDate = None, setGradingPeriodID = None, setGradingPeriodSetCode = None, setGradingPeriodSetCodeDescription = None, setGradingPeriodSetID = None, setIsUpdated = None, setModifiedTime = None, setNote = None, setNumber = None, setOriginalEndDate = None, setOriginalStartDate = None, setProcessAction = None, setProcessActionCode = None, setSectionLengthCode = None, setSectionLengthCodeDescription = None, setSectionLengthEndDate = None, setSectionLengthID = None, setSectionLengthStartDate = None, setStartDate = None, setTempGradingPeriodID = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnTempFailedGradingPeriodID = False, returnCourseLengthCode = False, returnCreatedTime = False, returnDescription = False, returnEndDate = False, returnGradingPeriodID = False, returnGradingPeriodSetCode = False, returnGradingPeriodSetCodeDescription = False, returnGradingPeriodSetID = False, returnIsUpdated = False, returnModifiedTime = False, returnNote = False, returnNumber = False, returnOriginalEndDate = False, returnOriginalStartDate = False, returnProcessAction = False, returnProcessActionCode = False, returnSectionLengthCode = False, returnSectionLengthCodeDescription = False, returnSectionLengthEndDate = False, returnSectionLengthID = False, returnSectionLengthStartDate = False, returnStartDate = False, returnTempGradingPeriodID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/TempFailedGradingPeriod/" + str(TempFailedGradingPeriodID), verb = "post", return_params_list = return_params, payload = payload_params)

def createTempFailedGradingPeriod(EntityID = 1, setTempFailedGradingPeriodID = None, setCourseLengthCode = None, setCreatedTime = None, setDescription = None, setEndDate = None, setGradingPeriodID = None, setGradingPeriodSetCode = None, setGradingPeriodSetCodeDescription = None, setGradingPeriodSetID = None, setIsUpdated = None, setModifiedTime = None, setNote = None, setNumber = None, setOriginalEndDate = None, setOriginalStartDate = None, setProcessAction = None, setProcessActionCode = None, setSectionLengthCode = None, setSectionLengthCodeDescription = None, setSectionLengthEndDate = None, setSectionLengthID = None, setSectionLengthStartDate = None, setStartDate = None, setTempGradingPeriodID = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnTempFailedGradingPeriodID = False, returnCourseLengthCode = False, returnCreatedTime = False, returnDescription = False, returnEndDate = False, returnGradingPeriodID = False, returnGradingPeriodSetCode = False, returnGradingPeriodSetCodeDescription = False, returnGradingPeriodSetID = False, returnIsUpdated = False, returnModifiedTime = False, returnNote = False, returnNumber = False, returnOriginalEndDate = False, returnOriginalStartDate = False, returnProcessAction = False, returnProcessActionCode = False, returnSectionLengthCode = False, returnSectionLengthCodeDescription = False, returnSectionLengthEndDate = False, returnSectionLengthID = False, returnSectionLengthStartDate = False, returnStartDate = False, returnTempGradingPeriodID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/TempFailedGradingPeriod/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteTempFailedGradingPeriod(TempFailedGradingPeriodID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/TempFailedGradingPeriod/" + str(TempFailedGradingPeriodID), verb = "delete")


def getEveryTempGradeBucketFlagDetailGPAMethod(searchConditions = [], EntityID = 1, returnTempGradeBucketFlagDetailGPAMethodID = False, returnCreatedTime = False, returnEntityCode = False, returnGPAMethodDescription = False, returnGPAMethodEntityID = False, returnGPAPoints = False, returnGPAPointsOverrideOption = False, returnGPAPointsOverrideOptionCode = False, returnGradeBucketFlagCodeName = False, returnGradeBucketFlagDetailGPAMethodID = False, returnGradeBucketFlagDetailID = False, returnModifiedTime = False, returnNumericYear = False, returnPointSetDescription = False, returnPointSetEntityID = False, returnUseOverride = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every TempGradeBucketFlagDetailGPAMethod in the district.

    This function returns a dataframe of every TempGradeBucketFlagDetailGPAMethod in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/TempGradeBucketFlagDetailGPAMethod/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/TempGradeBucketFlagDetailGPAMethod/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getTempGradeBucketFlagDetailGPAMethod(TempGradeBucketFlagDetailGPAMethodID, EntityID = 1, returnTempGradeBucketFlagDetailGPAMethodID = False, returnCreatedTime = False, returnEntityCode = False, returnGPAMethodDescription = False, returnGPAMethodEntityID = False, returnGPAPoints = False, returnGPAPointsOverrideOption = False, returnGPAPointsOverrideOptionCode = False, returnGradeBucketFlagCodeName = False, returnGradeBucketFlagDetailGPAMethodID = False, returnGradeBucketFlagDetailID = False, returnModifiedTime = False, returnNumericYear = False, returnPointSetDescription = False, returnPointSetEntityID = False, returnUseOverride = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/TempGradeBucketFlagDetailGPAMethod/" + str(TempGradeBucketFlagDetailGPAMethodID), verb = "get", return_params_list = return_params)

def modifyTempGradeBucketFlagDetailGPAMethod(TempGradeBucketFlagDetailGPAMethodID, EntityID = 1, setTempGradeBucketFlagDetailGPAMethodID = None, setCreatedTime = None, setEntityCode = None, setGPAMethodDescription = None, setGPAMethodEntityID = None, setGPAPoints = None, setGPAPointsOverrideOption = None, setGPAPointsOverrideOptionCode = None, setGradeBucketFlagCodeName = None, setGradeBucketFlagDetailGPAMethodID = None, setGradeBucketFlagDetailID = None, setModifiedTime = None, setNumericYear = None, setPointSetDescription = None, setPointSetEntityID = None, setUseOverride = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnTempGradeBucketFlagDetailGPAMethodID = False, returnCreatedTime = False, returnEntityCode = False, returnGPAMethodDescription = False, returnGPAMethodEntityID = False, returnGPAPoints = False, returnGPAPointsOverrideOption = False, returnGPAPointsOverrideOptionCode = False, returnGradeBucketFlagCodeName = False, returnGradeBucketFlagDetailGPAMethodID = False, returnGradeBucketFlagDetailID = False, returnModifiedTime = False, returnNumericYear = False, returnPointSetDescription = False, returnPointSetEntityID = False, returnUseOverride = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/TempGradeBucketFlagDetailGPAMethod/" + str(TempGradeBucketFlagDetailGPAMethodID), verb = "post", return_params_list = return_params, payload = payload_params)

def createTempGradeBucketFlagDetailGPAMethod(EntityID = 1, setTempGradeBucketFlagDetailGPAMethodID = None, setCreatedTime = None, setEntityCode = None, setGPAMethodDescription = None, setGPAMethodEntityID = None, setGPAPoints = None, setGPAPointsOverrideOption = None, setGPAPointsOverrideOptionCode = None, setGradeBucketFlagCodeName = None, setGradeBucketFlagDetailGPAMethodID = None, setGradeBucketFlagDetailID = None, setModifiedTime = None, setNumericYear = None, setPointSetDescription = None, setPointSetEntityID = None, setUseOverride = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnTempGradeBucketFlagDetailGPAMethodID = False, returnCreatedTime = False, returnEntityCode = False, returnGPAMethodDescription = False, returnGPAMethodEntityID = False, returnGPAPoints = False, returnGPAPointsOverrideOption = False, returnGPAPointsOverrideOptionCode = False, returnGradeBucketFlagCodeName = False, returnGradeBucketFlagDetailGPAMethodID = False, returnGradeBucketFlagDetailID = False, returnModifiedTime = False, returnNumericYear = False, returnPointSetDescription = False, returnPointSetEntityID = False, returnUseOverride = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/TempGradeBucketFlagDetailGPAMethod/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteTempGradeBucketFlagDetailGPAMethod(TempGradeBucketFlagDetailGPAMethodID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/TempGradeBucketFlagDetailGPAMethod/" + str(TempGradeBucketFlagDetailGPAMethodID), verb = "delete")


def getEveryTempGradeBucketFlagDetailGPAMethodError(searchConditions = [], EntityID = 1, returnTempGradeBucketFlagDetailGPAMethodErrorID = False, returnCreatedTime = False, returnErrorString = False, returnGradeBucketFlagDetailGPAMethod = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every TempGradeBucketFlagDetailGPAMethodError in the district.

    This function returns a dataframe of every TempGradeBucketFlagDetailGPAMethodError in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/TempGradeBucketFlagDetailGPAMethodError/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/TempGradeBucketFlagDetailGPAMethodError/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getTempGradeBucketFlagDetailGPAMethodError(TempGradeBucketFlagDetailGPAMethodErrorID, EntityID = 1, returnTempGradeBucketFlagDetailGPAMethodErrorID = False, returnCreatedTime = False, returnErrorString = False, returnGradeBucketFlagDetailGPAMethod = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/TempGradeBucketFlagDetailGPAMethodError/" + str(TempGradeBucketFlagDetailGPAMethodErrorID), verb = "get", return_params_list = return_params)

def modifyTempGradeBucketFlagDetailGPAMethodError(TempGradeBucketFlagDetailGPAMethodErrorID, EntityID = 1, setTempGradeBucketFlagDetailGPAMethodErrorID = None, setCreatedTime = None, setErrorString = None, setGradeBucketFlagDetailGPAMethod = None, setModifiedTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnTempGradeBucketFlagDetailGPAMethodErrorID = False, returnCreatedTime = False, returnErrorString = False, returnGradeBucketFlagDetailGPAMethod = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/TempGradeBucketFlagDetailGPAMethodError/" + str(TempGradeBucketFlagDetailGPAMethodErrorID), verb = "post", return_params_list = return_params, payload = payload_params)

def createTempGradeBucketFlagDetailGPAMethodError(EntityID = 1, setTempGradeBucketFlagDetailGPAMethodErrorID = None, setCreatedTime = None, setErrorString = None, setGradeBucketFlagDetailGPAMethod = None, setModifiedTime = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnTempGradeBucketFlagDetailGPAMethodErrorID = False, returnCreatedTime = False, returnErrorString = False, returnGradeBucketFlagDetailGPAMethod = False, returnModifiedTime = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/TempGradeBucketFlagDetailGPAMethodError/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteTempGradeBucketFlagDetailGPAMethodError(TempGradeBucketFlagDetailGPAMethodErrorID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/TempGradeBucketFlagDetailGPAMethodError/" + str(TempGradeBucketFlagDetailGPAMethodErrorID), verb = "delete")


def getEveryTempGradeMarkPointSetError(searchConditions = [], EntityID = 1, returnTempGradeMarkPointSetErrorID = False, returnCreatedTime = False, returnErrorString = False, returnGPAMethodName = False, returnGradeMarkCode = False, returnModifiedTime = False, returnPointSetName = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every TempGradeMarkPointSetError in the district.

    This function returns a dataframe of every TempGradeMarkPointSetError in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/TempGradeMarkPointSetError/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/TempGradeMarkPointSetError/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getTempGradeMarkPointSetError(TempGradeMarkPointSetErrorID, EntityID = 1, returnTempGradeMarkPointSetErrorID = False, returnCreatedTime = False, returnErrorString = False, returnGPAMethodName = False, returnGradeMarkCode = False, returnModifiedTime = False, returnPointSetName = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/TempGradeMarkPointSetError/" + str(TempGradeMarkPointSetErrorID), verb = "get", return_params_list = return_params)

def modifyTempGradeMarkPointSetError(TempGradeMarkPointSetErrorID, EntityID = 1, setTempGradeMarkPointSetErrorID = None, setCreatedTime = None, setErrorString = None, setGPAMethodName = None, setGradeMarkCode = None, setModifiedTime = None, setPointSetName = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnTempGradeMarkPointSetErrorID = False, returnCreatedTime = False, returnErrorString = False, returnGPAMethodName = False, returnGradeMarkCode = False, returnModifiedTime = False, returnPointSetName = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/TempGradeMarkPointSetError/" + str(TempGradeMarkPointSetErrorID), verb = "post", return_params_list = return_params, payload = payload_params)

def createTempGradeMarkPointSetError(EntityID = 1, setTempGradeMarkPointSetErrorID = None, setCreatedTime = None, setErrorString = None, setGPAMethodName = None, setGradeMarkCode = None, setModifiedTime = None, setPointSetName = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnTempGradeMarkPointSetErrorID = False, returnCreatedTime = False, returnErrorString = False, returnGPAMethodName = False, returnGradeMarkCode = False, returnModifiedTime = False, returnPointSetName = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/TempGradeMarkPointSetError/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteTempGradeMarkPointSetError(TempGradeMarkPointSetErrorID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/TempGradeMarkPointSetError/" + str(TempGradeMarkPointSetErrorID), verb = "delete")


def getEveryTempGradeReportAttendanceTerm(searchConditions = [], EntityID = 1, returnTempGradeReportAttendanceTermID = False, returnAttendanceTermCode = False, returnAttendanceTermID = False, returnCalendarDescription = False, returnCreatedTime = False, returnEndDate = False, returnEntityName = False, returnModifiedTime = False, returnSchoolYearDescription = False, returnStartDate = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every TempGradeReportAttendanceTerm in the district.

    This function returns a dataframe of every TempGradeReportAttendanceTerm in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/TempGradeReportAttendanceTerm/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/TempGradeReportAttendanceTerm/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getTempGradeReportAttendanceTerm(TempGradeReportAttendanceTermID, EntityID = 1, returnTempGradeReportAttendanceTermID = False, returnAttendanceTermCode = False, returnAttendanceTermID = False, returnCalendarDescription = False, returnCreatedTime = False, returnEndDate = False, returnEntityName = False, returnModifiedTime = False, returnSchoolYearDescription = False, returnStartDate = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/TempGradeReportAttendanceTerm/" + str(TempGradeReportAttendanceTermID), verb = "get", return_params_list = return_params)

def modifyTempGradeReportAttendanceTerm(TempGradeReportAttendanceTermID, EntityID = 1, setTempGradeReportAttendanceTermID = None, setAttendanceTermCode = None, setAttendanceTermID = None, setCalendarDescription = None, setCreatedTime = None, setEndDate = None, setEntityName = None, setModifiedTime = None, setSchoolYearDescription = None, setStartDate = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnTempGradeReportAttendanceTermID = False, returnAttendanceTermCode = False, returnAttendanceTermID = False, returnCalendarDescription = False, returnCreatedTime = False, returnEndDate = False, returnEntityName = False, returnModifiedTime = False, returnSchoolYearDescription = False, returnStartDate = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/TempGradeReportAttendanceTerm/" + str(TempGradeReportAttendanceTermID), verb = "post", return_params_list = return_params, payload = payload_params)

def createTempGradeReportAttendanceTerm(EntityID = 1, setTempGradeReportAttendanceTermID = None, setAttendanceTermCode = None, setAttendanceTermID = None, setCalendarDescription = None, setCreatedTime = None, setEndDate = None, setEntityName = None, setModifiedTime = None, setSchoolYearDescription = None, setStartDate = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnTempGradeReportAttendanceTermID = False, returnAttendanceTermCode = False, returnAttendanceTermID = False, returnCalendarDescription = False, returnCreatedTime = False, returnEndDate = False, returnEntityName = False, returnModifiedTime = False, returnSchoolYearDescription = False, returnStartDate = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/TempGradeReportAttendanceTerm/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteTempGradeReportAttendanceTerm(TempGradeReportAttendanceTermID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/TempGradeReportAttendanceTerm/" + str(TempGradeReportAttendanceTermID), verb = "delete")


def getEveryTempGradeReportGradeBucket(searchConditions = [], EntityID = 1, returnTempGradeReportGradeBucketID = False, returnCreatedTime = False, returnEntityName = False, returnGradeBucketLabel = False, returnGradingPeriodGradeBucketID = False, returnModifiedTime = False, returnSchoolYearDescription = False, returnSectionLengthDescription = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every TempGradeReportGradeBucket in the district.

    This function returns a dataframe of every TempGradeReportGradeBucket in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/TempGradeReportGradeBucket/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/TempGradeReportGradeBucket/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getTempGradeReportGradeBucket(TempGradeReportGradeBucketID, EntityID = 1, returnTempGradeReportGradeBucketID = False, returnCreatedTime = False, returnEntityName = False, returnGradeBucketLabel = False, returnGradingPeriodGradeBucketID = False, returnModifiedTime = False, returnSchoolYearDescription = False, returnSectionLengthDescription = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/TempGradeReportGradeBucket/" + str(TempGradeReportGradeBucketID), verb = "get", return_params_list = return_params)

def modifyTempGradeReportGradeBucket(TempGradeReportGradeBucketID, EntityID = 1, setTempGradeReportGradeBucketID = None, setCreatedTime = None, setEntityName = None, setGradeBucketLabel = None, setGradingPeriodGradeBucketID = None, setModifiedTime = None, setSchoolYearDescription = None, setSectionLengthDescription = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnTempGradeReportGradeBucketID = False, returnCreatedTime = False, returnEntityName = False, returnGradeBucketLabel = False, returnGradingPeriodGradeBucketID = False, returnModifiedTime = False, returnSchoolYearDescription = False, returnSectionLengthDescription = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/TempGradeReportGradeBucket/" + str(TempGradeReportGradeBucketID), verb = "post", return_params_list = return_params, payload = payload_params)

def createTempGradeReportGradeBucket(EntityID = 1, setTempGradeReportGradeBucketID = None, setCreatedTime = None, setEntityName = None, setGradeBucketLabel = None, setGradingPeriodGradeBucketID = None, setModifiedTime = None, setSchoolYearDescription = None, setSectionLengthDescription = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnTempGradeReportGradeBucketID = False, returnCreatedTime = False, returnEntityName = False, returnGradeBucketLabel = False, returnGradingPeriodGradeBucketID = False, returnModifiedTime = False, returnSchoolYearDescription = False, returnSectionLengthDescription = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/TempGradeReportGradeBucket/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteTempGradeReportGradeBucket(TempGradeReportGradeBucketID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/TempGradeReportGradeBucket/" + str(TempGradeReportGradeBucketID), verb = "delete")


def getEveryTempGradeReportTemplate(searchConditions = [], EntityID = 1, returnTempGradeReportTemplateID = False, returnCreatedTime = False, returnEntityCodeNameClonedFrom = False, returnEntityCodeNameClonedTo = False, returnEntityID = False, returnErrorCount = False, returnHasErrors = False, returnModifiedTime = False, returnNewGradeReportTemplateDescription = False, returnOriginalGradeReportTemplateDescription = False, returnSchoolYearID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every TempGradeReportTemplate in the district.

    This function returns a dataframe of every TempGradeReportTemplate in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/TempGradeReportTemplate/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/TempGradeReportTemplate/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getTempGradeReportTemplate(TempGradeReportTemplateID, EntityID = 1, returnTempGradeReportTemplateID = False, returnCreatedTime = False, returnEntityCodeNameClonedFrom = False, returnEntityCodeNameClonedTo = False, returnEntityID = False, returnErrorCount = False, returnHasErrors = False, returnModifiedTime = False, returnNewGradeReportTemplateDescription = False, returnOriginalGradeReportTemplateDescription = False, returnSchoolYearID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/TempGradeReportTemplate/" + str(TempGradeReportTemplateID), verb = "get", return_params_list = return_params)

def modifyTempGradeReportTemplate(TempGradeReportTemplateID, EntityID = 1, setTempGradeReportTemplateID = None, setCreatedTime = None, setEntityCodeNameClonedFrom = None, setEntityCodeNameClonedTo = None, setEntityID = None, setErrorCount = None, setHasErrors = None, setModifiedTime = None, setNewGradeReportTemplateDescription = None, setOriginalGradeReportTemplateDescription = None, setSchoolYearID = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnTempGradeReportTemplateID = False, returnCreatedTime = False, returnEntityCodeNameClonedFrom = False, returnEntityCodeNameClonedTo = False, returnEntityID = False, returnErrorCount = False, returnHasErrors = False, returnModifiedTime = False, returnNewGradeReportTemplateDescription = False, returnOriginalGradeReportTemplateDescription = False, returnSchoolYearID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/TempGradeReportTemplate/" + str(TempGradeReportTemplateID), verb = "post", return_params_list = return_params, payload = payload_params)

def createTempGradeReportTemplate(EntityID = 1, setTempGradeReportTemplateID = None, setCreatedTime = None, setEntityCodeNameClonedFrom = None, setEntityCodeNameClonedTo = None, setEntityID = None, setErrorCount = None, setHasErrors = None, setModifiedTime = None, setNewGradeReportTemplateDescription = None, setOriginalGradeReportTemplateDescription = None, setSchoolYearID = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnTempGradeReportTemplateID = False, returnCreatedTime = False, returnEntityCodeNameClonedFrom = False, returnEntityCodeNameClonedTo = False, returnEntityID = False, returnErrorCount = False, returnHasErrors = False, returnModifiedTime = False, returnNewGradeReportTemplateDescription = False, returnOriginalGradeReportTemplateDescription = False, returnSchoolYearID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/TempGradeReportTemplate/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteTempGradeReportTemplate(TempGradeReportTemplateID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/TempGradeReportTemplate/" + str(TempGradeReportTemplateID), verb = "delete")


def getEveryTempGradeReportTemplateError(searchConditions = [], EntityID = 1, returnTempGradeReportTemplateErrorID = False, returnCreatedTime = False, returnError = False, returnErrorDetail = False, returnModifiedTime = False, returnTempGradeReportTemplateID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every TempGradeReportTemplateError in the district.

    This function returns a dataframe of every TempGradeReportTemplateError in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/TempGradeReportTemplateError/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/TempGradeReportTemplateError/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getTempGradeReportTemplateError(TempGradeReportTemplateErrorID, EntityID = 1, returnTempGradeReportTemplateErrorID = False, returnCreatedTime = False, returnError = False, returnErrorDetail = False, returnModifiedTime = False, returnTempGradeReportTemplateID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/TempGradeReportTemplateError/" + str(TempGradeReportTemplateErrorID), verb = "get", return_params_list = return_params)

def modifyTempGradeReportTemplateError(TempGradeReportTemplateErrorID, EntityID = 1, setTempGradeReportTemplateErrorID = None, setCreatedTime = None, setError = None, setErrorDetail = None, setModifiedTime = None, setTempGradeReportTemplateID = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnTempGradeReportTemplateErrorID = False, returnCreatedTime = False, returnError = False, returnErrorDetail = False, returnModifiedTime = False, returnTempGradeReportTemplateID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/TempGradeReportTemplateError/" + str(TempGradeReportTemplateErrorID), verb = "post", return_params_list = return_params, payload = payload_params)

def createTempGradeReportTemplateError(EntityID = 1, setTempGradeReportTemplateErrorID = None, setCreatedTime = None, setError = None, setErrorDetail = None, setModifiedTime = None, setTempGradeReportTemplateID = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnTempGradeReportTemplateErrorID = False, returnCreatedTime = False, returnError = False, returnErrorDetail = False, returnModifiedTime = False, returnTempGradeReportTemplateID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/TempGradeReportTemplateError/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteTempGradeReportTemplateError(TempGradeReportTemplateErrorID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/TempGradeReportTemplateError/" + str(TempGradeReportTemplateErrorID), verb = "delete")


def getEveryTempGradingPeriod(searchConditions = [], EntityID = 1, returnTempGradingPeriodID = False, returnCourseLengthCode = False, returnCreatedTime = False, returnDescription = False, returnEndDate = False, returnGradingPeriodID = False, returnGradingPeriodSetCode = False, returnGradingPeriodSetCodeDescription = False, returnGradingPeriodSetID = False, returnIsUpdated = False, returnModifiedTime = False, returnNumber = False, returnOriginalEndDate = False, returnOriginalStartDate = False, returnProcessAction = False, returnProcessActionCode = False, returnSectionLengthCode = False, returnSectionLengthCodeDescription = False, returnSectionLengthEndDate = False, returnSectionLengthID = False, returnSectionLengthStartDate = False, returnStartDate = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every TempGradingPeriod in the district.

    This function returns a dataframe of every TempGradingPeriod in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/TempGradingPeriod/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/TempGradingPeriod/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getTempGradingPeriod(TempGradingPeriodID, EntityID = 1, returnTempGradingPeriodID = False, returnCourseLengthCode = False, returnCreatedTime = False, returnDescription = False, returnEndDate = False, returnGradingPeriodID = False, returnGradingPeriodSetCode = False, returnGradingPeriodSetCodeDescription = False, returnGradingPeriodSetID = False, returnIsUpdated = False, returnModifiedTime = False, returnNumber = False, returnOriginalEndDate = False, returnOriginalStartDate = False, returnProcessAction = False, returnProcessActionCode = False, returnSectionLengthCode = False, returnSectionLengthCodeDescription = False, returnSectionLengthEndDate = False, returnSectionLengthID = False, returnSectionLengthStartDate = False, returnStartDate = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/TempGradingPeriod/" + str(TempGradingPeriodID), verb = "get", return_params_list = return_params)

def modifyTempGradingPeriod(TempGradingPeriodID, EntityID = 1, setTempGradingPeriodID = None, setCourseLengthCode = None, setCreatedTime = None, setDescription = None, setEndDate = None, setGradingPeriodID = None, setGradingPeriodSetCode = None, setGradingPeriodSetCodeDescription = None, setGradingPeriodSetID = None, setIsUpdated = None, setModifiedTime = None, setNumber = None, setOriginalEndDate = None, setOriginalStartDate = None, setProcessAction = None, setProcessActionCode = None, setSectionLengthCode = None, setSectionLengthCodeDescription = None, setSectionLengthEndDate = None, setSectionLengthID = None, setSectionLengthStartDate = None, setStartDate = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnTempGradingPeriodID = False, returnCourseLengthCode = False, returnCreatedTime = False, returnDescription = False, returnEndDate = False, returnGradingPeriodID = False, returnGradingPeriodSetCode = False, returnGradingPeriodSetCodeDescription = False, returnGradingPeriodSetID = False, returnIsUpdated = False, returnModifiedTime = False, returnNumber = False, returnOriginalEndDate = False, returnOriginalStartDate = False, returnProcessAction = False, returnProcessActionCode = False, returnSectionLengthCode = False, returnSectionLengthCodeDescription = False, returnSectionLengthEndDate = False, returnSectionLengthID = False, returnSectionLengthStartDate = False, returnStartDate = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/TempGradingPeriod/" + str(TempGradingPeriodID), verb = "post", return_params_list = return_params, payload = payload_params)

def createTempGradingPeriod(EntityID = 1, setTempGradingPeriodID = None, setCourseLengthCode = None, setCreatedTime = None, setDescription = None, setEndDate = None, setGradingPeriodID = None, setGradingPeriodSetCode = None, setGradingPeriodSetCodeDescription = None, setGradingPeriodSetID = None, setIsUpdated = None, setModifiedTime = None, setNumber = None, setOriginalEndDate = None, setOriginalStartDate = None, setProcessAction = None, setProcessActionCode = None, setSectionLengthCode = None, setSectionLengthCodeDescription = None, setSectionLengthEndDate = None, setSectionLengthID = None, setSectionLengthStartDate = None, setStartDate = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnTempGradingPeriodID = False, returnCourseLengthCode = False, returnCreatedTime = False, returnDescription = False, returnEndDate = False, returnGradingPeriodID = False, returnGradingPeriodSetCode = False, returnGradingPeriodSetCodeDescription = False, returnGradingPeriodSetID = False, returnIsUpdated = False, returnModifiedTime = False, returnNumber = False, returnOriginalEndDate = False, returnOriginalStartDate = False, returnProcessAction = False, returnProcessActionCode = False, returnSectionLengthCode = False, returnSectionLengthCodeDescription = False, returnSectionLengthEndDate = False, returnSectionLengthID = False, returnSectionLengthStartDate = False, returnStartDate = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/TempGradingPeriod/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteTempGradingPeriod(TempGradingPeriodID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/TempGradingPeriod/" + str(TempGradingPeriodID), verb = "delete")


def getEveryTempGradingPeriodError(searchConditions = [], EntityID = 1, returnTempGradingPeriodErrorID = False, returnAcademicStandard = False, returnAssignmentName = False, returnCategory = False, returnCourseDescription = False, returnCreatedTime = False, returnDueDate = False, returnError = False, returnModifiedTime = False, returnSectionNumber = False, returnSubject = False, returnTeacherName = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every TempGradingPeriodError in the district.

    This function returns a dataframe of every TempGradingPeriodError in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/TempGradingPeriodError/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/TempGradingPeriodError/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getTempGradingPeriodError(TempGradingPeriodErrorID, EntityID = 1, returnTempGradingPeriodErrorID = False, returnAcademicStandard = False, returnAssignmentName = False, returnCategory = False, returnCourseDescription = False, returnCreatedTime = False, returnDueDate = False, returnError = False, returnModifiedTime = False, returnSectionNumber = False, returnSubject = False, returnTeacherName = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/TempGradingPeriodError/" + str(TempGradingPeriodErrorID), verb = "get", return_params_list = return_params)

def modifyTempGradingPeriodError(TempGradingPeriodErrorID, EntityID = 1, setTempGradingPeriodErrorID = None, setAcademicStandard = None, setAssignmentName = None, setCategory = None, setCourseDescription = None, setCreatedTime = None, setDueDate = None, setError = None, setModifiedTime = None, setSectionNumber = None, setSubject = None, setTeacherName = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnTempGradingPeriodErrorID = False, returnAcademicStandard = False, returnAssignmentName = False, returnCategory = False, returnCourseDescription = False, returnCreatedTime = False, returnDueDate = False, returnError = False, returnModifiedTime = False, returnSectionNumber = False, returnSubject = False, returnTeacherName = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/TempGradingPeriodError/" + str(TempGradingPeriodErrorID), verb = "post", return_params_list = return_params, payload = payload_params)

def createTempGradingPeriodError(EntityID = 1, setTempGradingPeriodErrorID = None, setAcademicStandard = None, setAssignmentName = None, setCategory = None, setCourseDescription = None, setCreatedTime = None, setDueDate = None, setError = None, setModifiedTime = None, setSectionNumber = None, setSubject = None, setTeacherName = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnTempGradingPeriodErrorID = False, returnAcademicStandard = False, returnAssignmentName = False, returnCategory = False, returnCourseDescription = False, returnCreatedTime = False, returnDueDate = False, returnError = False, returnModifiedTime = False, returnSectionNumber = False, returnSubject = False, returnTeacherName = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/TempGradingPeriodError/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteTempGradingPeriodError(TempGradingPeriodErrorID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/TempGradingPeriodError/" + str(TempGradingPeriodErrorID), verb = "delete")


def getEveryTempGradingUtilityError(searchConditions = [], EntityID = 1, returnTempGradingUtilityErrorID = False, returnCreatedTime = False, returnError = False, returnGrade = False, returnHonorRollName = False, returnModifiedTime = False, returnStudentName = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnValue = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every TempGradingUtilityError in the district.

    This function returns a dataframe of every TempGradingUtilityError in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/TempGradingUtilityError/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/TempGradingUtilityError/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getTempGradingUtilityError(TempGradingUtilityErrorID, EntityID = 1, returnTempGradingUtilityErrorID = False, returnCreatedTime = False, returnError = False, returnGrade = False, returnHonorRollName = False, returnModifiedTime = False, returnStudentName = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnValue = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/TempGradingUtilityError/" + str(TempGradingUtilityErrorID), verb = "get", return_params_list = return_params)

def modifyTempGradingUtilityError(TempGradingUtilityErrorID, EntityID = 1, setTempGradingUtilityErrorID = None, setCreatedTime = None, setError = None, setGrade = None, setHonorRollName = None, setModifiedTime = None, setStudentName = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, setValue = None, returnTempGradingUtilityErrorID = False, returnCreatedTime = False, returnError = False, returnGrade = False, returnHonorRollName = False, returnModifiedTime = False, returnStudentName = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnValue = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/TempGradingUtilityError/" + str(TempGradingUtilityErrorID), verb = "post", return_params_list = return_params, payload = payload_params)

def createTempGradingUtilityError(EntityID = 1, setTempGradingUtilityErrorID = None, setCreatedTime = None, setError = None, setGrade = None, setHonorRollName = None, setModifiedTime = None, setStudentName = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, setValue = None, returnTempGradingUtilityErrorID = False, returnCreatedTime = False, returnError = False, returnGrade = False, returnHonorRollName = False, returnModifiedTime = False, returnStudentName = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnValue = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/TempGradingUtilityError/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteTempGradingUtilityError(TempGradingUtilityErrorID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/TempGradingUtilityError/" + str(TempGradingUtilityErrorID), verb = "delete")


def getEveryTempHonorRollGradeMarkMethodRange(searchConditions = [], EntityID = 1, returnTempHonorRollGradeMarkMethodRangeID = False, returnCreatedTime = False, returnHonorRollGradeMarkMethodID = False, returnHonorRollGradeMarkMethodRangeID = False, returnIsActive = False, returnModifiedTime = False, returnName = False, returnPriorityOrder = False, returnTotalAllowableExceptions = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every TempHonorRollGradeMarkMethodRange in the district.

    This function returns a dataframe of every TempHonorRollGradeMarkMethodRange in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/TempHonorRollGradeMarkMethodRange/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/TempHonorRollGradeMarkMethodRange/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getTempHonorRollGradeMarkMethodRange(TempHonorRollGradeMarkMethodRangeID, EntityID = 1, returnTempHonorRollGradeMarkMethodRangeID = False, returnCreatedTime = False, returnHonorRollGradeMarkMethodID = False, returnHonorRollGradeMarkMethodRangeID = False, returnIsActive = False, returnModifiedTime = False, returnName = False, returnPriorityOrder = False, returnTotalAllowableExceptions = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/TempHonorRollGradeMarkMethodRange/" + str(TempHonorRollGradeMarkMethodRangeID), verb = "get", return_params_list = return_params)

def modifyTempHonorRollGradeMarkMethodRange(TempHonorRollGradeMarkMethodRangeID, EntityID = 1, setTempHonorRollGradeMarkMethodRangeID = None, setCreatedTime = None, setHonorRollGradeMarkMethodID = None, setHonorRollGradeMarkMethodRangeID = None, setIsActive = None, setModifiedTime = None, setName = None, setPriorityOrder = None, setTotalAllowableExceptions = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnTempHonorRollGradeMarkMethodRangeID = False, returnCreatedTime = False, returnHonorRollGradeMarkMethodID = False, returnHonorRollGradeMarkMethodRangeID = False, returnIsActive = False, returnModifiedTime = False, returnName = False, returnPriorityOrder = False, returnTotalAllowableExceptions = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/TempHonorRollGradeMarkMethodRange/" + str(TempHonorRollGradeMarkMethodRangeID), verb = "post", return_params_list = return_params, payload = payload_params)

def createTempHonorRollGradeMarkMethodRange(EntityID = 1, setTempHonorRollGradeMarkMethodRangeID = None, setCreatedTime = None, setHonorRollGradeMarkMethodID = None, setHonorRollGradeMarkMethodRangeID = None, setIsActive = None, setModifiedTime = None, setName = None, setPriorityOrder = None, setTotalAllowableExceptions = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnTempHonorRollGradeMarkMethodRangeID = False, returnCreatedTime = False, returnHonorRollGradeMarkMethodID = False, returnHonorRollGradeMarkMethodRangeID = False, returnIsActive = False, returnModifiedTime = False, returnName = False, returnPriorityOrder = False, returnTotalAllowableExceptions = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/TempHonorRollGradeMarkMethodRange/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteTempHonorRollGradeMarkMethodRange(TempHonorRollGradeMarkMethodRangeID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/TempHonorRollGradeMarkMethodRange/" + str(TempHonorRollGradeMarkMethodRangeID), verb = "delete")


def getEveryTempHonorRollGradeMarkMethodRangeCourseGroup(searchConditions = [], EntityID = 1, returnTempHonorRollGradeMarkMethodRangeCourseGroupID = False, returnCourseGroupID = False, returnCreatedTime = False, returnHonorRollGradeMarkMethodRangeCourseGroupID = False, returnHonorRollGradeMarkMethodRangeID = False, returnModifiedTime = False, returnTempHonorRollGradeMarkMethodRangeID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every TempHonorRollGradeMarkMethodRangeCourseGroup in the district.

    This function returns a dataframe of every TempHonorRollGradeMarkMethodRangeCourseGroup in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/TempHonorRollGradeMarkMethodRangeCourseGroup/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/TempHonorRollGradeMarkMethodRangeCourseGroup/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getTempHonorRollGradeMarkMethodRangeCourseGroup(TempHonorRollGradeMarkMethodRangeCourseGroupID, EntityID = 1, returnTempHonorRollGradeMarkMethodRangeCourseGroupID = False, returnCourseGroupID = False, returnCreatedTime = False, returnHonorRollGradeMarkMethodRangeCourseGroupID = False, returnHonorRollGradeMarkMethodRangeID = False, returnModifiedTime = False, returnTempHonorRollGradeMarkMethodRangeID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/TempHonorRollGradeMarkMethodRangeCourseGroup/" + str(TempHonorRollGradeMarkMethodRangeCourseGroupID), verb = "get", return_params_list = return_params)

def modifyTempHonorRollGradeMarkMethodRangeCourseGroup(TempHonorRollGradeMarkMethodRangeCourseGroupID, EntityID = 1, setTempHonorRollGradeMarkMethodRangeCourseGroupID = None, setCourseGroupID = None, setCreatedTime = None, setHonorRollGradeMarkMethodRangeCourseGroupID = None, setHonorRollGradeMarkMethodRangeID = None, setModifiedTime = None, setTempHonorRollGradeMarkMethodRangeID = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnTempHonorRollGradeMarkMethodRangeCourseGroupID = False, returnCourseGroupID = False, returnCreatedTime = False, returnHonorRollGradeMarkMethodRangeCourseGroupID = False, returnHonorRollGradeMarkMethodRangeID = False, returnModifiedTime = False, returnTempHonorRollGradeMarkMethodRangeID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/TempHonorRollGradeMarkMethodRangeCourseGroup/" + str(TempHonorRollGradeMarkMethodRangeCourseGroupID), verb = "post", return_params_list = return_params, payload = payload_params)

def createTempHonorRollGradeMarkMethodRangeCourseGroup(EntityID = 1, setTempHonorRollGradeMarkMethodRangeCourseGroupID = None, setCourseGroupID = None, setCreatedTime = None, setHonorRollGradeMarkMethodRangeCourseGroupID = None, setHonorRollGradeMarkMethodRangeID = None, setModifiedTime = None, setTempHonorRollGradeMarkMethodRangeID = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnTempHonorRollGradeMarkMethodRangeCourseGroupID = False, returnCourseGroupID = False, returnCreatedTime = False, returnHonorRollGradeMarkMethodRangeCourseGroupID = False, returnHonorRollGradeMarkMethodRangeID = False, returnModifiedTime = False, returnTempHonorRollGradeMarkMethodRangeID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/TempHonorRollGradeMarkMethodRangeCourseGroup/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteTempHonorRollGradeMarkMethodRangeCourseGroup(TempHonorRollGradeMarkMethodRangeCourseGroupID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/TempHonorRollGradeMarkMethodRangeCourseGroup/" + str(TempHonorRollGradeMarkMethodRangeCourseGroupID), verb = "delete")


def getEveryTempHonorRollGradeMarkMethodRangeGradeMark(searchConditions = [], EntityID = 1, returnTempHonorRollGradeMarkMethodRangeGradeMarkID = False, returnCreatedTime = False, returnGradeMarkID = False, returnHonorRollGradeMarkMethodRangeGradeMarkID = False, returnModifiedTime = False, returnTempHonorRollGradeMarkMethodRangeID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every TempHonorRollGradeMarkMethodRangeGradeMark in the district.

    This function returns a dataframe of every TempHonorRollGradeMarkMethodRangeGradeMark in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/TempHonorRollGradeMarkMethodRangeGradeMark/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/TempHonorRollGradeMarkMethodRangeGradeMark/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getTempHonorRollGradeMarkMethodRangeGradeMark(TempHonorRollGradeMarkMethodRangeGradeMarkID, EntityID = 1, returnTempHonorRollGradeMarkMethodRangeGradeMarkID = False, returnCreatedTime = False, returnGradeMarkID = False, returnHonorRollGradeMarkMethodRangeGradeMarkID = False, returnModifiedTime = False, returnTempHonorRollGradeMarkMethodRangeID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/TempHonorRollGradeMarkMethodRangeGradeMark/" + str(TempHonorRollGradeMarkMethodRangeGradeMarkID), verb = "get", return_params_list = return_params)

def modifyTempHonorRollGradeMarkMethodRangeGradeMark(TempHonorRollGradeMarkMethodRangeGradeMarkID, EntityID = 1, setTempHonorRollGradeMarkMethodRangeGradeMarkID = None, setCreatedTime = None, setGradeMarkID = None, setHonorRollGradeMarkMethodRangeGradeMarkID = None, setModifiedTime = None, setTempHonorRollGradeMarkMethodRangeID = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnTempHonorRollGradeMarkMethodRangeGradeMarkID = False, returnCreatedTime = False, returnGradeMarkID = False, returnHonorRollGradeMarkMethodRangeGradeMarkID = False, returnModifiedTime = False, returnTempHonorRollGradeMarkMethodRangeID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/TempHonorRollGradeMarkMethodRangeGradeMark/" + str(TempHonorRollGradeMarkMethodRangeGradeMarkID), verb = "post", return_params_list = return_params, payload = payload_params)

def createTempHonorRollGradeMarkMethodRangeGradeMark(EntityID = 1, setTempHonorRollGradeMarkMethodRangeGradeMarkID = None, setCreatedTime = None, setGradeMarkID = None, setHonorRollGradeMarkMethodRangeGradeMarkID = None, setModifiedTime = None, setTempHonorRollGradeMarkMethodRangeID = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnTempHonorRollGradeMarkMethodRangeGradeMarkID = False, returnCreatedTime = False, returnGradeMarkID = False, returnHonorRollGradeMarkMethodRangeGradeMarkID = False, returnModifiedTime = False, returnTempHonorRollGradeMarkMethodRangeID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/TempHonorRollGradeMarkMethodRangeGradeMark/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteTempHonorRollGradeMarkMethodRangeGradeMark(TempHonorRollGradeMarkMethodRangeGradeMarkID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/TempHonorRollGradeMarkMethodRangeGradeMark/" + str(TempHonorRollGradeMarkMethodRangeGradeMarkID), verb = "delete")


def getEveryTempHonorRollGradeMarkMethodRangeGradingPeriodGradeBucket(searchConditions = [], EntityID = 1, returnTempHonorRollGradeMarkMethodRangeGradingPeriodGradeBucketID = False, returnCreatedTime = False, returnGradingPeriodGradeBucketID = False, returnHonorRollGradeMarkMethodRangeGradingPeriodGradeBucketID = False, returnModifiedTime = False, returnTempHonorRollGradeMarkMethodRangeID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every TempHonorRollGradeMarkMethodRangeGradingPeriodGradeBucket in the district.

    This function returns a dataframe of every TempHonorRollGradeMarkMethodRangeGradingPeriodGradeBucket in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/TempHonorRollGradeMarkMethodRangeGradingPeriodGradeBucket/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/TempHonorRollGradeMarkMethodRangeGradingPeriodGradeBucket/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getTempHonorRollGradeMarkMethodRangeGradingPeriodGradeBucket(TempHonorRollGradeMarkMethodRangeGradingPeriodGradeBucketID, EntityID = 1, returnTempHonorRollGradeMarkMethodRangeGradingPeriodGradeBucketID = False, returnCreatedTime = False, returnGradingPeriodGradeBucketID = False, returnHonorRollGradeMarkMethodRangeGradingPeriodGradeBucketID = False, returnModifiedTime = False, returnTempHonorRollGradeMarkMethodRangeID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/TempHonorRollGradeMarkMethodRangeGradingPeriodGradeBucket/" + str(TempHonorRollGradeMarkMethodRangeGradingPeriodGradeBucketID), verb = "get", return_params_list = return_params)

def modifyTempHonorRollGradeMarkMethodRangeGradingPeriodGradeBucket(TempHonorRollGradeMarkMethodRangeGradingPeriodGradeBucketID, EntityID = 1, setTempHonorRollGradeMarkMethodRangeGradingPeriodGradeBucketID = None, setCreatedTime = None, setGradingPeriodGradeBucketID = None, setHonorRollGradeMarkMethodRangeGradingPeriodGradeBucketID = None, setModifiedTime = None, setTempHonorRollGradeMarkMethodRangeID = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnTempHonorRollGradeMarkMethodRangeGradingPeriodGradeBucketID = False, returnCreatedTime = False, returnGradingPeriodGradeBucketID = False, returnHonorRollGradeMarkMethodRangeGradingPeriodGradeBucketID = False, returnModifiedTime = False, returnTempHonorRollGradeMarkMethodRangeID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/TempHonorRollGradeMarkMethodRangeGradingPeriodGradeBucket/" + str(TempHonorRollGradeMarkMethodRangeGradingPeriodGradeBucketID), verb = "post", return_params_list = return_params, payload = payload_params)

def createTempHonorRollGradeMarkMethodRangeGradingPeriodGradeBucket(EntityID = 1, setTempHonorRollGradeMarkMethodRangeGradingPeriodGradeBucketID = None, setCreatedTime = None, setGradingPeriodGradeBucketID = None, setHonorRollGradeMarkMethodRangeGradingPeriodGradeBucketID = None, setModifiedTime = None, setTempHonorRollGradeMarkMethodRangeID = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnTempHonorRollGradeMarkMethodRangeGradingPeriodGradeBucketID = False, returnCreatedTime = False, returnGradingPeriodGradeBucketID = False, returnHonorRollGradeMarkMethodRangeGradingPeriodGradeBucketID = False, returnModifiedTime = False, returnTempHonorRollGradeMarkMethodRangeID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/TempHonorRollGradeMarkMethodRangeGradingPeriodGradeBucket/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteTempHonorRollGradeMarkMethodRangeGradingPeriodGradeBucket(TempHonorRollGradeMarkMethodRangeGradingPeriodGradeBucketID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/TempHonorRollGradeMarkMethodRangeGradingPeriodGradeBucket/" + str(TempHonorRollGradeMarkMethodRangeGradingPeriodGradeBucketID), verb = "delete")


def getEveryTempHonorRollMethodRange(searchConditions = [], EntityID = 1, returnTempHonorRollMethodRangeID = False, returnCreatedTime = False, returnGPAHigh = False, returnGPALow = False, returnHonorRollMethodRangeID = False, returnIsUsed = False, returnModifiedTime = False, returnName = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every TempHonorRollMethodRange in the district.

    This function returns a dataframe of every TempHonorRollMethodRange in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/TempHonorRollMethodRange/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/TempHonorRollMethodRange/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getTempHonorRollMethodRange(TempHonorRollMethodRangeID, EntityID = 1, returnTempHonorRollMethodRangeID = False, returnCreatedTime = False, returnGPAHigh = False, returnGPALow = False, returnHonorRollMethodRangeID = False, returnIsUsed = False, returnModifiedTime = False, returnName = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/TempHonorRollMethodRange/" + str(TempHonorRollMethodRangeID), verb = "get", return_params_list = return_params)

def modifyTempHonorRollMethodRange(TempHonorRollMethodRangeID, EntityID = 1, setTempHonorRollMethodRangeID = None, setCreatedTime = None, setGPAHigh = None, setGPALow = None, setHonorRollMethodRangeID = None, setIsUsed = None, setModifiedTime = None, setName = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnTempHonorRollMethodRangeID = False, returnCreatedTime = False, returnGPAHigh = False, returnGPALow = False, returnHonorRollMethodRangeID = False, returnIsUsed = False, returnModifiedTime = False, returnName = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/TempHonorRollMethodRange/" + str(TempHonorRollMethodRangeID), verb = "post", return_params_list = return_params, payload = payload_params)

def createTempHonorRollMethodRange(EntityID = 1, setTempHonorRollMethodRangeID = None, setCreatedTime = None, setGPAHigh = None, setGPALow = None, setHonorRollMethodRangeID = None, setIsUsed = None, setModifiedTime = None, setName = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnTempHonorRollMethodRangeID = False, returnCreatedTime = False, returnGPAHigh = False, returnGPALow = False, returnHonorRollMethodRangeID = False, returnIsUsed = False, returnModifiedTime = False, returnName = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/TempHonorRollMethodRange/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteTempHonorRollMethodRange(TempHonorRollMethodRangeID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/TempHonorRollMethodRange/" + str(TempHonorRollMethodRangeID), verb = "delete")


def getEveryTempStudentCommentBucket(searchConditions = [], EntityID = 1, returnTempStudentCommentBucketID = False, returnCommentBucketID = False, returnCommentBucketName = False, returnCreatedTime = False, returnCurrentCommentCode = False, returnDisplayOrder = False, returnGradingPeriodDescription = False, returnGradingPeriodID = False, returnModifiedTime = False, returnNewCommentCode = False, returnNewCommentCodeID = False, returnSectionLengthCode = False, returnStudentCommentBucketID = False, returnStudentName = False, returnStudentSectionDescription = False, returnStudentSectionID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnWorkflowAction = False, returnWorkflowActionCode = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every TempStudentCommentBucket in the district.

    This function returns a dataframe of every TempStudentCommentBucket in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/TempStudentCommentBucket/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/TempStudentCommentBucket/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getTempStudentCommentBucket(TempStudentCommentBucketID, EntityID = 1, returnTempStudentCommentBucketID = False, returnCommentBucketID = False, returnCommentBucketName = False, returnCreatedTime = False, returnCurrentCommentCode = False, returnDisplayOrder = False, returnGradingPeriodDescription = False, returnGradingPeriodID = False, returnModifiedTime = False, returnNewCommentCode = False, returnNewCommentCodeID = False, returnSectionLengthCode = False, returnStudentCommentBucketID = False, returnStudentName = False, returnStudentSectionDescription = False, returnStudentSectionID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnWorkflowAction = False, returnWorkflowActionCode = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/TempStudentCommentBucket/" + str(TempStudentCommentBucketID), verb = "get", return_params_list = return_params)

def modifyTempStudentCommentBucket(TempStudentCommentBucketID, EntityID = 1, setTempStudentCommentBucketID = None, setCommentBucketID = None, setCommentBucketName = None, setCreatedTime = None, setCurrentCommentCode = None, setDisplayOrder = None, setGradingPeriodDescription = None, setGradingPeriodID = None, setModifiedTime = None, setNewCommentCode = None, setNewCommentCodeID = None, setSectionLengthCode = None, setStudentCommentBucketID = None, setStudentName = None, setStudentSectionDescription = None, setStudentSectionID = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, setWorkflowAction = None, setWorkflowActionCode = None, returnTempStudentCommentBucketID = False, returnCommentBucketID = False, returnCommentBucketName = False, returnCreatedTime = False, returnCurrentCommentCode = False, returnDisplayOrder = False, returnGradingPeriodDescription = False, returnGradingPeriodID = False, returnModifiedTime = False, returnNewCommentCode = False, returnNewCommentCodeID = False, returnSectionLengthCode = False, returnStudentCommentBucketID = False, returnStudentName = False, returnStudentSectionDescription = False, returnStudentSectionID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnWorkflowAction = False, returnWorkflowActionCode = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/TempStudentCommentBucket/" + str(TempStudentCommentBucketID), verb = "post", return_params_list = return_params, payload = payload_params)

def createTempStudentCommentBucket(EntityID = 1, setTempStudentCommentBucketID = None, setCommentBucketID = None, setCommentBucketName = None, setCreatedTime = None, setCurrentCommentCode = None, setDisplayOrder = None, setGradingPeriodDescription = None, setGradingPeriodID = None, setModifiedTime = None, setNewCommentCode = None, setNewCommentCodeID = None, setSectionLengthCode = None, setStudentCommentBucketID = None, setStudentName = None, setStudentSectionDescription = None, setStudentSectionID = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, setWorkflowAction = None, setWorkflowActionCode = None, returnTempStudentCommentBucketID = False, returnCommentBucketID = False, returnCommentBucketName = False, returnCreatedTime = False, returnCurrentCommentCode = False, returnDisplayOrder = False, returnGradingPeriodDescription = False, returnGradingPeriodID = False, returnModifiedTime = False, returnNewCommentCode = False, returnNewCommentCodeID = False, returnSectionLengthCode = False, returnStudentCommentBucketID = False, returnStudentName = False, returnStudentSectionDescription = False, returnStudentSectionID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, returnWorkflowAction = False, returnWorkflowActionCode = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/TempStudentCommentBucket/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteTempStudentCommentBucket(TempStudentCommentBucketID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/TempStudentCommentBucket/" + str(TempStudentCommentBucketID), verb = "delete")


def getEveryTempStudentGPABucket(searchConditions = [], EntityID = 1, returnTempStudentGPABucketID = False, returnCorrectBonusGPAPoints = False, returnCorrectGPACredits = False, returnCorrectGPAPoints = False, returnCourseName = False, returnCreatedTime = False, returnCurrentBonusGPAPoints = False, returnCurrentGPACredits = False, returnCurrentGPAPoints = False, returnEntityID = False, returnGPABucketCodeDescription = False, returnGPABucketID = False, returnGPAMethodCodeDescription = False, returnGPAMethodID = False, returnGradeBucketCodeDescription = False, returnGradingPeriodGradeBucketID = False, returnIsDelete = False, returnIsGradReqRankGPA = False, returnModifiedTime = False, returnSchoolYearDescription = False, returnSchoolYearID = False, returnSchoolYearIDForPostSave = False, returnStudentGPABucketGroupID = False, returnStudentGPABucketGroupIsFromTemp = False, returnStudentGPABucketID = False, returnStudentGradeBucketID = False, returnStudentGradeBucketIsFromTemp = False, returnStudentID = False, returnStudentNameLFM = False, returnStudentNumber = False, returnStudentSectionGPABucketGroupID = False, returnStudentSectionGPABucketGroupIsFromTemp = False, returnStudentSectionID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every TempStudentGPABucket in the district.

    This function returns a dataframe of every TempStudentGPABucket in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/TempStudentGPABucket/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/TempStudentGPABucket/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getTempStudentGPABucket(TempStudentGPABucketID, EntityID = 1, returnTempStudentGPABucketID = False, returnCorrectBonusGPAPoints = False, returnCorrectGPACredits = False, returnCorrectGPAPoints = False, returnCourseName = False, returnCreatedTime = False, returnCurrentBonusGPAPoints = False, returnCurrentGPACredits = False, returnCurrentGPAPoints = False, returnEntityID = False, returnGPABucketCodeDescription = False, returnGPABucketID = False, returnGPAMethodCodeDescription = False, returnGPAMethodID = False, returnGradeBucketCodeDescription = False, returnGradingPeriodGradeBucketID = False, returnIsDelete = False, returnIsGradReqRankGPA = False, returnModifiedTime = False, returnSchoolYearDescription = False, returnSchoolYearID = False, returnSchoolYearIDForPostSave = False, returnStudentGPABucketGroupID = False, returnStudentGPABucketGroupIsFromTemp = False, returnStudentGPABucketID = False, returnStudentGradeBucketID = False, returnStudentGradeBucketIsFromTemp = False, returnStudentID = False, returnStudentNameLFM = False, returnStudentNumber = False, returnStudentSectionGPABucketGroupID = False, returnStudentSectionGPABucketGroupIsFromTemp = False, returnStudentSectionID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/TempStudentGPABucket/" + str(TempStudentGPABucketID), verb = "get", return_params_list = return_params)

def modifyTempStudentGPABucket(TempStudentGPABucketID, EntityID = 1, setTempStudentGPABucketID = None, setCorrectBonusGPAPoints = None, setCorrectGPACredits = None, setCorrectGPAPoints = None, setCourseName = None, setCreatedTime = None, setCurrentBonusGPAPoints = None, setCurrentGPACredits = None, setCurrentGPAPoints = None, setEntityID = None, setGPABucketCodeDescription = None, setGPABucketID = None, setGPAMethodCodeDescription = None, setGPAMethodID = None, setGradeBucketCodeDescription = None, setGradingPeriodGradeBucketID = None, setIsDelete = None, setIsGradReqRankGPA = None, setModifiedTime = None, setSchoolYearDescription = None, setSchoolYearID = None, setSchoolYearIDForPostSave = None, setStudentGPABucketGroupID = None, setStudentGPABucketGroupIsFromTemp = None, setStudentGPABucketID = None, setStudentGradeBucketID = None, setStudentGradeBucketIsFromTemp = None, setStudentID = None, setStudentNameLFM = None, setStudentNumber = None, setStudentSectionGPABucketGroupID = None, setStudentSectionGPABucketGroupIsFromTemp = None, setStudentSectionID = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnTempStudentGPABucketID = False, returnCorrectBonusGPAPoints = False, returnCorrectGPACredits = False, returnCorrectGPAPoints = False, returnCourseName = False, returnCreatedTime = False, returnCurrentBonusGPAPoints = False, returnCurrentGPACredits = False, returnCurrentGPAPoints = False, returnEntityID = False, returnGPABucketCodeDescription = False, returnGPABucketID = False, returnGPAMethodCodeDescription = False, returnGPAMethodID = False, returnGradeBucketCodeDescription = False, returnGradingPeriodGradeBucketID = False, returnIsDelete = False, returnIsGradReqRankGPA = False, returnModifiedTime = False, returnSchoolYearDescription = False, returnSchoolYearID = False, returnSchoolYearIDForPostSave = False, returnStudentGPABucketGroupID = False, returnStudentGPABucketGroupIsFromTemp = False, returnStudentGPABucketID = False, returnStudentGradeBucketID = False, returnStudentGradeBucketIsFromTemp = False, returnStudentID = False, returnStudentNameLFM = False, returnStudentNumber = False, returnStudentSectionGPABucketGroupID = False, returnStudentSectionGPABucketGroupIsFromTemp = False, returnStudentSectionID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/TempStudentGPABucket/" + str(TempStudentGPABucketID), verb = "post", return_params_list = return_params, payload = payload_params)

def createTempStudentGPABucket(EntityID = 1, setTempStudentGPABucketID = None, setCorrectBonusGPAPoints = None, setCorrectGPACredits = None, setCorrectGPAPoints = None, setCourseName = None, setCreatedTime = None, setCurrentBonusGPAPoints = None, setCurrentGPACredits = None, setCurrentGPAPoints = None, setEntityID = None, setGPABucketCodeDescription = None, setGPABucketID = None, setGPAMethodCodeDescription = None, setGPAMethodID = None, setGradeBucketCodeDescription = None, setGradingPeriodGradeBucketID = None, setIsDelete = None, setIsGradReqRankGPA = None, setModifiedTime = None, setSchoolYearDescription = None, setSchoolYearID = None, setSchoolYearIDForPostSave = None, setStudentGPABucketGroupID = None, setStudentGPABucketGroupIsFromTemp = None, setStudentGPABucketID = None, setStudentGradeBucketID = None, setStudentGradeBucketIsFromTemp = None, setStudentID = None, setStudentNameLFM = None, setStudentNumber = None, setStudentSectionGPABucketGroupID = None, setStudentSectionGPABucketGroupIsFromTemp = None, setStudentSectionID = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnTempStudentGPABucketID = False, returnCorrectBonusGPAPoints = False, returnCorrectGPACredits = False, returnCorrectGPAPoints = False, returnCourseName = False, returnCreatedTime = False, returnCurrentBonusGPAPoints = False, returnCurrentGPACredits = False, returnCurrentGPAPoints = False, returnEntityID = False, returnGPABucketCodeDescription = False, returnGPABucketID = False, returnGPAMethodCodeDescription = False, returnGPAMethodID = False, returnGradeBucketCodeDescription = False, returnGradingPeriodGradeBucketID = False, returnIsDelete = False, returnIsGradReqRankGPA = False, returnModifiedTime = False, returnSchoolYearDescription = False, returnSchoolYearID = False, returnSchoolYearIDForPostSave = False, returnStudentGPABucketGroupID = False, returnStudentGPABucketGroupIsFromTemp = False, returnStudentGPABucketID = False, returnStudentGradeBucketID = False, returnStudentGradeBucketIsFromTemp = False, returnStudentID = False, returnStudentNameLFM = False, returnStudentNumber = False, returnStudentSectionGPABucketGroupID = False, returnStudentSectionGPABucketGroupIsFromTemp = False, returnStudentSectionID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/TempStudentGPABucket/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteTempStudentGPABucket(TempStudentGPABucketID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/TempStudentGPABucket/" + str(TempStudentGPABucketID), verb = "delete")


def getEveryTempStudentGPABucketGroup(searchConditions = [], EntityID = 1, returnTempStudentGPABucketGroupID = False, returnCreatedTime = False, returnGPABucketID = False, returnGPAMethodID = False, returnModifiedTime = False, returnSchoolYearID = False, returnStudentID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every TempStudentGPABucketGroup in the district.

    This function returns a dataframe of every TempStudentGPABucketGroup in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/TempStudentGPABucketGroup/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/TempStudentGPABucketGroup/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getTempStudentGPABucketGroup(TempStudentGPABucketGroupID, EntityID = 1, returnTempStudentGPABucketGroupID = False, returnCreatedTime = False, returnGPABucketID = False, returnGPAMethodID = False, returnModifiedTime = False, returnSchoolYearID = False, returnStudentID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/TempStudentGPABucketGroup/" + str(TempStudentGPABucketGroupID), verb = "get", return_params_list = return_params)

def modifyTempStudentGPABucketGroup(TempStudentGPABucketGroupID, EntityID = 1, setTempStudentGPABucketGroupID = None, setCreatedTime = None, setGPABucketID = None, setGPAMethodID = None, setModifiedTime = None, setSchoolYearID = None, setStudentID = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnTempStudentGPABucketGroupID = False, returnCreatedTime = False, returnGPABucketID = False, returnGPAMethodID = False, returnModifiedTime = False, returnSchoolYearID = False, returnStudentID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/TempStudentGPABucketGroup/" + str(TempStudentGPABucketGroupID), verb = "post", return_params_list = return_params, payload = payload_params)

def createTempStudentGPABucketGroup(EntityID = 1, setTempStudentGPABucketGroupID = None, setCreatedTime = None, setGPABucketID = None, setGPAMethodID = None, setModifiedTime = None, setSchoolYearID = None, setStudentID = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnTempStudentGPABucketGroupID = False, returnCreatedTime = False, returnGPABucketID = False, returnGPAMethodID = False, returnModifiedTime = False, returnSchoolYearID = False, returnStudentID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/TempStudentGPABucketGroup/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteTempStudentGPABucketGroup(TempStudentGPABucketGroupID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/TempStudentGPABucketGroup/" + str(TempStudentGPABucketGroupID), verb = "delete")


def getEveryTempStudentGradeBucket(searchConditions = [], EntityID = 1, returnTempStudentGradeBucketID = False, returnCompleteByTeacherCode = False, returnCreatedTime = False, returnDoNotPost = False, returnEntityID = False, returnGradeBucketCode = False, returnGradeMarkID = False, returnGradeMarkIDOverride = False, returnGradeMarkIDReverse = False, returnGradingPeriodGradeBucketID = False, returnIsTransferBucket = False, returnIsTransferCourse = False, returnModifiedTime = False, returnNewCode = False, returnOldCode = False, returnOverallPercent = False, returnOverallStatus = False, returnPercentWithAdjustment = False, returnSchoolYearID = False, returnSectionID = False, returnStudentGradeBucketID = False, returnStudentName = False, returnStudentSectionID = False, returnStudentSectionName = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every TempStudentGradeBucket in the district.

    This function returns a dataframe of every TempStudentGradeBucket in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/TempStudentGradeBucket/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/TempStudentGradeBucket/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getTempStudentGradeBucket(TempStudentGradeBucketID, EntityID = 1, returnTempStudentGradeBucketID = False, returnCompleteByTeacherCode = False, returnCreatedTime = False, returnDoNotPost = False, returnEntityID = False, returnGradeBucketCode = False, returnGradeMarkID = False, returnGradeMarkIDOverride = False, returnGradeMarkIDReverse = False, returnGradingPeriodGradeBucketID = False, returnIsTransferBucket = False, returnIsTransferCourse = False, returnModifiedTime = False, returnNewCode = False, returnOldCode = False, returnOverallPercent = False, returnOverallStatus = False, returnPercentWithAdjustment = False, returnSchoolYearID = False, returnSectionID = False, returnStudentGradeBucketID = False, returnStudentName = False, returnStudentSectionID = False, returnStudentSectionName = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/TempStudentGradeBucket/" + str(TempStudentGradeBucketID), verb = "get", return_params_list = return_params)

def modifyTempStudentGradeBucket(TempStudentGradeBucketID, EntityID = 1, setTempStudentGradeBucketID = None, setCompleteByTeacherCode = None, setCreatedTime = None, setDoNotPost = None, setEntityID = None, setGradeBucketCode = None, setGradeMarkID = None, setGradeMarkIDOverride = None, setGradeMarkIDReverse = None, setGradingPeriodGradeBucketID = None, setIsTransferBucket = None, setIsTransferCourse = None, setModifiedTime = None, setNewCode = None, setOldCode = None, setOverallPercent = None, setOverallStatus = None, setPercentWithAdjustment = None, setSchoolYearID = None, setSectionID = None, setStudentGradeBucketID = None, setStudentName = None, setStudentSectionID = None, setStudentSectionName = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnTempStudentGradeBucketID = False, returnCompleteByTeacherCode = False, returnCreatedTime = False, returnDoNotPost = False, returnEntityID = False, returnGradeBucketCode = False, returnGradeMarkID = False, returnGradeMarkIDOverride = False, returnGradeMarkIDReverse = False, returnGradingPeriodGradeBucketID = False, returnIsTransferBucket = False, returnIsTransferCourse = False, returnModifiedTime = False, returnNewCode = False, returnOldCode = False, returnOverallPercent = False, returnOverallStatus = False, returnPercentWithAdjustment = False, returnSchoolYearID = False, returnSectionID = False, returnStudentGradeBucketID = False, returnStudentName = False, returnStudentSectionID = False, returnStudentSectionName = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/TempStudentGradeBucket/" + str(TempStudentGradeBucketID), verb = "post", return_params_list = return_params, payload = payload_params)

def createTempStudentGradeBucket(EntityID = 1, setTempStudentGradeBucketID = None, setCompleteByTeacherCode = None, setCreatedTime = None, setDoNotPost = None, setEntityID = None, setGradeBucketCode = None, setGradeMarkID = None, setGradeMarkIDOverride = None, setGradeMarkIDReverse = None, setGradingPeriodGradeBucketID = None, setIsTransferBucket = None, setIsTransferCourse = None, setModifiedTime = None, setNewCode = None, setOldCode = None, setOverallPercent = None, setOverallStatus = None, setPercentWithAdjustment = None, setSchoolYearID = None, setSectionID = None, setStudentGradeBucketID = None, setStudentName = None, setStudentSectionID = None, setStudentSectionName = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnTempStudentGradeBucketID = False, returnCompleteByTeacherCode = False, returnCreatedTime = False, returnDoNotPost = False, returnEntityID = False, returnGradeBucketCode = False, returnGradeMarkID = False, returnGradeMarkIDOverride = False, returnGradeMarkIDReverse = False, returnGradingPeriodGradeBucketID = False, returnIsTransferBucket = False, returnIsTransferCourse = False, returnModifiedTime = False, returnNewCode = False, returnOldCode = False, returnOverallPercent = False, returnOverallStatus = False, returnPercentWithAdjustment = False, returnSchoolYearID = False, returnSectionID = False, returnStudentGradeBucketID = False, returnStudentName = False, returnStudentSectionID = False, returnStudentSectionName = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/TempStudentGradeBucket/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteTempStudentGradeBucket(TempStudentGradeBucketID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/TempStudentGradeBucket/" + str(TempStudentGradeBucketID), verb = "delete")


def getEveryTempStudentGradeBucketFlag(searchConditions = [], EntityID = 1, returnTempStudentGradeBucketFlagID = False, returnCourseSectionCode = False, returnCreatedTime = False, returnExceptionReason = False, returnGradeBucketFlagCode = False, returnGradeBucketFlagID = False, returnGradeBucketLabel = False, returnGradeMarkCode = False, returnIsDelete = False, returnIsError = False, returnIsException = False, returnIsManual = False, returnModifiedTime = False, returnSectionLengthCode = False, returnStudentGradeBucketFlagIDToDelete = False, returnStudentGradeBucketID = False, returnStudentName = False, returnStudentSectionDescription = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every TempStudentGradeBucketFlag in the district.

    This function returns a dataframe of every TempStudentGradeBucketFlag in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/TempStudentGradeBucketFlag/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/TempStudentGradeBucketFlag/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getTempStudentGradeBucketFlag(TempStudentGradeBucketFlagID, EntityID = 1, returnTempStudentGradeBucketFlagID = False, returnCourseSectionCode = False, returnCreatedTime = False, returnExceptionReason = False, returnGradeBucketFlagCode = False, returnGradeBucketFlagID = False, returnGradeBucketLabel = False, returnGradeMarkCode = False, returnIsDelete = False, returnIsError = False, returnIsException = False, returnIsManual = False, returnModifiedTime = False, returnSectionLengthCode = False, returnStudentGradeBucketFlagIDToDelete = False, returnStudentGradeBucketID = False, returnStudentName = False, returnStudentSectionDescription = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/TempStudentGradeBucketFlag/" + str(TempStudentGradeBucketFlagID), verb = "get", return_params_list = return_params)

def modifyTempStudentGradeBucketFlag(TempStudentGradeBucketFlagID, EntityID = 1, setTempStudentGradeBucketFlagID = None, setCourseSectionCode = None, setCreatedTime = None, setExceptionReason = None, setGradeBucketFlagCode = None, setGradeBucketFlagID = None, setGradeBucketLabel = None, setGradeMarkCode = None, setIsDelete = None, setIsError = None, setIsException = None, setIsManual = None, setModifiedTime = None, setSectionLengthCode = None, setStudentGradeBucketFlagIDToDelete = None, setStudentGradeBucketID = None, setStudentName = None, setStudentSectionDescription = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnTempStudentGradeBucketFlagID = False, returnCourseSectionCode = False, returnCreatedTime = False, returnExceptionReason = False, returnGradeBucketFlagCode = False, returnGradeBucketFlagID = False, returnGradeBucketLabel = False, returnGradeMarkCode = False, returnIsDelete = False, returnIsError = False, returnIsException = False, returnIsManual = False, returnModifiedTime = False, returnSectionLengthCode = False, returnStudentGradeBucketFlagIDToDelete = False, returnStudentGradeBucketID = False, returnStudentName = False, returnStudentSectionDescription = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/TempStudentGradeBucketFlag/" + str(TempStudentGradeBucketFlagID), verb = "post", return_params_list = return_params, payload = payload_params)

def createTempStudentGradeBucketFlag(EntityID = 1, setTempStudentGradeBucketFlagID = None, setCourseSectionCode = None, setCreatedTime = None, setExceptionReason = None, setGradeBucketFlagCode = None, setGradeBucketFlagID = None, setGradeBucketLabel = None, setGradeMarkCode = None, setIsDelete = None, setIsError = None, setIsException = None, setIsManual = None, setModifiedTime = None, setSectionLengthCode = None, setStudentGradeBucketFlagIDToDelete = None, setStudentGradeBucketID = None, setStudentName = None, setStudentSectionDescription = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnTempStudentGradeBucketFlagID = False, returnCourseSectionCode = False, returnCreatedTime = False, returnExceptionReason = False, returnGradeBucketFlagCode = False, returnGradeBucketFlagID = False, returnGradeBucketLabel = False, returnGradeMarkCode = False, returnIsDelete = False, returnIsError = False, returnIsException = False, returnIsManual = False, returnModifiedTime = False, returnSectionLengthCode = False, returnStudentGradeBucketFlagIDToDelete = False, returnStudentGradeBucketID = False, returnStudentName = False, returnStudentSectionDescription = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/TempStudentGradeBucketFlag/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteTempStudentGradeBucketFlag(TempStudentGradeBucketFlagID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/TempStudentGradeBucketFlag/" + str(TempStudentGradeBucketFlagID), verb = "delete")


def getEveryTempStudentHonorRollRunLevel(searchConditions = [], EntityID = 1, returnTempStudentHonorRollRunLevelID = False, returnCreatedTime = False, returnGPAValue = False, returnGrade = False, returnHonorRollRunLevelID = False, returnHonorRollRunLevelName = False, returnHonorRollRunLevelOrder = False, returnModifiedTime = False, returnStudentID = False, returnStudentName = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every TempStudentHonorRollRunLevel in the district.

    This function returns a dataframe of every TempStudentHonorRollRunLevel in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/TempStudentHonorRollRunLevel/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/TempStudentHonorRollRunLevel/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getTempStudentHonorRollRunLevel(TempStudentHonorRollRunLevelID, EntityID = 1, returnTempStudentHonorRollRunLevelID = False, returnCreatedTime = False, returnGPAValue = False, returnGrade = False, returnHonorRollRunLevelID = False, returnHonorRollRunLevelName = False, returnHonorRollRunLevelOrder = False, returnModifiedTime = False, returnStudentID = False, returnStudentName = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/TempStudentHonorRollRunLevel/" + str(TempStudentHonorRollRunLevelID), verb = "get", return_params_list = return_params)

def modifyTempStudentHonorRollRunLevel(TempStudentHonorRollRunLevelID, EntityID = 1, setTempStudentHonorRollRunLevelID = None, setCreatedTime = None, setGPAValue = None, setGrade = None, setHonorRollRunLevelID = None, setHonorRollRunLevelName = None, setHonorRollRunLevelOrder = None, setModifiedTime = None, setStudentID = None, setStudentName = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnTempStudentHonorRollRunLevelID = False, returnCreatedTime = False, returnGPAValue = False, returnGrade = False, returnHonorRollRunLevelID = False, returnHonorRollRunLevelName = False, returnHonorRollRunLevelOrder = False, returnModifiedTime = False, returnStudentID = False, returnStudentName = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/TempStudentHonorRollRunLevel/" + str(TempStudentHonorRollRunLevelID), verb = "post", return_params_list = return_params, payload = payload_params)

def createTempStudentHonorRollRunLevel(EntityID = 1, setTempStudentHonorRollRunLevelID = None, setCreatedTime = None, setGPAValue = None, setGrade = None, setHonorRollRunLevelID = None, setHonorRollRunLevelName = None, setHonorRollRunLevelOrder = None, setModifiedTime = None, setStudentID = None, setStudentName = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnTempStudentHonorRollRunLevelID = False, returnCreatedTime = False, returnGPAValue = False, returnGrade = False, returnHonorRollRunLevelID = False, returnHonorRollRunLevelName = False, returnHonorRollRunLevelOrder = False, returnModifiedTime = False, returnStudentID = False, returnStudentName = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/TempStudentHonorRollRunLevel/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteTempStudentHonorRollRunLevel(TempStudentHonorRollRunLevelID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/TempStudentHonorRollRunLevel/" + str(TempStudentHonorRollRunLevelID), verb = "delete")


def getEveryTempStudentRank(searchConditions = [], EntityID = 1, returnTempStudentRankID = False, returnCohortNumericYear = False, returnCreatedTime = False, returnGPA = False, returnGraduationRequirementYear = False, returnIsManualRank = False, returnIsProspectiveRank = False, returnModifiedTime = False, returnNoRank = False, returnRank = False, returnRankMethodID = False, returnSchoolYearIDCohort = False, returnStudentGrade = False, returnStudentID = False, returnStudentName = False, returnStudentRankID = False, returnStudentRankSort = False, returnTotalStudents = False, returnUseOverride = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every TempStudentRank in the district.

    This function returns a dataframe of every TempStudentRank in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/TempStudentRank/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/TempStudentRank/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getTempStudentRank(TempStudentRankID, EntityID = 1, returnTempStudentRankID = False, returnCohortNumericYear = False, returnCreatedTime = False, returnGPA = False, returnGraduationRequirementYear = False, returnIsManualRank = False, returnIsProspectiveRank = False, returnModifiedTime = False, returnNoRank = False, returnRank = False, returnRankMethodID = False, returnSchoolYearIDCohort = False, returnStudentGrade = False, returnStudentID = False, returnStudentName = False, returnStudentRankID = False, returnStudentRankSort = False, returnTotalStudents = False, returnUseOverride = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/TempStudentRank/" + str(TempStudentRankID), verb = "get", return_params_list = return_params)

def modifyTempStudentRank(TempStudentRankID, EntityID = 1, setTempStudentRankID = None, setCohortNumericYear = None, setCreatedTime = None, setGPA = None, setGraduationRequirementYear = None, setIsManualRank = None, setIsProspectiveRank = None, setModifiedTime = None, setNoRank = None, setRank = None, setRankMethodID = None, setSchoolYearIDCohort = None, setStudentGrade = None, setStudentID = None, setStudentName = None, setStudentRankID = None, setStudentRankSort = None, setTotalStudents = None, setUseOverride = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnTempStudentRankID = False, returnCohortNumericYear = False, returnCreatedTime = False, returnGPA = False, returnGraduationRequirementYear = False, returnIsManualRank = False, returnIsProspectiveRank = False, returnModifiedTime = False, returnNoRank = False, returnRank = False, returnRankMethodID = False, returnSchoolYearIDCohort = False, returnStudentGrade = False, returnStudentID = False, returnStudentName = False, returnStudentRankID = False, returnStudentRankSort = False, returnTotalStudents = False, returnUseOverride = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/TempStudentRank/" + str(TempStudentRankID), verb = "post", return_params_list = return_params, payload = payload_params)

def createTempStudentRank(EntityID = 1, setTempStudentRankID = None, setCohortNumericYear = None, setCreatedTime = None, setGPA = None, setGraduationRequirementYear = None, setIsManualRank = None, setIsProspectiveRank = None, setModifiedTime = None, setNoRank = None, setRank = None, setRankMethodID = None, setSchoolYearIDCohort = None, setStudentGrade = None, setStudentID = None, setStudentName = None, setStudentRankID = None, setStudentRankSort = None, setTotalStudents = None, setUseOverride = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnTempStudentRankID = False, returnCohortNumericYear = False, returnCreatedTime = False, returnGPA = False, returnGraduationRequirementYear = False, returnIsManualRank = False, returnIsProspectiveRank = False, returnModifiedTime = False, returnNoRank = False, returnRank = False, returnRankMethodID = False, returnSchoolYearIDCohort = False, returnStudentGrade = False, returnStudentID = False, returnStudentName = False, returnStudentRankID = False, returnStudentRankSort = False, returnTotalStudents = False, returnUseOverride = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/TempStudentRank/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteTempStudentRank(TempStudentRankID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/TempStudentRank/" + str(TempStudentRankID), verb = "delete")


def getEveryTempStudentSection(searchConditions = [], EntityID = 1, returnTempStudentSectionID = False, returnCourse = False, returnCreatedTime = False, returnModifiedTime = False, returnSectionCode = False, returnStudentNameLFM = False, returnStudentNumber = False, returnStudentSectionID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every TempStudentSection in the district.

    This function returns a dataframe of every TempStudentSection in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/TempStudentSection/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/TempStudentSection/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getTempStudentSection(TempStudentSectionID, EntityID = 1, returnTempStudentSectionID = False, returnCourse = False, returnCreatedTime = False, returnModifiedTime = False, returnSectionCode = False, returnStudentNameLFM = False, returnStudentNumber = False, returnStudentSectionID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/TempStudentSection/" + str(TempStudentSectionID), verb = "get", return_params_list = return_params)

def modifyTempStudentSection(TempStudentSectionID, EntityID = 1, setTempStudentSectionID = None, setCourse = None, setCreatedTime = None, setModifiedTime = None, setSectionCode = None, setStudentNameLFM = None, setStudentNumber = None, setStudentSectionID = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnTempStudentSectionID = False, returnCourse = False, returnCreatedTime = False, returnModifiedTime = False, returnSectionCode = False, returnStudentNameLFM = False, returnStudentNumber = False, returnStudentSectionID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/TempStudentSection/" + str(TempStudentSectionID), verb = "post", return_params_list = return_params, payload = payload_params)

def createTempStudentSection(EntityID = 1, setTempStudentSectionID = None, setCourse = None, setCreatedTime = None, setModifiedTime = None, setSectionCode = None, setStudentNameLFM = None, setStudentNumber = None, setStudentSectionID = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnTempStudentSectionID = False, returnCourse = False, returnCreatedTime = False, returnModifiedTime = False, returnSectionCode = False, returnStudentNameLFM = False, returnStudentNumber = False, returnStudentSectionID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/TempStudentSection/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteTempStudentSection(TempStudentSectionID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/TempStudentSection/" + str(TempStudentSectionID), verb = "delete")


def getEveryTempStudentSectionFailedUpdate(searchConditions = [], EntityID = 1, returnTempStudentSectionFailedUpdateID = False, returnCourse = False, returnCreatedTime = False, returnModifiedTime = False, returnNote = False, returnSection = False, returnStudentNameLFM = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every TempStudentSectionFailedUpdate in the district.

    This function returns a dataframe of every TempStudentSectionFailedUpdate in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/TempStudentSectionFailedUpdate/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/TempStudentSectionFailedUpdate/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getTempStudentSectionFailedUpdate(TempStudentSectionFailedUpdateID, EntityID = 1, returnTempStudentSectionFailedUpdateID = False, returnCourse = False, returnCreatedTime = False, returnModifiedTime = False, returnNote = False, returnSection = False, returnStudentNameLFM = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/TempStudentSectionFailedUpdate/" + str(TempStudentSectionFailedUpdateID), verb = "get", return_params_list = return_params)

def modifyTempStudentSectionFailedUpdate(TempStudentSectionFailedUpdateID, EntityID = 1, setTempStudentSectionFailedUpdateID = None, setCourse = None, setCreatedTime = None, setModifiedTime = None, setNote = None, setSection = None, setStudentNameLFM = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnTempStudentSectionFailedUpdateID = False, returnCourse = False, returnCreatedTime = False, returnModifiedTime = False, returnNote = False, returnSection = False, returnStudentNameLFM = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/TempStudentSectionFailedUpdate/" + str(TempStudentSectionFailedUpdateID), verb = "post", return_params_list = return_params, payload = payload_params)

def createTempStudentSectionFailedUpdate(EntityID = 1, setTempStudentSectionFailedUpdateID = None, setCourse = None, setCreatedTime = None, setModifiedTime = None, setNote = None, setSection = None, setStudentNameLFM = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnTempStudentSectionFailedUpdateID = False, returnCourse = False, returnCreatedTime = False, returnModifiedTime = False, returnNote = False, returnSection = False, returnStudentNameLFM = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/TempStudentSectionFailedUpdate/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteTempStudentSectionFailedUpdate(TempStudentSectionFailedUpdateID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/TempStudentSectionFailedUpdate/" + str(TempStudentSectionFailedUpdateID), verb = "delete")


def getEveryTempStudentSectionGPABucketGroup(searchConditions = [], EntityID = 1, returnTempStudentSectionGPABucketGroupID = False, returnCreatedTime = False, returnEntityID = False, returnGPABucketID = False, returnGPAMethodID = False, returnIsCumulative = False, returnModifiedTime = False, returnSchoolYearID = False, returnStudentGPABucketGroupID = False, returnStudentGPABucketGroupIsFromTemp = False, returnStudentID = False, returnStudentSectionID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every TempStudentSectionGPABucketGroup in the district.

    This function returns a dataframe of every TempStudentSectionGPABucketGroup in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/TempStudentSectionGPABucketGroup/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/TempStudentSectionGPABucketGroup/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getTempStudentSectionGPABucketGroup(TempStudentSectionGPABucketGroupID, EntityID = 1, returnTempStudentSectionGPABucketGroupID = False, returnCreatedTime = False, returnEntityID = False, returnGPABucketID = False, returnGPAMethodID = False, returnIsCumulative = False, returnModifiedTime = False, returnSchoolYearID = False, returnStudentGPABucketGroupID = False, returnStudentGPABucketGroupIsFromTemp = False, returnStudentID = False, returnStudentSectionID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/TempStudentSectionGPABucketGroup/" + str(TempStudentSectionGPABucketGroupID), verb = "get", return_params_list = return_params)

def modifyTempStudentSectionGPABucketGroup(TempStudentSectionGPABucketGroupID, EntityID = 1, setTempStudentSectionGPABucketGroupID = None, setCreatedTime = None, setEntityID = None, setGPABucketID = None, setGPAMethodID = None, setIsCumulative = None, setModifiedTime = None, setSchoolYearID = None, setStudentGPABucketGroupID = None, setStudentGPABucketGroupIsFromTemp = None, setStudentID = None, setStudentSectionID = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnTempStudentSectionGPABucketGroupID = False, returnCreatedTime = False, returnEntityID = False, returnGPABucketID = False, returnGPAMethodID = False, returnIsCumulative = False, returnModifiedTime = False, returnSchoolYearID = False, returnStudentGPABucketGroupID = False, returnStudentGPABucketGroupIsFromTemp = False, returnStudentID = False, returnStudentSectionID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/TempStudentSectionGPABucketGroup/" + str(TempStudentSectionGPABucketGroupID), verb = "post", return_params_list = return_params, payload = payload_params)

def createTempStudentSectionGPABucketGroup(EntityID = 1, setTempStudentSectionGPABucketGroupID = None, setCreatedTime = None, setEntityID = None, setGPABucketID = None, setGPAMethodID = None, setIsCumulative = None, setModifiedTime = None, setSchoolYearID = None, setStudentGPABucketGroupID = None, setStudentGPABucketGroupIsFromTemp = None, setStudentID = None, setStudentSectionID = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnTempStudentSectionGPABucketGroupID = False, returnCreatedTime = False, returnEntityID = False, returnGPABucketID = False, returnGPAMethodID = False, returnIsCumulative = False, returnModifiedTime = False, returnSchoolYearID = False, returnStudentGPABucketGroupID = False, returnStudentGPABucketGroupIsFromTemp = False, returnStudentID = False, returnStudentSectionID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/TempStudentSectionGPABucketGroup/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteTempStudentSectionGPABucketGroup(TempStudentSectionGPABucketGroupID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/TempStudentSectionGPABucketGroup/" + str(TempStudentSectionGPABucketGroupID), verb = "delete")


def getEveryTempTransferCourse(searchConditions = [], EntityID = 1, returnTempTransferCourseID = False, returnCourseCredits = False, returnCourseDescription = False, returnCourseID = False, returnCourseSection = False, returnCreatedTime = False, returnEarnedCreditOverride = False, returnEndDate = False, returnEntityCode = False, returnEntityID = False, returnExcludeFromReportCardsAndTranscripts = False, returnExcludeFromStudentSectionLinking = False, returnGradedCourse = False, returnGradeReferenceID = False, returnGradingPeriodSetID = False, returnGradYear = False, returnModifiedTime = False, returnSchoolYear = False, returnSchoolYearID = False, returnSectionID = False, returnSectionLengthID = False, returnSectionLengthSubsetID = False, returnStartDate = False, returnStudentID = False, returnTotalEarnedCredits = False, returnTotalFailedCredits = False, returnUseAddOnGPA = False, returnUseEarnedCreditOverride = False, returnUseEarnedCreditPercentOverride = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every TempTransferCourse in the district.

    This function returns a dataframe of every TempTransferCourse in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/TempTransferCourse/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/TempTransferCourse/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getTempTransferCourse(TempTransferCourseID, EntityID = 1, returnTempTransferCourseID = False, returnCourseCredits = False, returnCourseDescription = False, returnCourseID = False, returnCourseSection = False, returnCreatedTime = False, returnEarnedCreditOverride = False, returnEndDate = False, returnEntityCode = False, returnEntityID = False, returnExcludeFromReportCardsAndTranscripts = False, returnExcludeFromStudentSectionLinking = False, returnGradedCourse = False, returnGradeReferenceID = False, returnGradingPeriodSetID = False, returnGradYear = False, returnModifiedTime = False, returnSchoolYear = False, returnSchoolYearID = False, returnSectionID = False, returnSectionLengthID = False, returnSectionLengthSubsetID = False, returnStartDate = False, returnStudentID = False, returnTotalEarnedCredits = False, returnTotalFailedCredits = False, returnUseAddOnGPA = False, returnUseEarnedCreditOverride = False, returnUseEarnedCreditPercentOverride = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/TempTransferCourse/" + str(TempTransferCourseID), verb = "get", return_params_list = return_params)

def modifyTempTransferCourse(TempTransferCourseID, EntityID = 1, setTempTransferCourseID = None, setCourseCredits = None, setCourseDescription = None, setCourseID = None, setCourseSection = None, setCreatedTime = None, setEarnedCreditOverride = None, setEndDate = None, setEntityCode = None, setEntityID = None, setExcludeFromReportCardsAndTranscripts = None, setExcludeFromStudentSectionLinking = None, setGradedCourse = None, setGradeReferenceID = None, setGradingPeriodSetID = None, setGradYear = None, setModifiedTime = None, setSchoolYear = None, setSchoolYearID = None, setSectionID = None, setSectionLengthID = None, setSectionLengthSubsetID = None, setStartDate = None, setStudentID = None, setTotalEarnedCredits = None, setTotalFailedCredits = None, setUseAddOnGPA = None, setUseEarnedCreditOverride = None, setUseEarnedCreditPercentOverride = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnTempTransferCourseID = False, returnCourseCredits = False, returnCourseDescription = False, returnCourseID = False, returnCourseSection = False, returnCreatedTime = False, returnEarnedCreditOverride = False, returnEndDate = False, returnEntityCode = False, returnEntityID = False, returnExcludeFromReportCardsAndTranscripts = False, returnExcludeFromStudentSectionLinking = False, returnGradedCourse = False, returnGradeReferenceID = False, returnGradingPeriodSetID = False, returnGradYear = False, returnModifiedTime = False, returnSchoolYear = False, returnSchoolYearID = False, returnSectionID = False, returnSectionLengthID = False, returnSectionLengthSubsetID = False, returnStartDate = False, returnStudentID = False, returnTotalEarnedCredits = False, returnTotalFailedCredits = False, returnUseAddOnGPA = False, returnUseEarnedCreditOverride = False, returnUseEarnedCreditPercentOverride = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/TempTransferCourse/" + str(TempTransferCourseID), verb = "post", return_params_list = return_params, payload = payload_params)

def createTempTransferCourse(EntityID = 1, setTempTransferCourseID = None, setCourseCredits = None, setCourseDescription = None, setCourseID = None, setCourseSection = None, setCreatedTime = None, setEarnedCreditOverride = None, setEndDate = None, setEntityCode = None, setEntityID = None, setExcludeFromReportCardsAndTranscripts = None, setExcludeFromStudentSectionLinking = None, setGradedCourse = None, setGradeReferenceID = None, setGradingPeriodSetID = None, setGradYear = None, setModifiedTime = None, setSchoolYear = None, setSchoolYearID = None, setSectionID = None, setSectionLengthID = None, setSectionLengthSubsetID = None, setStartDate = None, setStudentID = None, setTotalEarnedCredits = None, setTotalFailedCredits = None, setUseAddOnGPA = None, setUseEarnedCreditOverride = None, setUseEarnedCreditPercentOverride = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnTempTransferCourseID = False, returnCourseCredits = False, returnCourseDescription = False, returnCourseID = False, returnCourseSection = False, returnCreatedTime = False, returnEarnedCreditOverride = False, returnEndDate = False, returnEntityCode = False, returnEntityID = False, returnExcludeFromReportCardsAndTranscripts = False, returnExcludeFromStudentSectionLinking = False, returnGradedCourse = False, returnGradeReferenceID = False, returnGradingPeriodSetID = False, returnGradYear = False, returnModifiedTime = False, returnSchoolYear = False, returnSchoolYearID = False, returnSectionID = False, returnSectionLengthID = False, returnSectionLengthSubsetID = False, returnStartDate = False, returnStudentID = False, returnTotalEarnedCredits = False, returnTotalFailedCredits = False, returnUseAddOnGPA = False, returnUseEarnedCreditOverride = False, returnUseEarnedCreditPercentOverride = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/TempTransferCourse/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteTempTransferCourse(TempTransferCourseID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/TempTransferCourse/" + str(TempTransferCourseID), verb = "delete")


def getEveryTranscriptNote(searchConditions = [], EntityID = 1, returnTranscriptNoteID = False, returnCreatedTime = False, returnDateAdded = False, returnModifiedTime = False, returnNote = False, returnStudentID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every TranscriptNote in the district.

    This function returns a dataframe of every TranscriptNote in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/TranscriptNote/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/TranscriptNote/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getTranscriptNote(TranscriptNoteID, EntityID = 1, returnTranscriptNoteID = False, returnCreatedTime = False, returnDateAdded = False, returnModifiedTime = False, returnNote = False, returnStudentID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/TranscriptNote/" + str(TranscriptNoteID), verb = "get", return_params_list = return_params)

def modifyTranscriptNote(TranscriptNoteID, EntityID = 1, setTranscriptNoteID = None, setCreatedTime = None, setDateAdded = None, setModifiedTime = None, setNote = None, setStudentID = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnTranscriptNoteID = False, returnCreatedTime = False, returnDateAdded = False, returnModifiedTime = False, returnNote = False, returnStudentID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/TranscriptNote/" + str(TranscriptNoteID), verb = "post", return_params_list = return_params, payload = payload_params)

def createTranscriptNote(EntityID = 1, setTranscriptNoteID = None, setCreatedTime = None, setDateAdded = None, setModifiedTime = None, setNote = None, setStudentID = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnTranscriptNoteID = False, returnCreatedTime = False, returnDateAdded = False, returnModifiedTime = False, returnNote = False, returnStudentID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/TranscriptNote/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteTranscriptNote(TranscriptNoteID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/TranscriptNote/" + str(TranscriptNoteID), verb = "delete")


def getEveryTranscriptSent(searchConditions = [], EntityID = 1, returnTranscriptSentID = False, returnComment = False, returnCreatedTime = False, returnDateSent = False, returnInstitutionID = False, returnModifiedTime = False, returnStudentID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False, page = 1, pageSize = 100000, conditionGroupType = "And"):

    """Get every TranscriptSent in the district.

    This function returns a dataframe of every TranscriptSent in the district filtered by search conditions.

    """

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):
        return_params = list(return_params.assign(Value = True).Param)
    else:
        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    if len(searchConditions) > 0:

        searchConditions = params.query('Param == "searchConditions"').Value[0]

        payload_params = formatSearchConditionsPayload(searchConditions, conditionGroupType)

        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/TranscriptSent/" + str(page) + "/" + str(pageSize), verb = "post", return_params_list = return_params, payload = payload_params)

    else:
        return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/TranscriptSent/" + str(page) + "/" + str(pageSize), verb = "get", return_params_list = return_params)

def getTranscriptSent(TranscriptSentID, EntityID = 1, returnTranscriptSentID = False, returnComment = False, returnCreatedTime = False, returnDateSent = False, returnInstitutionID = False, returnModifiedTime = False, returnStudentID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/TranscriptSent/" + str(TranscriptSentID), verb = "get", return_params_list = return_params)

def modifyTranscriptSent(TranscriptSentID, EntityID = 1, setTranscriptSentID = None, setComment = None, setCreatedTime = None, setDateSent = None, setInstitutionID = None, setModifiedTime = None, setStudentID = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnTranscriptSentID = False, returnComment = False, returnCreatedTime = False, returnDateSent = False, returnInstitutionID = False, returnModifiedTime = False, returnStudentID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    payload_params["DataObject"].update(dict({params.Param[0]:params.Value[0]}))

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/TranscriptSent/" + str(TranscriptSentID), verb = "post", return_params_list = return_params, payload = payload_params)

def createTranscriptSent(EntityID = 1, setTranscriptSentID = None, setComment = None, setCreatedTime = None, setDateSent = None, setInstitutionID = None, setModifiedTime = None, setStudentID = None, setUserIDCreatedBy = None, setUserIDModifiedBy = None, returnTranscriptSentID = False, returnComment = False, returnCreatedTime = False, returnDateSent = False, returnInstitutionID = False, returnModifiedTime = False, returnStudentID = False, returnUserIDCreatedBy = False, returnUserIDModifiedBy = False):

    params = locals()

    params = pd.DataFrame(list(zip(params.keys(), params.values())), columns = ["Param", "Value"])

    return_params = params.query('Param.str.startswith("return")', engine = 'python')

    if not any(return_params.Value):

        return_params = list(return_params.assign(Value = True).Param)
    else:

        return_params = list(return_params.query('Value == True').Param)

    return_params = [re.sub("^return", '', param) for param in return_params]

    payload_params = params.query('Param.str.startswith("set") and not Value.isnull()', engine = 'python')

    payload_params = payload_params.assign(Param = payload_params["Param"].str.replace("^set", ""))

    payload_params = pd.DataFrame(list(payload_params.Value), index = list(payload_params.Param)).transpose()

    payload_params = json.loads(payload_params.to_json(orient = "records"))[0]

    payload_params = dict({"DataObject": payload_params})

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/TranscriptSent/", verb = "put", return_params_list = return_params, payload = payload_params)

def deleteTranscriptSent(TranscriptSentID, EntityID = 1):

    return make_request(endpoint = "/Generic/" + str(EntityID) + "/Grading/TranscriptSent/" + str(TranscriptSentID), verb = "delete")